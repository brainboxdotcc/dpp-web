<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1automod__rule" kind="class" language="C++" prot="public">
    <compoundname>dpp::automod_rule</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; automod_rule &gt;</basecompoundref>
    <includes local="no">automod.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1acd2e73187515f0c9a88b089dab76fd03" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1automod__action" kindref="compound">automod_action</ref> &gt;</type>
        <definition>std::vector&lt;automod_action&gt; dpp::automod_rule::actions</definition>
        <argsstring></argsstring>
        <name>actions</name>
        <briefdescription>
<para>the actions which will execute when the rule is triggered </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="219" column="13" bodyfile="include/dpp/automod.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1ad61bdd0d9d360d6fb6d32318f00ea9d6" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule::creator_id</definition>
        <argsstring></argsstring>
        <name>creator_id</name>
        <briefdescription>
<para>The user which first created this rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="202" column="17" bodyfile="include/dpp/automod.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1aae82de68bf8f59c6dd1a64aa29a874d5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::automod_rule::enabled</definition>
        <argsstring></argsstring>
        <name>enabled</name>
        <briefdescription>
<para>Whether the rule is enabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="223" column="5" bodyfile="include/dpp/automod.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1a48453f7108212b762a37280640079ae4" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a397e69e257d7cb9733f1449317e27d90" kindref="member">automod_event_type</ref></type>
        <definition>automod_event_type dpp::automod_rule::event_type</definition>
        <argsstring></argsstring>
        <name>event_type</name>
        <briefdescription>
<para>The rule event type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="206" column="19" bodyfile="include/dpp/automod.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1a53d470a64f437aeb038c5e122fccded5" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::automod_rule::exempt_channels</definition>
        <argsstring></argsstring>
        <name>exempt_channels</name>
        <briefdescription>
<para>the channel ids that should not be affected by the rule (Maximum of 50) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="231" column="12" bodyfile="include/dpp/automod.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1a5f1eedc34c9a8d99202508fd161b1777" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::automod_rule::exempt_roles</definition>
        <argsstring></argsstring>
        <name>exempt_roles</name>
        <briefdescription>
<para>the role ids that should not be affected by the rule (Maximum of 20) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="227" column="12" bodyfile="include/dpp/automod.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1afc3b9ebf454ad7cce5169d3b343da869" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>the guild which this rule belongs to </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="194" column="17" bodyfile="include/dpp/automod.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1afe49d0d9c4cefa8d807fd411834799c6" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>the id of this rule </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="190" column="17" bodyfile="include/dpp/automod.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1ad61d0d9890e78c5151031f5775a13472" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::automod_rule::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>the rule name </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="198" column="17" bodyfile="include/dpp/automod.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1acf9135df9cc73ccda7a6193fff22ec6c" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1automod__metadata" kindref="compound">automod_metadata</ref></type>
        <definition>automod_metadata dpp::automod_rule::trigger_metadata</definition>
        <argsstring></argsstring>
        <name>trigger_metadata</name>
        <briefdescription>
<para>The rule trigger metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="215" column="17" bodyfile="include/dpp/automod.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1a63b4e5f3a00d26c67914afdf051a5ab4" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a6c4401c19cd7e8b05ba2c066f1fdddb6" kindref="member">automod_trigger_type</ref></type>
        <definition>automod_trigger_type dpp::automod_rule::trigger_type</definition>
        <argsstring></argsstring>
        <name>trigger_type</name>
        <briefdescription>
<para>The rule trigger type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="210" column="21" bodyfile="include/dpp/automod.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1automod__rule_1a10845bc9238341fd681979b158d8d875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::automod_rule::automod_rule</definition>
        <argsstring>()</argsstring>
        <name>automod_rule</name>
        <briefdescription>
<para>Construct a new automod rule object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1automod__rule_1a8dac36f14022bfe0b7652f31d82fe64a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::automod_rule::~automod_rule</definition>
        <argsstring>()</argsstring>
        <name>~automod_rule</name>
        <briefdescription>
<para>Destroy the automod rule object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="241" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1automod__rule_1a49a2499e5da1e1395195653e377a325f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string dpp::automod_rule::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <reimplements refid="structdpp_1_1json__interface_1a287c22f692ee3d25b6f9b320ff35baa1">build_json</reimplements>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build a json string for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string JSON string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="256" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1automod__rule_1a94b8b025fb22aed8270001650fbdf5f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> &amp;</type>
        <definition>automod_rule &amp; dpp::automod_rule::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill object properties from JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON to fill from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref>&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="249" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="73" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="64" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represnets an automod rule. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::automod_rule</label>
        <link refid="classdpp_1_1automod__rule"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; automod_rule &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; automod_rule &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>automod_event_type</label>
      </node>
      <node id="9">
        <label>automod_trigger_type</label>
      </node>
      <node id="13">
        <label>bool</label>
      </node>
      <node id="10">
        <label>dpp::automod_metadata</label>
        <link refid="structdpp_1_1automod__metadata"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>keywords</edgelabel>
          <edgelabel>presets</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::automod_rule</label>
        <link refid="classdpp_1_1automod__rule"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>creator_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>event_type</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>trigger_type</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>trigger_metadata</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>actions</edgelabel>
          <edgelabel>exempt_channels</edgelabel>
          <edgelabel>exempt_roles</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>enabled</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>dpp::json_interface&lt; automod_metadata &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; automod_metadata &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; automod_rule &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; automod_rule &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="6">
        <label>std::string</label>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>vector&lt;</label>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/automod.h" line="185" column="1" bodyfile="include/dpp/automod.h" bodystart="185" bodyend="257"/>
    <listofallmembers>
      <member refid="classdpp_1_1automod__rule_1acd2e73187515f0c9a88b089dab76fd03" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>actions</name></member>
      <member refid="classdpp_1_1automod__rule_1a10845bc9238341fd681979b158d8d875" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>automod_rule</name></member>
      <member refid="classdpp_1_1automod__rule_1a49a2499e5da1e1395195653e377a325f" prot="public" virt="virtual"><scope>dpp::automod_rule</scope><name>build_json</name></member>
      <member refid="classdpp_1_1automod__rule_1ad61bdd0d9d360d6fb6d32318f00ea9d6" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>creator_id</name></member>
      <member refid="classdpp_1_1automod__rule_1aae82de68bf8f59c6dd1a64aa29a874d5" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>enabled</name></member>
      <member refid="classdpp_1_1automod__rule_1a48453f7108212b762a37280640079ae4" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>event_type</name></member>
      <member refid="classdpp_1_1automod__rule_1a53d470a64f437aeb038c5e122fccded5" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>exempt_channels</name></member>
      <member refid="classdpp_1_1automod__rule_1a5f1eedc34c9a8d99202508fd161b1777" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>exempt_roles</name></member>
      <member refid="classdpp_1_1automod__rule_1a94b8b025fb22aed8270001650fbdf5f1" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1automod__rule_1afc3b9ebf454ad7cce5169d3b343da869" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1automod__rule_1afe49d0d9c4cefa8d807fd411834799c6" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>id</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>managed</name></member>
      <member refid="classdpp_1_1automod__rule_1ad61d0d9890e78c5151031f5775a13472" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>name</name></member>
      <member refid="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>operator==</name></member>
      <member refid="classdpp_1_1automod__rule_1acf9135df9cc73ccda7a6193fff22ec6c" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>trigger_metadata</name></member>
      <member refid="classdpp_1_1automod__rule_1a63b4e5f3a00d26c67914afdf051a5ab4" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>trigger_type</name></member>
      <member refid="classdpp_1_1automod__rule_1a8dac36f14022bfe0b7652f31d82fe64a" prot="public" virt="virtual"><scope>dpp::automod_rule</scope><name>~automod_rule</name></member>
      <member refid="structdpp_1_1json__interface_1a8fea07be649b8bb166c28c5a7daccf53" prot="protected" virt="non-virtual"><scope>dpp::automod_rule</scope><name>~json_interface</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::automod_rule</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
