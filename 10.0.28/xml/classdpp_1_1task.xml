<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1task" kind="class" language="C++" prot="public">
    <compoundname>dpp::task</compoundname>
    <basecompoundref refid="classdpp_1_1detail_1_1task_1_1task__base" prot="private" virt="non-virtual">dpp::detail::task::task_base&lt; R &gt;</basecompoundref>
    <includes local="no">coro/task.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1task_1ad0f512b321bc4024c16624781a67d578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class detail::task::task_base&lt; R &gt;</definition>
        <argsstring></argsstring>
        <name>detail::task::task_base&lt; R &gt;</name>
        <param>
          <type><ref refid="classdpp_1_1detail_1_1task_1_1task__base" kindref="compound">detail::task::task_base</ref>&lt; R &gt;</type>
        </param>
        <briefdescription>
<para>Internal use only base class containing common logic between task&lt;R&gt; and task&lt;void&gt;. It also serves to prevent await_suspend and await_resume from being used directly. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>For internal use only, do not use. </para>
</simplesect>
<simplesect kind="see"><para>operator co_await() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="265" column="10" bodyfile="include/dpp/coro/task.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1task_1aafdfb5c1f013eac8d7395e860e015b8a" prot="private" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>R &amp;</type>
        <definition>R &amp; dpp::task&lt; R &gt;::await_resume_impl</definition>
        <argsstring>() &amp;</argsstring>
        <name>await_resume_impl</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is resumed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Throws</parametername>
</parameternamelist>
<parameterdescription>
<para>any exception thrown or uncaught by the coroutine </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the coroutine. This is returned to the awaiter as the result of co_await </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="301" column="3" bodyfile="include/dpp/coro/task.h" bodystart="301" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1aae8e3758fa7338ba689835e0f2f986bf" prot="private" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>const R &amp;</type>
        <definition>const R &amp; dpp::task&lt; R &gt;::await_resume_impl</definition>
        <argsstring>() const &amp;</argsstring>
        <name>await_resume_impl</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is resumed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Throws</parametername>
</parameternamelist>
<parameterdescription>
<para>any exception thrown or uncaught by the coroutine </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the coroutine. This is returned to the awaiter as the result of co_await </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="315" column="9" bodyfile="include/dpp/coro/task.h" bodystart="315" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1ad00222aadcbce97374b1254740d80305" prot="private" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>R &amp;&amp;</type>
        <definition>R &amp;&amp; dpp::task&lt; R &gt;::await_resume_impl</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>await_resume_impl</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is resumed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Throws</parametername>
</parameternamelist>
<parameterdescription>
<para>any exception thrown or uncaught by the coroutine </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The result of the coroutine. This is returned to the awaiter as the result of co_await </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="329" column="3" bodyfile="include/dpp/coro/task.h" bodystart="329" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1task_1_1task__base_1ac237a01125844a384c5a34e6d4928b08" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1task" kindref="compound">dpp::task</ref>&lt; R &gt; &amp;&amp;</type>
        <definition>dpp::task&lt; R &gt; &amp;&amp; dpp::detail::task::task_base&lt; R &gt;::cancel</definition>
        <argsstring>() &amp;&amp;noexcept</argsstring>
        <name>cancel</name>
        <briefdescription>
<para>Cancel the task, it will stop the next time it uses co_await. On co_await-ing this task, throws <ref refid="classdpp_1_1task__cancelled__exception" kindref="compound">dpp::task_cancelled_exception</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>*this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="237" column="11" bodyfile="include/dpp/coro/task.h" bodystart="237" bodyend="240"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1task_1abaeb36ad1e3c3d0e4ce53d46a47d61b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::task&lt; R &gt;::task</definition>
        <argsstring>()=default</argsstring>
        <name>task</name>
        <briefdescription>
<para>Default constructor, creates a task not bound to a coroutine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a04a2870d55bb2fb942ae1e9e072efe9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::task&lt; R &gt;::task</definition>
        <argsstring>(const task &amp;)=delete</argsstring>
        <name>task</name>
        <param>
          <type>const <ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1aa074990f5d5c24b11787d0fc7d385202" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::task&lt; R &gt;::task</definition>
        <argsstring>(task &amp;&amp;other) noexcept</argsstring>
        <name>task</name>
        <param>
          <type><ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor, grabs another task&apos;s coroutine handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to move the handle from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a23ee3394a7c7eee5d8c2fee6f829cb9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::task&lt; R &gt;::~task</definition>
        <argsstring>()</argsstring>
        <name>~task</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Destroys the handle. <simplesect kind="warning"><para>The coroutine must be finished before this is called, otherwise it runs the risk of being resumed after it is destroyed, resuming in use-after-free undefined behavior. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a1f532c5ceff4fadc0fa9174e80ff183c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;</type>
        <definition>task &amp; dpp::task&lt; R &gt;::operator=</definition>
        <argsstring>(const task &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy assignment is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="367" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1af56fcd28c94944982bd585dd44bef472" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;</type>
        <definition>task &amp; dpp::task&lt; R &gt;::operator=</definition>
        <argsstring>(task &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment, grabs another task&apos;s coroutine handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to move the handle from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="374" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1ac030b9e766ceb3b427e88e926b92b81b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::task&lt; R &gt;::done</definition>
        <argsstring>() const noexcept</argsstring>
        <name>done</name>
        <briefdescription>
<para>Function to check if the task has finished its execution entirely. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Whether the task is finished. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="381" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a2787e1f8313004716ac12a78be8ed50d" prot="public" static="no" const="no" explicit="no" inline="no" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1task" kindref="compound">dpp::task</ref>&lt; R &gt; &amp;</type>
        <definition>dpp::task&lt; R &gt; &amp; dpp::task&lt; R &gt;::cancel</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>cancel</name>
        <briefdescription>
<para>Cancel the task, it will stop the next time it uses co_await. On co_await-ing this task, throws <ref refid="classdpp_1_1task__cancelled__exception" kindref="compound">dpp::task_cancelled_exception</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="386" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a3b11a1b3ed125c88ccfa24722fb2f3eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::task&lt; R &gt;::await_ready</definition>
        <argsstring>() const</argsstring>
        <name>await_ready</name>
        <briefdescription>
<para>Check whether or not a call to co_await will suspend the caller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called by the standard library as a first step when using co_await. If it returns true then the caller is not suspended. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the task is empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool Whether not to suspend the caller or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="395" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a007da70a7593ce74603ae96af1c381c7" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto &amp; dpp::task&lt; R &gt;::operator co_await</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>operator co_await</name>
        <briefdescription>
<para>Suspend the current coroutine until the task completes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>On</parametername>
</parameternamelist>
<parameterdescription>
<para>resumption, any exception thrown by the coroutine is propagated to the caller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On resumption, this expression evaluates to the result object of type R, as a reference. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="410" column="7" bodyfile="include/dpp/coro/task.h" bodystart="410" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1aa410dbfe84a7281dafbe563b1d224123" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>const auto &amp;</type>
        <definition>const auto &amp; dpp::task&lt; R &gt;::operator co_await</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>operator co_await</name>
        <briefdescription>
<para>Suspend the current coroutine until the task completes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>On</parametername>
</parameternamelist>
<parameterdescription>
<para>resumption, any exception thrown by the coroutine is propagated to the caller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On resumption, this expression evaluates to the result object of type R, as a const reference. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="420" column="13" bodyfile="include/dpp/coro/task.h" bodystart="420" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a22cf3d2c69226edfbb1585072ec25086" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type>auto &amp;&amp;</type>
        <definition>auto &amp;&amp; dpp::task&lt; R &gt;::operator co_await</definition>
        <argsstring>() &amp;&amp;noexcept</argsstring>
        <name>operator co_await</name>
        <briefdescription>
<para>Suspend the current coroutine until the task completes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>On</parametername>
</parameternamelist>
<parameterdescription>
<para>resumption, any exception thrown by the coroutine is propagated to the caller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On resumption, this expression evaluates to the result object of type R, as an rvalue reference. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="430" column="7" bodyfile="include/dpp/coro/task.h" bodystart="430" bodyend="432"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A coroutine task. It starts immediately on construction and can be co_await-ed, making it perfect for parallel coroutines returning a value. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>- This feature is EXPERIMENTAL. The API may change at any time and there may be bugs. Please report any to <ulink url="https://github.com/brainboxdotcc/DPP/issues">GitHub Issues</ulink> or to our <ulink url="https://discord.gg/dpp">Discord Server</ulink>. </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>Return type of the task. Cannot be a reference but can be void. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::detail::task::task_base&lt; R &gt;</label>
        <link refid="classdpp_1_1detail_1_1task_1_1task__base"/>
      </node>
      <node id="1">
        <label>dpp::task&lt; R &gt;</label>
        <link refid="classdpp_1_1task"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>handle_t&lt;</label>
      </node>
      <node id="2">
        <label>dpp::detail::task::task_base&lt; R &gt;</label>
        <link refid="classdpp_1_1detail_1_1task_1_1task__base"/>
        <childnode refid="3" relation="usage">
          <edgelabel>handle</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::task&lt; R &gt;</label>
        <link refid="classdpp_1_1task"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro/task.h" line="275" column="1" bodyfile="include/dpp/coro/task.h" bodystart="286" bodyend="433"/>
    <listofallmembers>
      <member refid="classdpp_1_1task_1a3b11a1b3ed125c88ccfa24722fb2f3eb" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>await_ready</name></member>
      <member refid="classdpp_1_1task_1aafdfb5c1f013eac8d7395e860e015b8a" prot="private" virt="non-virtual"><scope>dpp::task</scope><name>await_resume_impl</name></member>
      <member refid="classdpp_1_1task_1aae8e3758fa7338ba689835e0f2f986bf" prot="private" virt="non-virtual"><scope>dpp::task</scope><name>await_resume_impl</name></member>
      <member refid="classdpp_1_1task_1ad00222aadcbce97374b1254740d80305" prot="private" virt="non-virtual"><scope>dpp::task</scope><name>await_resume_impl</name></member>
      <member refid="classdpp_1_1task_1a2787e1f8313004716ac12a78be8ed50d" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>cancel</name></member>
      <member refid="classdpp_1_1detail_1_1task_1_1task__base_1ac237a01125844a384c5a34e6d4928b08" prot="private" virt="non-virtual" ambiguityscope="dpp::detail::task::task_base::"><scope>dpp::task</scope><name>cancel</name></member>
      <member refid="classdpp_1_1task_1ad0f512b321bc4024c16624781a67d578" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>detail::task::task_base&lt; R &gt;</name></member>
      <member refid="classdpp_1_1task_1ac030b9e766ceb3b427e88e926b92b81b" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>done</name></member>
      <member refid="classdpp_1_1task_1a007da70a7593ce74603ae96af1c381c7" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>operator co_await</name></member>
      <member refid="classdpp_1_1task_1aa410dbfe84a7281dafbe563b1d224123" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>operator co_await</name></member>
      <member refid="classdpp_1_1task_1a22cf3d2c69226edfbb1585072ec25086" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>operator co_await</name></member>
      <member refid="classdpp_1_1task_1a1f532c5ceff4fadc0fa9174e80ff183c" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>operator=</name></member>
      <member refid="classdpp_1_1task_1af56fcd28c94944982bd585dd44bef472" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>operator=</name></member>
      <member refid="classdpp_1_1detail_1_1task_1_1task__base_1a9c826dcdc70f0bc1a9c59312b2382fbd" prot="private" virt="non-virtual" ambiguityscope="dpp::detail::task::task_base::"><scope>dpp::task</scope><name>operator=</name></member>
      <member refid="classdpp_1_1detail_1_1task_1_1task__base_1a024c00707ba4017f55d0222b676441f3" prot="private" virt="non-virtual" ambiguityscope="dpp::detail::task::task_base::"><scope>dpp::task</scope><name>operator=</name></member>
      <member refid="classdpp_1_1task_1abaeb36ad1e3c3d0e4ce53d46a47d61b5" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>task</name></member>
      <member refid="classdpp_1_1task_1a04a2870d55bb2fb942ae1e9e072efe9f" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>task</name></member>
      <member refid="classdpp_1_1task_1aa074990f5d5c24b11787d0fc7d385202" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>task</name></member>
      <member refid="classdpp_1_1task_1a23ee3394a7c7eee5d8c2fee6f829cb9e" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>~task</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
