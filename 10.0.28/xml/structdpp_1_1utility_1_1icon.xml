<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1utility_1_1icon" kind="struct" language="C++" prot="public">
    <compoundname>dpp::utility::icon</compoundname>
    <includes local="no">utility.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1utility_1_1icon_1af065440df4b576afd69d414adeece20e" prot="public" static="no" mutable="no">
        <type>std::variant&lt; std::monostate, <ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">iconhash</ref>, <ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &gt;</type>
        <definition>std::variant&lt;std::monostate, iconhash, image_data&gt; dpp::utility::icon::hash_or_data</definition>
        <argsstring></argsstring>
        <name>hash_or_data</name>
        <briefdescription>
<para>Iconhash received or image data for upload. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="425" column="14" bodyfile="include/dpp/utility.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1a2eea9b17652db96d3a9b89c13d444297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1icon" kindref="compound">icon</ref> &amp;</type>
        <definition>icon &amp; dpp::utility::icon::operator=</definition>
        <argsstring>(const iconhash &amp;hash)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">iconhash</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Assign to iconhash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Iconhash </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="432" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1aeb57e7d3140676dadc97be4b4e70306c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1icon" kindref="compound">icon</ref> &amp;</type>
        <definition>icon &amp; dpp::utility::icon::operator=</definition>
        <argsstring>(iconhash &amp;&amp;hash) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">iconhash</ref> &amp;&amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Assign to iconhash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>Iconhash </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="439" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1a16a6f430f387f2a87bfbcd4efca9144d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1icon" kindref="compound">icon</ref> &amp;</type>
        <definition>icon &amp; dpp::utility::icon::operator=</definition>
        <argsstring>(const image_data &amp;img)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <briefdescription>
<para>Assign to image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>Image </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="446" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1a1bf83aa997287ed21222658a107946e0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1icon" kindref="compound">icon</ref> &amp;</type>
        <definition>icon &amp; dpp::utility::icon::operator=</definition>
        <argsstring>(image_data &amp;&amp;img) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;&amp;</type>
          <declname>img</declname>
        </param>
        <briefdescription>
<para>Assign to image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>Image </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="453" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1a9fc43f525a9ddd8757bb95765374991f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::utility::icon::is_iconhash</definition>
        <argsstring>() const</argsstring>
        <name>is_iconhash</name>
        <briefdescription>
<para>Check whether this icon is stored as an iconhash. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">iconhash</ref> </para>
</simplesect>
<simplesect kind="return"><para>bool Whether this icon is stored as an iconhash </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="461" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1a2e6f3ad764dbb1025e5b6a9eda867e77" prot="public" static="no" const="no" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">iconhash</ref> &amp;</type>
        <definition>iconhash &amp; dpp::utility::icon::as_iconhash</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_iconhash</name>
        <briefdescription>
<para>Get as icon hash. </para>
        </briefdescription>
        <detaileddescription>
<para>@warn The behavior is undefined if <computeroutput><ref refid="structdpp_1_1utility_1_1icon_1a9fc43f525a9ddd8757bb95765374991f" kindref="member">is_iconhash()</ref> == false</computeroutput> <simplesect kind="return"><para>iconhash&amp; This iconhash </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="469" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1a132def682654cb1c9824953659f1232e" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">iconhash</ref> &amp;</type>
        <definition>const iconhash &amp; dpp::utility::icon::as_iconhash</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_iconhash</name>
        <briefdescription>
<para>Get as icon hash. </para>
        </briefdescription>
        <detaileddescription>
<para>@warn The behavior is undefined if <computeroutput><ref refid="structdpp_1_1utility_1_1icon_1a9fc43f525a9ddd8757bb95765374991f" kindref="member">is_iconhash()</ref> == false</computeroutput> <simplesect kind="return"><para>iconhash&amp; This iconhash </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="477" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1af13048758973f69190eeeb131e810ddc" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">iconhash</ref> &amp;&amp;</type>
        <definition>iconhash &amp;&amp; dpp::utility::icon::as_iconhash</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_iconhash</name>
        <briefdescription>
<para>Get as icon hash. </para>
        </briefdescription>
        <detaileddescription>
<para>@warn The behavior is undefined if <computeroutput><ref refid="structdpp_1_1utility_1_1icon_1a9fc43f525a9ddd8757bb95765374991f" kindref="member">is_iconhash()</ref> == false</computeroutput> <simplesect kind="return"><para>iconhash&amp; This iconhash </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="485" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1a8a5cd9934d849ac73ed858da24ca02bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::utility::icon::is_image_data</definition>
        <argsstring>() const</argsstring>
        <name>is_image_data</name>
        <briefdescription>
<para>Check whether this icon is stored as an image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> </para>
</simplesect>
<simplesect kind="return"><para>bool Whether this icon is stored as an image </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="493" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1a6891995d4f4e3f539ef7bed313858ff0" prot="public" static="no" const="no" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;</type>
        <definition>image_data &amp; dpp::utility::icon::as_image_data</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_image_data</name>
        <briefdescription>
<para>Get as image data. </para>
        </briefdescription>
        <detaileddescription>
<para>@warn The behavior is undefined if <computeroutput><ref refid="structdpp_1_1utility_1_1icon_1a8a5cd9934d849ac73ed858da24ca02bb" kindref="member">is_image_data()</ref> == false</computeroutput> <simplesect kind="return"><para><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref>&amp; This image </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="501" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1aab622725a7e9d86e51f93e72182bd320" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;</type>
        <definition>const image_data &amp; dpp::utility::icon::as_image_data</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_image_data</name>
        <briefdescription>
<para>Get as image. </para>
        </briefdescription>
        <detaileddescription>
<para>@warn The behavior is undefined if <computeroutput><ref refid="structdpp_1_1utility_1_1icon_1a8a5cd9934d849ac73ed858da24ca02bb" kindref="member">is_image_data()</ref> == false</computeroutput> <simplesect kind="return"><para><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref>&amp; This image </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="509" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1icon_1afe30c89bbe5ba9345b4ad8f6b6c19475" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;&amp;</type>
        <definition>image_data &amp;&amp; dpp::utility::icon::as_image_data</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_image_data</name>
        <briefdescription>
<para>Get as image. </para>
        </briefdescription>
        <detaileddescription>
<para>@warn The behavior is undefined if <computeroutput><ref refid="structdpp_1_1utility_1_1icon_1a8a5cd9934d849ac73ed858da24ca02bb" kindref="member">is_image_data()</ref> == false</computeroutput> <simplesect kind="return"><para><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref>&amp; This image </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="517" column="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Wrapper class around a variant for either iconhash or image, for API objects that have one or the other (generally iconhash when receiving, image when uploading an image) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::utility::icon</label>
        <link refid="structdpp_1_1utility_1_1icon"/>
        <childnode refid="2" relation="usage">
          <edgelabel>hash_or_data</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>variant&lt;</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/utility.h" line="421" column="1" bodyfile="include/dpp/utility.h" bodystart="421" bodyend="518"/>
    <listofallmembers>
      <member refid="structdpp_1_1utility_1_1icon_1a2e6f3ad764dbb1025e5b6a9eda867e77" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>as_iconhash</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1a132def682654cb1c9824953659f1232e" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>as_iconhash</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1af13048758973f69190eeeb131e810ddc" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>as_iconhash</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1a6891995d4f4e3f539ef7bed313858ff0" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>as_image_data</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1aab622725a7e9d86e51f93e72182bd320" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>as_image_data</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1afe30c89bbe5ba9345b4ad8f6b6c19475" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>as_image_data</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1af065440df4b576afd69d414adeece20e" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>hash_or_data</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1a9fc43f525a9ddd8757bb95765374991f" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>is_iconhash</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1a8a5cd9934d849ac73ed858da24ca02bb" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>is_image_data</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1a2eea9b17652db96d3a9b89c13d444297" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>operator=</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1aeb57e7d3140676dadc97be4b4e70306c" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>operator=</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1a16a6f430f387f2a87bfbcd4efca9144d" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>operator=</name></member>
      <member refid="structdpp_1_1utility_1_1icon_1a1bf83aa997287ed21222658a107946e0" prot="public" virt="non-virtual"><scope>dpp::utility::icon</scope><name>operator=</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
