<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="checking-member-permissions" kind="page">
    <compoundname>checking-member-permissions</compoundname>
    <title>Checking Permissions</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Of course most people do just iterate over the roles of a member to check for a permission. But there&apos;s a helper method for that: <ref refid="classdpp_1_1guild_1abd799f5cbe1907c46b86937bda124bee" kindref="member">dpp::guild::base_permissions</ref> gets a member&apos;s permission taking into account the server owner and role permissions.</para>
<para>For total member permissions including channel overwrites use either the <ref refid="classdpp_1_1channel_1adfb656e912fba27c809ab8754e2855b5" kindref="member">dpp::channel::get_user_permissions</ref> or <ref refid="classdpp_1_1guild_1ad33639446c930d418139a976c9c1a071" kindref="member">dpp::guild::permission_overwrites</ref> method. Both do the same under the hood.</para>
<para>They all return a <ref refid="classdpp_1_1permission" kindref="compound">dpp::permission</ref> class, which is a wrapper around a permission bitmask containing bits of the <ref refid="namespacedpp_1a64f16cd622b3a09ae96803ba07fa75b7" kindref="member">dpp::permissions</ref> enum.</para>
<para>Demonstration:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classdpp_1_1channel" kindref="compound">dpp::channel</ref>*<sp/>c<sp/>=<sp/><ref refid="namespacedpp_1a165978ef81875d2798e78c6eaf4eeafd" kindref="member">dpp::find_channel</ref>(some_channel_id);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&amp;&amp;<sp/>c-&gt;<ref refid="classdpp_1_1channel_1adfb656e912fba27c809ab8754e2855b5" kindref="member">get_user_permissions</ref>(member).<ref refid="classdpp_1_1permission_1adc6228f57c04d9ad60df458c4a7e76bb" kindref="member">can</ref>(<ref refid="namespacedpp_1a64f16cd622b3a09ae96803ba07fa75b7ad410586df8dba6f62b7770f1d08d3b79" kindref="member">dpp::p_send_messages</ref>))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<sect2 id="checking-member-permissions_1autotoc_md98">
<title>Permissions in Interaction Events</title>
<sect3 id="checking-member-permissions_1autotoc_md99">
<title>Default Command Permissions</title>
<para>Discord&apos;s intended way to manage permissions for commands is through default member permissions. You set them using <ref refid="classdpp_1_1slashcommand_1a51084be92893e21d13ffe320a2b77e8a" kindref="member">dpp::slashcommand::set_default_permissions</ref> when creating or updating a command to set the default permissions a user must have to use it. However, server administrators can then overwrite these permissions by their own restrictions.</para>
<para>The corresponding code to create a command with default permissions would look something like this:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref><sp/>command(</highlight><highlight class="stringliteral">&quot;ban&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Ban<sp/>a<sp/>member&quot;</highlight><highlight class="normal">,<sp/>bot.me.id);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">command.set_default_permissions(<ref refid="namespacedpp_1a64f16cd622b3a09ae96803ba07fa75b7a6c9849fc7380edaf4ab8f169c2f4cc82" kindref="member">dpp::p_ban_members</ref>);<sp/></highlight><highlight class="comment">//<sp/>set<sp/>permissions<sp/>that<sp/>are<sp/>required<sp/>by<sp/>default<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">command.add_option(<ref refid="structdpp_1_1command__option" kindref="compound">dpp::command_option</ref>(<ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58a5a2ea837ca5ec64e6385acf392cef1e2" kindref="member">dpp::co_user</ref>,<sp/></highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>user<sp/>to<sp/>ban&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">command.add_option(<ref refid="structdpp_1_1command__option" kindref="compound">dpp::command_option</ref>(<ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58acd751201efe224973dfe952d8658a384" kindref="member">dpp::co_string</ref>,<sp/></highlight><highlight class="stringliteral">&quot;reason&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>reason<sp/>for<sp/>banning&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">bot.global_command_create(command);</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="checking-member-permissions_1autotoc_md100">
<title>Checking Permissions on Your Own</title>
<para>If you want to check permissions on your own, the easiest way to check if a member has certain permissions in interaction events is by using the <ref refid="classdpp_1_1interaction_1a89ef384ef9f2c2f7bf99c2b5ba0844c3" kindref="member">dpp::interaction::get_resolved_permission</ref> function. The resolved list contains associated structures for the command and does not use the cache or require any extra API calls. Note that the permissions in the resolved set are pre-calculated by Discord and taking into account channel overwrites, roles and admin privileges. So no need to loop through roles or stuff like that.</para>
<para>Let&apos;s imagine the following scenario:</para>
<para>You have a ban command and want to make sure the issuer has the ban permission.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">bot.on_interaction_create([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1interaction__create__t" kindref="compound">dpp::interaction_create_t</ref>&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1permission" kindref="compound">dpp::permission</ref><sp/>perms<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.command.get_resolved_permission(event.<ref refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" kindref="member">command</ref>.<ref refid="classdpp_1_1interaction_1af42be274f0c532e1b227d6725f25ecd3" kindref="member">usr</ref>.<ref refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" kindref="member">id</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!perms.<ref refid="classdpp_1_1permission_1adc6228f57c04d9ad60df458c4a7e76bb" kindref="member">can</ref>(<ref refid="namespacedpp_1a64f16cd622b3a09ae96803ba07fa75b7a6c9849fc7380edaf4ab8f169c2f4cc82" kindref="member">dpp::p_ban_members</ref>))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event.reply(</highlight><highlight class="stringliteral">&quot;You<sp/>don&apos;t<sp/>have<sp/>the<sp/>required<sp/>permissions<sp/>to<sp/>ban<sp/>someone!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>When using default permissions you don&apos;t necessarily need to check the issuing user for any permissions in the interaction event as Discord handles all that for you. But if you&apos;d sleep better...</para>
</simplesect>
</para>
</sect3>
<sect3 id="checking-member-permissions_1autotoc_md101">
<title>From Parameters</title>
<para>The resolved set also contains the permissions of members from command parameters.</para>
<para>For example, let&apos;s say you want to prohibit people from banning server admins with your ban command.</para>
<para>Get the user ID from the parameters and pass it to the <computeroutput>get_resolved_permission</computeroutput> method:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">bot.on_interaction_create([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1interaction__create__t" kindref="compound">dpp::interaction_create_t</ref>&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref><sp/>user_id<sp/>=<sp/>std::get&lt;dpp::snowflake&gt;(event.<ref refid="structdpp_1_1interaction__create__t_1ae89b601e82f534d5d87135b82a6f0491" kindref="member">get_parameter</ref>(</highlight><highlight class="stringliteral">&quot;user&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1permission" kindref="compound">dpp::permission</ref><sp/>perms<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.command.get_resolved_permission(user_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(perms.<ref refid="classdpp_1_1permission_1a02df5786b6ca1d11bbd24a175e3e28c4" kindref="member">has</ref>(<ref refid="namespacedpp_1a64f16cd622b3a09ae96803ba07fa75b7a43f62c967b9b16b49c315a0b23f86039" kindref="member">dpp::p_administrator</ref>))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.reply(</highlight><highlight class="stringliteral">&quot;You<sp/>can&apos;t<sp/>ban<sp/>Admins!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="checking-member-permissions_1autotoc_md102">
<title>The Bot&apos;s Permissions</title>
<para>You also might want to check if the bot itself has the ban permission before processing the command further. You can access the bot&apos;s permissions in the <ref refid="classdpp_1_1interaction_1a1a91af243ab4d765ecadc025958a8a85" kindref="member">dpp::interaction::app_permissions</ref> field.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">bot.on_interaction_create([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1interaction__create__t" kindref="compound">dpp::interaction_create_t</ref>&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!event.<ref refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" kindref="member">command</ref>.<ref refid="classdpp_1_1interaction_1a1a91af243ab4d765ecadc025958a8a85" kindref="member">app_permissions</ref>.<ref refid="classdpp_1_1permission_1adc6228f57c04d9ad60df458c4a7e76bb" kindref="member">can</ref>(<ref refid="namespacedpp_1a64f16cd622b3a09ae96803ba07fa75b7a6c9849fc7380edaf4ab8f169c2f4cc82" kindref="member">dpp::p_ban_members</ref>))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event.reply(</highlight><highlight class="stringliteral">&quot;The<sp/>bot<sp/>doesn&apos;t<sp/>have<sp/>the<sp/>required<sp/>permission<sp/>to<sp/>ban<sp/>anyone!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting> </para>
</sect3>
</sect2>
    </detaileddescription>
    <location file="docpages/example_programs/misc/checking-member-permissions.md"/>
  </compounddef>
</doxygen>
