<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1voice__receive__t" kind="struct" language="C++" prot="public">
    <compoundname>dpp::voice_receive_t</compoundname>
    <basecompoundref refid="structdpp_1_1event__dispatch__t" prot="public" virt="non-virtual">dpp::event_dispatch_t</basecompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdpp_1_1voice__receive__t_1abc4e53e79731117ca95bca977baef820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class discord_voice_client</definition>
        <argsstring></argsstring>
        <name>discord_voice_client</name>
        <param>
          <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1599" column="14" bodyfile="include/dpp/dispatcher.h" bodystart="1599" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1voice__receive__t_1aa843a6b21c4dc8742960abec208e7fa5" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> *</type>
        <definition>class discord_voice_client* dpp::voice_receive_t::voice_client</definition>
        <argsstring></argsstring>
        <name>voice_client</name>
        <briefdescription>
<para>Voice client. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1623" column="28" bodyfile="include/dpp/dispatcher.h" bodystart="1623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1voice__receive__t_1abe0062119471690caacc95d849274413" prot="public" static="no" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* dpp::voice_receive_t::audio</definition>
        <argsstring></argsstring>
        <name>audio</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Audio data, encoded as 48kHz stereo PCM or Opus,. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000014"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Please switch to using audio_data. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1628" column="9" bodyfile="include/dpp/dispatcher.h" bodystart="1628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1voice__receive__t_1abdc253b2799cb504caa9bd030838f668" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t dpp::voice_receive_t::audio_size</definition>
        <argsstring></argsstring>
        <name>audio_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Size of audio buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000015"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Please switch to using audio_data. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1633" column="8" bodyfile="include/dpp/dispatcher.h" bodystart="1633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1voice__receive__t_1a6d6f1d1be9a65fa8b428fab5230dce6d" prot="public" static="no" mutable="no">
        <type>std::basic_string&lt; uint8_t &gt;</type>
        <definition>std::basic_string&lt;uint8_t&gt; dpp::voice_receive_t::audio_data</definition>
        <argsstring></argsstring>
        <name>audio_data</name>
        <briefdescription>
<para>Audio data, encoded as 48kHz stereo PCM or Opus,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1637" column="19" bodyfile="include/dpp/dispatcher.h" bodystart="1637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1voice__receive__t_1ae70014f7c00864c278df265da0967026" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::voice_receive_t::user_id</definition>
        <argsstring></argsstring>
        <name>user_id</name>
        <briefdescription>
<para>User ID of speaker (zero if unknown) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1641" column="11" bodyfile="include/dpp/dispatcher.h" bodystart="1641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a22df2fa7e547eaefbd65e501d8bf67b7" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <briefdescription>
<para>Raw event data. If you are using json on your websocket, this will contain json, and if you are using ETF as your websocket protocol, it will contain raw ETF data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="70" column="19" bodyfile="include/dpp/dispatcher.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::event_dispatch_t::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
<para>Shard the event came from. Note that for some events, notably voice events, this may be nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="76" column="22" bodyfile="include/dpp/dispatcher.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1voice__receive__t_1a17d45e43c72fbe78358be74146cbaee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voice_receive_t::voice_receive_t</definition>
        <argsstring>(class discord_client *client, const std::string &amp;raw)</argsstring>
        <name>voice_receive_t</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on. WILL ALWAYS be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event text as UDP packet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1607" column="1" bodyfile="src/dpp/dispatcher.cpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1voice__receive__t_1aef86eafab8786cefeed105fae4a89d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voice_receive_t::voice_receive_t</definition>
        <argsstring>(class discord_client *client, const std::string &amp;raw, class discord_voice_client *vc, snowflake _user_id, uint8_t *pcm, size_t length)</argsstring>
        <name>voice_receive_t</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <param>
          <type>class <ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> *</type>
          <declname>vc</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>_user_id</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Construct a new voice receive t object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on. WILL ALWAYS be NULL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event text as UDP packet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vc</parametername>
</parameternamelist>
<parameterdescription>
<para>owning voice client pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>user id who is speaking, 0 for a mix of all user audio </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>user audio to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of user audio in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1619" column="1" bodyfile="src/dpp/dispatcher.cpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1a5afbcd36109734ad0fca14ec848b73b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>const event_dispatch_t &amp; dpp::event_dispatch_t::cancel_event</definition>
        <argsstring>() const</argsstring>
        <name>cancel_event</name>
        <briefdescription>
<para>Cancels the event in progress. Any other attached lambdas for this event after this one are not called. Note that event cancellation is a thread local state, and not stored in the object (because object which can be cancelled is <computeroutput>const</computeroutput> during the event, and cannot itself contain the changeable state). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref>&amp; reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="92" column="24" bodyfile="src/dpp/dispatcher.cpp" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1aca2880114f69b7ba62eb5137824c1432" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::event_dispatch_t::is_cancelled</definition>
        <argsstring>() const</argsstring>
        <name>is_cancelled</name>
        <briefdescription>
<para>Returns true if the event is cancelled. Note that event cancellation is a thread local state, and not stored in the object (because object which can be cancelled is <computeroutput>const</computeroutput> during the event, and cannot itself contain the changeable state). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the event is cancelled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="100" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="51" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structdpp_1_1voice__receive__t_1a8bf7a8c69603ffd25b30795e5f7ae87d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::voice_receive_t::reassign</definition>
        <argsstring>(class discord_voice_client *vc, snowflake _user_id, uint8_t *pcm, size_t length)</argsstring>
        <name>reassign</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> *</type>
          <declname>vc</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>_user_id</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pcm</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Reassign values outside of the constructor for use within <ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vc</parametername>
</parameternamelist>
<parameterdescription>
<para>owning voice client pointer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>user id who is speaking, 0 for a mix of all user audio </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcm</parametername>
</parameternamelist>
<parameterdescription>
<para>user audio to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of user audio in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1651" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="256" bodyend="266"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>voice receive packet </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
      <node id="1">
        <label>dpp::voice_receive_t</label>
        <link refid="structdpp_1_1voice__receive__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>SSL *</label>
      </node>
      <node id="8">
        <label>bool</label>
      </node>
      <node id="27">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="18">
        <label>double</label>
      </node>
      <node id="26">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="27" relation="usage">
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="3" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>on_form_submit</edgelabel>
          <edgelabel>on_guild_ban_add</edgelabel>
          <edgelabel>on_guild_ban_remove</edgelabel>
          <edgelabel>on_guild_create</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ready</edgelabel>
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>reconnects</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
          <edgelabel>last_heartbeat_ack</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>sessionid</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>protocol</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>sodium_initialised</edgelabel>
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>sessionid</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>server_id</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="3" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="20">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="13" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>dpp::openssl_connection</label>
        <link refid="classdpp_1_1openssl__connection"/>
        <childnode refid="11" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="3" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>keepalive</edgelabel>
          <edgelabel>make_new</edgelabel>
          <edgelabel>nonblocking</edgelabel>
          <edgelabel>plaintext</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>custom_readable_ready</edgelabel>
          <edgelabel>custom_writeable_ready</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="13" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::voice_receive_t</label>
        <link refid="structdpp_1_1voice__receive__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>voice_client</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>audio</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>audio_size</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>audio_data</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>user_id</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>event_router_t&lt;</label>
      </node>
      <node id="9">
        <label>int</label>
      </node>
      <node id="21">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>size_t</label>
      </node>
      <node id="36">
        <label>basic_string&lt;</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="29">
        <label>condition_variable</label>
      </node>
      <node id="14">
        <label>function&lt; dpp::socket()&gt;</label>
      </node>
      <node id="15">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="32">
        <label>std::mutex</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>native_handle_type</label>
      </node>
      <node id="33">
        <label>unordered_map&lt;</label>
      </node>
      <node id="12">
        <label>time_t</label>
      </node>
      <node id="24">
        <label>uint16_t</label>
      </node>
      <node id="17">
        <label>uint32_t</label>
      </node>
      <node id="13">
        <label>uint64_t</label>
      </node>
      <node id="25">
        <label>uint8_t</label>
      </node>
      <node id="28">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dispatcher.h" line="1597" column="1" bodyfile="include/dpp/dispatcher.h" bodystart="1597" bodyend="1652"/>
    <listofallmembers>
      <member refid="structdpp_1_1voice__receive__t_1abe0062119471690caacc95d849274413" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>audio</name></member>
      <member refid="structdpp_1_1voice__receive__t_1a6d6f1d1be9a65fa8b428fab5230dce6d" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>audio_data</name></member>
      <member refid="structdpp_1_1voice__receive__t_1abdc253b2799cb504caa9bd030838f668" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>audio_size</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a5afbcd36109734ad0fca14ec848b73b7" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>cancel_event</name></member>
      <member refid="structdpp_1_1voice__receive__t_1abc4e53e79731117ca95bca977baef820" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>discord_voice_client</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a4ac4d287ca94f2389cf68e2534d9e1b0" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>from</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1aca2880114f69b7ba62eb5137824c1432" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>is_cancelled</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a22df2fa7e547eaefbd65e501d8bf67b7" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>raw_event</name></member>
      <member refid="structdpp_1_1voice__receive__t_1a8bf7a8c69603ffd25b30795e5f7ae87d" prot="protected" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>reassign</name></member>
      <member refid="structdpp_1_1voice__receive__t_1ae70014f7c00864c278df265da0967026" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>user_id</name></member>
      <member refid="structdpp_1_1voice__receive__t_1aa843a6b21c4dc8742960abec208e7fa5" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>voice_client</name></member>
      <member refid="structdpp_1_1voice__receive__t_1a17d45e43c72fbe78358be74146cbaee5" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>voice_receive_t</name></member>
      <member refid="structdpp_1_1voice__receive__t_1aef86eafab8786cefeed105fae4a89d45" prot="public" virt="non-virtual"><scope>dpp::voice_receive_t</scope><name>voice_receive_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
