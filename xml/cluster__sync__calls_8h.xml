<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="cluster__sync__calls_8h" kind="file" language="C++">
    <compoundname>cluster_sync_calls.h</compoundname>
    <includedby refid="cluster_8h" local="no">cluster.h</includedby>
    <invincdepgraph>
      <node id="2">
        <label>cluster.h</label>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>cluster_sync_calls.h</label>
        <link refid="cluster__sync__calls_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>discordclient.h</label>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>discordvoiceclient.h</label>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>dpp.h</label>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>restrequest.h</label>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cluster.cpp</label>
      </node>
      <node id="63">
        <label>appcommand.cpp</label>
      </node>
      <node id="64">
        <label>channel.cpp</label>
      </node>
      <node id="9">
        <label>confirmation.cpp</label>
      </node>
      <node id="65">
        <label>dm.cpp</label>
      </node>
      <node id="66">
        <label>emoji.cpp</label>
      </node>
      <node id="67">
        <label>gateway.cpp</label>
      </node>
      <node id="68">
        <label>guild.cpp</label>
      </node>
      <node id="69">
        <label>guild_member.cpp</label>
      </node>
      <node id="70">
        <label>invite.cpp</label>
      </node>
      <node id="71">
        <label>message.cpp</label>
      </node>
      <node id="72">
        <label>role.cpp</label>
      </node>
      <node id="73">
        <label>scheduled_event.cpp</label>
      </node>
      <node id="74">
        <label>stage_instance.cpp</label>
      </node>
      <node id="75">
        <label>sticker.cpp</label>
      </node>
      <node id="76">
        <label>template.cpp</label>
      </node>
      <node id="77">
        <label>thread.cpp</label>
      </node>
      <node id="91">
        <label>timer.cpp</label>
      </node>
      <node id="78">
        <label>user.cpp</label>
      </node>
      <node id="79">
        <label>voice.cpp</label>
      </node>
      <node id="80">
        <label>webhook.cpp</label>
      </node>
      <node id="8">
        <label>commandhandler.cpp</label>
      </node>
      <node id="10">
        <label>discordclient.cpp</label>
      </node>
      <node id="12">
        <label>discordevents.cpp</label>
      </node>
      <node id="19">
        <label>discordvoiceclient.cpp</label>
      </node>
      <node id="13">
        <label>dispatcher.cpp</label>
      </node>
      <node id="3">
        <label>channel_create.cpp</label>
      </node>
      <node id="4">
        <label>channel_delete.cpp</label>
      </node>
      <node id="5">
        <label>channel_pins_update.cpp</label>
      </node>
      <node id="6">
        <label>channel_update.cpp</label>
      </node>
      <node id="22">
        <label>guild_ban_add.cpp</label>
      </node>
      <node id="23">
        <label>guild_ban_remove.cpp</label>
      </node>
      <node id="24">
        <label>guild_create.cpp</label>
      </node>
      <node id="25">
        <label>guild_delete.cpp</label>
      </node>
      <node id="26">
        <label>guild_emojis_update.cpp</label>
      </node>
      <node id="27">
        <label>guild_integrations_update.cpp</label>
      </node>
      <node id="28">
        <label>guild_join_request_delete.cpp</label>
      </node>
      <node id="29">
        <label>guild_member_add.cpp</label>
      </node>
      <node id="30">
        <label>guild_member_remove.cpp</label>
      </node>
      <node id="31">
        <label>guild_member_update.cpp</label>
      </node>
      <node id="32">
        <label>guild_members_chunk.cpp</label>
      </node>
      <node id="33">
        <label>guild_role_create.cpp</label>
      </node>
      <node id="34">
        <label>guild_role_delete.cpp</label>
      </node>
      <node id="35">
        <label>guild_role_update.cpp</label>
      </node>
      <node id="36">
        <label>guild_scheduled_event_create.cpp</label>
      </node>
      <node id="37">
        <label>guild_scheduled_event_delete.cpp</label>
      </node>
      <node id="38">
        <label>guild_scheduled_event_update.cpp</label>
      </node>
      <node id="39">
        <label>guild_scheduled_event_user_add.cpp</label>
      </node>
      <node id="40">
        <label>guild_scheduled_event_user_remove.cpp</label>
      </node>
      <node id="41">
        <label>guild_stickers_update.cpp</label>
      </node>
      <node id="42">
        <label>guild_update.cpp</label>
      </node>
      <node id="43">
        <label>integration_create.cpp</label>
      </node>
      <node id="44">
        <label>integration_delete.cpp</label>
      </node>
      <node id="45">
        <label>integration_update.cpp</label>
      </node>
      <node id="46">
        <label>interaction_create.cpp</label>
      </node>
      <node id="47">
        <label>invite_create.cpp</label>
      </node>
      <node id="48">
        <label>invite_delete.cpp</label>
      </node>
      <node id="49">
        <label>logger.cpp</label>
      </node>
      <node id="51">
        <label>message_create.cpp</label>
      </node>
      <node id="52">
        <label>message_delete.cpp</label>
      </node>
      <node id="53">
        <label>message_delete_bulk.cpp</label>
      </node>
      <node id="54">
        <label>message_reaction_add.cpp</label>
      </node>
      <node id="55">
        <label>message_reaction_remove.cpp</label>
      </node>
      <node id="56">
        <label>message_reaction_remove_all.cpp</label>
      </node>
      <node id="57">
        <label>message_reaction_remove_emoji.cpp</label>
      </node>
      <node id="58">
        <label>message_update.cpp</label>
      </node>
      <node id="59">
        <label>presence_update.cpp</label>
      </node>
      <node id="61">
        <label>ready.cpp</label>
      </node>
      <node id="81">
        <label>resumed.cpp</label>
      </node>
      <node id="82">
        <label>stage_instance_create.cpp</label>
      </node>
      <node id="83">
        <label>stage_instance_delete.cpp</label>
      </node>
      <node id="84">
        <label>stage_instance_update.cpp</label>
      </node>
      <node id="85">
        <label>thread_create.cpp</label>
      </node>
      <node id="86">
        <label>thread_delete.cpp</label>
      </node>
      <node id="87">
        <label>thread_list_sync.cpp</label>
      </node>
      <node id="88">
        <label>thread_member_update.cpp</label>
      </node>
      <node id="89">
        <label>thread_members_update.cpp</label>
      </node>
      <node id="90">
        <label>thread_update.cpp</label>
      </node>
      <node id="92">
        <label>typing_start.cpp</label>
      </node>
      <node id="93">
        <label>user_update.cpp</label>
      </node>
      <node id="95">
        <label>voice_server_update.cpp</label>
      </node>
      <node id="21">
        <label>voice_state_update.cpp</label>
      </node>
      <node id="96">
        <label>webhooks_update.cpp</label>
      </node>
      <node id="18">
        <label>guild.cpp</label>
      </node>
      <node id="50">
        <label>message.cpp</label>
      </node>
      <node id="60">
        <label>queues.cpp</label>
      </node>
      <node id="94">
        <label>utility.cpp</label>
      </node>
      <node id="16">
        <label>test.cpp</label>
      </node>
      <node id="15">
        <label>test.h</label>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>unittest.cpp</label>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="cluster__sync__calls_8h_1a1ac19d1cb177d67408309d0cdc35fedb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>slashcommand_map</type>
        <definition>slashcommand_map global_bulk_command_create_sync</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands)</argsstring>
        <name>global_bulk_command_create_sync</name>
        <param>
          <type>const std::vector&lt; slashcommand &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
<para>Create/overwrite global slash commands. Any existing global slash commands will be deleted and replaced with these. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Global commands are cached by discord server-side and can take up to an hour to be visible. For testing, you should use cluster::guild_bulk_command_create instead.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands">https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of slash commands to create/update. overwriting existing commands that are registered globally for this application. Updates will be available in all guilds after 1 hour. Commands that do not already exist will count toward daily application command create limits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6bbdec2006aa6a44a6448986a32f0dc4" kindref="member">dpp::cluster::global_bulk_command_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="47" column="25" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aa80cee43dfab51b80eaa56c9518a5902" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>slashcommand</type>
        <definition>slashcommand global_command_create_sync</definition>
        <argsstring>(const slashcommand &amp;s)</argsstring>
        <name>global_command_create_sync</name>
        <param>
          <type>const slashcommand &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Create a global slash command (a bot can have a maximum of 100 of these). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Global commands are cached by discord server-side and can take up to an hour to be visible. For testing, you should use cluster::guild_command_create instead.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#create-global-application-command">https://discord.com/developers/docs/interactions/application-commands#create-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a11bccddf1068abb215bd6e69ba30b76b" kindref="member">dpp::cluster::global_command_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="65" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1abb035c6be650c05f6f847d2b22643d53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>slashcommand</type>
        <definition>slashcommand global_command_get_sync</definition>
        <argsstring>(snowflake id)</argsstring>
        <name>global_command_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a global slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-global-application-command">https://discord.com/developers/docs/interactions/application-commands#get-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a398a2b72a5cc084333e3fb5ce1f83727" kindref="member">dpp::cluster::global_command_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="80" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aa1359fe28bc8be1b707c7bc29c7a53ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation global_command_delete_sync</definition>
        <argsstring>(snowflake id)</argsstring>
        <name>global_command_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Delete a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command">https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6efaf2b6ce4557b5a7b039d89f956e3e" kindref="member">dpp::cluster::global_command_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="95" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1af0bd069670dc9c7a2fd87591a02d6434" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation global_command_edit_sync</definition>
        <argsstring>(const slashcommand &amp;s)</argsstring>
        <name>global_command_edit_sync</name>
        <param>
          <type>const slashcommand &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Edit a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command">https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Global commands are cached by discord server-side and can take up to an hour to be visible. For testing, you should use cluster::guild_bulk_command_create instead. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to change </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a53e89466c1d02fd7f350bca69bf03d59" kindref="member">dpp::cluster::global_command_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="112" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a26c76ebb9724cd5490b26f86bebc244c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>slashcommand_map</type>
        <definition>slashcommand_map global_commands_get_sync</definition>
        <argsstring>()</argsstring>
        <name>global_commands_get_sync</name>
        <briefdescription>
<para>Get the application&apos;s global slash commands. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands">https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands</ulink> </para>
</simplesect>
<simplesect kind="return"><para>slashcommand_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8a8cadcdde42fcfa8d29c0c4fd0bec5b" kindref="member">dpp::cluster::global_commands_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="126" column="25" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ae323eef41c836adfaf03a3d49bfe7dfe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>slashcommand_map</type>
        <definition>slashcommand_map guild_bulk_command_create_sync</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands, snowflake guild_id)</argsstring>
        <name>guild_bulk_command_create_sync</name>
        <param>
          <type>const std::vector&lt; slashcommand &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Create/overwrite guild slash commands. Any existing guild slash commands on this guild will be deleted and replaced with these. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands">https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of slash commands to create/update. New guild commands will be available in the guild immediately. If the command did not already exist, it will count toward daily application command create limits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create/update the slash commands in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a392bb1f732d92fe4b9d8eacdbf4d3ffe" kindref="member">dpp::cluster::guild_bulk_command_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="144" column="25" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a944a2780e88312e85782ef5e76cac1b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_command_permissions_map</type>
        <definition>guild_command_permissions_map guild_commands_get_permissions_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_commands_get_permissions_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all slash command permissions of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash commands permissions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_command_permissions_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab7e992a10e120846d39a7d7d3c048ef9" kindref="member">dpp::cluster::guild_commands_get_permissions</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="159" column="38" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a8b9690c1f70fcc0604c62c42af6b6401" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_command_permissions_map</type>
        <definition>guild_command_permissions_map guild_bulk_command_edit_permissions_sync</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands, snowflake guild_id)</argsstring>
        <name>guild_bulk_command_edit_permissions_sync</name>
        <param>
          <type>const std::vector&lt; slashcommand &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Edit/Overwrite the permissions of all existing slash commands in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>You can only add up to 10 permission overwrites for a command</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#batch-edit-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#batch-edit-application-command-permissions</ulink> </para>
</simplesect>
<simplesect kind="warning"><para>The endpoint will overwrite all existing permissions for all commands of the application in a guild, including slash commands, user commands, and message commands. Meaning that if you forgot to pass a slash command, the permissions of it might be removed. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of slash commands to edit/overwrite the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit permissions of the slash commands in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_command_permissions_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0dcccabdbf1b3fb41e29145f80aaecb6" kindref="member">dpp::cluster::guild_bulk_command_edit_permissions</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="178" column="38" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ae23edb71f27122a372f38d62cbc7d69b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>slashcommand</type>
        <definition>slashcommand guild_command_create_sync</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id)</argsstring>
        <name>guild_command_create_sync</name>
        <param>
          <type>const slashcommand &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Create a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Creating a command with the same name as an existing command for your application will overwrite the old command. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6e4a1a241299bcd1b5f6bfd69ae1ead9" kindref="member">dpp::cluster::guild_command_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="195" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ad4aeba78271a566f4ef2c55ca91e4f78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_command_delete_sync</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>guild_command_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a210e7585068339c47e71b8ff3d219958" kindref="member">dpp::cluster::guild_command_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="211" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="211" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a2d3684312c2fa0b0157b01de22b4e515" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_command_edit_permissions_sync</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id)</argsstring>
        <name>guild_command_edit_permissions_sync</name>
        <param>
          <type>const slashcommand &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Edit slash command permissions of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>You can only add up to 10 permission overwrites for a command </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to edit the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af7c607ba6c25317d4cf86fea933259ce" kindref="member">dpp::cluster::guild_command_edit_permissions</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="228" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a9b9f4f19415e847d3c6d6d6bf436bbbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>slashcommand</type>
        <definition>slashcommand guild_command_get_sync</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>guild_command_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get a slash command of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The returned slash commands will not have permissions set, you need to use a permissions getter e.g. dpp::guild_commands_get_permissions to get the guild command permissions </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash command from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad33f299b64e188e935184a32ab8515f1" kindref="member">dpp::cluster::guild_command_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="245" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a75a93adb582262f8436f8ba5ad9d05fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_command_permissions</type>
        <definition>guild_command_permissions guild_command_get_permissions_sync</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>guild_command_get_permissions_sync</name>
        <param>
          <type>snowflake</type>
          <declname>id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the permissions for a slash command of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command to get the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the permissions of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_command_permissions returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a69ebf194c8bb078ce6998080b552c9ad" kindref="member">dpp::cluster::guild_command_get_permissions</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="261" column="34" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a58bd59adea01fe5b7a5b5f8ec105278a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_command_edit_sync</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id)</argsstring>
        <name>guild_command_edit_sync</name>
        <param>
          <type>const slashcommand &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Edit a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1afbf6872567ddc76148f8537e5b53c192" kindref="member">dpp::cluster::guild_command_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="277" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ae07608af71753db6d0d094ecb095c097" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>slashcommand_map</type>
        <definition>slashcommand_map guild_commands_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_commands_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the application&apos;s slash commands for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-guild-application-commands">https://discord.com/developers/docs/interactions/application-commands#get-guild-application-commands</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The returned slash commands will not have permissions set, you need to use a permissions getter e.g. dpp::guild_commands_get_permissions to get the guild command permissions </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash commands for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a01623d7535dc359905990e710ae3b5e9" kindref="member">dpp::cluster::guild_commands_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="293" column="25" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="293" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a52a10719c16f7e7a15191a58ef62f5a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation interaction_response_create_sync</definition>
        <argsstring>(snowflake interaction_id, const std::string &amp;token, const interaction_response &amp;r)</argsstring>
        <name>interaction_response_create_sync</name>
        <param>
          <type>snowflake</type>
          <declname>interaction_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const interaction_response &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Respond to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interaction_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Interaction id to respond to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Response to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a61e03d7c6a19f6a652d3a80b1a8157ca" kindref="member">dpp::cluster::interaction_response_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="310" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a6701dcaad8e58149e44fc6555b1124d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation interaction_response_edit_sync</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m)</argsstring>
        <name>interaction_response_edit_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const message &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit response to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1abd832d3e6c1f6176507aac4de2116c50" kindref="member">dpp::cluster::interaction_response_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="326" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="326" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ac5703c22c4a8e033984d6aadd730486c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>channel</type>
        <definition>channel channel_create_sync</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>channel_create_sync</name>
        <param>
          <type>const class channel &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Create a channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new channel object for the guild. Requires the <computeroutput>MANAGE_CHANNELS</computeroutput> permission. If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied. Setting <computeroutput>MANAGE_ROLES</computeroutput> permission in channels is only possible for guild administrators. Returns the new channel object on success. Fires a <computeroutput>Channel Create Gateway</computeroutput> event.</para>
<para>All parameters to this endpoint are optional excluding <computeroutput>name</computeroutput></para>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-channel">https://discord.com/developers/docs/resources/channel#create-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a66df9163f111cec5a180d642f521660a" kindref="member">dpp::cluster::channel_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="348" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="348" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a69bb83b19b7e543be770c775eb3e177c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation channel_delete_permission_sync</definition>
        <argsstring>(const class channel &amp;c, snowflake overwrite_id)</argsstring>
        <name>channel_delete_permission_sync</name>
        <param>
          <type>const class channel &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>overwrite_id</declname>
        </param>
        <briefdescription>
<para>Remove a permission from a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-channel-permission">https://discord.com/developers/docs/resources/channel#delete-channel-permission</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to remove permission from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to remove, user or channel ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac335bec6c58c7161348b521aad154431" kindref="member">dpp::cluster::channel_delete_permission</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="364" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="364" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a4ba8a783fae43469dce6ecd7aaa0c4f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation channel_delete_sync</definition>
        <argsstring>(snowflake channel_id)</argsstring>
        <name>channel_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#deleteclose-channel">https://discord.com/developers/docs/resources/channel#deleteclose-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a837aa702a92e98ef593381fb147d23fb" kindref="member">dpp::cluster::channel_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="379" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="379" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a49661dd640641131e8e5258b58fb5cf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation channel_edit_positions_sync</definition>
        <argsstring>(const std::vector&lt; channel &gt; &amp;c)</argsstring>
        <name>channel_edit_positions_sync</name>
        <param>
          <type>const std::vector&lt; channel &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Edit multiple channels positions. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify the positions of a set of channel objects for the guild. Requires <computeroutput>MANAGE_CHANNELS</computeroutput> permission. Fires multiple <computeroutput>Channel Update Gateway</computeroutput> events. Only channels to be modified are required.</para>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions">https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to change the position for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa005ff4940e700f034b01e197670837b" kindref="member">dpp::cluster::channel_edit_positions</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="399" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="399" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a60453ac12acfdb8108f6f36f253ed960" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>channel</type>
        <definition>channel channel_edit_sync</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>channel_edit_sync</name>
        <param>
          <type>const class channel &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Edit a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#modify-channel">https://discord.com/developers/docs/resources/channel#modify-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to edit/update </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8ca7054e8447493eb1136f4972053b0f" kindref="member">dpp::cluster::channel_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="414" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="414" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a4fe79bb6586c6ab4102cbd54ebcf68b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation channel_follow_news_sync</definition>
        <argsstring>(const class channel &amp;c, snowflake target_channel_id)</argsstring>
        <name>channel_follow_news_sync</name>
        <param>
          <type>const class channel &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>target_channel_id</declname>
        </param>
        <briefdescription>
<para>Follow a news channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#follow-news-channel">https://discord.com/developers/docs/resources/channel#follow-news-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to follow </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to subscribe the channel to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a83fa90627b403c4489320b64d6e31c8c" kindref="member">dpp::cluster::channel_follow_news</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="429" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="429" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aeded9b004af14d3d5aebd1481e812545" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>channel</type>
        <definition>channel channel_get_sync</definition>
        <argsstring>(snowflake c)</argsstring>
        <name>channel_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Get a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel">https://discord.com/developers/docs/resources/channel#get-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a108f6f06b43709c8d47df5f94a3ca0a5" kindref="member">dpp::cluster::channel_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="444" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="444" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aa0c90ea77d95633ba7dee8f29a040234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation channel_invite_create_sync</definition>
        <argsstring>(const class channel &amp;c, const class invite &amp;i)</argsstring>
        <name>channel_invite_create_sync</name>
        <param>
          <type>const class channel &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const class invite &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Create invite for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-channel-invite">https://discord.com/developers/docs/resources/channel#create-channel-invite</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to create an invite on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5e3f97577e5948896b38836fd293cefd" kindref="member">dpp::cluster::channel_invite_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="460" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="460" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a9c0ee769b45fc809ea84ec20915d033f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>invite_map</type>
        <definition>invite_map channel_invites_get_sync</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>channel_invites_get_sync</name>
        <param>
          <type>const class channel &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Get invites for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/invite#get-invites">https://discord.com/developers/docs/resources/invite#get-invites</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get invites for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa03a0da5c8e6801dc56bda258265da04" kindref="member">dpp::cluster::channel_invites_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="475" column="19" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="475" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a041620de1941bc984992d390815cf927" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>channel_map</type>
        <definition>channel_map channels_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>channels_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all channels for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channels">https://discord.com/developers/docs/resources/channel#get-channels</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to retrieve channels for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a24e67431b79cc2c3d0f12d59afd5a1c8" kindref="member">dpp::cluster::channels_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="490" column="20" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="490" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a1b6203473027ccfb563a7da986467ca8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>channel</type>
        <definition>channel create_dm_channel_sync</definition>
        <argsstring>(snowflake user_id)</argsstring>
        <name>create_dm_channel_sync</name>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Create a dm channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#create-dm">https://discord.com/developers/docs/resources/user#create-dm</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to create DM channel with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aab0538838d054a0c80c07cd0556a894c" kindref="member">dpp::cluster::create_dm_channel</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="504" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="504" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a129f52484acb39470f73e22508104910" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>channel_map</type>
        <definition>channel_map current_user_get_dms_sync</definition>
        <argsstring>()</argsstring>
        <name>current_user_get_dms_sync</name>
        <briefdescription>
<para>Get current user DM channels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>channel_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a662fc0a998c62395f166da5e4a2acaf3" kindref="member">dpp::cluster::current_user_get_dms</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="517" column="20" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="517" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a26bd2938ab89082fca3637b59a83d0c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>message</type>
        <definition>message direct_message_create_sync</definition>
        <argsstring>(snowflake user_id, const message &amp;m)</argsstring>
        <name>direct_message_create_sync</name>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const message &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Create a direct message, also create the channel for the direct message if needed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#create-dm">https://discord.com/developers/docs/resources/user#create-dm</ulink> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-message">https://discord.com/developers/docs/resources/channel#create-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of user to send message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa88bbdcc5005da82928497545e9455bc" kindref="member">dpp::cluster::direct_message_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="534" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="534" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aa0e11a2d335d101bd9832a1bc1169aa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation gdm_add_sync</definition>
        <argsstring>(snowflake channel_id, snowflake user_id, const std::string &amp;access_token, const std::string &amp;nick)</argsstring>
        <name>gdm_add_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_token</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nick</declname>
        </param>
        <briefdescription>
<para>Adds a recipient to a Group DM using their access token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#group-dm-add-recipient">https://discord.com/developers/docs/resources/channel#group-dm-add-recipient</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to add group DM recipients to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_token</parametername>
</parameternamelist>
<parameterdescription>
<para>Access token from OAuth2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname of user to apply to the chat </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab9aec491f4116fa33aeabf1e614051f0" kindref="member">dpp::cluster::gdm_add</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="551" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="551" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a5c7f2b0fe5e158c6998ea60b1ee0aacf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation gdm_remove_sync</definition>
        <argsstring>(snowflake channel_id, snowflake user_id)</argsstring>
        <name>gdm_remove_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Removes a recipient from a Group DM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#group-dm-remove-recipient">https://discord.com/developers/docs/resources/channel#group-dm-remove-recipient</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID of group DM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove from group DM </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0d130c81079f3b55c440710f5ea0470e" kindref="member">dpp::cluster::gdm_remove</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="566" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="566" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a5239aad651cb9b6d1d4692867b79367e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>emoji</type>
        <definition>emoji guild_emoji_create_sync</definition>
        <argsstring>(snowflake guild_id, const class emoji &amp;newemoji)</argsstring>
        <name>guild_emoji_create_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class emoji &amp;</type>
          <declname>newemoji</declname>
        </param>
        <briefdescription>
<para>Create single emoji. You must ensure that the emoji passed contained image data using the emoji::load_image() method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#create-guild-emoji">https://discord.com/developers/docs/resources/emoji#create-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create emoji om </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newemoji</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8bea7e9ba3d487e9a6b2fe747c98e9e1" kindref="member">dpp::cluster::guild_emoji_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="584" column="14" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="584" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab9232aa15c656ec0bb91350fb4b79f14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_emoji_delete_sync</definition>
        <argsstring>(snowflake guild_id, snowflake emoji_id)</argsstring>
        <name>guild_emoji_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>emoji_id</declname>
        </param>
        <briefdescription>
<para>Delete a guild emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#delete-guild-emoji">https://discord.com/developers/docs/resources/emoji#delete-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete emoji on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emoji_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a55b6d9100c34ea5bbbe37d3ba5089be3" kindref="member">dpp::cluster::guild_emoji_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="601" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="601" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a17b209858949bb0b4c079f44972cd85b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>emoji</type>
        <definition>emoji guild_emoji_edit_sync</definition>
        <argsstring>(snowflake guild_id, const class emoji &amp;newemoji)</argsstring>
        <name>guild_emoji_edit_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class emoji &amp;</type>
          <declname>newemoji</declname>
        </param>
        <briefdescription>
<para>Edit a single emoji. </para>
        </briefdescription>
        <detaileddescription>
<para>You must ensure that the emoji passed contained image data using the emoji::load_image() method. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#get-guild-emoji">https://discord.com/developers/docs/resources/emoji#get-guild-emoji</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit emoji on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newemoji</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a7461e2fa96c4bf77468226ffb25744ea" kindref="member">dpp::cluster::guild_emoji_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="619" column="14" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="619" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aed360fe893fb2aceacbb1160de0de77b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>emoji</type>
        <definition>emoji guild_emoji_get_sync</definition>
        <argsstring>(snowflake guild_id, snowflake emoji_id)</argsstring>
        <name>guild_emoji_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>emoji_id</declname>
        </param>
        <briefdescription>
<para>Get a single emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#get-guild-emoji">https://discord.com/developers/docs/resources/emoji#get-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get emoji for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emoji_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ada721a222fb3a42a1a1bb6d93dfcc745" kindref="member">dpp::cluster::guild_emoji_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="635" column="14" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="635" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a83a297526f214d56547bf17e3ef0280e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>emoji_map</type>
        <definition>emoji_map guild_emojis_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_emojis_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all emojis for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#get-guild-emojis">https://discord.com/developers/docs/resources/emoji#get-guild-emojis</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get emojis for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad66ab98a72eb1ba8d2686fcaa1eb49db" kindref="member">dpp::cluster::guild_emojis_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="650" column="18" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="650" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a2686c9d5fb863f7c254e05c306d7d153" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>gateway</type>
        <definition>gateway get_gateway_bot_sync</definition>
        <argsstring>()</argsstring>
        <name>get_gateway_bot_sync</name>
        <briefdescription>
<para>Get the gateway information for the bot using the token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway#get-gateway-bot">https://discord.com/developers/docs/topics/gateway#get-gateway-bot</ulink> </para>
</simplesect>
<simplesect kind="return"><para>gateway returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a68f16d04f100a0159683cba96e8c0a6c" kindref="member">dpp::cluster::get_gateway_bot</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="663" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="663" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aed140ef08751aa3fbca1ecaa78a95c87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_current_member_edit_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;nickname)</argsstring>
        <name>guild_current_member_edit_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <briefdescription>
<para>Modify current member. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the current member in a guild. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event.</para>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-member">https://discord.com/developers/docs/resources/guild#modify-current-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>New nickname, or empty string to clear nickname </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab55ebdf053917a35368be4d86237af33" kindref="member">dpp::cluster::guild_current_member_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="683" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="683" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1adf82a648a88cb3eaf88c768c64c0cf62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auditlog</type>
        <definition>auditlog guild_auditlog_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_auditlog_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the audit log for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log">https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get the audit log of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auditlog returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a74a61aa62ddf9207c197bfd496ae6ade" kindref="member">dpp::cluster::guild_auditlog_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="698" column="17" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="698" bodyend="700"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a99180575341fddb59efa6d489bcb7e51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_ban_add_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, uint32_t delete_message_days, const std::string &amp;reason)</argsstring>
        <name>guild_ban_add_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>delete_message_days</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Add guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a guild ban, and optionally delete previous messages sent by the banned user. Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Ban Add</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild-ban">https://discord.com/developers/docs/resources/guild#create-guild-ban</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to add ban to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to ban </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delete_message_days</parametername>
</parameternamelist>
<parameterdescription>
<para>How many days of their user&apos;s messages to also delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Reason for ban </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1abe40949503797960f2e899cdc3a4c228" kindref="member">dpp::cluster::guild_ban_add</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="719" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="719" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a381e6103f73e667bd42fc7b8f01117f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_ban_delete_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>guild_ban_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Delete guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the ban for a user. Requires the <computeroutput>BAN_MEMBERS</computeroutput> permissions. Fires a Guild Ban Remove Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-ban">https://discord.com/developers/docs/resources/guild#remove-guild-ban</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to delete ban from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to delete ban for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a77f277230e3cd4d34eac3d2d9838f6d7" kindref="member">dpp::cluster::guild_ban_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="738" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="738" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ac20fa35c137c48987aceb48f023e3e2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild</type>
        <definition>guild guild_create_sync</definition>
        <argsstring>(const class guild &amp;g)</argsstring>
        <name>guild_create_sync</name>
        <param>
          <type>const class guild &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Create a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new guild. Returns a guild object on success. <computeroutput>Fires a Guild Create Gateway</computeroutput> event.</para>
<para>When using the roles parameter, the first member of the array is used to change properties of the guild&apos;s everyone role. If you are trying to bootstrap a guild with additional roles, keep this in mind. The required id field within each role object is an integer placeholder, and will be replaced by the API upon consumption. Its purpose is to allow you to overwrite a role&apos;s permissions in a channel when also passing in channels with the channels array. When using the channels parameter, the position field is ignored, and none of the default channels are created. The id field within each channel object may be set to an integer placeholder, and will be replaced by the API upon consumption. Its purpose is to allow you to create <computeroutput>GUILD_CATEGORY</computeroutput> channels by setting the <computeroutput>parent_id</computeroutput> field on any children to the category&apos;s id field. Category channels must be listed before any children.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild">https://discord.com/developers/docs/resources/guild#create-guild</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The region field is deprecated and is replaced by channel.rtc_region. This endpoint can be used only by bots in less than 10 guilds. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8e7f40eadf7748bcf35f67d152c3462c" kindref="member">dpp::cluster::guild_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="765" column="14" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="765" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a1b63d41d834a4223bad56d528fde1b70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_delete_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete a guild permanently. User must be owner. Fires a <computeroutput>Guild Delete Gateway</computeroutput> event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild">https://discord.com/developers/docs/resources/guild#delete-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9b0fccd64f8d21340fe20642d9fdb1e9" kindref="member">dpp::cluster::guild_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="782" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="782" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a5704ecc3212ed418b36d6f4fa8b4ab02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_delete_integration_sync</definition>
        <argsstring>(snowflake guild_id, snowflake integration_id)</argsstring>
        <name>guild_delete_integration_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>integration_id</declname>
        </param>
        <briefdescription>
<para>Delete guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete the attached integration object for the guild. Deletes any associated webhooks and kicks the associated bot if there is one. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. Fires a Guild Integrations Update Gateway event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild-integration">https://discord.com/developers/docs/resources/guild#delete-guild-integration</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete integration for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab4ed64619f058ac4b71a90066e7aac73" kindref="member">dpp::cluster::guild_delete_integration</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="802" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="802" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab0a20f6a371ed8915654c50de208162b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild</type>
        <definition>guild guild_edit_sync</definition>
        <argsstring>(const class guild &amp;g)</argsstring>
        <name>guild_edit_sync</name>
        <param>
          <type>const class guild &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Edit a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify a guild&apos;s settings. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. Returns the updated guild object on success. Fires a <computeroutput>Guild Update Gateway</computeroutput> event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild">https://discord.com/developers/docs/resources/guild#modify-guild</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a54e2174822bb1796a541f849d568664c" kindref="member">dpp::cluster::guild_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="821" column="14" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="821" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a649e4c0a19992e9c3f6ff297ed006911" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_widget</type>
        <definition>guild_widget guild_edit_widget_sync</definition>
        <argsstring>(snowflake guild_id, const class guild_widget &amp;gw)</argsstring>
        <name>guild_edit_widget_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class guild_widget &amp;</type>
          <declname>gw</declname>
        </param>
        <briefdescription>
<para>Edit guild widget. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-widget">https://discord.com/developers/docs/resources/guild#modify-guild-widget</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit widget for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gw</parametername>
</parameternamelist>
<parameterdescription>
<para>New guild widget information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_widget returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae97d98927594cee1821c4ff318eb9561" kindref="member">dpp::cluster::guild_edit_widget</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="840" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="840" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a9810b52f5a6cdb45b3e8ba20066e4f08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ban</type>
        <definition>ban guild_get_ban_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>guild_get_ban_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get single guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-ban">https://discord.com/developers/docs/resources/guild#get-guild-ban</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get ban for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of ban to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ban returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad871d30ed11d0799da4a831ede8a7d95" kindref="member">dpp::cluster::guild_get_ban</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="857" column="12" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="857" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a290d4443b911f5e127f9d6a044b39d4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ban_map</type>
        <definition>ban_map guild_get_bans_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_bans_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild ban list. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-bans">https://discord.com/developers/docs/resources/guild#get-guild-bans</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get bans for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ban_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af9fffa4f080e0b5abab1417fa8eb1b0f" kindref="member">dpp::cluster::guild_get_bans</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="873" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="873" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1af41ec671ac6cdc52ce374b276e41cfd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild</type>
        <definition>guild guild_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="878" column="14" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="878" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a9eaa26f60bb494c8b7494b611f54dbae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>integration_map</type>
        <definition>integration_map guild_get_integrations_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_integrations_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild integrations. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-integrations">https://discord.com/developers/docs/resources/guild#get-guild-integrations</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get integrations for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integration_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a43cba3bd187f9b28dcaed5b4f4ed5bda" kindref="member">dpp::cluster::guild_get_integrations</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="895" column="24" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="895" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1acc304bee41c019940046f4bbe4dd3cf0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild</type>
        <definition>guild guild_get_preview_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_preview_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="900" column="14" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="900" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ac002c4fdeaeac6da804fcb8ec1b42811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>invite</type>
        <definition>invite guild_get_vanity_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_vanity_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild vanity url, if enabled. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a partial <ref refid="classdpp_1_1invite" kindref="compound">dpp::invite</ref> object for guilds with that feature enabled. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. code will be null if a vanity url for the guild is not set. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-vanity-url">https://discord.com/developers/docs/resources/guild#get-guild-vanity-url</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get vanity URL for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad1332e45cc89e871009e840c25145df5" kindref="member">dpp::cluster::guild_get_vanity</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="916" column="15" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="916" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a34bfc464bcb65b888bca02995c6daf1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_widget</type>
        <definition>guild_widget guild_get_widget_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_widget_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild widget. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-widget">https://discord.com/developers/docs/resources/guild#get-guild-widget</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get widget for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_widget returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a57626c7a0e06aee1c362b986e44030c2" kindref="member">dpp::cluster::guild_get_widget</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="933" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="933" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a88210140e34d8a771b95298179542a1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_modify_integration_sync</definition>
        <argsstring>(snowflake guild_id, const class integration &amp;i)</argsstring>
        <name>guild_modify_integration_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class integration &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Modify guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-integration">https://discord.com/developers/docs/resources/guild#modify-guild-integration</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to modify integration for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration to modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0cc29438d9f4a8a42e5f5d44ce44c6db" kindref="member">dpp::cluster::guild_modify_integration</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="950" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="950" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a6fef8b393d4a36c5415a4c36338d8489" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>prune</type>
        <definition>prune guild_get_prune_counts_sync</definition>
        <argsstring>(snowflake guild_id, const struct prune &amp;pruneinfo)</argsstring>
        <name>guild_get_prune_counts_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct prune &amp;</type>
          <declname>pruneinfo</declname>
        </param>
        <briefdescription>
<para>Get prune counts. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a prune object indicating the number of members that would be removed in a prune operation. Requires the <computeroutput>KICK_MEMBERS</computeroutput> permission. By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the include_roles parameter. Any inactive user that has a subset of the provided role(s) will be counted in the prune and users with additional roles will not.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-prune-count">https://discord.com/developers/docs/resources/guild#get-guild-prune-count</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to count for pruning </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pruneinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pruning info </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>prune returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aad296f07bd5b9f900dcedbf88c464e09" kindref="member">dpp::cluster::guild_get_prune_counts</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="971" column="14" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="971" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a9199f4f2112559032957d59937a13544" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>prune</type>
        <definition>prune guild_begin_prune_sync</definition>
        <argsstring>(snowflake guild_id, const struct prune &amp;pruneinfo)</argsstring>
        <name>guild_begin_prune_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct prune &amp;</type>
          <declname>pruneinfo</declname>
        </param>
        <briefdescription>
<para>Begin guild prune. </para>
        </briefdescription>
        <detaileddescription>
<para>Begin a prune operation. Requires the <computeroutput>KICK_MEMBERS</computeroutput> permission. Returns a prune object indicating the number of members that were removed in the prune operation. For large guilds it&apos;s recommended to set the <computeroutput>compute_prune_count</computeroutput> option to false, forcing &apos;pruned&apos; to 0. Fires multiple <computeroutput>Guild Member Remove</computeroutput> Gateway events. By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the <computeroutput>include_roles</computeroutput> parameter. Any inactive user that has a subset of the provided role(s) will be included in the prune and users with additional roles will not.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#begin-guild-prune">https://discord.com/developers/docs/resources/guild#begin-guild-prune</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to prune </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pruneinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pruning info </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>prune returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a68d13c11179006d5271c1a398df58bc2" kindref="member">dpp::cluster::guild_begin_prune</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="994" column="14" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="994" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a4f9206883af01ce3253b5909bf3153d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_set_nickname_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;nickname)</argsstring>
        <name>guild_set_nickname_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <briefdescription>
<para>Change current user nickname. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the nickname of the current user in a guild. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event.</para>
<para><xrefsect id="deprecated_1_deprecated000005"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Deprecated in favor of Modify Current Member. Will be replaced by <ref refid="classdpp_1_1cluster_1ab55ebdf053917a35368be4d86237af33" kindref="member">dpp::cluster::guild_current_member_edit</ref> </para>
</xrefdescription></xrefsect><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-user-nick">https://discord.com/developers/docs/resources/guild#modify-current-user-nick</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change nickname on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>New nickname, or empty string to clear nickname </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4a8074b289fee0f43d7eafb2bc6ae5c7" kindref="member">dpp::cluster::guild_set_nickname</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1015" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1015" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a59b4ba9bc83e41b336b8e93f972d4cd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_sync_integration_sync</definition>
        <argsstring>(snowflake guild_id, snowflake integration_id)</argsstring>
        <name>guild_sync_integration_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>integration_id</declname>
        </param>
        <briefdescription>
<para>Sync guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#sync-guild-integration">https://discord.com/developers/docs/resources/guild#sync-guild-integration</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to sync integration on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to synchronise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4bef071b931d0ca71b45ee0d8bf3a96c" kindref="member">dpp::cluster::guild_sync_integration</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1031" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1031" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a4066c8f1e67919da1580a4c128032879" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_add_member_sync</definition>
        <argsstring>(const guild_member &amp;gm, const std::string &amp;access_token)</argsstring>
        <name>guild_add_member_sync</name>
        <param>
          <type>const guild_member &amp;</type>
          <declname>gm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_token</declname>
        </param>
        <briefdescription>
<para>Add guild member. Needs a specific oauth2 scope, from which you get the access_token. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a user to the guild, provided you have a valid oauth2 access token for the user with the guilds.join scope. Returns the guild_member, which is defaulted if the user is already a member of the guild. Fires a <computeroutput>Guild Member Add</computeroutput> Gateway event.</para>
<para>For guilds with Membership Screening enabled, this endpoint will default to adding new members as pending in the guild member object. Members that are pending will have to complete membership screening before they become full members that can talk.</para>
<para><simplesect kind="note"><para>All parameters to this endpoint except for access_token are optional. The bot must be a member of the guild with <computeroutput>CREATE_INSTANT_INVITE</computeroutput> permission. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#add-guild-member">https://discord.com/developers/docs/resources/guild#add-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gm</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild member to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_token</parametername>
</parameternamelist>
<parameterdescription>
<para>Access token from Oauth2 scope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a19819f7f2f2f3badecc1e29a928f2690" kindref="member">dpp::cluster::guild_add_member</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1055" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1055" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a5014eb727a1b771fb769a2e8fd42a225" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_member</type>
        <definition>guild_member guild_edit_member_sync</definition>
        <argsstring>(const guild_member &amp;gm)</argsstring>
        <name>guild_edit_member_sync</name>
        <param>
          <type>const guild_member &amp;</type>
          <declname>gm</declname>
        </param>
        <briefdescription>
<para>Edit the properties of an existing guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify attributes of a guild member. Returns the guild_member. Fires a <computeroutput>Guild Member Update Gateway</computeroutput> event. If the <computeroutput>channel_id</computeroutput> is set to 0, this will force the target user to be disconnected from voice. To remove a timeout, set the <computeroutput>communication_disabled_until</computeroutput> to a non-zero time in the past, e.g. 1. When moving members to channels, the API user must have permissions to both connect to the channel and have the <computeroutput>MOVE_MEMBERS</computeroutput> permission. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gm</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild member to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_member returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad793626d2733715381c3c5c440f31bd0" kindref="member">dpp::cluster::guild_edit_member</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1075" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1075" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a1f78587049cac058d4d4dcb63f8ab987" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_member</type>
        <definition>guild_member guild_get_member_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>guild_get_member_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-member">https://discord.com/developers/docs/resources/guild#get-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get member for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of member to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_member returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a99e8227f11ef33cd2d9cc3abef46adfd" kindref="member">dpp::cluster::guild_get_member</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1090" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1090" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aa94fc2c644808aa8ca570fbd24ffe209" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_member_map</type>
        <definition>guild_member_map guild_get_members_sync</definition>
        <argsstring>(snowflake guild_id, uint16_t limit, snowflake after)</argsstring>
        <name>guild_get_members_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>after</declname>
        </param>
        <briefdescription>
<para>Get all guild members. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint is restricted according to whether the <computeroutput>GUILD_MEMBERS</computeroutput> Privileged Intent is enabled for your application. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-members">https://discord.com/developers/docs/resources/guild#get-guild-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get all members for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of members to return (1-1000) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>the highest user id in the previous page </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_member_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6b24baba4de9d38f7d9a7cea2f71a545" kindref="member">dpp::cluster::guild_get_members</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1108" column="25" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1108" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a71e5cd442880ff73b4cc4bd4bf2ac346" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_member_add_role_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id)</argsstring>
        <name>guild_member_add_role_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Add role to guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a role to a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a Guild Member Update Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#add-guild-member-role">https://discord.com/developers/docs/resources/guild#add-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to add a role to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to add role to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role ID to add to the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aeffb7f4f32ca342886a79692ed8fb416" kindref="member">dpp::cluster::guild_member_add_role</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1128" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1128" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aa8221744be81a0696a8124467e6145a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_member_delete_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>guild_member_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Remove (kick) a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove a member from a guild. Requires <computeroutput>KICK_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Member Remove</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member">https://discord.com/developers/docs/resources/guild#remove-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to kick member from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to kick </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a40788ea66fddce18336fb53ff8a2a6b1" kindref="member">dpp::cluster::guild_member_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1147" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1147" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aa2e1667b47f46137b0abf1a994821da8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_member_delete_role_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id)</argsstring>
        <name>guild_member_delete_role_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Remove role from guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes a role from a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member-role">https://discord.com/developers/docs/resources/guild#remove-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to remove role from user on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove role from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a98e8223a62f31bb716c326ff59f67576" kindref="member">dpp::cluster::guild_member_delete_role</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1167" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1167" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1abf8cf09e2e52018299f14f71ca1da5c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_member</type>
        <definition>guild_member guild_member_move_sync</definition>
        <argsstring>(const snowflake channel_id, const snowflake guild_id, const snowflake user_id)</argsstring>
        <name>guild_member_move_sync</name>
        <param>
          <type>const snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Moves the guild member to a other voice channel, if member is connected to one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the channel to which the user is used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id to which the user is connected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User id, who should be moved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_member returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac673fb500731954ad50e90de70b2fd03" kindref="member">dpp::cluster::guild_member_move</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1183" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1183" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a33520747ebe8e62b47bbc177bc15d09d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_member_map</type>
        <definition>guild_member_map guild_search_members_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;query, uint16_t limit)</argsstring>
        <name>guild_search_members_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Search for guild members based on whether their username or nickname starts with the given string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint is restricted according to whether the <computeroutput>GUILD_MEMBERS</computeroutput> Privileged Intent is enabled for your application. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#search-guild-members">https://discord.com/developers/docs/resources/guild#search-guild-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to search in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>Query string to match username(s) and nickname(s) against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of members to return (1-1000) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_member_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a52cc92ce052d063854e0372539e4d9ee" kindref="member">dpp::cluster::guild_search_members</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1201" column="25" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1201" bodyend="1203"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a7e224a9dbbb971e0e365db9428780881" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>invite_map</type>
        <definition>invite_map guild_get_invites_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_invites_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild invites. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of invite objects (with invite metadata) for the guild. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-invites">https://discord.com/developers/docs/resources/guild#get-guild-invites</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get invites for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a93c0e07243611419141305da123c859a" kindref="member">dpp::cluster::guild_get_invites</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1218" column="19" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1218" bodyend="1220"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ad87c76482eab726d7b5a6bb947e1840b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>invite</type>
        <definition>invite invite_delete_sync</definition>
        <argsstring>(const std::string &amp;invitecode)</argsstring>
        <name>invite_delete_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>invitecode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1223" column="15" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1223" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1af0060e83a70b060bc7f7186dd489d76f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>invite</type>
        <definition>invite invite_get_sync</definition>
        <argsstring>(const std::string &amp;invitecode)</argsstring>
        <name>invite_get_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>invitecode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1228" column="15" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1228" bodyend="1230"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ac9bb936b7c3ee23ebf392e57b0541885" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>message</type>
        <definition>message message_create_sync</definition>
        <argsstring>(const message &amp;m)</argsstring>
        <name>message_create_sync</name>
        <param>
          <type>const message &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Send a message to a channel. The callback function is called when the message has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-message">https://discord.com/developers/docs/resources/channel#create-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa6ae3dc32ebc2dd14264962710d35af7" kindref="member">dpp::cluster::message_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1243" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1243" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a6e94df1c101df8ef23a83037a90aa9e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>message</type>
        <definition>message message_crosspost_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>message_crosspost_sync</name>
        <param>
          <type>snowflake</type>
          <declname>message_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Crosspost a message. The callback function is called when the message has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#crosspost-message">https://discord.com/developers/docs/resources/channel#crosspost-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to crosspost </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to crosspost from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab67f05b1b4b4bd3ea97a6bafc3b7151d" kindref="member">dpp::cluster::message_crosspost</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1259" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1259" bodyend="1261"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a6c36ad5bd3b5ea099bd025e9ad09bda8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation message_delete_bulk_sync</definition>
        <argsstring>(const std::vector&lt; snowflake &gt; &amp;message_ids, snowflake channel_id)</argsstring>
        <name>message_delete_bulk_sync</name>
        <param>
          <type>const std::vector&lt; snowflake &gt; &amp;</type>
          <declname>message_ids</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Bulk delete messages from a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method.</para>
</simplesect>
<simplesect kind="note"><para>If any message provided older than 2 weeks or any duplicate message ID, it will fail.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#bulk-delete-messages">https://discord.com/developers/docs/resources/channel#bulk-delete-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>List of message IDs to delete (at least 2 and at most 100 message IDs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a945ff67bd26bdb38e74192389a660cb1" kindref="member">dpp::cluster::message_delete_bulk</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1278" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1278" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a5883ba9a11a360bcd0e2b0e79f99a448" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation message_delete_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>message_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>message_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete a message from a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-message">https://discord.com/developers/docs/resources/channel#delete-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3aa3ef912199ea0ebac49dfe1cf5cd2f" kindref="member">dpp::cluster::message_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1295" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1295" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a68d80b08dd8ffb73bc2e2db178a3baf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>message</type>
        <definition>message message_edit_sync</definition>
        <argsstring>(const message &amp;m)</argsstring>
        <name>message_edit_sync</name>
        <param>
          <type>const message &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit a message on a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#edit-message">https://discord.com/developers/docs/resources/channel#edit-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a173ff389feb4f48ac67a8c037081b2d5" kindref="member">dpp::cluster::message_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1310" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1310" bodyend="1312"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1adfd84a3dcf55fbbecf72fe0b412d7dcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>message</type>
        <definition>message message_get_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>message_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>message_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel-message">https://discord.com/developers/docs/resources/channel#get-channel-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9d3b0f7c3dae4ecb1980cabe8f10ccd7" kindref="member">dpp::cluster::message_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1326" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1326" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab25380f93d6a7f1c25b39b6f073639be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation message_pin_sync</definition>
        <argsstring>(snowflake channel_id, snowflake message_id)</argsstring>
        <name>message_pin_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>message_id</declname>
        </param>
        <briefdescription>
<para>Pin a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#pin-message">https://discord.com/developers/docs/resources/channel#pin-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to pin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message id to pin message on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0530fdfa85085ad367a6666386968ac4" kindref="member">dpp::cluster::message_pin</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1342" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1342" bodyend="1344"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a795ac11245e689599fb24f9e5a6a060d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>message_map</type>
        <definition>message_map messages_get_sync</definition>
        <argsstring>(snowflake channel_id, snowflake around, snowflake before, snowflake after, uint64_t limit)</argsstring>
        <name>messages_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>around</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>before</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>after</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get multiple messages. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will attempt to fetch as many messages as possible using multiple API calls if needed.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel-messages">https://discord.com/developers/docs/resources/channel#get-channel-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to retrieve messages for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>around</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages should be retrieved around this ID if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages after this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of messages maximum should be returned, up to a maximum of 100. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad471be0405745e32f130a2bfcd371c73" kindref="member">dpp::cluster::messages_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1363" column="20" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1363" bodyend="1365"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab678ce2a5961a13562e37ff9d1ddc174" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation message_unpin_sync</definition>
        <argsstring>(snowflake channel_id, snowflake message_id)</argsstring>
        <name>message_unpin_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>message_id</declname>
        </param>
        <briefdescription>
<para>Unpin a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#unpin-message">https://discord.com/developers/docs/resources/channel#unpin-message</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to unpin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message id to unpin message on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aaf055f95bc7ce80ff06cff9956bddca5" kindref="member">dpp::cluster::message_unpin</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1379" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1379" bodyend="1381"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a6cfc3aa580dd523b6e357eebfd757159" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>message_map</type>
        <definition>message_map channel_pins_get_sync</definition>
        <argsstring>(snowflake channel_id)</argsstring>
        <name>channel_pins_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get a channel&apos;s pins. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-pinned-messages">https://discord.com/developers/docs/resources/channel#get-pinned-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to get pins for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a553bfda3b4f1671e75c5713275b781bd" kindref="member">dpp::cluster::channel_pins_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1393" column="20" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1393" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a8fa5c60e4a435244d30e2fea4bbc3dca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>role</type>
        <definition>role role_create_sync</definition>
        <argsstring>(const class role &amp;r)</argsstring>
        <name>role_create_sync</name>
        <param>
          <type>const class role &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Create a role on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new role for the guild. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Returns the new role object on success. Fires a <computeroutput>Guild Role Create</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild-role">https://discord.com/developers/docs/resources/guild#create-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to create (guild ID is encapsulated in the role object) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a849017410297379997601daac5e99ce1" kindref="member">dpp::cluster::role_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1412" column="13" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1412" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab7fe97b155a1139d5cd93a473e03c3e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation role_delete_sync</definition>
        <argsstring>(snowflake guild_id, snowflake role_id)</argsstring>
        <name>role_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Delete a role. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Role Delete</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild-role">https://discord.com/developers/docs/resources/guild#delete-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete the role on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6d4cdab9c22eefdeba0d28105c006b2b" kindref="member">dpp::cluster::role_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1431" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1431" bodyend="1433"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a95decd52461e3be9c15d94d6ee5defbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>role</type>
        <definition>role role_edit_sync</definition>
        <argsstring>(const class role &amp;r)</argsstring>
        <name>role_edit_sync</name>
        <param>
          <type>const class role &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Edit a role on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Returns the updated role on success. Fires a <computeroutput>Guild Role Update</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-role">https://discord.com/developers/docs/resources/guild#modify-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab6bc6ef9b6f1ef9aa5b9c1391ccedbf5" kindref="member">dpp::cluster::role_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1449" column="13" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1449" bodyend="1451"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab4f1d985f90ff65362e687978abef6cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>role_map</type>
        <definition>role_map roles_edit_position_sync</definition>
        <argsstring>(snowflake guild_id, const std::vector&lt; role &gt; &amp;roles)</argsstring>
        <name>roles_edit_position_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; role &gt; &amp;</type>
          <declname>roles</declname>
        </param>
        <briefdescription>
<para>Edit multiple role&apos;s position in a guild. Returns a list of all roles of the guild on success. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify the positions of a set of role objects for the guild. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires multiple <computeroutput>Guild Role Update</computeroutput> Gateway events.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-role-positions">https://discord.com/developers/docs/resources/guild#modify-guild-role-positions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change the roles position on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roles</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of roles to change the positions of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3549d2ebe52210d7b98adeb766b968b1" kindref="member">dpp::cluster::roles_edit_position</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1469" column="17" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1469" bodyend="1471"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a4e9bb5386f8edd51c6f8c34653d74ac3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>role_map</type>
        <definition>role_map roles_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>roles_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get a role for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-roles">https://discord.com/developers/docs/resources/guild#get-guild-roles</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get role for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a884dbb70619fcf92b06577dea8093219" kindref="member">dpp::cluster::roles_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1484" column="17" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1484" bodyend="1486"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aade42f057ced1493a3c7c59f39659844" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>scheduled_event_map</type>
        <definition>scheduled_event_map guild_events_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_events_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all scheduled events for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild">https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get events for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>scheduled_event_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae8554f93aed5fb84162af41c997fc1e3" kindref="member">dpp::cluster::guild_events_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1498" column="28" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1498" bodyend="1500"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a6d3a0ffeffd167c57099d98e202b6c25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>scheduled_event</type>
        <definition>scheduled_event guild_event_create_sync</definition>
        <argsstring>(const scheduled_event &amp;event)</argsstring>
        <name>guild_event_create_sync</name>
        <param>
          <type>const scheduled_event &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Create a scheduled event on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to create (guild ID must be populated) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>scheduled_event returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a360bf7b9dd6b27774be3706a1176f8f3" kindref="member">dpp::cluster::guild_event_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1513" column="24" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1513" bodyend="1515"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a1748760125e3f9829f2d49e8e5c3f983" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_event_delete_sync</definition>
        <argsstring>(snowflake event_id, snowflake guild_id)</argsstring>
        <name>guild_event_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>event_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a scheduled event from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of event to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a513c773562fbd9997141c5b317be8087" kindref="member">dpp::cluster::guild_event_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1529" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1529" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a964ab2b864033d0992f8fa01eb6603e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>scheduled_event</type>
        <definition>scheduled_event guild_event_edit_sync</definition>
        <argsstring>(const scheduled_event &amp;event)</argsstring>
        <name>guild_event_edit_sync</name>
        <param>
          <type>const scheduled_event &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Edit/modify a scheduled event on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to create (event ID and guild ID must be populated) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>scheduled_event returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a338867a84983e985b77829f0d9ccb34c" kindref="member">dpp::cluster::guild_event_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1544" column="24" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1544" bodyend="1546"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab71e5419bee86ee4afec0870e0ce8a54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>scheduled_event</type>
        <definition>scheduled_event guild_event_get_sync</definition>
        <argsstring>(snowflake guild_id, snowflake event_id)</argsstring>
        <name>guild_event_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>event_id</declname>
        </param>
        <briefdescription>
<para>Get a scheduled event for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get event for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>scheduled_event returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5b8c168682519ee125ed0a48239c08ef" kindref="member">dpp::cluster::guild_event_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1560" column="24" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1560" bodyend="1562"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a0e23511c53bdc55934c20e1951b45d3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>stage_instance</type>
        <definition>stage_instance stage_instance_create_sync</definition>
        <argsstring>(const stage_instance &amp;si)</argsstring>
        <name>stage_instance_create_sync</name>
        <param>
          <type>const stage_instance &amp;</type>
          <declname>si</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1565" column="23" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1565" bodyend="1567"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a7620cfb5b51cf091b5c2d4ed6cc19884" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>stage_instance</type>
        <definition>stage_instance stage_instance_get_sync</definition>
        <argsstring>(const snowflake channel_id)</argsstring>
        <name>stage_instance_get_sync</name>
        <param>
          <type>const snowflake</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get the stage instance associated with the channel id, if it exists. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/stage-instance#get-stage-instance">https://discord.com/developers/docs/resources/stage-instance#get-stage-instance</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the associated channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>stage_instance returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a1edd6ac5d8553b4823465bebadfaa9af" kindref="member">dpp::cluster::stage_instance_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1579" column="23" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1579" bodyend="1581"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a523b8eba29b678c0c4c8504a13b0a273" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>stage_instance</type>
        <definition>stage_instance stage_instance_edit_sync</definition>
        <argsstring>(const stage_instance &amp;si)</argsstring>
        <name>stage_instance_edit_sync</name>
        <param>
          <type>const stage_instance &amp;</type>
          <declname>si</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1584" column="23" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1584" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a3de0179783edd7785ee4a21d192571f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation stage_instance_delete_sync</definition>
        <argsstring>(const snowflake channel_id)</argsstring>
        <name>stage_instance_delete_sync</name>
        <param>
          <type>const snowflake</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete a stage instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/stage-instance#delete-stage-instance">https://discord.com/developers/docs/resources/stage-instance#delete-stage-instance</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the associated channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a2b4391d87cad53c95e869400534fbd2e" kindref="member">dpp::cluster::stage_instance_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1599" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1599" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a572f7c4f7e8b002e0fa2a7751da230da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>sticker</type>
        <definition>sticker guild_sticker_create_sync</definition>
        <argsstring>(sticker &amp;s)</argsstring>
        <name>guild_sticker_create_sync</name>
        <param>
          <type>sticker &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Create a sticker in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#create-guild-sticker">https://discord.com/developers/docs/resources/sticker#create-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Sticker to create. Must have its guild ID set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aeb8940333b26baa357441b969b625c74" kindref="member">dpp::cluster::guild_sticker_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1614" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1614" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab054c959a6a0528d12380093fec98c4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_sticker_delete_sync</definition>
        <argsstring>(snowflake sticker_id, snowflake guild_id)</argsstring>
        <name>guild_sticker_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>sticker_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a sticker from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#delete-guild-sticker">https://discord.com/developers/docs/resources/sticker#delete-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sticker_id</parametername>
</parameternamelist>
<parameterdescription>
<para>sticker ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>guild ID to delete from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa93a97a167922bb0a40c6489a928d4fa" kindref="member">dpp::cluster::guild_sticker_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1630" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1630" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ac116541a0983b35acf418bdd0086581d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>sticker</type>
        <definition>sticker guild_sticker_get_sync</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>guild_sticker_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get a guild sticker. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-guild-sticker">https://discord.com/developers/docs/resources/sticker#get-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of sticker to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of the guild where the sticker is </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac7a2d335385b4689e7489d0eaf4475fe" kindref="member">dpp::cluster::guild_sticker_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1645" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1645" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1afc714011eed1186b55c38942192a2c41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>sticker</type>
        <definition>sticker guild_sticker_modify_sync</definition>
        <argsstring>(sticker &amp;s)</argsstring>
        <name>guild_sticker_modify_sync</name>
        <param>
          <type>sticker &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify a sticker in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#modify-guild-sticker">https://discord.com/developers/docs/resources/sticker#modify-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Sticker to modify. Must have its guild ID and sticker ID set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a581e2fbee09e76bf9bdbd81befd95c9c" kindref="member">dpp::cluster::guild_sticker_modify</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1660" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1660" bodyend="1662"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a7665fd32a1c71218bd6fed3e69b3ad9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>sticker_map</type>
        <definition>sticker_map guild_stickers_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_stickers_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all guild stickers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-guild-stickers">https://discord.com/developers/docs/resources/sticker#get-guild-stickers</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of the guild where the sticker is </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1adccd1468d3f031c5bc786fdbd087d0a2" kindref="member">dpp::cluster::guild_stickers_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1674" column="20" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1674" bodyend="1676"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ad5636998161cc4ebdf4b6fb5040f9e7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>sticker</type>
        <definition>sticker nitro_sticker_get_sync</definition>
        <argsstring>(snowflake id)</argsstring>
        <name>nitro_sticker_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a nitro sticker. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-sticker">https://discord.com/developers/docs/resources/sticker#get-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of sticker to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a115a49075ceb1817f1e81fc9388bf65e" kindref="member">dpp::cluster::nitro_sticker_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1688" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1688" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a34eaca67acfb23c14ac444a83f1d47c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>sticker_pack_map</type>
        <definition>sticker_pack_map sticker_packs_get_sync</definition>
        <argsstring>()</argsstring>
        <name>sticker_packs_get_sync</name>
        <briefdescription>
<para>Get sticker packs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#list-nitro-sticker-packs">https://discord.com/developers/docs/resources/sticker#list-nitro-sticker-packs</ulink> </para>
</simplesect>
<simplesect kind="return"><para>sticker_pack_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae64421a4b2402238feb0536639009c18" kindref="member">dpp::cluster::sticker_packs_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1701" column="25" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1701" bodyend="1703"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1abd034a34d7428cd43d6f3891cb8f828a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild</type>
        <definition>guild guild_create_from_template_sync</definition>
        <argsstring>(const std::string &amp;code, const std::string &amp;name)</argsstring>
        <name>guild_create_from_template_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a new guild based on a template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint can be used only by bots in less than 10 guilds. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#create-guild-from-guild-template">https://discord.com/developers/docs/resources/guild-template#create-guild-from-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to create guild from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild name to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3124bdcf2432f3880f78914037f9e87e" kindref="member">dpp::cluster::guild_create_from_template</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1717" column="14" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1717" bodyend="1719"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab6efbc6878f3e599de0ea4a60ffc6e5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtemplate</type>
        <definition>dtemplate guild_template_create_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;name, const std::string &amp;description)</argsstring>
        <name>guild_template_create_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Creates a template for the guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#create-guild-template">https://discord.com/developers/docs/resources/guild-template#create-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to create template from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Template name to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of template to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a38db2ce96431b742e98cabf8170a84d7" kindref="member">dpp::cluster::guild_template_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1734" column="18" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1734" bodyend="1736"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1acabbe3b11bfece6a47b95d375d721cac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation guild_template_delete_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code)</argsstring>
        <name>guild_template_delete_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Deletes the template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#delete-guild-template">https://discord.com/developers/docs/resources/guild-template#delete-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of template to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8527d66d4e1b2996c495d1196c6af718" kindref="member">dpp::cluster::guild_template_delete</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1750" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1750" bodyend="1752"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a90f939be4b880a2ee5ff099aaa90cd72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtemplate</type>
        <definition>dtemplate guild_template_modify_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code, const std::string &amp;name, const std::string &amp;description)</argsstring>
        <name>guild_template_modify_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Modifies the template&apos;s metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#modify-guild-template">https://discord.com/developers/docs/resources/guild-template#modify-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of template to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>New name of template </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>New description of template </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5db4327a5ad614adc419db6ff7b7bc17" kindref="member">dpp::cluster::guild_template_modify</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1768" column="18" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1768" bodyend="1770"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1acc12378fb3059bff6906c8be0bc1f10e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtemplate_map</type>
        <definition>dtemplate_map guild_templates_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_templates_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild templates. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#get-guild-templates">https://discord.com/developers/docs/resources/guild-template#get-guild-templates</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get templates for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a1faa321ede15b209c789ea1155a3d356" kindref="member">dpp::cluster::guild_templates_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1783" column="22" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1783" bodyend="1785"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a4a07438d33153ee88588315cd4b1b838" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtemplate</type>
        <definition>dtemplate guild_template_sync_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code)</argsstring>
        <name>guild_template_sync_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Syncs the template to the guild&apos;s current state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#sync-guild-template">https://discord.com/developers/docs/resources/guild-template#sync-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to synchronise template for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Code of template to synchronise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af115bd1c7fe12eba1c12d90d5971d10b" kindref="member">dpp::cluster::guild_template_sync</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1799" column="18" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1799" bodyend="1801"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a0c79f31f217eb4d22c2f5192d562c241" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>dtemplate</type>
        <definition>dtemplate template_get_sync</definition>
        <argsstring>(const std::string &amp;code)</argsstring>
        <name>template_get_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Get a template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#get-guild-template">https://discord.com/developers/docs/resources/guild-template#get-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a52366e37144b166c6a2c773e14992b21" kindref="member">dpp::cluster::template_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1813" column="18" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1813" bodyend="1815"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aa03b55f7a28ea8d4d520c9d255c87e3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation current_user_join_thread_sync</definition>
        <argsstring>(snowflake thread_id)</argsstring>
        <name>current_user_join_thread_sync</name>
        <param>
          <type>snowflake</type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Join a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to join </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa62bc561994b7222712583e46cb68799" kindref="member">dpp::cluster::current_user_join_thread</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1827" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1827" bodyend="1829"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1acb305d660acf37bbccab5da34bb170b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation current_user_leave_thread_sync</definition>
        <argsstring>(snowflake thread_id)</argsstring>
        <name>current_user_leave_thread_sync</name>
        <param>
          <type>snowflake</type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Leave a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to leave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3a313be1a4fd6bde99606047761c4518" kindref="member">dpp::cluster::current_user_leave_thread</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1841" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1841" bodyend="1843"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab12aa11ffa3cbad10c99be73f1ee1694" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>thread_map</type>
        <definition>thread_map threads_get_active_sync</definition>
        <argsstring>(snowflake channel_id)</argsstring>
        <name>threads_get_active_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get active threads in a channel (Sorted by ID in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get active threads for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6825c29651e995f251e01f5a1f20122d" kindref="member">dpp::cluster::threads_get_active</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1855" column="19" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1855" bodyend="1857"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ac14ada29643bb656707e563f4276d8f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>thread_map</type>
        <definition>thread_map threads_get_joined_private_archived_sync</definition>
        <argsstring>(snowflake channel_id, snowflake before_id, uint16_t limit)</argsstring>
        <name>threads_get_joined_private_archived_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>before_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get private archived threads in a channel which current user has joined (Sorted by ID in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads before this id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0d0c3894cd560fa7871f22d7cfb8f591" kindref="member">dpp::cluster::threads_get_joined_private_archived</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1871" column="19" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1871" bodyend="1873"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a9a2345e6409379314b17651e3d317433" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>thread_map</type>
        <definition>thread_map threads_get_private_archived_sync</definition>
        <argsstring>(snowflake channel_id, time_t before_timestamp, uint16_t limit)</argsstring>
        <name>threads_get_private_archived_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>before_timestamp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get private archived threads in a channel (Sorted by archive_timestamp in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads before this timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae8336e48eaabaeb8df4d69a087982e82" kindref="member">dpp::cluster::threads_get_private_archived</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1887" column="19" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1887" bodyend="1889"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a8f2416efc41ff2d42e15a6436c892ac6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>thread_map</type>
        <definition>thread_map threads_get_public_archived_sync</definition>
        <argsstring>(snowflake channel_id, time_t before_timestamp, uint16_t limit)</argsstring>
        <name>threads_get_public_archived_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>before_timestamp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get public archived threads in a channel (Sorted by archive_timestamp in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads before this timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a2b93e8be30c7e954c27e19d8b7fa8170" kindref="member">dpp::cluster::threads_get_public_archived</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1903" column="19" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1903" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a847982d8771848b3320ae01dcf00613a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>thread_member</type>
        <definition>thread_member thread_member_get_sync</definition>
        <argsstring>(const snowflake thread_id, const snowflake user_id)</argsstring>
        <name>thread_member_get_sync</name>
        <param>
          <type>const snowflake</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>const snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a thread member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to get member for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the user to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_member returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad39edec2f1389d1aa5bb6c09e4318b6a" kindref="member">dpp::cluster::thread_member_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1918" column="22" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1918" bodyend="1920"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ae202a0e3a374128dea543d389df3abc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>thread_member_map</type>
        <definition>thread_member_map thread_members_get_sync</definition>
        <argsstring>(snowflake thread_id)</argsstring>
        <name>thread_members_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Get members of a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to get members for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_member_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a636b55f518a2e724eabf31453aa89abe" kindref="member">dpp::cluster::thread_members_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1932" column="26" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1932" bodyend="1934"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a9c9e0664dfa968c78d5032131fbd95d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>thread</type>
        <definition>thread thread_create_sync</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, uint16_t auto_archive_duration, channel_type thread_type, bool invitable, uint16_t rate_limit_per_user)</argsstring>
        <name>thread_create_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type>channel_type</type>
          <declname>thread_type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invitable</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <briefdescription>
<para>Create a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild-channel">https://discord.com/developers/docs/resources/guild#create-guild-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration after which thread auto-archives. Can be set to - 60, 1440 (for boosted guilds can also be: 4320, 10080) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of thread - GUILD_PUBLIC_THREAD, GUILD_NEWS_THREAD, GUILD_PRIVATE_THREAD </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invitable</parametername>
</parameternamelist>
<parameterdescription>
<para>whether non-moderators can add other non-moderators to a thread; only available when creating a private thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0c41c2fada744b16b48d8a5538e19fc5" kindref="member">dpp::cluster::thread_create</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1953" column="15" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1953" bodyend="1955"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aaabebadaa9d9e560130383f6c137fa20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>thread</type>
        <definition>thread thread_create_with_message_sync</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, snowflake message_id, uint16_t auto_archive_duration, uint16_t rate_limit_per_user)</argsstring>
        <name>thread_create_with_message_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>message_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <briefdescription>
<para>Create a thread with a message (Discord: ID of a thread is same as message ID) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>message to start thread with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration after which thread auto-archives. Can be set to - 60, 1440 (for boosted guilds can also be: 4320, 10080) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1adf113903aeca27e9994fb366486250d1" kindref="member">dpp::cluster::thread_create_with_message</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1972" column="15" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1972" bodyend="1974"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a4d4f3a36cc48c7ba3a7cbd80faa4bad4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation thread_member_add_sync</definition>
        <argsstring>(snowflake thread_id, snowflake user_id)</argsstring>
        <name>thread_member_add_sync</name>
        <param>
          <type>snowflake</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Add a member to a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to add to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Member ID to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a905fa0c06477d9d9ecd4a536b54d21aa" kindref="member">dpp::cluster::thread_member_add</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1987" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="1987" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a076937e5ba367efe37ad424d0eb607f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation thread_member_remove_sync</definition>
        <argsstring>(snowflake thread_id, snowflake user_id)</argsstring>
        <name>thread_member_remove_sync</name>
        <param>
          <type>snowflake</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Remove a member from a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/thread">https://discord.com/developers/docs/topics/thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to remove from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Member ID to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a754ae607b98b27d54f344db908836c46" kindref="member">dpp::cluster::thread_member_remove</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2002" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2002" bodyend="2004"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab523e2b46f099658f320c1a027a63735" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>user</type>
        <definition>user current_user_edit_sync</definition>
        <argsstring>(const std::string &amp;nickname, const std::string &amp;image_blob, const image_type type)</argsstring>
        <name>current_user_edit_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>image_blob</declname>
        </param>
        <param>
          <type>const image_type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Edit current (bot) user. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the current member in a guild. Returns the updated guild_member object on success. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#modify-current-user">https://discord.com/developers/docs/resources/user#modify-current-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>Avatar data to upload (NOTE: Very heavily rate limited!) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of image for avatar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>user returned object on completion </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Image data is larger than the maximum size of 256 kilobytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a114d7930f0a219ef974143b65134a2f8" kindref="member">dpp::cluster::current_user_edit</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2022" column="13" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2022" bodyend="2024"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a9415ab3a369fec24966bbd78a0e8dad5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>application</type>
        <definition>application current_application_get_sync</definition>
        <argsstring>()</argsstring>
        <name>current_application_get_sync</name>
        <briefdescription>
<para>Get current (bot) application. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/oauth2#get-current-bot-application-information">https://discord.com/developers/docs/topics/oauth2#get-current-bot-application-information</ulink> </para>
</simplesect>
<simplesect kind="return"><para>application returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac3dc39069aaaa492727f39b35edd957e" kindref="member">dpp::cluster::current_application_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2036" column="20" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2036" bodyend="2038"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ade2ed7a7dff856ad35728d7128da97b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>user_identified</type>
        <definition>user_identified current_user_get_sync</definition>
        <argsstring>()</argsstring>
        <name>current_user_get_sync</name>
        <briefdescription>
<para>Get current (bot) user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-current-user">https://discord.com/developers/docs/resources/user#get-current-user</ulink> </para>
</simplesect>
<simplesect kind="return"><para>user_identified returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>The user_identified object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a user_identified to user with <computeroutput>dynamic_cast</computeroutput>. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aad927e85ed6b99e9b05f4190f1b19cae" kindref="member">dpp::cluster::current_user_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2052" column="24" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2052" bodyend="2054"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a519010bef221e57fb52915a060fe428d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation current_user_set_voice_state_sync</definition>
        <argsstring>(snowflake guild_id, snowflake channel_id, bool suppress, time_t request_to_speak_timestamp)</argsstring>
        <name>current_user_set_voice_state_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>request_to_speak_timestamp</declname>
        </param>
        <briefdescription>
<para>Set the bot&apos;s voice state on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Caveats</bold></para>
<para>There are currently several caveats for this endpoint:</para>
<para><itemizedlist>
<listitem><para><computeroutput>channel_id</computeroutput> must currently point to a stage channel.</para>
</listitem><listitem><para>current user must already have joined <computeroutput>channel_id</computeroutput>.</para>
</listitem><listitem><para>You must have the <computeroutput>MUTE_MEMBERS</computeroutput> permission to unsuppress yourself. You can always suppress yourself.</para>
</listitem><listitem><para>You must have the <computeroutput>REQUEST_TO_SPEAK</computeroutput> permission to request to speak. You can always clear your own request to speak.</para>
</listitem><listitem><para>You are able to set <computeroutput>request_to_speak_timestamp</computeroutput> to any present or future time.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-user-voice-state">https://discord.com/developers/docs/resources/guild#modify-current-user-voice-state</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to set voice state on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage channel to set voice state on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the user&apos;s audio should be suppressed, false if it should not </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_to_speak_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The time at which we requested to speak, or 0 to clear the request. The time set here must be the current time or in the future. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_exception</parametername>
</parameternamelist>
<parameterdescription>
<para>You attempted to set a request_to_speak_timestamp in the past which is not the value of 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad611ecc2a6231c4bc100e74c1f28ee75" kindref="member">dpp::cluster::current_user_set_voice_state</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2081" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2081" bodyend="2083"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a7a33716c2aa99868889062c308ea9841" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation user_set_voice_state_sync</definition>
        <argsstring>(snowflake user_id, snowflake guild_id, snowflake channel_id, bool suppress)</argsstring>
        <name>user_set_voice_state_sync</name>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
        </param>
        <briefdescription>
<para>Set a user&apos;s voice state on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Caveats</bold></para>
<para>There are currently several caveats for this endpoint:</para>
<para><itemizedlist>
<listitem><para><computeroutput>channel_id</computeroutput> must currently point to a stage channel.</para>
</listitem><listitem><para>User must already have joined <computeroutput>channel_id</computeroutput>.</para>
</listitem><listitem><para>You must have the <computeroutput>MUTE_MEMBERS</computeroutput> permission. (Since suppression is the only thing that is available currently)</para>
</listitem><listitem><para>When unsuppressed, non-bot users will have their <computeroutput>request_to_speak_timestamp</computeroutput> set to the current time. Bot users will not.</para>
</listitem><listitem><para>When suppressed, the user will have their <computeroutput>request_to_speak_timestamp</computeroutput> removed.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-user-voice-state">https://discord.com/developers/docs/resources/guild#modify-user-voice-state</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The user to set the voice state of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to set voice state on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage channel to set voice state on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the user&apos;s audio should be suppressed, false if it should not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a66c65f30625391586fd4cf6614b6a1df" kindref="member">dpp::cluster::user_set_voice_state</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2109" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2109" bodyend="2111"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a665a81f6488e96e4b9687cb41677407d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>connection_map</type>
        <definition>connection_map current_user_connections_get_sync</definition>
        <argsstring>()</argsstring>
        <name>current_user_connections_get_sync</name>
        <briefdescription>
<para>Get current user&apos;s connections (linked accounts, e.g. steam, xbox). This call requires the oauth2 <computeroutput>connections</computeroutput> scope and cannot be executed against a bot token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user-connections">https://discord.com/developers/docs/resources/user#get-user-connections</ulink> </para>
</simplesect>
<simplesect kind="return"><para>connection_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a75e1e5dd813d36fffd6b532ed1b31178" kindref="member">dpp::cluster::current_user_connections_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2124" column="23" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2124" bodyend="2126"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1acb1aafd9420be17385755602215212bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>guild_map</type>
        <definition>guild_map current_user_get_guilds_sync</definition>
        <argsstring>()</argsstring>
        <name>current_user_get_guilds_sync</name>
        <briefdescription>
<para>Get current (bot) user guilds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-current-user-guilds">https://discord.com/developers/docs/resources/user#get-current-user-guilds</ulink> </para>
</simplesect>
<simplesect kind="return"><para>guild_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a93c8fd5f22e0eae6bf357ad498b43f87" kindref="member">dpp::cluster::current_user_get_guilds</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2137" column="18" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2137" bodyend="2139"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a2471c9c6c18e0a1b195f089aa4ab8d23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation current_user_leave_guild_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>current_user_leave_guild_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Leave a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#leave-guild">https://discord.com/developers/docs/resources/user#leave-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to leave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4fd6cc6c6635e6e0a9bdddcc6cda0e97" kindref="member">dpp::cluster::current_user_leave_guild</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2151" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2151" bodyend="2153"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a0cc14588d1827a4f770a28ab618f1f55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>user_identified</type>
        <definition>user_identified user_get_sync</definition>
        <argsstring>(snowflake user_id)</argsstring>
        <name>user_get_sync</name>
        <param>
          <type>snowflake</type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a user by id. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user">https://discord.com/developers/docs/resources/user#get-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>user_identified returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>The user_identified object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a user_identified to user with <computeroutput>dynamic_cast</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>unless you want something special from <computeroutput><ref refid="classdpp_1_1user__identified" kindref="compound">dpp::user_identified</ref></computeroutput> or you&apos;ve turned off caching, you have no need to call this. Call <computeroutput><ref refid="namespacedpp_1aafb458435d5650149340555ecd43f93f" kindref="member">dpp::find_user</ref></computeroutput> instead that looks up the user in the cache rather than a REST call. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a73483dbeb0f1946dc18b1d0a5331b0d0" kindref="member">dpp::cluster::user_get</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2170" column="24" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2170" bodyend="2172"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a60e18320d10d3a2d589d89f2841da9bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>voiceregion_map</type>
        <definition>voiceregion_map get_voice_regions_sync</definition>
        <argsstring>()</argsstring>
        <name>get_voice_regions_sync</name>
        <briefdescription>
<para>Get all voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/voice#list-voice-regions">https://discord.com/developers/docs/resources/voice#list-voice-regions</ulink> </para>
</simplesect>
<simplesect kind="return"><para>voiceregion_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af6d45a29b3976f7b623d92e70ab9a1bc" kindref="member">dpp::cluster::get_voice_regions</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2183" column="24" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2183" bodyend="2185"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ab4655897576aaaa7e9b3804b39eefb84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>voiceregion_map</type>
        <definition>voiceregion_map guild_get_voice_regions_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_voice_regions_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para>Voice regions per guild are somewhat deprecated in preference of per-channel voice regions. Returns a list of voice region objects for the guild. Unlike the similar /voice route, this returns VIP servers when the guild is VIP-enabled.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-voice-regions">https://discord.com/developers/docs/resources/guild#get-guild-voice-regions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get voice regions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>voiceregion_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae5556385a69a408a268332f774ba6c3c" kindref="member">dpp::cluster::guild_get_voice_regions</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2202" column="24" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2202" bodyend="2204"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a4d4735fdf32903ae005f410bf9899f12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>webhook</type>
        <definition>webhook create_webhook_sync</definition>
        <argsstring>(const class webhook &amp;w)</argsstring>
        <name>create_webhook_sync</name>
        <param>
          <type>const class webhook &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Create a webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#create-webhook">https://discord.com/developers/docs/resources/webhook#create-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a634f650e53df2d3535131870985e0313" kindref="member">dpp::cluster::create_webhook</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2217" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2217" bodyend="2219"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1aa8f65945ec0cb6c01b8ac6e088aa88e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation delete_webhook_sync</definition>
        <argsstring>(snowflake webhook_id)</argsstring>
        <name>delete_webhook_sync</name>
        <param>
          <type>snowflake</type>
          <declname>webhook_id</declname>
        </param>
        <briefdescription>
<para>Delete a webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook">https://discord.com/developers/docs/resources/webhook#delete-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa2f345c51a6a933a29e2e86d50d6a20e" kindref="member">dpp::cluster::delete_webhook</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2232" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2232" bodyend="2234"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a8f5a8ccbcccc00dad67aed13283a996c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation delete_webhook_message_sync</definition>
        <argsstring>(const class webhook &amp;wh, snowflake message_id)</argsstring>
        <name>delete_webhook_message_sync</name>
        <param>
          <type>const class webhook &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>message_id</declname>
        </param>
        <briefdescription>
<para>Delete webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook-message">https://discord.com/developers/docs/resources/webhook#delete-webhook-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to delete message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1abc7a868c350ca4c2b5222bba88144e31" kindref="member">dpp::cluster::delete_webhook_message</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2248" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2248" bodyend="2250"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a171ed6000c31d17fee89633219cd5c0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>confirmation</type>
        <definition>confirmation delete_webhook_with_token_sync</definition>
        <argsstring>(snowflake webhook_id, const std::string &amp;token)</argsstring>
        <name>delete_webhook_with_token_sync</name>
        <param>
          <type>snowflake</type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Delete webhook with token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token">https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token of webhook to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4556a4647c5fd1468fe6918a2f637984" kindref="member">dpp::cluster::delete_webhook_with_token</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2263" column="21" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2263" bodyend="2265"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a988f0b94132e9f604983f72d568aadd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>webhook</type>
        <definition>webhook edit_webhook_sync</definition>
        <argsstring>(const class webhook &amp;wh)</argsstring>
        <name>edit_webhook_sync</name>
        <param>
          <type>const class webhook &amp;</type>
          <declname>wh</declname>
        </param>
        <briefdescription>
<para>Edit webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the cluster::set_audit_reason() method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#modify-webhook">https://discord.com/developers/docs/resources/webhook#modify-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad5039e83f20e5c321b78b319fe7608c0" kindref="member">dpp::cluster::edit_webhook</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2278" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2278" bodyend="2280"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a42e9d5875c6994bfdbec2bf3371b602d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>message</type>
        <definition>message edit_webhook_message_sync</definition>
        <argsstring>(const class webhook &amp;wh, const struct message &amp;m)</argsstring>
        <name>edit_webhook_message_sync</name>
        <param>
          <type>const class webhook &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>const struct message &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para>When the content field is edited, the mentions array in the message object will be reconstructed from scratch based on the new content. The allowed_mentions field of the edit request controls how this happens. If there is no explicit allowed_mentions in the edit request, the content will be parsed with default allowances, that is, without regard to whether or not an allowed_mentions was present in the request that originally created the message.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#edit-webhook-message">https://discord.com/developers/docs/resources/webhook#edit-webhook-message</ulink> </para>
</simplesect>
<simplesect kind="note"><para>the attachments array must contain all attachments that should be present after edit, including retained and new attachments provided in the request body. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>New message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9aad7db0efb749f14c9ffd9b2292b7d6" kindref="member">dpp::cluster::edit_webhook_message</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2300" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2300" bodyend="2302"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1abf835cf724797a64550f2eaf58b8cb64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>webhook</type>
        <definition>webhook edit_webhook_with_token_sync</definition>
        <argsstring>(const class webhook &amp;wh)</argsstring>
        <name>edit_webhook_with_token_sync</name>
        <param>
          <type>const class webhook &amp;</type>
          <declname>wh</declname>
        </param>
        <briefdescription>
<para>Edit webhook with token (token is encapsulated in the webhook object) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token">https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit (should include token) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a40262f5c4ef4a56fe394e91faf0ac8e4" kindref="member">dpp::cluster::edit_webhook_with_token</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2314" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2314" bodyend="2316"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a9c08f71a35a4d12cedf226bf1b1e0d53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>message</type>
        <definition>message execute_webhook_sync</definition>
        <argsstring>(const class webhook &amp;wh, const struct message &amp;m, bool wait, snowflake thread_id)</argsstring>
        <name>execute_webhook_sync</name>
        <param>
          <type>const class webhook &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>const struct message &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait</declname>
        </param>
        <param>
          <type>snowflake</type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Execute webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#execute-webhook">https://discord.com/developers/docs/resources/webhook#execute-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to execute </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait</parametername>
</parameternamelist>
<parameterdescription>
<para>waits for server confirmation of message send before response, and returns the created message body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Send a message to the specified thread within a webhook&apos;s channel. The thread will automatically be unarchived </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af9fbb7174b1dd22e43ee3f4a1db9b63b" kindref="member">dpp::cluster::execute_webhook</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2332" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2332" bodyend="2334"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a44e63c98f4a1e1ab8fd8f4d0a0b1ed81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>webhook_map</type>
        <definition>webhook_map get_channel_webhooks_sync</definition>
        <argsstring>(snowflake channel_id)</argsstring>
        <name>get_channel_webhooks_sync</name>
        <param>
          <type>snowflake</type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get channel webhooks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-guild-webhooks">https://discord.com/developers/docs/resources/webhook#get-guild-webhooks</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to get webhooks for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae58b1f27711b42e9aa8a21e34147429f" kindref="member">dpp::cluster::get_channel_webhooks</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2346" column="20" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2346" bodyend="2348"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a36d081c165e94ddb85dd183e6157199b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>webhook_map</type>
        <definition>webhook_map get_guild_webhooks_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>get_guild_webhooks_sync</name>
        <param>
          <type>snowflake</type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild webhooks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-guild-webhooks">https://discord.com/developers/docs/resources/webhook#get-guild-webhooks</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get webhooks for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook_map returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8d352afcbc0430ca11576386278da7d0" kindref="member">dpp::cluster::get_guild_webhooks</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2360" column="20" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2360" bodyend="2362"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ae524a53b16e42816f94b2bee7ccdda18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>webhook</type>
        <definition>webhook get_webhook_sync</definition>
        <argsstring>(snowflake webhook_id)</argsstring>
        <name>get_webhook_sync</name>
        <param>
          <type>snowflake</type>
          <declname>webhook_id</declname>
        </param>
        <briefdescription>
<para>Get webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook">https://discord.com/developers/docs/resources/webhook#get-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a40e140f1e2eda9632828bce461bc7338" kindref="member">dpp::cluster::get_webhook</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2374" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2374" bodyend="2376"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1a09bbc39fbf490a7f14237228456de570" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>message</type>
        <definition>message get_webhook_message_sync</definition>
        <argsstring>(const class webhook &amp;wh)</argsstring>
        <name>get_webhook_message_sync</name>
        <param>
          <type>const class webhook &amp;</type>
          <declname>wh</declname>
        </param>
        <briefdescription>
<para>Get webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook-message">https://discord.com/developers/docs/resources/webhook#get-webhook-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to get the original message for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4efa6def2de6ac798f0c7a367d79a6ea" kindref="member">dpp::cluster::get_webhook_message</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2389" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2389" bodyend="2391"/>
      </memberdef>
      <memberdef kind="function" id="cluster__sync__calls_8h_1ae35b19024c40e544ba21edd4918a46c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>webhook</type>
        <definition>webhook get_webhook_with_token_sync</definition>
        <argsstring>(snowflake webhook_id, const std::string &amp;token)</argsstring>
        <name>get_webhook_with_token_sync</name>
        <param>
          <type>snowflake</type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Get webhook using token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook-with-token">https://discord.com/developers/docs/resources/webhook#get-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token of webhook </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a770526895ed13e2dfb746decc3f0be67" kindref="member">dpp::cluster::get_webhook_with_token</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2404" column="16" bodyfile="include/dpp/cluster_sync_calls.h" bodystart="2404" bodyend="2406"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/dpp/cluster_sync_calls.h"/>
  </compounddef>
</doxygen>
