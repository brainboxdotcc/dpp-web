<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1welcome__channel" kind="struct" language="C++" prot="public">
    <compoundname>dpp::welcome_channel</compoundname>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; welcome_channel &gt;</basecompoundref>
    <includes local="no">guild.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdpp_1_1welcome__channel_1a5a0da85e9a9ce71994691175e55a6482" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; welcome_channel &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; welcome_channel &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="structdpp_1_1welcome__channel" kindref="compound">welcome_channel</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="436" column="14" bodyfile="include/dpp/guild.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1welcome__channel_1a1bf6060401b61b022e0141bac0930e90" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::welcome_channel::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>The description shown for the channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="465" column="13" bodyfile="include/dpp/guild.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1welcome__channel_1a12be2fe79425adc835689feecfa65009" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::welcome_channel::emoji_name</definition>
        <argsstring></argsstring>
        <name>emoji_name</name>
        <briefdescription>
<para>The emoji name if custom, the unicode character if standard, or null if no emoji is set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="467" column="13" bodyfile="include/dpp/guild.h" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1welcome__channel_1a2483b713066063625a9906d14b4be646" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::welcome_channel::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>The channel&apos;s id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="469" column="11" bodyfile="include/dpp/guild.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1welcome__channel_1a425043d875a90151082c78f96c239f07" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::welcome_channel::emoji_id</definition>
        <argsstring></argsstring>
        <name>emoji_id</name>
        <briefdescription>
<para>The emoji id, if the emoji is custom. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="471" column="11" bodyfile="include/dpp/guild.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structdpp_1_1welcome__channel_1aa877ad35f718c9a20ad2f9b423329208" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1welcome__channel" kindref="compound">welcome_channel</ref> &amp;</type>
        <definition>welcome_channel &amp; dpp::welcome_channel::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Read class values from json object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="453" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1welcome__channel_1a412c43e75a8723c70476b03313928602" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>json dpp::welcome_channel::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build the json for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>include the id in the JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>json JSON data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="461" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1welcome__channel_1a1bf46e62ef14590bcb116991406e7d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::welcome_channel::welcome_channel</definition>
        <argsstring>()</argsstring>
        <name>welcome_channel</name>
        <briefdescription>
<para>Construct a new welcome channel object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1welcome__channel_1a61b137ecb835591f27cbd3667c72d4fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::welcome_channel::~welcome_channel</definition>
        <argsstring>()=default</argsstring>
        <name>~welcome_channel</name>
        <briefdescription>
<para>Destroy the welcome channel object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="481" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1welcome__channel_1a1debc4c9a4d60fdad52e9cac2f3cdd43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1welcome__channel" kindref="compound">welcome_channel</ref> &amp;</type>
        <definition>welcome_channel &amp; dpp::welcome_channel::set_channel_id</definition>
        <argsstring>(const snowflake _channel_id)</argsstring>
        <name>set_channel_id</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>_channel_id</declname>
        </param>
        <briefdescription>
<para>Set the channel ID of this welcome channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel ID to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="489" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1welcome__channel_1aa5a2a4bc4c182354acf792d5230a905d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1welcome__channel" kindref="compound">welcome_channel</ref> &amp;</type>
        <definition>welcome_channel &amp; dpp::welcome_channel::set_description</definition>
        <argsstring>(const std::string &amp;_description)</argsstring>
        <name>set_description</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>_description</declname>
        </param>
        <briefdescription>
<para>Set the description of this welcome channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_description</parametername>
</parameternamelist>
<parameterdescription>
<para>The description to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="497" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1welcome__channel" kindref="compound">welcome_channel</ref> &amp;</type>
        <definition>welcome_channel  &amp; dpp::json_interface&lt; welcome_channel  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="43" column="3" bodyfile="include/dpp/json_interface.h" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; welcome_channel  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="55" column="6" bodyfile="include/dpp/json_interface.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; welcome_channel  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="67" column="13" bodyfile="include/dpp/json_interface.h" bodystart="67" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines a channel on a server&apos;s welcome screen. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="1">
        <label>dpp::welcome_channel</label>
        <link refid="structdpp_1_1welcome__channel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; welcome_channel &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; welcome_channel &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="6">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="7" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::welcome_channel</label>
        <link refid="structdpp_1_1welcome__channel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>emoji_name</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>emoji_id</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; welcome_channel &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; welcome_channel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/guild.h" line="443" column="1" bodyfile="include/dpp/guild.h" bodystart="443" bodyend="498"/>
    <listofallmembers>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>build_json</name></member>
      <member refid="structdpp_1_1welcome__channel_1a2483b713066063625a9906d14b4be646" prot="public" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>channel_id</name></member>
      <member refid="structdpp_1_1welcome__channel_1a1bf6060401b61b022e0141bac0930e90" prot="public" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>description</name></member>
      <member refid="structdpp_1_1welcome__channel_1a425043d875a90151082c78f96c239f07" prot="public" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>emoji_id</name></member>
      <member refid="structdpp_1_1welcome__channel_1a12be2fe79425adc835689feecfa65009" prot="public" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>emoji_name</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1welcome__channel_1aa877ad35f718c9a20ad2f9b423329208" prot="protected" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>fill_from_json_impl</name></member>
      <member refid="structdpp_1_1welcome__channel_1a5a0da85e9a9ce71994691175e55a6482" prot="protected" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>json_interface&lt; welcome_channel &gt;</name></member>
      <member refid="structdpp_1_1welcome__channel_1a1debc4c9a4d60fdad52e9cac2f3cdd43" prot="public" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>set_channel_id</name></member>
      <member refid="structdpp_1_1welcome__channel_1aa5a2a4bc4c182354acf792d5230a905d" prot="public" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>set_description</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>to_json</name></member>
      <member refid="structdpp_1_1welcome__channel_1a412c43e75a8723c70476b03313928602" prot="protected" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>to_json_impl</name></member>
      <member refid="structdpp_1_1welcome__channel_1a1bf46e62ef14590bcb116991406e7d41" prot="public" virt="non-virtual"><scope>dpp::welcome_channel</scope><name>welcome_channel</name></member>
      <member refid="structdpp_1_1welcome__channel_1a61b137ecb835591f27cbd3667c72d4fe" prot="public" virt="virtual"><scope>dpp::welcome_channel</scope><name>~welcome_channel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
