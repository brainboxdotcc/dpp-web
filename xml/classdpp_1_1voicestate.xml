<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classdpp_1_1voicestate" kind="class" prot="public">
    <compoundname>dpp::voicestate</compoundname>
    <includes local="no">voicestate.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1voicestate_1a94e4a9ddbfb2368a4d06c1cd1f538141" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::voicestate::shard</definition>
        <argsstring></argsstring>
        <name>shard</name>
        <briefdescription>
<para>Owning shard. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="47" column="1" bodyfile="/home/brain/D++/include/dpp/voicestate.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voicestate_1ae7a837b367c89d55482d448a4a6eb702" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::voicestate::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>Optional: the guild id this voice state is for. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="48" column="1" bodyfile="/home/brain/D++/include/dpp/voicestate.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voicestate_1a0ea73d3fd39463142c315005321e28f5" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::voicestate::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>the channel id this user is connected to (may be empty) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="49" column="1" bodyfile="/home/brain/D++/include/dpp/voicestate.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voicestate_1a2a56a68ec5590ac218711f72893013fd" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::voicestate::user_id</definition>
        <argsstring></argsstring>
        <name>user_id</name>
        <briefdescription>
<para>the user id this voice state is for </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="50" column="1" bodyfile="/home/brain/D++/include/dpp/voicestate.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voicestate_1adda1e3192a8dbe103f5b5c29b29ca74b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voicestate::session_id</definition>
        <argsstring></argsstring>
        <name>session_id</name>
        <briefdescription>
<para>the session id for this voice state </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="51" column="1" bodyfile="/home/brain/D++/include/dpp/voicestate.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voicestate_1abf58f2ac3357bc012b7bf617309919c9" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::voicestate::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
<para>Voice state flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="52" column="1" bodyfile="/home/brain/D++/include/dpp/voicestate.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1voicestate_1a2cffc101e4bff3c2aa40f5efc9fee895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voicestate::voicestate</definition>
        <argsstring>()</argsstring>
        <name>voicestate</name>
        <briefdescription>
<para>Construct a new voicestate object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="57" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a29e5fdd1ec931b6ad1feed0094a1225f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voicestate::~voicestate</definition>
        <argsstring>()</argsstring>
        <name>~voicestate</name>
        <briefdescription>
<para>Destroy the voicestate object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="62" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="33" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a24cf57b27275f7e5c650f581da9c469d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1voicestate" kindref="compound">voicestate</ref> &amp;</type>
        <definition>voicestate &amp; dpp::voicestate::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill voicestate object from json data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON data to fill from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>voicestate&amp; Reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="70" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="36" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a5540c3997db9d636991472684e2864e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::voicestate::build_json</definition>
        <argsstring>() const </argsstring>
        <name>build_json</name>
        <briefdescription>
<para>Build json representation of the object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string JSON string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="77" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1ada57c9490c750cd624746346e10394fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::is_deaf</definition>
        <argsstring>() const </argsstring>
        <name>is_deaf</name>
        <briefdescription>
<para>Return true if user is deafened. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="80" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a216776aa1bd956523f9667041e5cef55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::is_mute</definition>
        <argsstring>() const </argsstring>
        <name>is_mute</name>
        <briefdescription>
<para>Return true if user is muted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="83" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a252f5860bad2ecaf89999cc1ccc88bfc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::is_self_mute</definition>
        <argsstring>() const </argsstring>
        <name>is_self_mute</name>
        <briefdescription>
<para>Return true if user muted themselves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="86" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a8b07092f4d7a76db4c18851a26a58e97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::is_self_deaf</definition>
        <argsstring>() const </argsstring>
        <name>is_self_deaf</name>
        <briefdescription>
<para>Return true if user deafened themselves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="89" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a14bfe38e85f94b03a773ba098384f6d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::self_stream</definition>
        <argsstring>() const </argsstring>
        <name>self_stream</name>
        <briefdescription>
<para>Return true if the user is streamig. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="92" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a3e344995e2ab027322c3174bd00c9c31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::self_video</definition>
        <argsstring>() const </argsstring>
        <name>self_video</name>
        <briefdescription>
<para>Return true if the user is in video. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="95" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a5407d1943ad5abeaad85af18c88a9995" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::is_suppressed</definition>
        <argsstring>() const </argsstring>
        <name>is_suppressed</name>
        <briefdescription>
<para>Return true if user is suppressed. &quot;HELP HELP I&apos;M BEING SUPPRESSED!&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/voicestate.h" line="99" column="1" bodyfile="/home/brain/D++/src/dpp/voicestate.cpp" bodystart="83" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents the voice state of a user on a guild These are stored in the <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref> object, and accessible there, or via <ref refid="classdpp_1_1channel_1a915cc4ba3ec7514a684315594255253a" kindref="member">dpp::channel::get_voice_members</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="15772">
        <label>function&lt; void(const dpp::guild_integrations_update_t &amp;event)&gt;</label>
      </node>
      <node id="15711">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="15710" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="15703" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="15712" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="15714" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="15717" relation="usage">
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>numshards</edgelabel>
          <edgelabel>intents</edgelabel>
        </childnode>
        <childnode refid="15697" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="15719" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
      </node>
      <node id="15707">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="15708" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="15709" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="15736">
        <label>function&lt; void(const dpp::stage_instance_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15751">
        <label>function&lt; void(const dpp::message_create_t &amp;event)&gt;</label>
      </node>
      <node id="15737">
        <label>function&lt; void(const dpp::thread_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="15784">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="15695" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="15785" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="15697" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>session_id</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
      </node>
      <node id="15777">
        <label>function&lt; void(const dpp::voice_buffer_send_t &amp;event)&gt;</label>
      </node>
      <node id="15764">
        <label>function&lt; void(const dpp::user_update_t &amp;event)&gt;</label>
      </node>
      <node id="15714">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="15715" relation="public-inheritance">
        </childnode>
        <childnode refid="15716" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="15717" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="15696" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="15697" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="15718" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="15722">
        <label>function&lt; void(const dpp::thread_members_update_t &amp;event)&gt;</label>
      </node>
      <node id="15766">
        <label>function&lt; void(const dpp::invite_create_t &amp;event)&gt;</label>
      </node>
      <node id="15738">
        <label>function&lt; void(const dpp::guild_create_t &amp;event)&gt;</label>
      </node>
      <node id="15768">
        <label>function&lt; void(const dpp::guild_emojis_update_t &amp;event)&gt;</label>
      </node>
      <node id="15778">
        <label>function&lt; void(const dpp::guild_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="15705">
        <label>function&lt; int()&gt;</label>
      </node>
      <node id="15694">
        <label>dpp::voicestate</label>
        <link refid="classdpp_1_1voicestate"/>
        <childnode refid="15695" relation="usage">
          <edgelabel>user_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="15696" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="15697" relation="usage">
          <edgelabel>session_id</edgelabel>
        </childnode>
        <childnode refid="15699" relation="usage">
          <edgelabel>shard</edgelabel>
        </childnode>
      </node>
      <node id="15719">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="15720" relation="usage">
          <edgelabel>guild_role_create</edgelabel>
        </childnode>
        <childnode refid="15721" relation="usage">
          <edgelabel>voice_state_update</edgelabel>
        </childnode>
        <childnode refid="15722" relation="usage">
          <edgelabel>thread_members_update</edgelabel>
        </childnode>
        <childnode refid="15723" relation="usage">
          <edgelabel>channel_delete</edgelabel>
        </childnode>
        <childnode refid="15724" relation="usage">
          <edgelabel>thread_delete</edgelabel>
        </childnode>
        <childnode refid="15725" relation="usage">
          <edgelabel>integration_update</edgelabel>
        </childnode>
        <childnode refid="15726" relation="usage">
          <edgelabel>message_reaction_remove_emoji</edgelabel>
        </childnode>
        <childnode refid="15727" relation="usage">
          <edgelabel>resumed</edgelabel>
        </childnode>
        <childnode refid="15728" relation="usage">
          <edgelabel>presence_update</edgelabel>
        </childnode>
        <childnode refid="15729" relation="usage">
          <edgelabel>message_delete_bulk</edgelabel>
        </childnode>
        <childnode refid="15730" relation="usage">
          <edgelabel>voice_ready</edgelabel>
        </childnode>
        <childnode refid="15731" relation="usage">
          <edgelabel>guild_ban_remove</edgelabel>
        </childnode>
        <childnode refid="15732" relation="usage">
          <edgelabel>guild_role_delete</edgelabel>
        </childnode>
        <childnode refid="15733" relation="usage">
          <edgelabel>channel_update</edgelabel>
        </childnode>
        <childnode refid="15734" relation="usage">
          <edgelabel>stickers_update</edgelabel>
        </childnode>
        <childnode refid="15735" relation="usage">
          <edgelabel>guild_members_chunk</edgelabel>
        </childnode>
        <childnode refid="15736" relation="usage">
          <edgelabel>stage_instance_delete</edgelabel>
        </childnode>
        <childnode refid="15737" relation="usage">
          <edgelabel>thread_member_update</edgelabel>
        </childnode>
        <childnode refid="15738" relation="usage">
          <edgelabel>guild_create</edgelabel>
        </childnode>
        <childnode refid="15739" relation="usage">
          <edgelabel>message_reaction_remove</edgelabel>
        </childnode>
        <childnode refid="15740" relation="usage">
          <edgelabel>select_click</edgelabel>
        </childnode>
        <childnode refid="15741" relation="usage">
          <edgelabel>interaction_create</edgelabel>
        </childnode>
        <childnode refid="15742" relation="usage">
          <edgelabel>guild_join_request_delete</edgelabel>
        </childnode>
        <childnode refid="15743" relation="usage">
          <edgelabel>guild_member_add</edgelabel>
        </childnode>
        <childnode refid="15744" relation="usage">
          <edgelabel>voice_user_talking</edgelabel>
        </childnode>
        <childnode refid="15745" relation="usage">
          <edgelabel>thread_create</edgelabel>
        </childnode>
        <childnode refid="15746" relation="usage">
          <edgelabel>application_command_create</edgelabel>
        </childnode>
        <childnode refid="15747" relation="usage">
          <edgelabel>button_click</edgelabel>
        </childnode>
        <childnode refid="15748" relation="usage">
          <edgelabel>guild_update</edgelabel>
        </childnode>
        <childnode refid="15749" relation="usage">
          <edgelabel>message_reaction_remove_all</edgelabel>
        </childnode>
        <childnode refid="15750" relation="usage">
          <edgelabel>voice_receive</edgelabel>
        </childnode>
        <childnode refid="15751" relation="usage">
          <edgelabel>message_create</edgelabel>
        </childnode>
        <childnode refid="15752" relation="usage">
          <edgelabel>webhooks_update</edgelabel>
        </childnode>
        <childnode refid="15753" relation="usage">
          <edgelabel>message_reaction_add</edgelabel>
        </childnode>
        <childnode refid="15754" relation="usage">
          <edgelabel>message_delete</edgelabel>
        </childnode>
        <childnode refid="15755" relation="usage">
          <edgelabel>voice_track_marker</edgelabel>
        </childnode>
        <childnode refid="15756" relation="usage">
          <edgelabel>thread_list_sync</edgelabel>
        </childnode>
        <childnode refid="15757" relation="usage">
          <edgelabel>integration_delete</edgelabel>
        </childnode>
        <childnode refid="15758" relation="usage">
          <edgelabel>guild_ban_add</edgelabel>
        </childnode>
        <childnode refid="15759" relation="usage">
          <edgelabel>channel_pins_update</edgelabel>
        </childnode>
        <childnode refid="15760" relation="usage">
          <edgelabel>typing_start</edgelabel>
        </childnode>
        <childnode refid="15761" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="15762" relation="usage">
          <edgelabel>thread_update</edgelabel>
        </childnode>
        <childnode refid="15763" relation="usage">
          <edgelabel>integration_create</edgelabel>
        </childnode>
        <childnode refid="15764" relation="usage">
          <edgelabel>user_update</edgelabel>
        </childnode>
        <childnode refid="15765" relation="usage">
          <edgelabel>message_update</edgelabel>
        </childnode>
        <childnode refid="15766" relation="usage">
          <edgelabel>invite_create</edgelabel>
        </childnode>
        <childnode refid="15767" relation="usage">
          <edgelabel>invite_delete</edgelabel>
        </childnode>
        <childnode refid="15768" relation="usage">
          <edgelabel>guild_emojis_update</edgelabel>
        </childnode>
        <childnode refid="15769" relation="usage">
          <edgelabel>guild_delete</edgelabel>
        </childnode>
        <childnode refid="15770" relation="usage">
          <edgelabel>application_command_delete</edgelabel>
        </childnode>
        <childnode refid="15771" relation="usage">
          <edgelabel>application_command_update</edgelabel>
        </childnode>
        <childnode refid="15772" relation="usage">
          <edgelabel>guild_integrations_update</edgelabel>
        </childnode>
        <childnode refid="15773" relation="usage">
          <edgelabel>voice_server_update</edgelabel>
        </childnode>
        <childnode refid="15774" relation="usage">
          <edgelabel>guild_role_update</edgelabel>
        </childnode>
        <childnode refid="15775" relation="usage">
          <edgelabel>channel_create</edgelabel>
        </childnode>
        <childnode refid="15776" relation="usage">
          <edgelabel>stage_instance_create</edgelabel>
        </childnode>
        <childnode refid="15777" relation="usage">
          <edgelabel>voice_buffer_send</edgelabel>
        </childnode>
        <childnode refid="15778" relation="usage">
          <edgelabel>guild_member_update</edgelabel>
        </childnode>
        <childnode refid="15779" relation="usage">
          <edgelabel>guild_member_remove</edgelabel>
        </childnode>
        <childnode refid="15780" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
      </node>
      <node id="15726">
        <label>function&lt; void(const dpp::message_reaction_remove_emoji_t &amp;event)&gt;</label>
      </node>
      <node id="15733">
        <label>function&lt; void(const dpp::channel_update_t &amp;event)&gt;</label>
      </node>
      <node id="15775">
        <label>function&lt; void(const dpp::channel_create_t &amp;event)&gt;</label>
      </node>
      <node id="15695">
        <label>uint64_t</label>
      </node>
      <node id="15770">
        <label>function&lt; void(const dpp::application_command_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15767">
        <label>function&lt; void(const dpp::invite_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15753">
        <label>function&lt; void(const dpp::message_reaction_add_t &amp;event)&gt;</label>
      </node>
      <node id="15747">
        <label>function&lt; void(const dpp::button_click_t &amp;event)&gt;</label>
      </node>
      <node id="15735">
        <label>function&lt; void(const dpp::guild_members_chunk_t &amp;event)&gt;</label>
      </node>
      <node id="15724">
        <label>function&lt; void(const dpp::thread_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15743">
        <label>function&lt; void(const dpp::guild_member_add_t &amp;event)&gt;</label>
      </node>
      <node id="15760">
        <label>function&lt; void(const dpp::typing_start_t &amp;event)&gt;</label>
      </node>
      <node id="15757">
        <label>function&lt; void(const dpp::integration_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15780">
        <label>function&lt; void(const dpp::log_t &amp;event)&gt;</label>
      </node>
      <node id="15716">
        <label>uint16_t</label>
      </node>
      <node id="15745">
        <label>function&lt; void(const dpp::thread_create_t &amp;event)&gt;</label>
      </node>
      <node id="15703">
        <label>time_t</label>
      </node>
      <node id="15698">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="15779">
        <label>function&lt; void(const dpp::guild_member_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15756">
        <label>function&lt; void(const dpp::thread_list_sync_t &amp;event)&gt;</label>
      </node>
      <node id="15785">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="15700" relation="public-inheritance">
        </childnode>
        <childnode refid="15695" relation="usage">
          <edgelabel>server_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="15703" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="15711" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="15717" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="15697" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="15706" relation="usage">
          <edgelabel>terminating</edgelabel>
          <edgelabel>sodium_initialised</edgelabel>
        </childnode>
        <childnode refid="15782" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
      </node>
      <node id="15718">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="15695" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="15755">
        <label>function&lt; void(const dpp::voice_track_marker_t &amp;event)&gt;</label>
      </node>
      <node id="15744">
        <label>function&lt; void(const dpp::voice_user_talking_t &amp;event)&gt;</label>
      </node>
      <node id="15710">
        <label>double</label>
      </node>
      <node id="15701">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="15702" relation="usage">
          <edgelabel>custom_writeable_ready</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
        </childnode>
        <childnode refid="15695" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="15703" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="15704" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="15705" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="15706" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="15697" relation="usage">
          <edgelabel>port</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>buffer</edgelabel>
        </childnode>
        <childnode refid="15707" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="15754">
        <label>function&lt; void(const dpp::message_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15776">
        <label>function&lt; void(const dpp::stage_instance_create_t &amp;event)&gt;</label>
      </node>
      <node id="15717">
        <label>uint32_t</label>
      </node>
      <node id="15774">
        <label>function&lt; void(const dpp::guild_role_update_t &amp;event)&gt;</label>
      </node>
      <node id="15696">
        <label>uint8_t</label>
      </node>
      <node id="15759">
        <label>function&lt; void(const dpp::channel_pins_update_t &amp;event)&gt;</label>
      </node>
      <node id="15713">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="15700">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="15701" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15712">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="15713" relation="usage">
          <edgelabel>role_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="15728">
        <label>function&lt; void(const dpp::presence_update_t &amp;event)&gt;</label>
      </node>
      <node id="15740">
        <label>function&lt; void(const dpp::select_click_t &amp;event)&gt;</label>
      </node>
      <node id="15725">
        <label>function&lt; void(const dpp::integration_update_t &amp;event)&gt;</label>
      </node>
      <node id="15748">
        <label>function&lt; void(const dpp::guild_update_t &amp;event)&gt;</label>
      </node>
      <node id="15750">
        <label>function&lt; void(const dpp::voice_receive_t &amp;event)&gt;</label>
      </node>
      <node id="15783">
        <label>std::unordered_map&lt; snowflake, dpp::voiceconn * &gt;</label>
        <childnode refid="15695" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="15784" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="15702">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="15742">
        <label>function&lt; void(const dpp::guild_join_request_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15699">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="15700" relation="public-inheritance">
        </childnode>
        <childnode refid="15710" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="15695" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="15703" relation="usage">
          <edgelabel>last_heartbeat_ack</edgelabel>
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="15711" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="15781" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="15717" relation="usage">
          <edgelabel>reconnects</edgelabel>
          <edgelabel>shard_id</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="15706" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="15697" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="15782" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="15783" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="15749">
        <label>function&lt; void(const dpp::message_reaction_remove_all_t &amp;event)&gt;</label>
      </node>
      <node id="15708">
        <label>SSL *</label>
      </node>
      <node id="15715">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="15695" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="15762">
        <label>function&lt; void(const dpp::thread_update_t &amp;event)&gt;</label>
      </node>
      <node id="15763">
        <label>function&lt; void(const dpp::integration_create_t &amp;event)&gt;</label>
      </node>
      <node id="15771">
        <label>function&lt; void(const dpp::application_command_update_t &amp;event)&gt;</label>
      </node>
      <node id="15709">
        <label>SSL_CTX *</label>
      </node>
      <node id="15758">
        <label>function&lt; void(const dpp::guild_ban_add_t &amp;event)&gt;</label>
      </node>
      <node id="15781">
        <label>mutex</label>
      </node>
      <node id="15769">
        <label>function&lt; void(const dpp::guild_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15727">
        <label>function&lt; void(const dpp::resumed_t &amp;event)&gt;</label>
      </node>
      <node id="15746">
        <label>function&lt; void(const dpp::application_command_create_t &amp;event)&gt;</label>
      </node>
      <node id="15752">
        <label>function&lt; void(const dpp::webhooks_update_t &amp;event)&gt;</label>
      </node>
      <node id="15765">
        <label>function&lt; void(const dpp::message_update_t &amp;event)&gt;</label>
      </node>
      <node id="15706">
        <label>bool</label>
      </node>
      <node id="15704">
        <label>SOCKET</label>
      </node>
      <node id="15741">
        <label>function&lt; void(const dpp::interaction_create_t &amp;event)&gt;</label>
      </node>
      <node id="15773">
        <label>function&lt; void(const dpp::voice_server_update_t &amp;event)&gt;</label>
      </node>
      <node id="15731">
        <label>function&lt; void(const dpp::guild_ban_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15723">
        <label>function&lt; void(const dpp::channel_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15720">
        <label>function&lt; void(const dpp::guild_role_create_t &amp;event)&gt;</label>
      </node>
      <node id="15739">
        <label>function&lt; void(const dpp::message_reaction_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15761">
        <label>function&lt; void(const dpp::ready_t &amp;event)&gt;</label>
      </node>
      <node id="15721">
        <label>function&lt; void(const dpp::voice_state_update_t &amp;event)&gt;</label>
      </node>
      <node id="15734">
        <label>function&lt; void(const dpp::guild_stickers_update_t &amp;event)&gt;</label>
      </node>
      <node id="15730">
        <label>function&lt; void(const dpp::voice_ready_t &amp;event)&gt;</label>
      </node>
      <node id="15782">
        <label>native_handle_type</label>
      </node>
      <node id="15732">
        <label>function&lt; void(const dpp::guild_role_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15697">
        <label>std::string</label>
        <childnode refid="15698" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15729">
        <label>function&lt; void(const dpp::message_delete_bulk_t &amp;event)&gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/voicestate.h" line="45" column="1" bodyfile="/home/brain/D++/include/dpp/voicestate.h" bodystart="45" bodyend="100"/>
    <listofallmembers>
      <member refid="classdpp_1_1voicestate_1a5540c3997db9d636991472684e2864e1" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>build_json</name></member>
      <member refid="classdpp_1_1voicestate_1a0ea73d3fd39463142c315005321e28f5" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>channel_id</name></member>
      <member refid="classdpp_1_1voicestate_1a24cf57b27275f7e5c650f581da9c469d" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1voicestate_1abf58f2ac3357bc012b7bf617309919c9" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>flags</name></member>
      <member refid="classdpp_1_1voicestate_1ae7a837b367c89d55482d448a4a6eb702" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1voicestate_1ada57c9490c750cd624746346e10394fb" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>is_deaf</name></member>
      <member refid="classdpp_1_1voicestate_1a216776aa1bd956523f9667041e5cef55" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>is_mute</name></member>
      <member refid="classdpp_1_1voicestate_1a8b07092f4d7a76db4c18851a26a58e97" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>is_self_deaf</name></member>
      <member refid="classdpp_1_1voicestate_1a252f5860bad2ecaf89999cc1ccc88bfc" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>is_self_mute</name></member>
      <member refid="classdpp_1_1voicestate_1a5407d1943ad5abeaad85af18c88a9995" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>is_suppressed</name></member>
      <member refid="classdpp_1_1voicestate_1a14bfe38e85f94b03a773ba098384f6d9" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>self_stream</name></member>
      <member refid="classdpp_1_1voicestate_1a3e344995e2ab027322c3174bd00c9c31" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>self_video</name></member>
      <member refid="classdpp_1_1voicestate_1adda1e3192a8dbe103f5b5c29b29ca74b" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>session_id</name></member>
      <member refid="classdpp_1_1voicestate_1a94e4a9ddbfb2368a4d06c1cd1f538141" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>shard</name></member>
      <member refid="classdpp_1_1voicestate_1a2a56a68ec5590ac218711f72893013fd" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>user_id</name></member>
      <member refid="classdpp_1_1voicestate_1a2cffc101e4bff3c2aa40f5efc9fee895" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>voicestate</name></member>
      <member refid="classdpp_1_1voicestate_1a29e5fdd1ec931b6ad1feed0094a1225f" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>~voicestate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
