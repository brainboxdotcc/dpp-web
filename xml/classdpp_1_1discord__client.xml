<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1discord__client" kind="class" language="C++" prot="public">
    <compoundname>dpp::discord_client</compoundname>
    <basecompoundref refid="classdpp_1_1websocket__client" prot="public" virt="non-virtual">dpp::websocket_client</basecompoundref>
    <includes local="no">discordclient.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1discord__client_1af5314358ae06ff298fbe659984648c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class dpp::events::voice_state_update</definition>
        <argsstring></argsstring>
        <name>dpp::events::voice_state_update</name>
        <param>
          <type><ref refid="classdpp_1_1events_1_1voice__state__update" kindref="compound">dpp::events::voice_state_update</ref></type>
        </param>
        <briefdescription>
<para>Needed so that voice_state_update can call <ref refid="classdpp_1_1discord__client_1ad6720e53bbc68722cc807dbd05b5fb71" kindref="member">dpp::discord_client::disconnect_voice_internal</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="244" column="14" bodyfile="include/dpp/discordclient.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classdpp_1_1discord__client_1a38bd58112bc810d3a3ac9d88a316d2e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class dpp::events::guild_create</definition>
        <argsstring></argsstring>
        <name>dpp::events::guild_create</name>
        <param>
          <type><ref refid="classdpp_1_1events_1_1guild__create" kindref="compound">dpp::events::guild_create</ref></type>
        </param>
        <briefdescription>
<para>Needed so that guild_create can request member chunks if you have the correct intents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="249" column="14" bodyfile="include/dpp/discordclient.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classdpp_1_1discord__client_1a836b658e110edfcbb21ea88b2ad90e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class dpp::cluster</definition>
        <argsstring></argsstring>
        <name>dpp::cluster</name>
        <param>
          <type><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref></type>
        </param>
        <briefdescription>
<para>Needed to allow <ref refid="classdpp_1_1cluster_1a9b67c9455ac0378712e4c0fd0ba7f2a9" kindref="member">cluster::set_presence</ref> to use the ETF functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="254" column="14" bodyfile="include/dpp/discordclient.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a383edc7149932f62c2e24672487df17f" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::discord_client::last_ping_message</definition>
        <argsstring></argsstring>
        <name>last_ping_message</name>
        <briefdescription>
<para>Stores the most recent ping message on this shard, which we check for to monitor latency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="276" column="13" bodyfile="include/dpp/discordclient.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1a0d8399d578f3dc811f3ef5a663a2064b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::websocket_client::timed_out</definition>
        <argsstring></argsstring>
        <name>timed_out</name>
        <briefdescription>
<para>If true the connection timed out while waiting, when waiting for SSL negotiation, TCP <ref refid="classdpp_1_1websocket__client_1abce54f634a3b43f4b9b5bac5d1e99702" kindref="member">connect()</ref>, or HTTP. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="170" column="6" bodyfile="include/dpp/wsclient.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1aed68bb754ba3745b6fbb895d16f96809" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::websocket_client::timeout</definition>
        <argsstring></argsstring>
        <name>timeout</name>
        <briefdescription>
<para>Time at which the connection should be abandoned, if we are still connecting or negotiating with a HTTP server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="176" column="8" bodyfile="include/dpp/wsclient.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a4a8b48487e16cefed1f12821f64fa5e8" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
<para>Input buffer received from socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="128" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a80a568dbb2049f4727c0efdde185699e" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::obuffer</definition>
        <argsstring></argsstring>
        <name>obuffer</name>
        <briefdescription>
<para>Output buffer for sending to socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="133" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1abd9c3cf6150d3c7e2badd12829437207" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
        <definition>dpp::socket dpp::ssl_connection::sfd</definition>
        <argsstring></argsstring>
        <name>sfd</name>
        <briefdescription>
<para>Raw file descriptor of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="138" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a61cccaa18278dabe8eae3eafbf8dd1e7" prot="protected" static="no" mutable="no">
        <type>openssl_connection *</type>
        <definition>openssl_connection* dpp::ssl_connection::ssl</definition>
        <argsstring></argsstring>
        <name>ssl</name>
        <briefdescription>
<para>Openssl opaque contexts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="143" column="20" bodyfile="include/dpp/sslconnection.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a0e0c14fe8f51c54ea280509c8c0e5140" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::cipher</definition>
        <argsstring></argsstring>
        <name>cipher</name>
        <briefdescription>
<para>SSL cipher in use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="148" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a9494e0dd128b5415a96d6ff9d24789aa" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_connection::last_tick</definition>
        <argsstring></argsstring>
        <name>last_tick</name>
        <briefdescription>
<para>For timers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="153" column="8" bodyfile="include/dpp/sslconnection.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad694f10e342b640f5fa6e88119c86a17" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_connection::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
<para>Start time of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="158" column="8" bodyfile="include/dpp/sslconnection.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a0d85356b40ea02323cc161af4f5467fc" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::ssl_connection::connect_retries</definition>
        <argsstring></argsstring>
        <name>connect_retries</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>How many times we retried <ref refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca" kindref="member">connect()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="163" column="9" bodyfile="include/dpp/sslconnection.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aedf42057136f2fae90424a18daddce51" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::hostname</definition>
        <argsstring></argsstring>
        <name>hostname</name>
        <briefdescription>
<para>Hostname connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="168" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a39851da532b2f7ee33570e3b1dafd097" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
<para>Port connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="173" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad9fccc5b66b4a5713b54d8ed1ab9c743" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::bytes_out</definition>
        <argsstring></argsstring>
        <name>bytes_out</name>
        <briefdescription>
<para>Bytes out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="178" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a8715f4363a7c5ef7ddc5439d5ff2394a" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::bytes_in</definition>
        <argsstring></argsstring>
        <name>bytes_in</name>
        <briefdescription>
<para>Bytes in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="183" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1addf00646298eba9176a675bba7269f27" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::plaintext</definition>
        <argsstring></argsstring>
        <name>plaintext</name>
        <briefdescription>
<para>True for a plain text connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="188" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1acf9eb0208d63e142a421f7f778b3a939" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::connected</definition>
        <argsstring></argsstring>
        <name>connected</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if connection is completed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="193" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a69e9248f431daf428683b1152c05b1a6" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::tcp_connect_done</definition>
        <argsstring></argsstring>
        <name>tcp_connect_done</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if tcp <ref refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca" kindref="member">connect()</ref> succeeded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="198" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a216b85ccf220d2aa66e9a4397dcdf4a3" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a8b9ab0b8cf29978147a7df3947cd8f30" kindref="member">timer</ref></type>
        <definition>timer dpp::ssl_connection::timer_handle</definition>
        <argsstring></argsstring>
        <name>timer_handle</name>
        <briefdescription>
<para>Timer handle for one second timer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="203" column="7" bodyfile="include/dpp/sslconnection.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aa7a9277f5c258712b00e91b9cd062095" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::unique_id</definition>
        <argsstring></argsstring>
        <name>unique_id</name>
        <briefdescription>
<para>Unique ID of socket used as a nonce You can use this to identify requests vs reply if you want. D++ itself only sets this, and does not use it in any logic. It starts at 1 and increments for each request made. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="212" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a62161bc05909fc1d67f3a59c5fbf6e79" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::raw_trace</definition>
        <argsstring></argsstring>
        <name>raw_trace</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Set this to true to log all IO to debug for this connection. This is an internal developer facility. Do not enable it unless you need to, as it will be very noisy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="230" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1discord__client_1aab3808d0e5f68c28d305efa8d1cde6af" prot="private" static="no" mutable="no">
        <type>std::shared_mutex</type>
        <definition>std::shared_mutex dpp::discord_client::queue_mutex</definition>
        <argsstring></argsstring>
        <name>queue_mutex</name>
        <briefdescription>
<para>Mutex for message queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="283" column="19" bodyfile="include/dpp/discordclient.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a72a08a27b0d61b82e88ceb92b557cb8e" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex dpp::discord_client::zlib_mutex</definition>
        <argsstring></argsstring>
        <name>zlib_mutex</name>
        <briefdescription>
<para>Mutex for zlib pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="288" column="12" bodyfile="include/dpp/discordclient.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a0c7eeee6642b74777eb48b90b5d5c3b4" prot="private" static="no" mutable="no">
        <type>std::deque&lt; std::string &gt;</type>
        <definition>std::deque&lt;std::string&gt; dpp::discord_client::message_queue</definition>
        <argsstring></argsstring>
        <name>message_queue</name>
        <briefdescription>
<para>Queue of outbound messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="293" column="12" bodyfile="include/dpp/discordclient.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a298936775c800395bb933f2e8d7aeb30" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::discord_client::compressed</definition>
        <argsstring></argsstring>
        <name>compressed</name>
        <briefdescription>
<para>If true, stream compression is enabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="298" column="6" bodyfile="include/dpp/discordclient.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1ac9efcc6052f2fc585cbaa96786ee734d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::discord_client::decompressed</definition>
        <argsstring></argsstring>
        <name>decompressed</name>
        <briefdescription>
<para>Decompressed string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="303" column="13" bodyfile="include/dpp/discordclient.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a341e5371571a63f1a20ef4f1b0015cb8" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classdpp_1_1zlibcontext" kindref="compound">zlibcontext</ref> &gt;</type>
        <definition>std::unique_ptr&lt;zlibcontext&gt; dpp::discord_client::zlib</definition>
        <argsstring></argsstring>
        <name>zlib</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This object contains the various zlib structs which are not usable by the user of the library directly. They are wrapped within this opaque object so that this header file does not bring in a dependency on zlib.h. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="311" column="17" bodyfile="include/dpp/discordclient.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1ad5b9759853019efe55112f13d589b0e1" prot="private" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::discord_client::connect_time</definition>
        <argsstring></argsstring>
        <name>connect_time</name>
        <briefdescription>
<para>Last connect time of cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="316" column="8" bodyfile="include/dpp/discordclient.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a250f37b3cbff382ae91dc662366571ec" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double dpp::discord_client::ping_start</definition>
        <argsstring></argsstring>
        <name>ping_start</name>
        <briefdescription>
<para>Time last ping sent to websocket, in fractional seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="321" column="8" bodyfile="include/dpp/discordclient.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a45c4f8b68d2bbdd5cc95fd766df2acd1" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classdpp_1_1etf__parser" kindref="compound">etf_parser</ref> &gt;</type>
        <definition>std::unique_ptr&lt;etf_parser&gt; dpp::discord_client::etf</definition>
        <argsstring></argsstring>
        <name>etf</name>
        <briefdescription>
<para>ETF parser for when in ws_etf mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="326" column="17" bodyfile="include/dpp/discordclient.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1discord__client_1afed78d2e1b09e006ede8b4690895a866" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> *</type>
        <definition>class dpp::cluster* dpp::discord_client::creator</definition>
        <argsstring></argsstring>
        <name>creator</name>
        <briefdescription>
<para>Owning cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="352" column="20" bodyfile="include/dpp/discordclient.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a62f72c7433043cbb61fe1917efabd2f7" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_client::heartbeat_interval</definition>
        <argsstring></argsstring>
        <name>heartbeat_interval</name>
        <briefdescription>
<para>Heartbeat interval for sending heartbeat keepalive. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>value in milliseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="358" column="10" bodyfile="include/dpp/discordclient.h" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1ac6ef401a0b38b2cce833d184ddf38bbb" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::discord_client::last_heartbeat</definition>
        <argsstring></argsstring>
        <name>last_heartbeat</name>
        <briefdescription>
<para>Last heartbeat. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="363" column="8" bodyfile="include/dpp/discordclient.h" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1aa11253c28f842aad3939e9d3138a0c6d" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_client::shard_id</definition>
        <argsstring></argsstring>
        <name>shard_id</name>
        <briefdescription>
<para>Shard ID of this client. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="368" column="10" bodyfile="include/dpp/discordclient.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a7e8e56675006b1af1c09d8de1519f001" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_client::max_shards</definition>
        <argsstring></argsstring>
        <name>max_shards</name>
        <briefdescription>
<para>Total number of shards. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="373" column="10" bodyfile="include/dpp/discordclient.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a8dc9f84c9b65a58f8e9eea6326a424bd" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::discord_client::last_seq</definition>
        <argsstring></argsstring>
        <name>last_seq</name>
        <briefdescription>
<para>Last sequence number received, for resumes and pings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="378" column="10" bodyfile="include/dpp/discordclient.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1ac6f6acb88970deecd85236fc0df8be78" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::discord_client::token</definition>
        <argsstring></argsstring>
        <name>token</name>
        <briefdescription>
<para>Discord bot token. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="383" column="13" bodyfile="include/dpp/discordclient.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1acdea0fb06605d44be0161991c5d68e58" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_client::intents</definition>
        <argsstring></argsstring>
        <name>intents</name>
        <briefdescription>
<para>Privileged gateway intents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespacedpp_1a0042c0fc8164da4239b977d5be8e2ef5" kindref="member">dpp::intents</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="389" column="10" bodyfile="include/dpp/discordclient.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a66922f8fbb2df8c1c92744f4eb524a52" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::discord_client::sessionid</definition>
        <argsstring></argsstring>
        <name>sessionid</name>
        <briefdescription>
<para>Discord session id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="394" column="13" bodyfile="include/dpp/discordclient.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1ac0f38f917182d7b847c8cabeed029e42" prot="public" static="no" mutable="no">
        <type>std::shared_mutex</type>
        <definition>std::shared_mutex dpp::discord_client::voice_mutex</definition>
        <argsstring></argsstring>
        <name>voice_mutex</name>
        <briefdescription>
<para>Mutex for voice connections map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="399" column="19" bodyfile="include/dpp/discordclient.h" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a575bb766c7c9e8ea510392265c0abba6" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_client::resumes</definition>
        <argsstring></argsstring>
        <name>resumes</name>
        <briefdescription>
<para>Resume count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="404" column="10" bodyfile="include/dpp/discordclient.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1af002768a9defc98dc3fcf777a95d8bcf" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_client::reconnects</definition>
        <argsstring></argsstring>
        <name>reconnects</name>
        <briefdescription>
<para>Reconnection count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="409" column="10" bodyfile="include/dpp/discordclient.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a5e39136f09297f7ba0ab6a449e435f3d" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double dpp::discord_client::websocket_ping</definition>
        <argsstring></argsstring>
        <name>websocket_ping</name>
        <briefdescription>
<para>Websocket latency in fractional seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="414" column="8" bodyfile="include/dpp/discordclient.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a03ffb74d2fa81b0e6f0864848151fa90" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::discord_client::ready</definition>
        <argsstring></argsstring>
        <name>ready</name>
        <briefdescription>
<para>True if READY or RESUMED has been received. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="419" column="6" bodyfile="include/dpp/discordclient.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1a611a05e14a49affa23f58ea173d829ba" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::discord_client::last_heartbeat_ack</definition>
        <argsstring></argsstring>
        <name>last_heartbeat_ack</name>
        <briefdescription>
<para>Last heartbeat ACK (opcode 11) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="424" column="8" bodyfile="include/dpp/discordclient.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1afde2bb2612e474fbfda2d7312e2bc5e7" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1af7cde3079d745428f44ef6231a2ac672" kindref="member">websocket_protocol_t</ref></type>
        <definition>websocket_protocol_t dpp::discord_client::protocol</definition>
        <argsstring></argsstring>
        <name>protocol</name>
        <briefdescription>
<para>Current websocket protocol, currently either ETF or JSON. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="429" column="22" bodyfile="include/dpp/discordclient.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1ac254a3401c868ed2ad29adebab0ecf3c" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref>, std::unique_ptr&lt; <ref refid="classdpp_1_1voiceconn" kindref="compound">voiceconn</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;snowflake, std::unique_ptr&lt;voiceconn&gt; &gt; dpp::discord_client::connecting_voice_channels</definition>
        <argsstring></argsstring>
        <name>connecting_voice_channels</name>
        <briefdescription>
<para>List of voice channels we are connecting to keyed by guild id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="434" column="20" bodyfile="include/dpp/discordclient.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__client_1afcf709e96bb43c26953eabb2ac0227fd" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::discord_client::resume_gateway_url</definition>
        <argsstring></argsstring>
        <name>resume_gateway_url</name>
        <briefdescription>
<para>The gateway address we reconnect to when we resume a session. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="439" column="13" bodyfile="include/dpp/discordclient.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aaba3255abd8ec8e94d1781771cfc9acb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::keepalive</definition>
        <argsstring></argsstring>
        <name>keepalive</name>
        <briefdescription>
<para>True if we are keeping the connection alive after it has finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="280" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a3ae20842849f8c2f0174902dc70d7e97" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::ssl_connection::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
<para>Owning cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="285" column="15" bodyfile="include/dpp/sslconnection.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aa8cfa2e6c511022b67dbd97cc57f0731" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::private_key_file</definition>
        <argsstring></argsstring>
        <name>private_key_file</name>
        <briefdescription>
<para>Private key PEM file path for inbound SSL connections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="290" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad7feee672079e07699e25f7250021c66" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::public_key_file</definition>
        <argsstring></argsstring>
        <name>public_key_file</name>
        <briefdescription>
<para>Public key PEM file path for inbound SSL connections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="295" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1discord__client_1ad6720e53bbc68722cc807dbd05b5fb71" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_client::disconnect_voice_internal</definition>
        <argsstring>(snowflake guild_id, bool send_json=true)</argsstring>
        <name>disconnect_voice_internal</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>send_json</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Disconnect from the connected voice channel on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild who&apos;s voice channel you wish to disconnect from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>send_json</parametername>
</parameternamelist>
<parameterdescription>
<para>True if we should send a json message confirming we are leaving the VC Should be set to false if we already receive this message in an event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="263" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a7eadcab0e2fdc157e32c1645fa6e6d3c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_client::start_connecting</definition>
        <argsstring>()</argsstring>
        <name>start_connecting</name>
        <briefdescription>
<para>Start connecting the websocket. </para>
        </briefdescription>
        <detaileddescription>
<para>Called from the constructor, or during reconnection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="270" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1abce54f634a3b43f4b9b5bac5d1e99702" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::connect</definition>
        <argsstring>() override</argsstring>
        <name>connect</name>
        <reimplements refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca">connect</reimplements>
        <briefdescription>
<para>Connect to websocket server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="158" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a2d64dce5afa6a2e3a125b915316d7f6a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1af3b7f3e861707f45beefa9449de70519" kindref="member">ws_state</ref></type>
        <definition>ws_state dpp::websocket_client::get_state</definition>
        <argsstring>() const</argsstring>
        <name>get_state</name>
        <briefdescription>
<para>Get websocket state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>websocket state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="164" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a74d9da0f1f0c5feb46ed0995bd7d2e05" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::do_raw_trace</definition>
        <argsstring>(const std::string &amp;message) const</argsstring>
        <name>do_raw_trace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>If raw_trace is set to true, log a debug message for this connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>debug message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="236" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a4bdff78b127e920033d0d9f8fb58d456" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::ssl_connection::on_buffer_drained</definition>
        <argsstring>()</argsstring>
        <name>on_buffer_drained</name>
        <reimplementedby refid="classdpp_1_1http__server__request_1a89070e1f8e6757223883f647a45d7813">on_buffer_drained</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="238" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1discord__client_1a43d77bd4e49d0d55120ac109de69d523" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::discord_client::jsonobj_to_string</definition>
        <argsstring>(const nlohmann::json &amp;json)</argsstring>
        <name>jsonobj_to_string</name>
        <param>
          <type>const nlohmann::json &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Convert a JSON object to string. In JSON protocol mode, call json.dump(), and in ETF mode, call etf::build(). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string string output in the correct format </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="336" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a5b19bc3ad4248b19b08ebc65eea9947b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_client::set_resume_hostname</definition>
        <argsstring>()</argsstring>
        <name>set_resume_hostname</name>
        <briefdescription>
<para>Update the websocket hostname with the resume url from the last READY event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="342" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a89e7fc69efa6e8e35123c31e13a5e479" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_client::cleanup</definition>
        <argsstring>()</argsstring>
        <name>cleanup</name>
        <briefdescription>
<para>Clean up resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="347" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1discord__client_1ac8c04aa0b82c13324c8a4fe9dc3f697e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::discord_client::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const override</argsstring>
        <name>log</name>
        <reimplements refid="classdpp_1_1ssl__connection_1af7e21fef92907780581d04c8f98bf9b6">log</reimplements>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message to whatever log the user is using. The logged message is passed up the chain to the on_log event in user code which can then do whatever it wants to do with it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level from <ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The log message to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="448" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1acb3fb468cc8df83f10be24d844d70c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::discord_client::handle_event</definition>
        <argsstring>(const std::string &amp;event, json &amp;j, const std::string &amp;raw)</argsstring>
        <name>handle_event</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>Handle an event (opcode 0) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event name, e.g. MESSAGE_CREATE </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON object for the event content </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw JSON event string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="456" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a24e750fd3a503a65b41ab6525b7b2e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::discord_client::get_guild_count</definition>
        <argsstring>()</argsstring>
        <name>get_guild_count</name>
        <briefdescription>
<para>Get the Guild Count for this shard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t guild count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="463" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1ad74f28655846f30487d931bb1e3b1639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::discord_client::get_member_count</definition>
        <argsstring>()</argsstring>
        <name>get_member_count</name>
        <briefdescription>
<para>Get the Member Count for this shard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t member count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="470" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1aad490f19d38e26deff51dccbfd1c445c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::discord_client::get_channel_count</definition>
        <argsstring>()</argsstring>
        <name>get_channel_count</name>
        <briefdescription>
<para>Get the Channel Count for this shard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t channel count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="477" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a22449f499a4b4e952e8de4fd85c45e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::discord_client::one_second_timer</definition>
        <argsstring>() override</argsstring>
        <name>one_second_timer</name>
        <reimplements refid="classdpp_1_1websocket__client_1ae56e2b577298a170ba9af5bff0d9a732">one_second_timer</reimplements>
        <briefdescription>
<para>Fires every second from the underlying socket I/O loop, used for sending heartbeats and any queued outbound websocket frames. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="483" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a123f98e2faef134f6954d9a91346fb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_client::queue_message</definition>
        <argsstring>(const std::string &amp;j, bool to_front=false)</argsstring>
        <name>queue_message</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>to_front</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Queue a message to be sent via the websocket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON data of the message to be sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_front</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to true, will place the message at the front of the queue not the back (this is for urgent messages such as heartbeat, presence, so they can take precedence over chunk requests etc) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="493" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a0ea5213ee46a61afc7c901c66051db3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> &amp;</type>
        <definition>discord_client &amp; dpp::discord_client::clear_queue</definition>
        <argsstring>()</argsstring>
        <name>clear_queue</name>
        <briefdescription>
<para>Clear the outbound message queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="499" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1ab25ca466fa10477d1660d9afac0b5f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::discord_client::get_queue_size</definition>
        <argsstring>()</argsstring>
        <name>get_queue_size</name>
        <briefdescription>
<para>Get the size of the outbound message queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the queue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="506" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1af59b7db59d0fe39259efcb2380016ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::discord_client::is_connected</definition>
        <argsstring>()</argsstring>
        <name>is_connected</name>
        <briefdescription>
<para>Returns true if the shard is connected. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if connected </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="513" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a6fef02c819339ee1d088b39647d70957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref></type>
        <definition>dpp::utility::uptime dpp::discord_client::get_uptime</definition>
        <argsstring>()</argsstring>
        <name>get_uptime</name>
        <briefdescription>
<para>Returns the connection time of the shard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref> Detail of how long the shard has been connected for </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="520" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a5d2ce19636f235882ad32c285f645082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::discord_client::discord_client</definition>
        <argsstring>(dpp::cluster *_cluster, uint32_t _shard_id, uint32_t _max_shards, const std::string &amp;_token, uint32_t intents=0, bool compressed=true, websocket_protocol_t ws_protocol=ws_json)</argsstring>
        <name>discord_client</name>
        <param>
          <type><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> *</type>
          <declname>_cluster</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_shard_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_max_shards</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_token</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>intents</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>compressed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1af7cde3079d745428f44ef6231a2ac672" kindref="member">websocket_protocol_t</ref></type>
          <declname>ws_protocol</declname>
          <defval><ref refid="namespacedpp_1af7cde3079d745428f44ef6231a2ac672abea765ef009bccd9080351f806bae437" kindref="member">ws_json</ref></defval>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>The owning cluster for this shard </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_shard_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the shard to start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_max_shards</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of shards across all clusters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_token</parametername>
</parameternamelist>
<parameterdescription>
<para>The bot token to use for identifying to the websocket </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intents</parametername>
</parameternamelist>
<parameterdescription>
<para>Privileged intents to use, a bitmask of values from <ref refid="namespacedpp_1a0042c0fc8164da4239b977d5be8e2ef5" kindref="member">dpp::intents</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressed</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the received data will be gzip compressed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ws_protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>Websocket protocol to use for the connection, JSON or ETF</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Passed up to the caller if any internal objects fail to allocate, after cleanup has completed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a3351021cf4eb96a90a7f0da8e1125af5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::discord_client::discord_client</definition>
        <argsstring>(discord_client &amp;old, uint64_t sequence, const std::string &amp;session_id)</argsstring>
        <name>discord_client</name>
        <param>
          <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> &amp;</type>
          <declname>old</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>session_id</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> object from another <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> object Used when resuming, the url to connect to will be taken from the resume url of the other object, along with the seq number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>old</parametername>
</parameternamelist>
<parameterdescription>
<para>Previous connection to resume from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence number of previous session </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>session_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Session ID of previous session </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="546" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a9938e74fa80b973beb1630063b6fc4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::discord_client::~discord_client</definition>
        <argsstring>()=default</argsstring>
        <name>~discord_client</name>
        <briefdescription>
<para>Destroy the discord client object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="551" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1ade85ebcbf1a24079511436d504940fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::discord_client::get_decompressed_bytes_in</definition>
        <argsstring>()</argsstring>
        <name>get_decompressed_bytes_in</name>
        <briefdescription>
<para>Get decompressed total bytes received. </para>
        </briefdescription>
        <detaileddescription>
<para>This will always return 0 if the connection is not compressed <simplesect kind="return"><para>uint64_t compressed bytes received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="559" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a8a40a57320d6b5d29a0274df0fb00fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::discord_client::handle_frame</definition>
        <argsstring>(const std::string &amp;buffer, ws_opcode opcode) override</argsstring>
        <name>handle_frame</name>
        <reimplements refid="classdpp_1_1websocket__client_1a44ecfaa8d4bf45ef4fe85633f486e7d7">handle_frame</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
          <declname>opcode</declname>
        </param>
        <briefdescription>
<para>Handle JSON from the websocket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The entire buffer content from the websocket client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of frame, e.g. text or binary </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if a frame has been handled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="567" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a976f8a37c513560e36bff6047185bc41" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::discord_client::error</definition>
        <argsstring>(uint32_t errorcode) override</argsstring>
        <name>error</name>
        <reimplements refid="classdpp_1_1websocket__client_1abd1b3d59beb6a505e81e2bf3374e2532">error</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>errorcode</declname>
        </param>
        <briefdescription>
<para>Handle a websocket error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errorcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error returned from the websocket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="573" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1ae659e7343de4a120d14f1b81e9535ea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_client::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
<para>Start and monitor I/O loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="578" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a08ceb69ad0261a465b6fb647e6bb2e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::discord_client::on_disconnect</definition>
        <argsstring>() override</argsstring>
        <name>on_disconnect</name>
        <reimplements refid="classdpp_1_1websocket__client_1afecbc8710086fb321d3253ff49d8c685">on_disconnect</reimplements>
        <briefdescription>
<para>Called when the HTTP socket is closed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="583" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a4aa6d61b499be3e88138e25bcf5209b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> &amp;</type>
        <definition>discord_client &amp; dpp::discord_client::connect_voice</definition>
        <argsstring>(snowflake guild_id, snowflake channel_id, bool self_mute=false, bool self_deaf=false, bool enable_dave=false)</argsstring>
        <name>connect_voice</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>self_mute</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>self_deaf</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_dave</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Connect to a voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild where the voice channel is </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID of the voice channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_mute</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the bot should mute itself </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_deaf</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the bot should deafen itself </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_dave</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable DAVE E2EE - EXPERIMENTAL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self </para>
</simplesect>
<simplesect kind="note"><para>This is NOT a synchronous blocking call! The bot isn&apos;t instantly ready to send or listen for audio, as we have to wait for the connection to the voice server to be established! e.g. wait for <ref refid="classdpp_1_1cluster_1a8f2f865ac3492196a8167a319261ffb6" kindref="member">dpp::cluster::on_voice_ready</ref> event, and then send the audio within that event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="598" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1a4ebc6597287a863b7b739d6a4c796f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> &amp;</type>
        <definition>discord_client &amp; dpp::discord_client::disconnect_voice</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>disconnect_voice</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Disconnect from the connected voice channel on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild who&apos;s voice channel you wish to disconnect from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self </para>
</simplesect>
<simplesect kind="note"><para>This is NOT a synchronous blocking call! The bot isn&apos;t instantly disconnected. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="607" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__client_1add9c5c491ce195ec7f0127d6c8ec36b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1voiceconn" kindref="compound">voiceconn</ref> *</type>
        <definition>voiceconn * dpp::discord_client::get_voice</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>get_voice</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classdpp_1_1voiceconn" kindref="compound">dpp::voiceconn</ref> object for a specific guild on this shard. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild ID to retrieve the voice connection for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>voiceconn* The voice connection for the guild, or nullptr if there is no voice connection to this guild. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="616" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a1a28fcb2647f4e1203c4aa1b842a2bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::write</definition>
        <argsstring>(const std::string_view data, ws_opcode _opcode=OP_AUTO)</argsstring>
        <name>write</name>
        <param>
          <type>const std::string_view</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
          <declname>_opcode</declname>
          <defval><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1ca3b445e535f31d7de2d862b4c44020e99" kindref="member">OP_AUTO</ref></defval>
        </param>
        <briefdescription>
<para>Write to websocket. Encapsulates data in frames if the status is CONNECTED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The opcode of the data to send, either binary or text. The default is to use the socket&apos;s opcode as set in the constructor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="205" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ae4b1e98d3e535a13fd912cdb00fc4c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::websocket_client::handle_buffer</definition>
        <argsstring>(std::string &amp;buffer) override</argsstring>
        <name>handle_buffer</name>
        <reimplements refid="classdpp_1_1ssl__connection_1a321015d761b174db3f4ffb2551bb2f99">handle_buffer</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Processes incoming frames from the SSL socket input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents. Can modify this value removing the head elements when processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="211" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ab872768661dc89d54f0381b0fff5b674" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::close</definition>
        <argsstring>() override</argsstring>
        <name>close</name>
        <reimplements refid="classdpp_1_1ssl__connection_1ab0e1c646dc2d36679ca2ef8b1e3fd3de">close</reimplements>
        <briefdescription>
<para>Close websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="216" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a2613fa8b73b1e7960c62bfe8cdef1dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::websocket_client::send_close_packet</definition>
        <argsstring>()</argsstring>
        <name>send_close_packet</name>
        <briefdescription>
<para>Send OP_CLOSE error code 1000 to the other side of the connection. This indicates graceful close. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This informs Discord to invalidate the session, you cannot resume if you send this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="244" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a3f8164696a6ffedcf9db89b7b4a2ea6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::enable_raw_tracing</definition>
        <argsstring>()</argsstring>
        <name>enable_raw_tracing</name>
        <briefdescription>
<para>For low-level debugging, calling this function will enable low level I/O logging for this connection to the logger. This can be very loud, and output a lot of data, so only enable it selectively where you need it. </para>
        </briefdescription>
        <detaileddescription>
<para>Generally, you won&apos;t need this, it is a library development utility. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="249" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ac69282a18c63bd1ddfaa87ba83410979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_bytes_out</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_out</name>
        <briefdescription>
<para>Get the bytes out objectGet total bytes sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes sent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="255" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a28c4296db4b541d99478c6db493f4b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_bytes_in</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_in</name>
        <briefdescription>
<para>Get total bytes received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="261" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a3cc296231589356506a103ad8c7eee74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_unique_id</definition>
        <argsstring>() const</argsstring>
        <name>get_unique_id</name>
        <briefdescription>
<para>Every request made has a unique ID. This increments for every request, starting at 1. You can use this for statistics, or to associate requests and replies in external event loops. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Unique ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="269" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ab2f2c18aff43ac8dfbfa58bc5dc71fa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::get_cipher</definition>
        <argsstring>()</argsstring>
        <name>get_cipher</name>
        <briefdescription>
<para>Get SSL cipher name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string ssl cipher name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="275" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::read_loop</definition>
        <argsstring>()</argsstring>
        <name>read_loop</name>
        <briefdescription>
<para>Set up non blocking I/O and configure on_read, on_write and on_error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::exception</parametername>
</parameternamelist>
<parameterdescription>
<para>Any std::exception (or derivative) thrown from <ref refid="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" kindref="member">read_loop()</ref> indicates setup failed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="324" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ae0fe670d8829bcfe600856a4c4adee00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::socket_write</definition>
        <argsstring>(const std::string_view data)</argsstring>
        <name>socket_write</name>
        <param>
          <type>const std::string_view</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write to the output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The data may not be written immediately and may be written at a later time to the socket. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="344" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1acdd1152134b624d18a9e82162e64bafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::complete_handshake</definition>
        <argsstring>(const struct socket_events *ev)</argsstring>
        <name>complete_handshake</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">socket_events</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Called while SSL handshake is in progress. If the handshake completes, the state of the socket is progressed to an established state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events for the socket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="364" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a8c50238080a887b09473c82bff8de817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_read</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;ev)</argsstring>
        <name>on_read</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Called when the TCP socket has data to read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="371" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a07c9f5c2dfff5ef27db1e148589e2e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_write</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;e)</argsstring>
        <name>on_write</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Called when the TCP socket can be written to without blocking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="378" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a8732ae4599f38f41d27de3f4c1c7cae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_error</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;, int error_code)</argsstring>
        <name>on_error</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
<para>Called when there is an error on the TCP socket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="385" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a discord client. Each <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> connects to one shard and derives from a websocket client. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::ssl_connection</label>
        <link refid="classdpp_1_1ssl__connection"/>
      </node>
      <node id="2">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>bool</label>
      </node>
      <node id="24">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="15">
        <label>double</label>
      </node>
      <node id="23">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="24" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="4" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>socketengine</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>last_ping_message</edgelabel>
          <edgelabel>resume_gateway_url</edgelabel>
          <edgelabel>sessionid</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>reconnects</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
          <edgelabel>last_heartbeat_ack</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>protocol</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="17">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="18" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="10" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::ssl_connection</label>
        <link refid="classdpp_1_1ssl__connection"/>
        <childnode refid="4" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
          <edgelabel>private_key_file</edgelabel>
          <edgelabel>public_key_file</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_tick</edgelabel>
          <edgelabel>start</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>connect_retries</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
          <edgelabel>unique_id</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>connected</edgelabel>
          <edgelabel>keepalive</edgelabel>
          <edgelabel>plaintext</edgelabel>
          <edgelabel>raw_trace</edgelabel>
          <edgelabel>tcp_connect_done</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>timer_handle</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="10" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>timed_out</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>event_router_t&lt;</label>
      </node>
      <node id="6">
        <label>int</label>
      </node>
      <node id="19">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="20" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>openssl_connection *</label>
      </node>
      <node id="12">
        <label>size_t</label>
      </node>
      <node id="26">
        <label>atomic_bool</label>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="29">
        <label>std::shared_mutex</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="30">
        <label>unordered_map&lt;</label>
      </node>
      <node id="8">
        <label>time_t</label>
      </node>
      <node id="22">
        <label>uint16_t</label>
      </node>
      <node id="14">
        <label>uint32_t</label>
      </node>
      <node id="10">
        <label>uint64_t</label>
      </node>
      <node id="9">
        <label>uint8_t</label>
      </node>
      <node id="25">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/discordclient.h" line="238" column="1" bodyfile="include/dpp/discordclient.h" bodystart="239" bodyend="617"/>
    <listofallmembers>
      <member refid="classdpp_1_1ssl__connection_1a4a8b48487e16cefed1f12821f64fa5e8" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>buffer</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8715f4363a7c5ef7ddc5439d5ff2394a" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>bytes_in</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad9fccc5b66b4a5713b54d8ed1ab9c743" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>bytes_out</name></member>
      <member refid="classdpp_1_1ssl__connection_1a0e0c14fe8f51c54ea280509c8c0e5140" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>cipher</name></member>
      <member refid="classdpp_1_1discord__client_1a89e7fc69efa6e8e35123c31e13a5e479" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>cleanup</name></member>
      <member refid="classdpp_1_1discord__client_1a0ea5213ee46a61afc7c901c66051db3f" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>clear_queue</name></member>
      <member refid="classdpp_1_1websocket__client_1ab872768661dc89d54f0381b0fff5b674" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>close</name></member>
      <member refid="classdpp_1_1ssl__connection_1acdd1152134b624d18a9e82162e64bafe" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>complete_handshake</name></member>
      <member refid="classdpp_1_1discord__client_1a298936775c800395bb933f2e8d7aeb30" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>compressed</name></member>
      <member refid="classdpp_1_1websocket__client_1abce54f634a3b43f4b9b5bac5d1e99702" prot="protected" virt="virtual"><scope>dpp::discord_client</scope><name>connect</name></member>
      <member refid="classdpp_1_1ssl__connection_1a0d85356b40ea02323cc161af4f5467fc" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>connect_retries</name></member>
      <member refid="classdpp_1_1discord__client_1ad5b9759853019efe55112f13d589b0e1" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>connect_time</name></member>
      <member refid="classdpp_1_1discord__client_1a4aa6d61b499be3e88138e25bcf5209b0" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>connect_voice</name></member>
      <member refid="classdpp_1_1ssl__connection_1acf9eb0208d63e142a421f7f778b3a939" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>connected</name></member>
      <member refid="classdpp_1_1discord__client_1ac254a3401c868ed2ad29adebab0ecf3c" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>connecting_voice_channels</name></member>
      <member refid="classdpp_1_1discord__client_1afed78d2e1b09e006ede8b4690895a866" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>creator</name></member>
      <member refid="classdpp_1_1discord__client_1ac9efcc6052f2fc585cbaa96786ee734d" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>decompressed</name></member>
      <member refid="classdpp_1_1discord__client_1a4ebc6597287a863b7b739d6a4c796f78" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>disconnect_voice</name></member>
      <member refid="classdpp_1_1discord__client_1ad6720e53bbc68722cc807dbd05b5fb71" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>disconnect_voice_internal</name></member>
      <member refid="classdpp_1_1discord__client_1a5d2ce19636f235882ad32c285f645082" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>discord_client</name></member>
      <member refid="classdpp_1_1discord__client_1a3351021cf4eb96a90a7f0da8e1125af5" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>discord_client</name></member>
      <member refid="classdpp_1_1ssl__connection_1a74d9da0f1f0c5feb46ed0995bd7d2e05" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>do_raw_trace</name></member>
      <member refid="classdpp_1_1discord__client_1a836b658e110edfcbb21ea88b2ad90e90" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>dpp::cluster</name></member>
      <member refid="classdpp_1_1discord__client_1a38bd58112bc810d3a3ac9d88a316d2e9" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>dpp::events::guild_create</name></member>
      <member refid="classdpp_1_1discord__client_1af5314358ae06ff298fbe659984648c86" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>dpp::events::voice_state_update</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3f8164696a6ffedcf9db89b7b4a2ea6d" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>enable_raw_tracing</name></member>
      <member refid="classdpp_1_1discord__client_1a976f8a37c513560e36bff6047185bc41" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>error</name></member>
      <member refid="classdpp_1_1discord__client_1a45c4f8b68d2bbdd5cc95fd766df2acd1" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>etf</name></member>
      <member refid="classdpp_1_1ssl__connection_1a28c4296db4b541d99478c6db493f4b03" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_bytes_in</name></member>
      <member refid="classdpp_1_1ssl__connection_1ac69282a18c63bd1ddfaa87ba83410979" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_bytes_out</name></member>
      <member refid="classdpp_1_1discord__client_1aad490f19d38e26deff51dccbfd1c445c" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_channel_count</name></member>
      <member refid="classdpp_1_1ssl__connection_1ab2f2c18aff43ac8dfbfa58bc5dc71fa1" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_cipher</name></member>
      <member refid="classdpp_1_1discord__client_1ade85ebcbf1a24079511436d504940fcf" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_decompressed_bytes_in</name></member>
      <member refid="classdpp_1_1discord__client_1a24e750fd3a503a65b41ab6525b7b2e72" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_guild_count</name></member>
      <member refid="classdpp_1_1discord__client_1ad74f28655846f30487d931bb1e3b1639" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_member_count</name></member>
      <member refid="classdpp_1_1discord__client_1ab25ca466fa10477d1660d9afac0b5f28" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_queue_size</name></member>
      <member refid="classdpp_1_1websocket__client_1a2d64dce5afa6a2e3a125b915316d7f6a" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_state</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3cc296231589356506a103ad8c7eee74" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_unique_id</name></member>
      <member refid="classdpp_1_1discord__client_1a6fef02c819339ee1d088b39647d70957" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_uptime</name></member>
      <member refid="classdpp_1_1discord__client_1add9c5c491ce195ec7f0127d6c8ec36b7" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>get_voice</name></member>
      <member refid="classdpp_1_1websocket__client_1ae4b1e98d3e535a13fd912cdb00fc4c05" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>handle_buffer</name></member>
      <member refid="classdpp_1_1discord__client_1acb3fb468cc8df83f10be24d844d70c83" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>handle_event</name></member>
      <member refid="classdpp_1_1discord__client_1a8a40a57320d6b5d29a0274df0fb00fd6" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>handle_frame</name></member>
      <member refid="classdpp_1_1discord__client_1a62f72c7433043cbb61fe1917efabd2f7" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>heartbeat_interval</name></member>
      <member refid="classdpp_1_1ssl__connection_1aedf42057136f2fae90424a18daddce51" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>hostname</name></member>
      <member refid="classdpp_1_1discord__client_1acdea0fb06605d44be0161991c5d68e58" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>intents</name></member>
      <member refid="classdpp_1_1discord__client_1af59b7db59d0fe39259efcb2380016ee4" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>is_connected</name></member>
      <member refid="classdpp_1_1discord__client_1a43d77bd4e49d0d55120ac109de69d523" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>jsonobj_to_string</name></member>
      <member refid="classdpp_1_1ssl__connection_1aaba3255abd8ec8e94d1781771cfc9acb" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>keepalive</name></member>
      <member refid="classdpp_1_1discord__client_1ac6ef401a0b38b2cce833d184ddf38bbb" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>last_heartbeat</name></member>
      <member refid="classdpp_1_1discord__client_1a611a05e14a49affa23f58ea173d829ba" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>last_heartbeat_ack</name></member>
      <member refid="classdpp_1_1discord__client_1a383edc7149932f62c2e24672487df17f" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>last_ping_message</name></member>
      <member refid="classdpp_1_1discord__client_1a8dc9f84c9b65a58f8e9eea6326a424bd" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>last_seq</name></member>
      <member refid="classdpp_1_1ssl__connection_1a9494e0dd128b5415a96d6ff9d24789aa" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>last_tick</name></member>
      <member refid="classdpp_1_1discord__client_1ac8c04aa0b82c13324c8a4fe9dc3f697e" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>log</name></member>
      <member refid="classdpp_1_1discord__client_1a7e8e56675006b1af1c09d8de1519f001" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>max_shards</name></member>
      <member refid="classdpp_1_1discord__client_1a0c7eeee6642b74777eb48b90b5d5c3b4" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>message_queue</name></member>
      <member refid="classdpp_1_1ssl__connection_1a80a568dbb2049f4727c0efdde185699e" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>obuffer</name></member>
      <member refid="classdpp_1_1ssl__connection_1a4bdff78b127e920033d0d9f8fb58d456" prot="protected" virt="virtual"><scope>dpp::discord_client</scope><name>on_buffer_drained</name></member>
      <member refid="classdpp_1_1discord__client_1a08ceb69ad0261a465b6fb647e6bb2e7a" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>on_disconnect</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8732ae4599f38f41d27de3f4c1c7cae6" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>on_error</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8c50238080a887b09473c82bff8de817" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>on_read</name></member>
      <member refid="classdpp_1_1ssl__connection_1a07c9f5c2dfff5ef27db1e148589e2e26" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>on_write</name></member>
      <member refid="classdpp_1_1discord__client_1a22449f499a4b4e952e8de4fd85c45e71" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>one_second_timer</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3ae20842849f8c2f0174902dc70d7e97" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>owner</name></member>
      <member refid="classdpp_1_1discord__client_1a250f37b3cbff382ae91dc662366571ec" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>ping_start</name></member>
      <member refid="classdpp_1_1ssl__connection_1addf00646298eba9176a675bba7269f27" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>plaintext</name></member>
      <member refid="classdpp_1_1ssl__connection_1a39851da532b2f7ee33570e3b1dafd097" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>port</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa8cfa2e6c511022b67dbd97cc57f0731" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>private_key_file</name></member>
      <member refid="classdpp_1_1discord__client_1afde2bb2612e474fbfda2d7312e2bc5e7" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>protocol</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad7feee672079e07699e25f7250021c66" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>public_key_file</name></member>
      <member refid="classdpp_1_1discord__client_1a123f98e2faef134f6954d9a91346fb8d" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>queue_message</name></member>
      <member refid="classdpp_1_1discord__client_1aab3808d0e5f68c28d305efa8d1cde6af" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>queue_mutex</name></member>
      <member refid="classdpp_1_1ssl__connection_1a62161bc05909fc1d67f3a59c5fbf6e79" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>raw_trace</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>read_loop</name></member>
      <member refid="classdpp_1_1discord__client_1a03ffb74d2fa81b0e6f0864848151fa90" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>ready</name></member>
      <member refid="classdpp_1_1discord__client_1af002768a9defc98dc3fcf777a95d8bcf" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>reconnects</name></member>
      <member refid="classdpp_1_1discord__client_1afcf709e96bb43c26953eabb2ac0227fd" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>resume_gateway_url</name></member>
      <member refid="classdpp_1_1discord__client_1a575bb766c7c9e8ea510392265c0abba6" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>resumes</name></member>
      <member refid="classdpp_1_1discord__client_1ae659e7343de4a120d14f1b81e9535ea0" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>run</name></member>
      <member refid="classdpp_1_1websocket__client_1a2613fa8b73b1e7960c62bfe8cdef1dd7" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>send_close_packet</name></member>
      <member refid="classdpp_1_1discord__client_1a66922f8fbb2df8c1c92744f4eb524a52" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>sessionid</name></member>
      <member refid="classdpp_1_1discord__client_1a5b19bc3ad4248b19b08ebc65eea9947b" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>set_resume_hostname</name></member>
      <member refid="classdpp_1_1ssl__connection_1abd9c3cf6150d3c7e2badd12829437207" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>sfd</name></member>
      <member refid="classdpp_1_1discord__client_1aa11253c28f842aad3939e9d3138a0c6d" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>shard_id</name></member>
      <member refid="classdpp_1_1ssl__connection_1ae0fe670d8829bcfe600856a4c4adee00" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>socket_write</name></member>
      <member refid="classdpp_1_1ssl__connection_1a61cccaa18278dabe8eae3eafbf8dd1e7" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>ssl</name></member>
      <member refid="classdpp_1_1ssl__connection_1a77bd0f626125dfef52cfe7fe40216772" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>ssl_connection</name></member>
      <member refid="classdpp_1_1ssl__connection_1a4652c6caae2d9387f580e82f717d0f26" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>ssl_connection</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad694f10e342b640f5fa6e88119c86a17" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>start</name></member>
      <member refid="classdpp_1_1discord__client_1a7eadcab0e2fdc157e32c1645fa6e6d3c" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>start_connecting</name></member>
      <member refid="classdpp_1_1ssl__connection_1a69e9248f431daf428683b1152c05b1a6" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>tcp_connect_done</name></member>
      <member refid="classdpp_1_1websocket__client_1a0d8399d578f3dc811f3ef5a663a2064b" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>timed_out</name></member>
      <member refid="classdpp_1_1websocket__client_1aed68bb754ba3745b6fbb895d16f96809" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>timeout</name></member>
      <member refid="classdpp_1_1ssl__connection_1a216b85ccf220d2aa66e9a4397dcdf4a3" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>timer_handle</name></member>
      <member refid="classdpp_1_1discord__client_1ac6f6acb88970deecd85236fc0df8be78" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>token</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa7a9277f5c258712b00e91b9cd062095" prot="protected" virt="non-virtual"><scope>dpp::discord_client</scope><name>unique_id</name></member>
      <member refid="classdpp_1_1discord__client_1ac0f38f917182d7b847c8cabeed029e42" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>voice_mutex</name></member>
      <member refid="classdpp_1_1websocket__client_1a40b00c90da14a301522a756f8e93490d" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>websocket_client</name></member>
      <member refid="classdpp_1_1discord__client_1a5e39136f09297f7ba0ab6a449e435f3d" prot="public" virt="non-virtual"><scope>dpp::discord_client</scope><name>websocket_ping</name></member>
      <member refid="classdpp_1_1websocket__client_1a1a28fcb2647f4e1203c4aa1b842a2bc9" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>write</name></member>
      <member refid="classdpp_1_1discord__client_1a341e5371571a63f1a20ef4f1b0015cb8" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>zlib</name></member>
      <member refid="classdpp_1_1discord__client_1a72a08a27b0d61b82e88ceb92b557cb8e" prot="private" virt="non-virtual"><scope>dpp::discord_client</scope><name>zlib_mutex</name></member>
      <member refid="classdpp_1_1discord__client_1a9938e74fa80b973beb1630063b6fc4ac" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>~discord_client</name></member>
      <member refid="classdpp_1_1ssl__connection_1a23c94174be8ca86f9d4e30931bd4ff12" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>~ssl_connection</name></member>
      <member refid="classdpp_1_1websocket__client_1a32f422f3a5a7a1aeb35a273be5c66d17" prot="public" virt="virtual"><scope>dpp::discord_client</scope><name>~websocket_client</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
