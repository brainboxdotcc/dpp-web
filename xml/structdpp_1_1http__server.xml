<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1http__server" kind="struct" language="C++" prot="public">
    <compoundname>dpp::http_server</compoundname>
    <basecompoundref refid="structdpp_1_1socket__listener" prot="public" virt="non-virtual">dpp::socket_listener&lt; http_server_request &gt;</basecompoundref>
    <derivedcompoundref refid="structdpp_1_1discord__webhook__server" prot="public" virt="non-virtual">dpp::discord_webhook_server</derivedcompoundref>
    <includes local="no">http_server.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1http__server_1ae7393791211c60ba31911346f5cc1a02" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::http_server::bound_port</definition>
        <argsstring></argsstring>
        <name>bound_port</name>
        <briefdescription>
<para>Port we are listening on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server.h" line="47" column="10" bodyfile="include/dpp/http_server.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1socket__listener_1afa52fd464901a764d39060c7ea640acd" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref></type>
        <definition>event_handle dpp::socket_listener&lt; http_server_request , typename &gt;::close_event</definition>
        <argsstring></argsstring>
        <name>close_event</name>
        <briefdescription>
<para>Event to handle socket removal from the connection map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socket_listener.h" line="81" column="14" bodyfile="include/dpp/socket_listener.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1socket__listener_1a23171433eef1f1955dd881427ad8683a" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">socket</ref>, std::unique_ptr&lt; <ref refid="classdpp_1_1http__server__request" kindref="compound">http_server_request</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;socket, std::unique_ptr&lt;http_server_request &gt; &gt; dpp::socket_listener&lt; http_server_request , typename &gt;::connections</definition>
        <argsstring></argsstring>
        <name>connections</name>
        <briefdescription>
<para>Active connections for the server of type T. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socket_listener.h" line="56" column="20" bodyfile="include/dpp/socket_listener.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1socket__listener_1adc251f3dfe1c146603983b63e5ccf443" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>cluster* dpp::socket_listener&lt; http_server_request , typename &gt;::creator</definition>
        <argsstring></argsstring>
        <name>creator</name>
        <briefdescription>
<para>Cluster creator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socket_listener.h" line="61" column="9" bodyfile="include/dpp/socket_listener.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1socket__listener_1a4c98537155766c325a8d417d873e2017" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1socket__events" kindref="compound">socket_events</ref></type>
        <definition>socket_events dpp::socket_listener&lt; http_server_request , typename &gt;::events</definition>
        <argsstring></argsstring>
        <name>events</name>
        <briefdescription>
<para>Socket events for listen socket in the socket engine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socket_listener.h" line="86" column="15" bodyfile="include/dpp/socket_listener.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1socket__listener_1a3fed071f1108cd751b3381876175943a" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1raii__socket" kindref="compound">raii_socket</ref></type>
        <definition>raii_socket dpp::socket_listener&lt; http_server_request , typename &gt;::fd</definition>
        <argsstring></argsstring>
        <name>fd</name>
        <briefdescription>
<para>The listening socket for incoming connections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socket_listener.h" line="51" column="13" bodyfile="include/dpp/socket_listener.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1socket__listener_1a0e6f31168b3302c71a1334dd7a65a0ab" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::socket_listener&lt; http_server_request , typename &gt;::plaintext</definition>
        <argsstring></argsstring>
        <name>plaintext</name>
        <briefdescription>
<para>True if plain text connections to the server are allowed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socket_listener.h" line="66" column="6" bodyfile="include/dpp/socket_listener.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1socket__listener_1a102e5f91201e187e13f57816b180d66f" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::socket_listener&lt; http_server_request , typename &gt;::private_key_file</definition>
        <argsstring></argsstring>
        <name>private_key_file</name>
        <briefdescription>
<para>Private key PEM file path, if running an SSL server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socket_listener.h" line="71" column="13" bodyfile="include/dpp/socket_listener.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1socket__listener_1a85d5ba5395875c51c4952620c5cbb2f9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::socket_listener&lt; http_server_request , typename &gt;::public_key_file</definition>
        <argsstring></argsstring>
        <name>public_key_file</name>
        <briefdescription>
<para>Public key PEM file path, if running an SSL server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socket_listener.h" line="76" column="13" bodyfile="include/dpp/socket_listener.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1http__server_1a0cc660796d16d37a42befb0c02b90b6d" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a9758c1c5e9637e64e889b672ef62465b" kindref="member">http_server_request_event</ref></type>
        <definition>http_server_request_event dpp::http_server::request_handler</definition>
        <argsstring></argsstring>
        <name>request_handler</name>
        <briefdescription>
<para>Request handler callback to use for all incoming HTTP(S) requests. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server.h" line="42" column="27" bodyfile="include/dpp/http_server.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1http__server_1a2ba3e4e702e493ed89bba850c3c60ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::http_server::http_server</definition>
        <argsstring>(cluster *creator, const std::string_view address, uint16_t port, http_server_request_event handle_request, const std::string &amp;private_key=&quot;&quot;, const std::string &amp;public_key=&quot;&quot;)</argsstring>
        <name>http_server</name>
        <param>
          <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>creator</declname>
        </param>
        <param>
          <type>const std::string_view</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a9758c1c5e9637e64e889b672ef62465b" kindref="member">http_server_request_event</ref></type>
          <declname>handle_request</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>private_key</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>public_key</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Constructor for creation of a HTTP(S) server. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>creator</parametername>
</parameternamelist>
<parameterdescription>
<para>Cluster creator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>address to bind to, use &quot;0.0.0.0&quot; to bind to all local addresses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>port to bind to. You should generally use a port &gt; 1024. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle_request</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to call for each pending request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Private key PEM file for HTTPS/SSL. If empty, a plaintext server is created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Public key PEM file for HTTPS/SSL. If empty, a plaintext server is created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1http__server_1af0f3faa04128894c0398a6665b15e859" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual dpp::http_server::~http_server</definition>
        <argsstring>()</argsstring>
        <name>~http_server</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server.h" line="69" column="9" bodyfile="include/dpp/http_server.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1http__server_1ae343e1e2425664d6263b2e0e836b6671" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::http_server::emplace</definition>
        <argsstring>(socket newfd) override</argsstring>
        <name>emplace</name>
        <reimplements refid="structdpp_1_1socket__listener_1ad4a3c8e33a7e71067b47e3b00bc53e3a">emplace</reimplements>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">socket</ref></type>
          <declname>newfd</declname>
        </param>
        <briefdescription>
<para>Emplace a new request into the connection pool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newfd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor of new request </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server.h" line="64" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__listener_1a1a3d7791b273a8056f306ae1874c2a47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::socket_listener&lt; http_server_request , typename &gt;::handle_accept</definition>
        <argsstring>(socket sfd, const struct socket_events &amp;e)</argsstring>
        <name>handle_accept</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">socket</ref></type>
          <declname>sfd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">socket_events</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Handle a new incoming socket with accept() Accepts a new connection, and calls <ref refid="structdpp_1_1socket__listener_1ad4a3c8e33a7e71067b47e3b00bc53e3a" kindref="member">emplace()</ref> if valid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sfd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor for listening socket </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>socket events for the listening socket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socket_listener.h" line="139" column="14" bodyfile="include/dpp/socket_listener.h" bodystart="139" bodyend="144"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Creates a simple HTTP server which listens on a TCP port for a plaintext or SSL incoming request, and passes that request to a callback to generate the response. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>dpp::discord_webhook_server</label>
        <link refid="structdpp_1_1discord__webhook__server"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::http_server</label>
        <link refid="structdpp_1_1http__server"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::socket_listener&lt; T, typename &gt;</label>
        <link refid="structdpp_1_1socket__listener"/>
      </node>
      <node id="2">
        <label>dpp::socket_listener&lt; http_server_request &gt;</label>
        <link refid="structdpp_1_1socket__listener"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; http_server_request &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21">
        <label>bool</label>
      </node>
      <node id="25">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="12">
        <label>double</label>
      </node>
      <node id="24">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="25" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="8" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>socketengine</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::http_server</label>
        <link refid="structdpp_1_1http__server"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>request_handler</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>bound_port</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="14">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="15" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>dpp::raii_socket</label>
        <link refid="structdpp_1_1raii__socket"/>
        <childnode refid="5" relation="usage">
          <edgelabel>fd</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="16" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>dpp::socket_events</label>
        <link refid="structdpp_1_1socket__events"/>
        <childnode refid="5" relation="usage">
          <edgelabel>fd</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>on_read</edgelabel>
          <edgelabel>on_write</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>on_error</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::socket_listener&lt; T, typename &gt;</label>
        <link refid="structdpp_1_1socket__listener"/>
        <childnode refid="4" relation="usage">
          <edgelabel>fd</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>connections</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>plaintext</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>private_key_file</edgelabel>
          <edgelabel>public_key_file</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>close_event</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>events</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>primary_guild</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="16" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::utility::primaryguild</label>
        <link refid="structdpp_1_1utility_1_1primaryguild"/>
        <childnode refid="15" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>enabled</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>tag</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>badge</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>event_router_t&lt;</label>
      </node>
      <node id="5">
        <label>int</label>
      </node>
      <node id="17">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="18" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>size_t</label>
      </node>
      <node id="2">
        <label>dpp::socket_listener&lt; http_server_request &gt;</label>
        <link refid="structdpp_1_1socket__listener"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; http_server_request &gt;</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>atomic_bool</label>
      </node>
      <node id="9">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="34">
        <label>function&lt; void(class http_server_request *)&gt;</label>
      </node>
      <node id="32">
        <label>function&lt; void(dpp::socket fd, const struct socket_events &amp;)&gt;</label>
      </node>
      <node id="33">
        <label>function&lt; void(dpp::socket fd, const struct socket_events &amp;, int error_code)&gt;</label>
      </node>
      <node id="8">
        <label>std::string</label>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="6">
        <label>unordered_map&lt;</label>
      </node>
      <node id="10">
        <label>time_t</label>
      </node>
      <node id="22">
        <label>uint16_t</label>
      </node>
      <node id="11">
        <label>uint32_t</label>
      </node>
      <node id="16">
        <label>uint64_t</label>
      </node>
      <node id="23">
        <label>uint8_t</label>
      </node>
      <node id="26">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/http_server.h" line="37" column="1" bodyfile="include/dpp/http_server.h" bodystart="37" bodyend="72"/>
    <listofallmembers>
      <member refid="structdpp_1_1http__server_1ae7393791211c60ba31911346f5cc1a02" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>bound_port</name></member>
      <member refid="structdpp_1_1socket__listener_1afa52fd464901a764d39060c7ea640acd" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>close_event</name></member>
      <member refid="structdpp_1_1socket__listener_1a23171433eef1f1955dd881427ad8683a" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>connections</name></member>
      <member refid="structdpp_1_1socket__listener_1adc251f3dfe1c146603983b63e5ccf443" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>creator</name></member>
      <member refid="structdpp_1_1http__server_1ae343e1e2425664d6263b2e0e836b6671" prot="public" virt="virtual"><scope>dpp::http_server</scope><name>emplace</name></member>
      <member refid="structdpp_1_1socket__listener_1a4c98537155766c325a8d417d873e2017" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>events</name></member>
      <member refid="structdpp_1_1socket__listener_1a3fed071f1108cd751b3381876175943a" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>fd</name></member>
      <member refid="structdpp_1_1socket__listener_1a1a3d7791b273a8056f306ae1874c2a47" prot="public" virt="virtual"><scope>dpp::http_server</scope><name>handle_accept</name></member>
      <member refid="structdpp_1_1http__server_1a2ba3e4e702e493ed89bba850c3c60ad5" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>http_server</name></member>
      <member refid="structdpp_1_1socket__listener_1a0e6f31168b3302c71a1334dd7a65a0ab" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>plaintext</name></member>
      <member refid="structdpp_1_1socket__listener_1a102e5f91201e187e13f57816b180d66f" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>private_key_file</name></member>
      <member refid="structdpp_1_1socket__listener_1a85d5ba5395875c51c4952620c5cbb2f9" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>public_key_file</name></member>
      <member refid="structdpp_1_1http__server_1a0cc660796d16d37a42befb0c02b90b6d" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>request_handler</name></member>
      <member refid="structdpp_1_1socket__listener_1aeb8aa4b7c686ff415157ceb9c117e479" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>socket_listener</name></member>
      <member refid="structdpp_1_1http__server_1af0f3faa04128894c0398a6665b15e859" prot="public" virt="virtual"><scope>dpp::http_server</scope><name>~http_server</name></member>
      <member refid="structdpp_1_1socket__listener_1ada36ac97c4b68ace8653394fb94f6107" prot="public" virt="non-virtual"><scope>dpp::http_server</scope><name>~socket_listener</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
