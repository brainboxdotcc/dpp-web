<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1detail_1_1task__chain__final__awaiter" kind="struct" language="C++" prot="public">
    <compoundname>dpp::detail::task_chain_final_awaiter</compoundname>
    <includes local="no">task.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__chain__final__awaiter_1a83ae32d8b73800d6fd3d534ffe218bef" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::detail::task_chain_final_awaiter&lt; R &gt;::await_ready</definition>
        <argsstring>() const noexcept</argsstring>
        <name>await_ready</name>
        <briefdescription>
<para>Always suspend at the end of the task. This allows us to clean up and resume the parent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="463" column="6" bodyfile="include/dpp/coro/task.h" bodystart="463" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__chain__final__awaiter_1af6907b3b7a4c3123f4b2d5104aa703d7" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std_coroutine::coroutine_handle</type>
        <definition>std_coroutine::coroutine_handle dpp::detail::task_chain_final_awaiter&lt; R &gt;::await_suspend</definition>
        <argsstring>(detail::task_handle&lt; R &gt; handle) const noexcept</argsstring>
        <name>await_suspend</name>
        <param>
          <type><ref refid="namespacedpp_1_1detail_1a1974b691b8f794108af6b50381ee3075" kindref="member">detail::task_handle</ref>&lt; R &gt;</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="473" column="2" bodyfile="include/dpp/coro/task.h" bodystart="667" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__chain__final__awaiter_1a7325d3b31c0d06524f36b1aaca4a45b0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task_chain_final_awaiter&lt; R &gt;::await_resume</definition>
        <argsstring>() const noexcept</argsstring>
        <name>await_resume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="478" column="6" bodyfile="include/dpp/coro/task.h" bodystart="478" bodyend="478"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The object automatically co_await-ed at the end of a task. Ensures nested task chains are resolved, and the promise cleans up if it needs to. </para>
    </briefdescription>
    <detaileddescription>
<para>Awaitable returned from <ref refid="structdpp_1_1detail_1_1task__promise" kindref="compound">task_promise</ref>&apos;s final_suspend. Resumes the parent and cleans up its handle if needed. </para>
    </detaileddescription>
    <location file="include/dpp/coro/task.h" line="459" column="1" bodyfile="include/dpp/coro/task.h" bodystart="459" bodyend="479"/>
    <listofallmembers>
      <member refid="structdpp_1_1detail_1_1task__chain__final__awaiter_1a83ae32d8b73800d6fd3d534ffe218bef" prot="public" virt="non-virtual"><scope>dpp::detail::task_chain_final_awaiter</scope><name>await_ready</name></member>
      <member refid="structdpp_1_1detail_1_1task__chain__final__awaiter_1a7325d3b31c0d06524f36b1aaca4a45b0" prot="public" virt="non-virtual"><scope>dpp::detail::task_chain_final_awaiter</scope><name>await_resume</name></member>
      <member refid="structdpp_1_1detail_1_1task__chain__final__awaiter_1af6907b3b7a4c3123f4b2d5104aa703d7" prot="public" virt="non-virtual"><scope>dpp::detail::task_chain_final_awaiter</scope><name>await_suspend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
