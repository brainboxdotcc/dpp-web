<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback" kind="struct" language="C++" prot="private">
    <compoundname>dpp::detail::async::async_base::shared_callback</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1adeb83f4e56980a26ab7886cf41132907" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1detail_1_1async_1_1async__callback__data" kindref="compound">async_callback_data</ref>&lt; R &gt; *</type>
        <definition>async_callback_data&lt;R&gt;* dpp::detail::async::async_base&lt; R &gt;::shared_callback::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <initializer>= new <ref refid="structdpp_1_1detail_1_1async_1_1async__callback__data" kindref="compound">async_callback_data</ref>&lt;R&gt;</initializer>
        <briefdescription>
<para>Self-managed ref-counted pointer to the state data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="132" column="21" bodyfile="include/dpp/coro/async.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a31ecaa934028fb98308c68e53c2f019e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::convertible_to&lt; R &gt;</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dpp::detail::async::async_base&lt; R &gt;::shared_callback::operator()</definition>
        <argsstring>(V &amp;&amp;cback) const</argsstring>
        <name>operator()</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>cback</declname>
        </param>
        <briefdescription>
<para>Callback function. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs the callback data, and if the coroutine was awaiting, resume it <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cback</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the API call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Forwarding reference convertible to R </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="142" column="6" bodyfile="include/dpp/coro/async.h" bodystart="142" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1ac03be8eb9e207e282fcd4ff4c2207d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::async::async_base&lt; R &gt;::shared_callback::shared_callback</definition>
        <argsstring>()=default</argsstring>
        <name>shared_callback</name>
        <briefdescription>
<para>Main constructor, allocates a new callback_state object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1af3295e2c5b5e41fd9778dff38509ed6f" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::async::async_base&lt; R &gt;::shared_callback::shared_callback</definition>
        <argsstring>(detail::empty_tag_t) noexcept</argsstring>
        <name>shared_callback</name>
        <param>
          <type><ref refid="structdpp_1_1detail_1_1empty__tag__t" kindref="compound">detail::empty_tag_t</ref></type>
        </param>
        <briefdescription>
<para>Empty constructor, holds no state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="157" column="10" bodyfile="include/dpp/coro/async.h" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a59f61a9a38cae3806fcff9a3f4325efa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::async::async_base&lt; R &gt;::shared_callback::shared_callback</definition>
        <argsstring>(const shared_callback &amp;other) noexcept</argsstring>
        <name>shared_callback</name>
        <param>
          <type>const shared_callback &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. Takes shared ownership of the callback state, increasing the reference count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="162" column="1" bodyfile="include/dpp/coro/async.h" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a6f3881d525447da5b424121b279e9545" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::async::async_base&lt; R &gt;::shared_callback::shared_callback</definition>
        <argsstring>(shared_callback &amp;&amp;other) noexcept</argsstring>
        <name>shared_callback</name>
        <param>
          <type>shared_callback &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. Transfers ownership from another object, leaving intact the reference count. The other object releases the callback state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="169" column="1" bodyfile="include/dpp/coro/async.h" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a65db4b1c9fa1319a324ba16139383f72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::async::async_base&lt; R &gt;::shared_callback::~shared_callback</definition>
        <argsstring>()</argsstring>
        <name>~shared_callback</name>
        <briefdescription>
<para>Destructor. Releases the held reference and destroys if no other references exist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="176" column="1" bodyfile="include/dpp/coro/async.h" bodystart="176" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1af29e85f5219d2545f950a80879f5a939" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>shared_callback &amp;</type>
        <definition>shared_callback &amp; dpp::detail::async::async_base&lt; R &gt;::shared_callback::operator=</definition>
        <argsstring>(const shared_callback &amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const shared_callback &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment. Takes shared ownership of the callback state, increasing the reference count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="190" column="17" bodyfile="include/dpp/coro/async.h" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a3a64ceb76c17dcfb25033fb276ec2040" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>shared_callback &amp;</type>
        <definition>shared_callback &amp; dpp::detail::async::async_base&lt; R &gt;::shared_callback::operator=</definition>
        <argsstring>(shared_callback &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>shared_callback &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment. Transfers ownership from another object, leaving intact the reference count. The other object releases the callback state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="199" column="17" bodyfile="include/dpp/coro/async.h" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a25b5e2cd799867b2e7eeb4531e58b073" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::async::async_base&lt; R &gt;::shared_callback::set_dangling</definition>
        <argsstring>() noexcept</argsstring>
        <name>set_dangling</name>
        <briefdescription>
<para>Function called by the async when it is destroyed when it was never co_awaited, signals to the callback to abort. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="207" column="6" bodyfile="include/dpp/coro/async.h" bodystart="207" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1ac73c5ebf8fd81caa466b86d79aa6a8b1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::detail::async::async_base&lt; R &gt;::shared_callback::done</definition>
        <argsstring>(std::memory_order order=std::memory_order_seq_cst) const noexcept</argsstring>
        <name>done</name>
        <param>
          <type>std::memory_order</type>
          <declname>order</declname>
          <defval>std::memory_order_seq_cst</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="214" column="6" bodyfile="include/dpp/coro/async.h" bodystart="214" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1ad318c8f7080bacf5058e63a8540af878" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>R &amp;</type>
        <definition>R &amp; dpp::detail::async::async_base&lt; R &gt;::shared_callback::get_result</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_result</name>
        <briefdescription>
<para>Convenience function to get the shared callback state&apos;s result. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>It is UB to call this on a callback whose state is anything else but <ref refid="namespacedpp_1_1detail_1_1async_1a7535e93a3c82431d3ff869d0cbb897bda6b2ded51d81a4403d8a4bd25fa1e57ee" kindref="member">state_t::done</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="223" column="3" bodyfile="include/dpp/coro/async.h" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a183cc2119d53b266e191ed7ec5c36ebe" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const R &amp;</type>
        <definition>const R &amp; dpp::detail::async::async_base&lt; R &gt;::shared_callback::get_result</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_result</name>
        <briefdescription>
<para>Convenience function to get the shared callback state&apos;s result. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>It is UB to call this on a callback whose state is anything else but <ref refid="namespacedpp_1_1detail_1_1async_1a7535e93a3c82431d3ff869d0cbb897bda6b2ded51d81a4403d8a4bd25fa1e57ee" kindref="member">state_t::done</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="233" column="9" bodyfile="include/dpp/coro/async.h" bodystart="233" bodyend="236"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Ref-counted callback, contains the callback logic and manages the lifetime of the callback data over multiple threads. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>async_callback_data&lt;</label>
      </node>
      <node id="1">
        <label>dpp::detail::async::async_base&lt; R &gt;::shared_callback</label>
        <childnode refid="2" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro/async.h" line="128" column="1" bodyfile="include/dpp/coro/async.h" bodystart="128" bodyend="237"/>
    <listofallmembers>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1ac73c5ebf8fd81caa466b86d79aa6a8b1" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>done</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1ad318c8f7080bacf5058e63a8540af878" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>get_result</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a183cc2119d53b266e191ed7ec5c36ebe" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>get_result</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a31ecaa934028fb98308c68e53c2f019e" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>operator()</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1af29e85f5219d2545f950a80879f5a939" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>operator=</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a3a64ceb76c17dcfb25033fb276ec2040" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>operator=</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a25b5e2cd799867b2e7eeb4531e58b073" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>set_dangling</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1ac03be8eb9e207e282fcd4ff4c2207d87" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>shared_callback</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1af3295e2c5b5e41fd9778dff38509ed6f" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>shared_callback</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a59f61a9a38cae3806fcff9a3f4325efa" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>shared_callback</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a6f3881d525447da5b424121b279e9545" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>shared_callback</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1adeb83f4e56980a26ab7886cf41132907" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>state</name></member>
      <member refid="structdpp_1_1detail_1_1async_1_1async__base_1_1shared__callback_1a65db4b1c9fa1319a324ba16139383f72" prot="public" virt="non-virtual"><scope>dpp::detail::async::async_base::shared_callback</scope><name>~shared_callback</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
