<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="buildosx" kind="page">
    <compoundname>buildosx</compoundname>
    <title>Building on OSX</title>
    <detaileddescription>
<para><heading level="1">Building on macOS</heading>
</para><para><heading level="2">1. Toolchain</heading>
</para><para>Before compiling make sure you have all the tools installed.</para><para><orderedlist>
<listitem><para>To install the dependencies, this guide will use homebrew which has <ulink url="https://brew.sh/">installation instructions on their project page</ulink></para></listitem><listitem><para>This project uses CMake to generate the makefiles. Install it with <computeroutput>brew install cmake</computeroutput></para></listitem></orderedlist>
</para><para><heading level="2">2. Install External Dependencies</heading>
</para><para><verbatim>brew install openssl
</verbatim></para><para>For voice support, additional dependencies are required <verbatim>brew install libsodium opus
</verbatim></para><para><heading level="2">3. Build Source Code</heading>
</para><para>Download the source code via Github or get the archive from the releases. Then navigate to the root directory of the project and run the commands below. <verbatim>mkdir build
cd build
cmake ..
make -j8
</verbatim></para><para>Replace the number after -j with a number suitable for your setup, usually the same as the number of cores on your machine. <computeroutput>cmake</computeroutput> will fetch any dependencies that are required for you and ensure they are compiled alongside the library.</para><para><heading level="2">4. Optional: Run test cases</heading>
</para><para>run <computeroutput>./test</computeroutput> for unit test cases. You will need to create a <computeroutput>config.json</computeroutput> file in the directory above the executable file with a valid bot token in it. See the example file <computeroutput>config.example.json</computeroutput> for an example of the correct format.</para><para><heading level="2">5. Install globally</heading>
</para><para><verbatim>sudo make install
</verbatim></para><para><heading level="2">6. Installation to a different directory</heading>
</para><para>If you want to install the library, its dependencies and header files to a different directory, specify this directory when running <computeroutput>cmake</computeroutput>: <verbatim>cmake .. -DCMAKE_INSTALL_PREFIX=/path/to/install
</verbatim></para><para>Then once the build is complete, run <computeroutput>make install</computeroutput> to install to the location you specified.</para><para><heading level="2">7. Using the library</heading>
</para><para>Once installed, you can make use of the library in standalone programs simply by including it and linking to it: <verbatim>clang++ -std=c++17 -ldpp mydppbot.cpp -o dppbot
</verbatim></para><para>The important flags in this command-line are:</para><para><itemizedlist>
<listitem><para><computeroutput>-std=c++17</computeroutput> - Required to compile the headers</para></listitem><listitem><para><computeroutput>-ldpp</computeroutput> - Link to libdpp.dylib</para></listitem><listitem><para><computeroutput>mydppbot.cpp</computeroutput> - Your source code</para></listitem><listitem><para><computeroutput>dppbot</computeroutput> - The name of the executable to make</para></listitem></itemizedlist>
</para><para>Of course, this is just a proof of concept - you should really use a more robust build system like GNU <computeroutput>make</computeroutput> or <ref refid="buildcmake" kindref="compound">`cmake`</ref>.</para><para><bold>Have fun!</bold> </para>    </detaileddescription>
  </compounddef>
</doxygen>
