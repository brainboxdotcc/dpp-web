<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdpp_1_1invite__create__t" kind="struct" prot="public">
    <compoundname>dpp::invite_create_t</compoundname>
    <basecompoundref refid="structdpp_1_1event__dispatch__t" prot="public" virt="non-virtual">dpp::event_dispatch_t</basecompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1invite__create__t_1a9bd5a89df4072bd9df4d2d78bc077890" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref></type>
        <definition>invite dpp::invite_create_t::created_invite</definition>
        <argsstring></argsstring>
        <name>created_invite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="656" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw event text </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="40" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::event_dispatch_t::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shard the event came from </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="43" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1invite__create__t_1adddf03c575d5ef961bc7e1e5a4a0b773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::invite_create_t::invite_create_t</definition>
        <argsstring>(class discord_client *client, const std::string &amp;raw)</argsstring>
        <name>invite_create_t</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event text as JSON </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="655" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="131" bodyend="131"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Invite create. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="11982">
        <label>dpp::invite_create_t</label>
        <link refid="structdpp_1_1invite__create__t"/>
        <childnode refid="11983" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11983">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="12063">
        <label>function&lt; void(const dpp::guild_integrations_update_t &amp;event)&gt;</label>
      </node>
      <node id="12001">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="12000" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="11993" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="12002" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="12004" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="12007" relation="usage">
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>numshards</edgelabel>
          <edgelabel>intents</edgelabel>
        </childnode>
        <childnode refid="11986" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="12010" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
      </node>
      <node id="11997">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="11998" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="11999" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="12027">
        <label>function&lt; void(const dpp::stage_instance_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12042">
        <label>function&lt; void(const dpp::message_create_t &amp;event)&gt;</label>
      </node>
      <node id="12028">
        <label>function&lt; void(const dpp::thread_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="12075">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="11992" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="12076" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="11986" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>session_id</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
      </node>
      <node id="12068">
        <label>function&lt; void(const dpp::voice_buffer_send_t &amp;event)&gt;</label>
      </node>
      <node id="12055">
        <label>function&lt; void(const dpp::user_update_t &amp;event)&gt;</label>
      </node>
      <node id="12004">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="12005" relation="public-inheritance">
        </childnode>
        <childnode refid="12006" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="12007" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="12008" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="11986" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="12009" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="12013">
        <label>function&lt; void(const dpp::thread_members_update_t &amp;event)&gt;</label>
      </node>
      <node id="11984">
        <label>dpp::invite_create_t</label>
        <link refid="structdpp_1_1invite__create__t"/>
        <childnode refid="11985" relation="public-inheritance">
        </childnode>
        <childnode refid="12077" relation="usage">
          <edgelabel>created_invite</edgelabel>
        </childnode>
      </node>
      <node id="12077">
        <label>dpp::invite</label>
        <link refid="classdpp_1_1invite"/>
        <childnode refid="11992" relation="usage">
          <edgelabel>target_user_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>inviter_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="12007" relation="usage">
          <edgelabel>approximate_member_count</edgelabel>
          <edgelabel>max_age</edgelabel>
          <edgelabel>max_uses</edgelabel>
          <edgelabel>approximate_presence_count</edgelabel>
        </childnode>
        <childnode refid="11996" relation="usage">
          <edgelabel>unique</edgelabel>
          <edgelabel>temporary</edgelabel>
        </childnode>
        <childnode refid="12008" relation="usage">
          <edgelabel>target_user_type</edgelabel>
        </childnode>
        <childnode refid="11986" relation="usage">
          <edgelabel>code</edgelabel>
        </childnode>
      </node>
      <node id="12057">
        <label>function&lt; void(const dpp::invite_create_t &amp;event)&gt;</label>
      </node>
      <node id="12029">
        <label>function&lt; void(const dpp::guild_create_t &amp;event)&gt;</label>
      </node>
      <node id="12059">
        <label>function&lt; void(const dpp::guild_emojis_update_t &amp;event)&gt;</label>
      </node>
      <node id="12069">
        <label>function&lt; void(const dpp::guild_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="11995">
        <label>function&lt; int()&gt;</label>
      </node>
      <node id="12010">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="12011" relation="usage">
          <edgelabel>guild_role_create</edgelabel>
        </childnode>
        <childnode refid="12012" relation="usage">
          <edgelabel>voice_state_update</edgelabel>
        </childnode>
        <childnode refid="12013" relation="usage">
          <edgelabel>thread_members_update</edgelabel>
        </childnode>
        <childnode refid="12014" relation="usage">
          <edgelabel>channel_delete</edgelabel>
        </childnode>
        <childnode refid="12015" relation="usage">
          <edgelabel>thread_delete</edgelabel>
        </childnode>
        <childnode refid="12016" relation="usage">
          <edgelabel>integration_update</edgelabel>
        </childnode>
        <childnode refid="12017" relation="usage">
          <edgelabel>message_reaction_remove_emoji</edgelabel>
        </childnode>
        <childnode refid="12018" relation="usage">
          <edgelabel>resumed</edgelabel>
        </childnode>
        <childnode refid="12019" relation="usage">
          <edgelabel>presence_update</edgelabel>
        </childnode>
        <childnode refid="12020" relation="usage">
          <edgelabel>message_delete_bulk</edgelabel>
        </childnode>
        <childnode refid="12021" relation="usage">
          <edgelabel>voice_ready</edgelabel>
        </childnode>
        <childnode refid="12022" relation="usage">
          <edgelabel>guild_ban_remove</edgelabel>
        </childnode>
        <childnode refid="12023" relation="usage">
          <edgelabel>guild_role_delete</edgelabel>
        </childnode>
        <childnode refid="12024" relation="usage">
          <edgelabel>channel_update</edgelabel>
        </childnode>
        <childnode refid="12025" relation="usage">
          <edgelabel>stickers_update</edgelabel>
        </childnode>
        <childnode refid="12026" relation="usage">
          <edgelabel>guild_members_chunk</edgelabel>
        </childnode>
        <childnode refid="12027" relation="usage">
          <edgelabel>stage_instance_delete</edgelabel>
        </childnode>
        <childnode refid="12028" relation="usage">
          <edgelabel>thread_member_update</edgelabel>
        </childnode>
        <childnode refid="12029" relation="usage">
          <edgelabel>guild_create</edgelabel>
        </childnode>
        <childnode refid="12030" relation="usage">
          <edgelabel>message_reaction_remove</edgelabel>
        </childnode>
        <childnode refid="12031" relation="usage">
          <edgelabel>select_click</edgelabel>
        </childnode>
        <childnode refid="12032" relation="usage">
          <edgelabel>interaction_create</edgelabel>
        </childnode>
        <childnode refid="12033" relation="usage">
          <edgelabel>guild_join_request_delete</edgelabel>
        </childnode>
        <childnode refid="12034" relation="usage">
          <edgelabel>guild_member_add</edgelabel>
        </childnode>
        <childnode refid="12035" relation="usage">
          <edgelabel>voice_user_talking</edgelabel>
        </childnode>
        <childnode refid="12036" relation="usage">
          <edgelabel>thread_create</edgelabel>
        </childnode>
        <childnode refid="12037" relation="usage">
          <edgelabel>application_command_create</edgelabel>
        </childnode>
        <childnode refid="12038" relation="usage">
          <edgelabel>button_click</edgelabel>
        </childnode>
        <childnode refid="12039" relation="usage">
          <edgelabel>guild_update</edgelabel>
        </childnode>
        <childnode refid="12040" relation="usage">
          <edgelabel>message_reaction_remove_all</edgelabel>
        </childnode>
        <childnode refid="12041" relation="usage">
          <edgelabel>voice_receive</edgelabel>
        </childnode>
        <childnode refid="12042" relation="usage">
          <edgelabel>message_create</edgelabel>
        </childnode>
        <childnode refid="12043" relation="usage">
          <edgelabel>webhooks_update</edgelabel>
        </childnode>
        <childnode refid="12044" relation="usage">
          <edgelabel>message_reaction_add</edgelabel>
        </childnode>
        <childnode refid="12045" relation="usage">
          <edgelabel>message_delete</edgelabel>
        </childnode>
        <childnode refid="12046" relation="usage">
          <edgelabel>voice_track_marker</edgelabel>
        </childnode>
        <childnode refid="12047" relation="usage">
          <edgelabel>thread_list_sync</edgelabel>
        </childnode>
        <childnode refid="12048" relation="usage">
          <edgelabel>integration_delete</edgelabel>
        </childnode>
        <childnode refid="12049" relation="usage">
          <edgelabel>guild_ban_add</edgelabel>
        </childnode>
        <childnode refid="12050" relation="usage">
          <edgelabel>channel_pins_update</edgelabel>
        </childnode>
        <childnode refid="12051" relation="usage">
          <edgelabel>typing_start</edgelabel>
        </childnode>
        <childnode refid="12052" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="12053" relation="usage">
          <edgelabel>thread_update</edgelabel>
        </childnode>
        <childnode refid="12054" relation="usage">
          <edgelabel>integration_create</edgelabel>
        </childnode>
        <childnode refid="12055" relation="usage">
          <edgelabel>user_update</edgelabel>
        </childnode>
        <childnode refid="12056" relation="usage">
          <edgelabel>message_update</edgelabel>
        </childnode>
        <childnode refid="12057" relation="usage">
          <edgelabel>invite_create</edgelabel>
        </childnode>
        <childnode refid="12058" relation="usage">
          <edgelabel>invite_delete</edgelabel>
        </childnode>
        <childnode refid="12059" relation="usage">
          <edgelabel>guild_emojis_update</edgelabel>
        </childnode>
        <childnode refid="12060" relation="usage">
          <edgelabel>guild_delete</edgelabel>
        </childnode>
        <childnode refid="12061" relation="usage">
          <edgelabel>application_command_delete</edgelabel>
        </childnode>
        <childnode refid="12062" relation="usage">
          <edgelabel>application_command_update</edgelabel>
        </childnode>
        <childnode refid="12063" relation="usage">
          <edgelabel>guild_integrations_update</edgelabel>
        </childnode>
        <childnode refid="12064" relation="usage">
          <edgelabel>voice_server_update</edgelabel>
        </childnode>
        <childnode refid="12065" relation="usage">
          <edgelabel>guild_role_update</edgelabel>
        </childnode>
        <childnode refid="12066" relation="usage">
          <edgelabel>channel_create</edgelabel>
        </childnode>
        <childnode refid="12067" relation="usage">
          <edgelabel>stage_instance_create</edgelabel>
        </childnode>
        <childnode refid="12068" relation="usage">
          <edgelabel>voice_buffer_send</edgelabel>
        </childnode>
        <childnode refid="12069" relation="usage">
          <edgelabel>guild_member_update</edgelabel>
        </childnode>
        <childnode refid="12070" relation="usage">
          <edgelabel>guild_member_remove</edgelabel>
        </childnode>
        <childnode refid="12071" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
      </node>
      <node id="12017">
        <label>function&lt; void(const dpp::message_reaction_remove_emoji_t &amp;event)&gt;</label>
      </node>
      <node id="12024">
        <label>function&lt; void(const dpp::channel_update_t &amp;event)&gt;</label>
      </node>
      <node id="12066">
        <label>function&lt; void(const dpp::channel_create_t &amp;event)&gt;</label>
      </node>
      <node id="11992">
        <label>uint64_t</label>
      </node>
      <node id="12061">
        <label>function&lt; void(const dpp::application_command_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12058">
        <label>function&lt; void(const dpp::invite_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12044">
        <label>function&lt; void(const dpp::message_reaction_add_t &amp;event)&gt;</label>
      </node>
      <node id="12038">
        <label>function&lt; void(const dpp::button_click_t &amp;event)&gt;</label>
      </node>
      <node id="12026">
        <label>function&lt; void(const dpp::guild_members_chunk_t &amp;event)&gt;</label>
      </node>
      <node id="12015">
        <label>function&lt; void(const dpp::thread_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12034">
        <label>function&lt; void(const dpp::guild_member_add_t &amp;event)&gt;</label>
      </node>
      <node id="12051">
        <label>function&lt; void(const dpp::typing_start_t &amp;event)&gt;</label>
      </node>
      <node id="12048">
        <label>function&lt; void(const dpp::integration_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12071">
        <label>function&lt; void(const dpp::log_t &amp;event)&gt;</label>
      </node>
      <node id="12006">
        <label>uint16_t</label>
      </node>
      <node id="12036">
        <label>function&lt; void(const dpp::thread_create_t &amp;event)&gt;</label>
      </node>
      <node id="11993">
        <label>time_t</label>
      </node>
      <node id="11987">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="12070">
        <label>function&lt; void(const dpp::guild_member_remove_t &amp;event)&gt;</label>
      </node>
      <node id="12047">
        <label>function&lt; void(const dpp::thread_list_sync_t &amp;event)&gt;</label>
      </node>
      <node id="12076">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="11989" relation="public-inheritance">
        </childnode>
        <childnode refid="11992" relation="usage">
          <edgelabel>server_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="11993" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="12001" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="12007" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="11986" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="11996" relation="usage">
          <edgelabel>terminating</edgelabel>
          <edgelabel>sodium_initialised</edgelabel>
        </childnode>
        <childnode refid="12073" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
      </node>
      <node id="12009">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="11992" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="12046">
        <label>function&lt; void(const dpp::voice_track_marker_t &amp;event)&gt;</label>
      </node>
      <node id="12035">
        <label>function&lt; void(const dpp::voice_user_talking_t &amp;event)&gt;</label>
      </node>
      <node id="12000">
        <label>double</label>
      </node>
      <node id="11990">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="11991" relation="usage">
          <edgelabel>custom_writeable_ready</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
        </childnode>
        <childnode refid="11992" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="11993" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="11994" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="11995" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="11996" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="11986" relation="usage">
          <edgelabel>port</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>buffer</edgelabel>
        </childnode>
        <childnode refid="11997" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="12045">
        <label>function&lt; void(const dpp::message_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12067">
        <label>function&lt; void(const dpp::stage_instance_create_t &amp;event)&gt;</label>
      </node>
      <node id="12007">
        <label>uint32_t</label>
      </node>
      <node id="12065">
        <label>function&lt; void(const dpp::guild_role_update_t &amp;event)&gt;</label>
      </node>
      <node id="11985">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="11986" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="11988" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
      </node>
      <node id="12008">
        <label>uint8_t</label>
      </node>
      <node id="12050">
        <label>function&lt; void(const dpp::channel_pins_update_t &amp;event)&gt;</label>
      </node>
      <node id="12003">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="11989">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="11990" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12002">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="12003" relation="usage">
          <edgelabel>role_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="12019">
        <label>function&lt; void(const dpp::presence_update_t &amp;event)&gt;</label>
      </node>
      <node id="12031">
        <label>function&lt; void(const dpp::select_click_t &amp;event)&gt;</label>
      </node>
      <node id="12016">
        <label>function&lt; void(const dpp::integration_update_t &amp;event)&gt;</label>
      </node>
      <node id="12039">
        <label>function&lt; void(const dpp::guild_update_t &amp;event)&gt;</label>
      </node>
      <node id="12041">
        <label>function&lt; void(const dpp::voice_receive_t &amp;event)&gt;</label>
      </node>
      <node id="12074">
        <label>std::unordered_map&lt; snowflake, dpp::voiceconn * &gt;</label>
        <childnode refid="11992" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="12075" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="11991">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="12033">
        <label>function&lt; void(const dpp::guild_join_request_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11988">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="11989" relation="public-inheritance">
        </childnode>
        <childnode refid="12000" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="11992" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="11993" relation="usage">
          <edgelabel>last_heartbeat_ack</edgelabel>
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="12001" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="12072" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="12007" relation="usage">
          <edgelabel>reconnects</edgelabel>
          <edgelabel>shard_id</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="11996" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="11986" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="12073" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="12074" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="12040">
        <label>function&lt; void(const dpp::message_reaction_remove_all_t &amp;event)&gt;</label>
      </node>
      <node id="11998">
        <label>SSL *</label>
      </node>
      <node id="12005">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="11992" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="12053">
        <label>function&lt; void(const dpp::thread_update_t &amp;event)&gt;</label>
      </node>
      <node id="12054">
        <label>function&lt; void(const dpp::integration_create_t &amp;event)&gt;</label>
      </node>
      <node id="12062">
        <label>function&lt; void(const dpp::application_command_update_t &amp;event)&gt;</label>
      </node>
      <node id="11999">
        <label>SSL_CTX *</label>
      </node>
      <node id="12049">
        <label>function&lt; void(const dpp::guild_ban_add_t &amp;event)&gt;</label>
      </node>
      <node id="12072">
        <label>mutex</label>
      </node>
      <node id="12060">
        <label>function&lt; void(const dpp::guild_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12018">
        <label>function&lt; void(const dpp::resumed_t &amp;event)&gt;</label>
      </node>
      <node id="12037">
        <label>function&lt; void(const dpp::application_command_create_t &amp;event)&gt;</label>
      </node>
      <node id="12043">
        <label>function&lt; void(const dpp::webhooks_update_t &amp;event)&gt;</label>
      </node>
      <node id="12056">
        <label>function&lt; void(const dpp::message_update_t &amp;event)&gt;</label>
      </node>
      <node id="11996">
        <label>bool</label>
      </node>
      <node id="11994">
        <label>SOCKET</label>
      </node>
      <node id="12032">
        <label>function&lt; void(const dpp::interaction_create_t &amp;event)&gt;</label>
      </node>
      <node id="12064">
        <label>function&lt; void(const dpp::voice_server_update_t &amp;event)&gt;</label>
      </node>
      <node id="12022">
        <label>function&lt; void(const dpp::guild_ban_remove_t &amp;event)&gt;</label>
      </node>
      <node id="12014">
        <label>function&lt; void(const dpp::channel_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12011">
        <label>function&lt; void(const dpp::guild_role_create_t &amp;event)&gt;</label>
      </node>
      <node id="12030">
        <label>function&lt; void(const dpp::message_reaction_remove_t &amp;event)&gt;</label>
      </node>
      <node id="12052">
        <label>function&lt; void(const dpp::ready_t &amp;event)&gt;</label>
      </node>
      <node id="12012">
        <label>function&lt; void(const dpp::voice_state_update_t &amp;event)&gt;</label>
      </node>
      <node id="12025">
        <label>function&lt; void(const dpp::guild_stickers_update_t &amp;event)&gt;</label>
      </node>
      <node id="12021">
        <label>function&lt; void(const dpp::voice_ready_t &amp;event)&gt;</label>
      </node>
      <node id="12073">
        <label>native_handle_type</label>
      </node>
      <node id="12023">
        <label>function&lt; void(const dpp::guild_role_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11986">
        <label>std::string</label>
        <childnode refid="11987" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12020">
        <label>function&lt; void(const dpp::message_delete_bulk_t &amp;event)&gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/dispatcher.h" line="650" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="650" bodyend="657"/>
    <listofallmembers>
      <member refid="structdpp_1_1invite__create__t_1a9bd5a89df4072bd9df4d2d78bc077890" prot="public" virt="non-virtual"><scope>dpp::invite_create_t</scope><name>created_invite</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a4ac4d287ca94f2389cf68e2534d9e1b0" prot="public" virt="non-virtual"><scope>dpp::invite_create_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" virt="non-virtual"><scope>dpp::invite_create_t</scope><name>from</name></member>
      <member refid="structdpp_1_1invite__create__t_1adddf03c575d5ef961bc7e1e5a4a0b773" prot="public" virt="non-virtual"><scope>dpp::invite_create_t</scope><name>invite_create_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" virt="non-virtual"><scope>dpp::invite_create_t</scope><name>raw_event</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
