<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1thread" kind="class" language="C++" prot="public">
    <compoundname>dpp::thread</compoundname>
    <basecompoundref refid="classdpp_1_1channel" prot="public" virt="non-virtual">dpp::channel</basecompoundref>
    <includes local="no">channel.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1thread_1ab78142eef6bd03926469a118778507da" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1thread__member" kindref="compound">thread_member</ref></type>
        <definition>thread_member dpp::thread::member</definition>
        <argsstring></argsstring>
        <name>member</name>
        <briefdescription>
<para>Thread member of current user if joined to the thread. Note this is only set by certain api calls otherwise contains default data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="502" column="15" bodyfile="include/dpp/channel.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1thread_1a64231c8975f095c371b0a4ba478d33ee" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1thread__metadata" kindref="compound">thread_metadata</ref></type>
        <definition>thread_metadata dpp::thread::metadata</definition>
        <argsstring></argsstring>
        <name>metadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread metadata (threads) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="505" column="17" bodyfile="include/dpp/channel.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1thread_1a546adcc48a0b7853ade0f11544ebfcc7" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::thread::message_count</definition>
        <argsstring></argsstring>
        <name>message_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximate count of messages in a thread (threads) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="508" column="9" bodyfile="include/dpp/channel.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1thread_1ace7afa978603442b3a4c0cbf366fdf6e" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::thread::member_count</definition>
        <argsstring></argsstring>
        <name>member_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximate count of members in a thread (threads) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="511" column="9" bodyfile="include/dpp/channel.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a065d6fbd4e21759354c2516b074078a8" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::channel::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Channel name </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="166" column="13" bodyfile="include/dpp/channel.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a57864fde3659243453d1ad1c9bf60983" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::channel::topic</definition>
        <argsstring></argsstring>
        <name>topic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Channel topic </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="169" column="13" bodyfile="include/dpp/channel.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a05f56fbd37e993e0fc36df06b3d65bad" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::channel::rtc_region</definition>
        <argsstring></argsstring>
        <name>rtc_region</name>
        <briefdescription>
<para>Voice region if set for voice channel, otherwise empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="174" column="13" bodyfile="include/dpp/channel.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a0d66636187a0382693d69c2ac2827e89" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::channel::recipients</definition>
        <argsstring></argsstring>
        <name>recipients</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DM recipients </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="177" column="13" bodyfile="include/dpp/channel.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a3eb698179af0d4c535cf5b7ed01b096e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1permission__overwrite" kindref="compound">permission_overwrite</ref> &gt;</type>
        <definition>std::vector&lt;permission_overwrite&gt; dpp::channel::permission_overwrites</definition>
        <argsstring></argsstring>
        <name>permission_overwrites</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Permission overwrites to apply to base permissions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="180" column="13" bodyfile="include/dpp/channel.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1aad8f9892c2daba2f3215e751bfb3351d" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::channel::icon</definition>
        <argsstring></argsstring>
        <name>icon</name>
        <briefdescription>
<para>Channel icon (for group DMs) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="185" column="19" bodyfile="include/dpp/channel.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a6df422541a4733f18a31a630b9e7cf3a" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::channel::banner</definition>
        <argsstring></argsstring>
        <name>banner</name>
        <briefdescription>
<para>Channel banner (boost level locked) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="190" column="19" bodyfile="include/dpp/channel.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1adb22659e9dc7fb8dd36d1c9f67eb7181" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::channel::owner_id</definition>
        <argsstring></argsstring>
        <name>owner_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User ID of owner for group DMs </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="193" column="11" bodyfile="include/dpp/channel.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1ae1e877475ccc7113683382f787cfbc48" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::channel::parent_id</definition>
        <argsstring></argsstring>
        <name>parent_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parent ID (category) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="196" column="11" bodyfile="include/dpp/channel.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a52a3d85468b8b6a1eb16c1bdb19cb499" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::channel::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild id of the guild that owns the channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="199" column="11" bodyfile="include/dpp/channel.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1aa510e7eb5e93c1c885392c7fcdf24779" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::channel::last_message_id</definition>
        <argsstring></argsstring>
        <name>last_message_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID of last message to be sent to the channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="202" column="11" bodyfile="include/dpp/channel.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1ae33f863adef0f0cc89a7324cd93bc752" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::channel::last_pin_timestamp</definition>
        <argsstring></argsstring>
        <name>last_pin_timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Timestamp of last pinned message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="205" column="8" bodyfile="include/dpp/channel.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1ab04ddf442a472f1c0d9c1f50846348f8" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::channel::permissions</definition>
        <argsstring></argsstring>
        <name>permissions</name>
        <briefdescription>
<para>This is only filled when the channel is part of the <computeroutput>resolved</computeroutput> set sent within an interaction. Any other time it contains zero. When filled, it contains the calculated permission bitmask of the user issuing the command within this channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="213" column="10" bodyfile="include/dpp/channel.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a4468e3981302301886f649d14b7ddcf7" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::channel::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags bitmap </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="216" column="10" bodyfile="include/dpp/channel.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a1f31178c9e86ad1490b8619cb9bdbde4" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::channel::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorting position, lower number means higher up the list </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="219" column="10" bodyfile="include/dpp/channel.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1ab32308d8281aef6bfe4d5a6538c6306e" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::channel::bitrate</definition>
        <argsstring></argsstring>
        <name>bitrate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the bitrate (in bits) of the voice channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="222" column="10" bodyfile="include/dpp/channel.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a2ec41d2c2a7d592c1a17888d3f401fd5" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::channel::rate_limit_per_user</definition>
        <argsstring></argsstring>
        <name>rate_limit_per_user</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="225" column="10" bodyfile="include/dpp/channel.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a79251adb1bc9dc6780af2afd21499769" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::channel::user_limit</definition>
        <argsstring></argsstring>
        <name>user_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum user limit for voice channels (0-99) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="228" column="9" bodyfile="include/dpp/channel.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="38" column="11" bodyfile="include/dpp/managed.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1thread_1aa013c0c3c26e9109488c8e2e83e9e36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::thread::thread</definition>
        <argsstring>()</argsstring>
        <name>thread</name>
        <briefdescription>
<para>Construct a new thread object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="516" column="1" bodyfile="src/dpp/channel.cpp" bodystart="234" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1thread_1ab8a6fdcfef22b3aba9c41020e1811670" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::thread::is_news_thread</definition>
        <argsstring>() const</argsstring>
        <name>is_news_thread</name>
        <briefdescription>
<para>Returns true if the channel is a news thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if news thread </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="523" column="6" bodyfile="src/dpp/channel.cpp" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1thread_1af7e19705c6040c7593eb6a582fa017c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::thread::is_public_thread</definition>
        <argsstring>() const</argsstring>
        <name>is_public_thread</name>
        <briefdescription>
<para>Returns true if the channel is a public thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if public thread </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="530" column="6" bodyfile="src/dpp/channel.cpp" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1thread_1a8b23ff4092db13a836895efbd5ede669" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::thread::is_private_thread</definition>
        <argsstring>() const</argsstring>
        <name>is_private_thread</name>
        <briefdescription>
<para>Returns true if the channel is a private thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if private thread </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="537" column="6" bodyfile="src/dpp/channel.cpp" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1thread_1a21cde7487e3bb861e5e7136470b57a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1thread" kindref="compound">thread</ref> &amp;</type>
        <definition>thread &amp; dpp::thread::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="543" column="8" bodyfile="src/dpp/channel.cpp" bodystart="210" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1thread_1a080515539a7f6e6f48bf097f119f51ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>dpp::thread::~thread</definition>
        <argsstring>()</argsstring>
        <name>~thread</name>
        <briefdescription>
<para>Destroy the thread object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="548" column="9" bodyfile="src/dpp/channel.cpp" bodystart="237" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1thread_1a3606d9b03710775529e277315afd8fb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string dpp::thread::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <reimplements refid="classdpp_1_1channel_1a2b818d100d7b40ee6b07d95ff3fcccb8">build_json</reimplements>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build json for this thread object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>include the ID in the json </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string JSON string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="556" column="21" bodyfile="src/dpp/channel.cpp" bodystart="314" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a304e19817c6bf0e363daf497a3011f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::set_name</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>set_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set name of this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained</para>
</simplesect>
<simplesect kind="note"><para>name will be truncated to 100 chars, if longer </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1length__exception" kindref="compound">dpp::length_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if length &lt; 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="259" column="9" bodyfile="src/dpp/channel.cpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a70a34c9768892ba8813c6c3eacce5651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::set_topic</definition>
        <argsstring>(const std::string &amp;topic)</argsstring>
        <name>set_topic</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>topic</declname>
        </param>
        <briefdescription>
<para>Set topic of this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>topic</parametername>
</parameternamelist>
<parameterdescription>
<para>Topic to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained</para>
</simplesect>
<simplesect kind="note"><para>topic will be truncated to 1024 chars, if longer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="269" column="9" bodyfile="src/dpp/channel.cpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a6cfbf057e2f2d3b5b2ee9b2f43d03288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::set_flags</definition>
        <argsstring>(const uint16_t flags)</argsstring>
        <name>set_flags</name>
        <param>
          <type>const uint16_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set flags for this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag bitmask to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="277" column="9" bodyfile="src/dpp/channel.cpp" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a189a5d675001b810199274201b15ea38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::add_flag</definition>
        <argsstring>(const channel_flags flag)</argsstring>
        <name>add_flag</name>
        <param>
          <type>const <ref refid="namespacedpp_1a5ec9c45c4c6519489736761391fe9dd9" kindref="member">channel_flags</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Add (bitwise OR) a flag to this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag bit to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="285" column="9" bodyfile="src/dpp/channel.cpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a20f076ea45f524f1673137d1b7817f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::remove_flag</definition>
        <argsstring>(const channel_flags flag)</argsstring>
        <name>remove_flag</name>
        <param>
          <type>const <ref refid="namespacedpp_1a5ec9c45c4c6519489736761391fe9dd9" kindref="member">channel_flags</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Remove (bitwise NOT AND) a flag from this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag bit to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="293" column="9" bodyfile="src/dpp/channel.cpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1af4828e17f5b0391fae44461c6dac770a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::set_position</definition>
        <argsstring>(const uint16_t position)</argsstring>
        <name>set_position</name>
        <param>
          <type>const uint16_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Set position of this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="301" column="9" bodyfile="src/dpp/channel.cpp" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1aa823c3a070bc37d70be28bd9b49820c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::set_guild_id</definition>
        <argsstring>(const snowflake guild_id)</argsstring>
        <name>set_guild_id</name>
        <param>
          <type>const <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Set guild_id of this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="309" column="9" bodyfile="src/dpp/channel.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a8b5cd8634b4c8873be389b3d747615d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::set_parent_id</definition>
        <argsstring>(const snowflake parent_id)</argsstring>
        <name>set_parent_id</name>
        <param>
          <type>const <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>parent_id</declname>
        </param>
        <briefdescription>
<para>Set parent_id of this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parent_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent ID to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="317" column="9" bodyfile="src/dpp/channel.cpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1aed49e707599019840d4715f6c2123a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::set_user_limit</definition>
        <argsstring>(const uint8_t user_limit)</argsstring>
        <name>set_user_limit</name>
        <param>
          <type>const uint8_t</type>
          <declname>user_limit</declname>
        </param>
        <briefdescription>
<para>Set user_limit of this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Limit to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="325" column="9" bodyfile="src/dpp/channel.cpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1ab6bc88cdee70038c6544c7f44a4584be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::set_bitrate</definition>
        <argsstring>(const uint16_t bitrate)</argsstring>
        <name>set_bitrate</name>
        <param>
          <type>const uint16_t</type>
          <declname>bitrate</declname>
        </param>
        <briefdescription>
<para>Set bitrate of this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitrate to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="333" column="9" bodyfile="src/dpp/channel.cpp" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a602852256a543a6901aa5c87520aeb63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::set_nsfw</definition>
        <argsstring>(const bool is_nsfw)</argsstring>
        <name>set_nsfw</name>
        <param>
          <type>const bool</type>
          <declname>is_nsfw</declname>
        </param>
        <briefdescription>
<para>Set nsfw property of this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_nsfw</parametername>
</parameternamelist>
<parameterdescription>
<para>true, if channel is nsfw </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="341" column="9" bodyfile="src/dpp/channel.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a929b0d7a3eaed7ca144752196c2cf38f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::set_rate_limit_per_user</definition>
        <argsstring>(const uint16_t rate_limit_per_user)</argsstring>
        <name>set_rate_limit_per_user</name>
        <param>
          <type>const uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <briefdescription>
<para>Set rate_limit_per_user of this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>rate_limit_per_user (slowmode in sec) to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="349" column="9" bodyfile="src/dpp/channel.cpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a3bf0a0d35c4aa4e40c6b2b71e9c97584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::add_permission_overwrite</definition>
        <argsstring>(const snowflake id, const uint8_t type, const uint64_t allowed_permissions, const uint64_t denied_permissions)</argsstring>
        <name>add_permission_overwrite</name>
        <param>
          <type>const <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>allowed_permissions</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>denied_permissions</declname>
        </param>
        <briefdescription>
<para>Add a <ref refid="structdpp_1_1permission__overwrite" kindref="compound">permission_overwrite</ref> to this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the role or the member you want to add overwrite for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of overwrite (0 for role, 1 for member) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allowed_permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>bitmask of allowed permissions (refer to enum role_permissions) for this user/role in this channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denied_permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>bitmask of denied permissions (refer to enum role_permissions) for this user/role in this channel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="361" column="9" bodyfile="src/dpp/channel.cpp" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a08a674755c169a3517361dc847511617" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::channel::get_mention</definition>
        <argsstring>() const</argsstring>
        <name>get_mention</name>
        <briefdescription>
<para>Get the mention ping for the channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string mention </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="368" column="13" bodyfile="src/dpp/channel.cpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a86527c1fe86e93c66bf731c73ebcc0ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::channel::get_user_permissions</definition>
        <argsstring>(const class user *member) const</argsstring>
        <name>get_user_permissions</name>
        <param>
          <type>const class <ref refid="classdpp_1_1user" kindref="compound">user</ref> *</type>
          <declname>member</declname>
        </param>
        <briefdescription>
<para>Get the user permissions for a user on this channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>The user to return permissions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t Permissions bitmask made of bits in role_permissions. Note that if the user is not on the channel or the guild is not in the cache, the function will always return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="378" column="10" bodyfile="src/dpp/channel.cpp" bodystart="389" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1ab817b065af6dab9a77e406908e368ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, class <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> * &gt;</type>
        <definition>std::map&lt; snowflake, guild_member * &gt; dpp::channel::get_members</definition>
        <argsstring>()</argsstring>
        <name>get_members</name>
        <briefdescription>
<para>Return a map of members on the channel, built from the guild&apos;s member list based on which members have the VIEW_CHANNEL permission. Does not return reliable information for voice channels, use <ref refid="classdpp_1_1channel_1a915cc4ba3ec7514a684315594255253a" kindref="member">dpp::channel::get_voice_members()</ref> instead for this. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A map of guild members keyed by user id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="387" column="10" bodyfile="src/dpp/channel.cpp" bodystart="401" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a915cc4ba3ec7514a684315594255253a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, <ref refid="classdpp_1_1voicestate" kindref="compound">voicestate</ref> &gt;</type>
        <definition>std::map&lt; snowflake, voicestate &gt; dpp::channel::get_voice_members</definition>
        <argsstring>()</argsstring>
        <name>get_voice_members</name>
        <briefdescription>
<para>Get a map of members in this channel, if it is a voice channel. The map is keyed by snowflake id of the user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::map&lt;snowflake, voicestate&gt; The voice members of the channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="395" column="10" bodyfile="src/dpp/channel.cpp" bodystart="417" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a9b21f2eb844a745ba44fda7ca55aa40e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::channel::get_banner_url</definition>
        <argsstring>(uint16_t size=0) const</argsstring>
        <name>get_banner_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the channel&apos;s banner url if they have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the banner in pixels. It can be any power of two between 16 and 4096. if not specified, the default sized banner is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string banner url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="403" column="13" bodyfile="src/dpp/channel.cpp" bodystart="430" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a97712454c654d4a4eede963a5307dfdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::channel::get_icon_url</definition>
        <argsstring>(uint16_t size=0) const</argsstring>
        <name>get_icon_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the channel&apos;s icon url (if its a group DM), otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the icon in pixels. It can be any power of two between 16 and 4096. if not specified, the default sized icon is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string icon url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="411" column="13" bodyfile="src/dpp/channel.cpp" bodystart="442" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a41631deb5f2cb740b4d124cde9f266d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_nsfw</definition>
        <argsstring>() const</argsstring>
        <name>is_nsfw</name>
        <briefdescription>
<para>Returns true if the channel is NSFW gated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if NSFW </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="418" column="6" bodyfile="src/dpp/channel.cpp" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a7b9bfb2f922e7cfcbbb1d60f02e5a901" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_text_channel</definition>
        <argsstring>() const</argsstring>
        <name>is_text_channel</name>
        <briefdescription>
<para>Returns true if the channel is a text channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if text channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="425" column="6" bodyfile="src/dpp/channel.cpp" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a918afc6016a1114151a253e7caa35179" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_dm</definition>
        <argsstring>() const</argsstring>
        <name>is_dm</name>
        <briefdescription>
<para>Returns true if the channel is a DM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if is a DM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="432" column="6" bodyfile="src/dpp/channel.cpp" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a8ee69208f9cf16c18f2ceb460ada1916" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_voice_channel</definition>
        <argsstring>() const</argsstring>
        <name>is_voice_channel</name>
        <briefdescription>
<para>Returns true if the channel is a voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if voice channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="439" column="6" bodyfile="src/dpp/channel.cpp" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a27a623072570b333f697bd01c3616208" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_group_dm</definition>
        <argsstring>() const</argsstring>
        <name>is_group_dm</name>
        <briefdescription>
<para>Returns true if the channel is a group DM channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if group DM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="446" column="6" bodyfile="src/dpp/channel.cpp" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a1b6b7a32e44eec70466a98b31252aa54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_category</definition>
        <argsstring>() const</argsstring>
        <name>is_category</name>
        <briefdescription>
<para>Returns true if the channel is a category. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if a category </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="453" column="6" bodyfile="src/dpp/channel.cpp" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a9fb22156c167cb2c334ec3388502fdff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_news_channel</definition>
        <argsstring>() const</argsstring>
        <name>is_news_channel</name>
        <briefdescription>
<para>Returns true if the channel is a news channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if news channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="460" column="6" bodyfile="src/dpp/channel.cpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a04256bb3015b9fa150d56a8025a6e1d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_store_channel</definition>
        <argsstring>() const</argsstring>
        <name>is_store_channel</name>
        <briefdescription>
<para>Returns true if the channel is a store channel. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>store channels are deprecated by Discord</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="return"><para>true if store channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="468" column="6" bodyfile="src/dpp/channel.cpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1ae95ae73f17ff4badd2001bcc07940709" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_stage_channel</definition>
        <argsstring>() const</argsstring>
        <name>is_stage_channel</name>
        <briefdescription>
<para>Returns true if the channel is a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if stage channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="475" column="6" bodyfile="src/dpp/channel.cpp" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1afb783f82a86a5ed6f247aaa213164854" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_video_auto</definition>
        <argsstring>() const</argsstring>
        <name>is_video_auto</name>
        <briefdescription>
<para>Returns true if video quality is auto. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if video quality is auto </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="482" column="6" bodyfile="src/dpp/channel.cpp" bodystart="184" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a311501db36692f1753254e1bf618e75d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_video_720p</definition>
        <argsstring>() const</argsstring>
        <name>is_video_720p</name>
        <briefdescription>
<para>Returns true if video quality is 720p. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if video quality is 720p </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="489" column="6" bodyfile="src/dpp/channel.cpp" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8" bodyfile="src/dpp/discordevents.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="64" column="6" bodyfile="src/dpp/managed.cpp" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="73" column="6" bodyfile="src/dpp/managed.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A definition of a discord thread. A thread is a superset of a channel. Not to be confused with <computeroutput>std::thread</computeroutput>! </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::channel</label>
        <link refid="classdpp_1_1channel"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="3">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::thread</label>
        <link refid="classdpp_1_1thread"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; channel &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; channel &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="17">
        <label>bool</label>
      </node>
      <node id="2">
        <label>dpp::channel</label>
        <link refid="classdpp_1_1channel"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>rtc_region</edgelabel>
          <edgelabel>topic</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>permission_overwrites</edgelabel>
          <edgelabel>recipients</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>banner</edgelabel>
          <edgelabel>icon</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>last_message_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>parent_id</edgelabel>
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>last_pin_timestamp</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>bitrate</edgelabel>
          <edgelabel>flags</edgelabel>
          <edgelabel>position</edgelabel>
          <edgelabel>rate_limit_per_user</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>user_limit</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="3">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="4" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::thread</label>
        <link refid="classdpp_1_1thread"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>metadata</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>member_count</edgelabel>
          <edgelabel>message_count</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>dpp::thread_member</label>
        <link refid="structdpp_1_1thread__member"/>
        <childnode refid="4" relation="usage">
          <edgelabel>thread_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>joined</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::thread_metadata</label>
        <link refid="structdpp_1_1thread__metadata"/>
        <childnode refid="11" relation="usage">
          <edgelabel>archive_timestamp</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>auto_archive_duration</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>archived</edgelabel>
          <edgelabel>invitable</edgelabel>
          <edgelabel>locked</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="4" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; channel &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; channel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>vector&lt;</label>
      </node>
      <node id="11">
        <label>time_t</label>
      </node>
      <node id="12">
        <label>uint16_t</label>
      </node>
      <node id="15">
        <label>uint32_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="13">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/channel.h" line="496" column="1" bodyfile="include/dpp/channel.h" bodystart="496" bodyend="558"/>
    <listofallmembers>
      <member refid="classdpp_1_1channel_1a189a5d675001b810199274201b15ea38" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>add_flag</name></member>
      <member refid="classdpp_1_1channel_1a3bf0a0d35c4aa4e40c6b2b71e9c97584" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>add_permission_overwrite</name></member>
      <member refid="classdpp_1_1channel_1a6df422541a4733f18a31a630b9e7cf3a" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>banner</name></member>
      <member refid="classdpp_1_1channel_1ab32308d8281aef6bfe4d5a6538c6306e" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>bitrate</name></member>
      <member refid="classdpp_1_1thread_1a3606d9b03710775529e277315afd8fb0" prot="public" virt="virtual"><scope>dpp::thread</scope><name>build_json</name></member>
      <member refid="classdpp_1_1channel_1a53bbf494148ceea48e3b78716d7a8b07" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>channel</name></member>
      <member refid="classdpp_1_1thread_1a21cde7487e3bb861e5e7136470b57a21" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1channel_1a4468e3981302301886f649d14b7ddcf7" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>flags</name></member>
      <member refid="classdpp_1_1channel_1a9b21f2eb844a745ba44fda7ca55aa40e" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>get_banner_url</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1channel_1a97712454c654d4a4eede963a5307dfdc" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>get_icon_url</name></member>
      <member refid="classdpp_1_1channel_1ab817b065af6dab9a77e406908e368ae1" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>get_members</name></member>
      <member refid="classdpp_1_1channel_1a08a674755c169a3517361dc847511617" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>get_mention</name></member>
      <member refid="classdpp_1_1channel_1a86527c1fe86e93c66bf731c73ebcc0ac" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>get_user_permissions</name></member>
      <member refid="classdpp_1_1channel_1a915cc4ba3ec7514a684315594255253a" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>get_voice_members</name></member>
      <member refid="classdpp_1_1channel_1a52a3d85468b8b6a1eb16c1bdb19cb499" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1channel_1aad8f9892c2daba2f3215e751bfb3351d" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>icon</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>id</name></member>
      <member refid="classdpp_1_1channel_1a1b6b7a32e44eec70466a98b31252aa54" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_category</name></member>
      <member refid="classdpp_1_1channel_1a918afc6016a1114151a253e7caa35179" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_dm</name></member>
      <member refid="classdpp_1_1channel_1a27a623072570b333f697bd01c3616208" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_group_dm</name></member>
      <member refid="classdpp_1_1channel_1a9fb22156c167cb2c334ec3388502fdff" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_news_channel</name></member>
      <member refid="classdpp_1_1thread_1ab8a6fdcfef22b3aba9c41020e1811670" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_news_thread</name></member>
      <member refid="classdpp_1_1channel_1a41631deb5f2cb740b4d124cde9f266d2" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_nsfw</name></member>
      <member refid="classdpp_1_1thread_1a8b23ff4092db13a836895efbd5ede669" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_private_thread</name></member>
      <member refid="classdpp_1_1thread_1af7e19705c6040c7593eb6a582fa017c1" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_public_thread</name></member>
      <member refid="classdpp_1_1channel_1ae95ae73f17ff4badd2001bcc07940709" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_stage_channel</name></member>
      <member refid="classdpp_1_1channel_1a04256bb3015b9fa150d56a8025a6e1d0" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_store_channel</name></member>
      <member refid="classdpp_1_1channel_1a7b9bfb2f922e7cfcbbb1d60f02e5a901" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_text_channel</name></member>
      <member refid="classdpp_1_1channel_1a311501db36692f1753254e1bf618e75d" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_video_720p</name></member>
      <member refid="classdpp_1_1channel_1afb783f82a86a5ed6f247aaa213164854" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_video_auto</name></member>
      <member refid="classdpp_1_1channel_1a8ee69208f9cf16c18f2ceb460ada1916" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>is_voice_channel</name></member>
      <member refid="classdpp_1_1channel_1aa510e7eb5e93c1c885392c7fcdf24779" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>last_message_id</name></member>
      <member refid="classdpp_1_1channel_1ae33f863adef0f0cc89a7324cd93bc752" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>last_pin_timestamp</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>managed</name></member>
      <member refid="classdpp_1_1thread_1ab78142eef6bd03926469a118778507da" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>member</name></member>
      <member refid="classdpp_1_1thread_1ace7afa978603442b3a4c0cbf366fdf6e" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>member_count</name></member>
      <member refid="classdpp_1_1thread_1a546adcc48a0b7853ade0f11544ebfcc7" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>message_count</name></member>
      <member refid="classdpp_1_1thread_1a64231c8975f095c371b0a4ba478d33ee" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>metadata</name></member>
      <member refid="classdpp_1_1channel_1a065d6fbd4e21759354c2516b074078a8" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>name</name></member>
      <member refid="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>operator==</name></member>
      <member refid="classdpp_1_1channel_1adb22659e9dc7fb8dd36d1c9f67eb7181" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>owner_id</name></member>
      <member refid="classdpp_1_1channel_1ae1e877475ccc7113683382f787cfbc48" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>parent_id</name></member>
      <member refid="classdpp_1_1channel_1a3eb698179af0d4c535cf5b7ed01b096e" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>permission_overwrites</name></member>
      <member refid="classdpp_1_1channel_1ab04ddf442a472f1c0d9c1f50846348f8" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>permissions</name></member>
      <member refid="classdpp_1_1channel_1a1f31178c9e86ad1490b8619cb9bdbde4" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>position</name></member>
      <member refid="classdpp_1_1channel_1a2ec41d2c2a7d592c1a17888d3f401fd5" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>rate_limit_per_user</name></member>
      <member refid="classdpp_1_1channel_1a0d66636187a0382693d69c2ac2827e89" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>recipients</name></member>
      <member refid="classdpp_1_1channel_1a20f076ea45f524f1673137d1b7817f6f" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>remove_flag</name></member>
      <member refid="classdpp_1_1channel_1a05f56fbd37e993e0fc36df06b3d65bad" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>rtc_region</name></member>
      <member refid="classdpp_1_1channel_1ab6bc88cdee70038c6544c7f44a4584be" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>set_bitrate</name></member>
      <member refid="classdpp_1_1channel_1a6cfbf057e2f2d3b5b2ee9b2f43d03288" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>set_flags</name></member>
      <member refid="classdpp_1_1channel_1aa823c3a070bc37d70be28bd9b49820c5" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>set_guild_id</name></member>
      <member refid="classdpp_1_1channel_1a304e19817c6bf0e363daf497a3011f3a" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>set_name</name></member>
      <member refid="classdpp_1_1channel_1a602852256a543a6901aa5c87520aeb63" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>set_nsfw</name></member>
      <member refid="classdpp_1_1channel_1a8b5cd8634b4c8873be389b3d747615d7" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>set_parent_id</name></member>
      <member refid="classdpp_1_1channel_1af4828e17f5b0391fae44461c6dac770a" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>set_position</name></member>
      <member refid="classdpp_1_1channel_1a929b0d7a3eaed7ca144752196c2cf38f" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>set_rate_limit_per_user</name></member>
      <member refid="classdpp_1_1channel_1a70a34c9768892ba8813c6c3eacce5651" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>set_topic</name></member>
      <member refid="classdpp_1_1channel_1aed49e707599019840d4715f6c2123a5f" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>set_user_limit</name></member>
      <member refid="classdpp_1_1thread_1aa013c0c3c26e9109488c8e2e83e9e36a" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>thread</name></member>
      <member refid="classdpp_1_1channel_1a57864fde3659243453d1ad1c9bf60983" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>topic</name></member>
      <member refid="classdpp_1_1channel_1a79251adb1bc9dc6780af2afd21499769" prot="public" virt="non-virtual"><scope>dpp::thread</scope><name>user_limit</name></member>
      <member refid="classdpp_1_1channel_1a51afd2284fe4ae3a6d1043c8f3ecf4f1" prot="public" virt="virtual"><scope>dpp::thread</scope><name>~channel</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::thread</scope><name>~managed</name></member>
      <member refid="classdpp_1_1thread_1a080515539a7f6e6f48bf097f119f51ac" prot="public" virt="virtual"><scope>dpp::thread</scope><name>~thread</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
