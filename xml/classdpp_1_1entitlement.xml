<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1entitlement" kind="class" language="C++" prot="public">
    <compoundname>dpp::entitlement</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; entitlement &gt;</basecompoundref>
    <includes local="no">entitlement.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1entitlement_1a4998a2187a17a1a233011e16285cc8ef" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; entitlement &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; entitlement &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="classdpp_1_1entitlement" kindref="compound">entitlement</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="160" column="28" bodyfile="include/dpp/entitlement.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1entitlement_1a01ae035f91a97c993b74ab87bd40b3b8" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::entitlement::sku_id</definition>
        <argsstring></argsstring>
        <name>sku_id</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>ID of the SKU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="90" column="11" bodyfile="include/dpp/entitlement.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1entitlement_1ac2d87bd3cdc5272eaf41f24ef50c5a5f" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::entitlement::application_id</definition>
        <argsstring></argsstring>
        <name>application_id</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>ID of the parent application. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="95" column="11" bodyfile="include/dpp/entitlement.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1entitlement_1a70b7d08db4c6758cbcdf075bacea4693" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::entitlement::owner_id</definition>
        <argsstring></argsstring>
        <name>owner_id</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Optional: ID of the user/guild that is granted access to the entitlement&apos;s SKU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="100" column="11" bodyfile="include/dpp/entitlement.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1entitlement_1a7fa8c5d7cf387201728d52cc5219cf6e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0fd6672429865506411af5a83d065ab0" kindref="member">entitlement_type</ref></type>
        <definition>entitlement_type dpp::entitlement::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <initializer>= entitlement_type::APPLICATION_SUBSCRIPTION</initializer>
        <briefdescription>
<para>The type of entitlement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="105" column="18" bodyfile="include/dpp/entitlement.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1entitlement_1a8e5dc8e52f1b086c267284216166a1b6" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::entitlement::starts_at</definition>
        <argsstring></argsstring>
        <name>starts_at</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Optional: Start date at which the entitlement is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not present when using test entitlements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="112" column="8" bodyfile="include/dpp/entitlement.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1entitlement_1ab0368a98989b1333310cad3bd4a91dc2" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::entitlement::ends_at</definition>
        <argsstring></argsstring>
        <name>ends_at</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Optional: Date at which the entitlement is no longer valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not present when using test entitlements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="119" column="8" bodyfile="include/dpp/entitlement.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1entitlement_1a2368d7944df9433c0e2a1b0dacff9172" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::entitlement::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Flags bitmap from <ref refid="namespacedpp_1a2670a84fd3284e5aea4295855744073f" kindref="member">dpp::entitlement_flags</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="124" column="10" bodyfile="include/dpp/entitlement.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1entitlement_1a8659f09f79d82ef04055480af075f79b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1entitlement" kindref="compound">entitlement</ref> &amp;</type>
        <definition>entitlement &amp; dpp::entitlement::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="76" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1entitlement_1aa8f6593d8ef44f929680dd5f85087bd6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>json dpp::entitlement::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build json for this entitlement object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>include the ID in the json </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>json JSON object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="84" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1entitlement_1a0a56e0248107bcc7a3e95adf5e8dc42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::entitlement::entitlement</definition>
        <argsstring>()=default</argsstring>
        <name>entitlement</name>
        <briefdescription>
<para>Construct a new entitlement object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1entitlement_1a4737da4dfbae2458ad1aafce89cf0e95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::entitlement::entitlement</definition>
        <argsstring>(const snowflake sku_id, const snowflake id=0, const snowflake application_id=0, const entitlement_type type=dpp::entitlement_type::APPLICATION_SUBSCRIPTION, const uint8_t flags=0)</argsstring>
        <name>entitlement</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>sku_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a0fd6672429865506411af5a83d065ab0" kindref="member">entitlement_type</ref></type>
          <declname>type</declname>
          <defval>dpp::entitlement_type::APPLICATION_SUBSCRIPTION</defval>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct a new entitlement object with sku_id, ID, application_id, type, and flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sku_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the SKU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the entitlement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the parent application. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of entitlement (Should only ever be APPLICATION_SUBSCRIPTION unless you going to use this object as a parameter for <ref refid="classdpp_1_1cluster_1a634bd52e7550f7e95f88972d0f8aae4d" kindref="member">dpp::cluster::entitlement_test_create</ref>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The flags for the SKU from <ref refid="namespacedpp_1a2670a84fd3284e5aea4295855744073f" kindref="member">dpp::entitlement_flags</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1entitlement_1ab654a9578a6e16bb91a3d25717ffbdbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a0fd6672429865506411af5a83d065ab0" kindref="member">entitlement_type</ref></type>
        <definition>entitlement_type dpp::entitlement::get_type</definition>
        <argsstring>() const</argsstring>
        <name>get_type</name>
        <briefdescription>
<para>Get the type of entitlement. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>entitlement_type Entitlement type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="147" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1entitlement_1a25c8615f0a838ff5b003bb21f1e3311d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::entitlement::is_deleted</definition>
        <argsstring>() const</argsstring>
        <name>is_deleted</name>
        <briefdescription>
<para>Was the entitlement deleted? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the entitlement was deleted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/entitlement.h" line="154" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1entitlement" kindref="compound">entitlement</ref> &amp;</type>
        <definition>entitlement  &amp; dpp::json_interface&lt; entitlement  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="43" column="3" bodyfile="include/dpp/json_interface.h" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; entitlement  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="55" column="6" bodyfile="include/dpp/json_interface.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; entitlement  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="67" column="13" bodyfile="include/dpp/json_interface.h" bodystart="67" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A definition of a discord entitlement. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::entitlement</label>
        <link refid="classdpp_1_1entitlement"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; entitlement &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; entitlement &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::entitlement</label>
        <link refid="classdpp_1_1entitlement"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>application_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>sku_id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ends_at</edgelabel>
          <edgelabel>starts_at</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>entitlement_type</label>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; entitlement &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; entitlement &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>time_t</label>
      </node>
      <node id="9">
        <label>uint16_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/entitlement.h" line="68" column="1" bodyfile="include/dpp/entitlement.h" bodystart="68" bodyend="155"/>
    <listofallmembers>
      <member refid="classdpp_1_1entitlement_1ac2d87bd3cdc5272eaf41f24ef50c5a5f" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>application_id</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>build_json</name></member>
      <member refid="classdpp_1_1entitlement_1ab0368a98989b1333310cad3bd4a91dc2" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>ends_at</name></member>
      <member refid="classdpp_1_1entitlement_1a0a56e0248107bcc7a3e95adf5e8dc42b" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>entitlement</name></member>
      <member refid="classdpp_1_1entitlement_1a4737da4dfbae2458ad1aafce89cf0e95" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>entitlement</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1entitlement_1a8659f09f79d82ef04055480af075f79b" prot="protected" virt="non-virtual"><scope>dpp::entitlement</scope><name>fill_from_json_impl</name></member>
      <member refid="classdpp_1_1entitlement_1a2368d7944df9433c0e2a1b0dacff9172" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>flags</name></member>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1entitlement_1ab654a9578a6e16bb91a3d25717ffbdbf" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>get_type</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>id</name></member>
      <member refid="classdpp_1_1entitlement_1a25c8615f0a838ff5b003bb21f1e3311d" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>is_deleted</name></member>
      <member refid="classdpp_1_1entitlement_1a4998a2187a17a1a233011e16285cc8ef" prot="protected" virt="non-virtual"><scope>dpp::entitlement</scope><name>json_interface&lt; entitlement &gt;</name></member>
      <member refid="classdpp_1_1managed_1a49ce0d7fdbeab770ec46be27771c2285" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1aa3ee436836ab0e2bf4f842c2c2bc3b52" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a198b514f7e6a2b26734fd2dad85f481d" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1ac7a876ad1764b89f0568a1f1bc6bf640" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1a48b542729f1352f93f1c60950986517f" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a4a4be34febb174eaee3c0964d0bf1e21" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>operator==</name></member>
      <member refid="classdpp_1_1entitlement_1a70b7d08db4c6758cbcdf075bacea4693" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>owner_id</name></member>
      <member refid="classdpp_1_1entitlement_1a01ae035f91a97c993b74ab87bd40b3b8" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>sku_id</name></member>
      <member refid="classdpp_1_1entitlement_1a8e5dc8e52f1b086c267284216166a1b6" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>starts_at</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>to_json</name></member>
      <member refid="classdpp_1_1entitlement_1aa8f6593d8ef44f929680dd5f85087bd6" prot="protected" virt="non-virtual"><scope>dpp::entitlement</scope><name>to_json_impl</name></member>
      <member refid="classdpp_1_1entitlement_1a7fa8c5d7cf387201728d52cc5219cf6e" prot="public" virt="non-virtual"><scope>dpp::entitlement</scope><name>type</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::entitlement</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
