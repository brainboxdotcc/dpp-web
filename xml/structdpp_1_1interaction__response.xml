<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdpp_1_1interaction__response" kind="struct" prot="public">
    <compoundname>dpp::interaction_response</compoundname>
    <includes local="no">slashcommand.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1interaction__response_1a7c06a118113d431b3725b70e12d92f19" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">interaction_response_type</ref></type>
        <definition>interaction_response_type dpp::interaction_response::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>Response type from <ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">dpp::interaction_response_type</ref>. Should be one of ir_pong, ir_channel_message_with_source, or ir_deferred_channel_message_with_source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/slashcommand.h" line="189" column="1" bodyfile="/home/brain/D++/include/dpp/slashcommand.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1interaction__response_1afa292ebb598e2ecbb1d8eb089f415493" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> *</type>
        <definition>struct message* dpp::interaction_response::msg</definition>
        <argsstring></argsstring>
        <name>msg</name>
        <briefdescription>
<para>A message object. This pointer is always valid while the containing <ref refid="structdpp_1_1interaction__response" kindref="compound">interaction_response</ref> exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/slashcommand.h" line="195" column="1" bodyfile="/home/brain/D++/include/dpp/slashcommand.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1interaction__response_1a074094acbb739670f92520011cdcff09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::interaction_response::interaction_response</definition>
        <argsstring>()</argsstring>
        <name>interaction_response</name>
        <briefdescription>
<para>Construct a new interaction response object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/slashcommand.h" line="200" column="1" bodyfile="/home/brain/D++/src/dpp/slashcommand.cpp" bodystart="345" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__response_1a50e33b74f32d9e100db207c1ae5f3b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::interaction_response::interaction_response</definition>
        <argsstring>(interaction_response_type t, const struct message &amp;m)</argsstring>
        <name>interaction_response</name>
        <param>
          <type><ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">interaction_response_type</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Construct a new interaction response object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reply </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to reply with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/slashcommand.h" line="208" column="1" bodyfile="/home/brain/D++/src/dpp/slashcommand.cpp" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__response_1ac7d7ddd127b1510ddfd2cb4a543699bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1interaction__response" kindref="compound">interaction_response</ref> &amp;</type>
        <definition>interaction_response &amp; dpp::interaction_response::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill object properties from JSON. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON to fill from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1interaction__response" kindref="compound">interaction_response</ref>&amp; Reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/slashcommand.h" line="216" column="1" bodyfile="/home/brain/D++/src/dpp/slashcommand.cpp" bodystart="358" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__response_1a725680cd7d74f416b86cb4c04e7cb3a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::interaction_response::build_json</definition>
        <argsstring>() const </argsstring>
        <name>build_json</name>
        <briefdescription>
<para>Build a json string for this object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string JSON string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/slashcommand.h" line="223" column="1" bodyfile="/home/brain/D++/src/dpp/slashcommand.cpp" bodystart="366" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__response_1a314950e3ab3b3938a0b9493492d334f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::interaction_response::~interaction_response</definition>
        <argsstring>()</argsstring>
        <name>~interaction_response</name>
        <briefdescription>
<para>Destroy the interaction response object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/slashcommand.h" line="228" column="1" bodyfile="/home/brain/D++/src/dpp/slashcommand.cpp" bodystart="349" bodyend="351"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A response to an interaction, used to reply to a command and initiate a message, which can be hidden from others (ephemeral) or visible to all. </para>    </briefdescription>
    <detaileddescription>
<para>The <ref refid="structdpp_1_1interaction__response" kindref="compound">dpp::interaction_response</ref> object wraps a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object. To set the message as &apos;ephemeral&apos; (e.g. only the command issuer can see it) you should add the <ref refid="namespacedpp_1a0157b2de9cc3cf2f819b8e4d969f84a8a31f151a1f4b4763df16059ff4d88aeaf" kindref="member">dpp::m_ephemeral</ref> flag to the <ref refid="structdpp_1_1message_1a16fca6ff4595e0fcab2305205eb54626" kindref="member">dpp::message::flags</ref> field. e.g.:</para><para><computeroutput>mymessage.flags |= <ref refid="namespacedpp_1a0157b2de9cc3cf2f819b8e4d969f84a8a31f151a1f4b4763df16059ff4d88aeaf" kindref="member">dpp::m_ephemeral</ref>;</computeroutput> </para>    </detaileddescription>
    <collaborationgraph>
      <node id="12135">
        <label>interaction_response_type</label>
      </node>
      <node id="12102">
        <label>dpp::attachment</label>
        <link refid="structdpp_1_1attachment"/>
        <childnode refid="12103" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="12104" relation="usage">
          <edgelabel>width</edgelabel>
          <edgelabel>size</edgelabel>
          <edgelabel>height</edgelabel>
        </childnode>
        <childnode refid="12105" relation="usage">
          <edgelabel>ephemeral</edgelabel>
        </childnode>
        <childnode refid="12106" relation="usage">
          <edgelabel>content_type</edgelabel>
          <edgelabel>url</edgelabel>
          <edgelabel>proxy_url</edgelabel>
          <edgelabel>filename</edgelabel>
        </childnode>
      </node>
      <node id="12115">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="12116" relation="public-inheritance">
        </childnode>
        <childnode refid="12117" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="12104" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="12110" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="12106" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="12118" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="12099">
        <label>dpp::interaction_response</label>
        <link refid="structdpp_1_1interaction__response"/>
        <childnode refid="12100" relation="usage">
          <edgelabel>msg</edgelabel>
        </childnode>
        <childnode refid="12135" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="12112">
        <label>std::vector&lt; dpp::dpp::component &gt;</label>
        <childnode refid="12113" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12113">
        <label>component</label>
      </node>
      <node id="12109">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="12108" relation="usage">
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="12103" relation="usage">
          <edgelabel>user_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
        </childnode>
        <childnode refid="12110" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="12106" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="12111" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
      </node>
      <node id="12122">
        <label>dpp::message::message_ref</label>
        <link refid="structdpp_1_1message_1_1message__ref"/>
        <childnode refid="12103" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="12105" relation="usage">
          <edgelabel>fail_if_not_exists</edgelabel>
        </childnode>
      </node>
      <node id="12123">
        <label>std::vector&lt; dpp::embed &gt;</label>
        <childnode refid="12124" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12103">
        <label>uint64_t</label>
      </node>
      <node id="12126">
        <label>std::vector&lt; dpp::embed_field &gt;</label>
        <childnode refid="12127" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12132">
        <label>dpp::sticker</label>
        <link refid="structdpp_1_1sticker"/>
        <childnode refid="12133" relation="usage">
          <edgelabel>format_type</edgelabel>
        </childnode>
        <childnode refid="12103" relation="usage">
          <edgelabel>pack_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="12115" relation="usage">
          <edgelabel>sticker_user</edgelabel>
        </childnode>
        <childnode refid="12110" relation="usage">
          <edgelabel>sort_value</edgelabel>
        </childnode>
        <childnode refid="12105" relation="usage">
          <edgelabel>available</edgelabel>
        </childnode>
        <childnode refid="12106" relation="usage">
          <edgelabel>filecontent</edgelabel>
          <edgelabel>asset</edgelabel>
          <edgelabel>tags</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>filename</edgelabel>
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="12134" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="12131">
        <label>std::vector&lt; dpp::sticker &gt;</label>
        <childnode refid="12132" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12127">
        <label>dpp::embed_field</label>
        <link refid="structdpp_1_1embed__field"/>
        <childnode refid="12105" relation="usage">
          <edgelabel>is_inline</edgelabel>
        </childnode>
        <childnode refid="12106" relation="usage">
          <edgelabel>value</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="12117">
        <label>uint16_t</label>
      </node>
      <node id="12108">
        <label>time_t</label>
      </node>
      <node id="12107">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="12118">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="12103" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="12128">
        <label>optional&lt; dpp::embed_provider &gt;</label>
      </node>
      <node id="12104">
        <label>uint32_t</label>
      </node>
      <node id="12133">
        <label>sticker_format</label>
      </node>
      <node id="12110">
        <label>uint8_t</label>
      </node>
      <node id="12124">
        <label>dpp::embed</label>
        <link refid="structdpp_1_1embed"/>
        <childnode refid="12125" relation="usage">
          <edgelabel>video</edgelabel>
          <edgelabel>thumbnail</edgelabel>
          <edgelabel>image</edgelabel>
        </childnode>
        <childnode refid="12108" relation="usage">
          <edgelabel>timestamp</edgelabel>
        </childnode>
        <childnode refid="12126" relation="usage">
          <edgelabel>fields</edgelabel>
        </childnode>
        <childnode refid="12104" relation="usage">
          <edgelabel>color</edgelabel>
        </childnode>
        <childnode refid="12128" relation="usage">
          <edgelabel>provider</edgelabel>
        </childnode>
        <childnode refid="12106" relation="usage">
          <edgelabel>title</edgelabel>
          <edgelabel>url</edgelabel>
          <edgelabel>type</edgelabel>
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="12129" relation="usage">
          <edgelabel>footer</edgelabel>
        </childnode>
        <childnode refid="12130" relation="usage">
          <edgelabel>author</edgelabel>
        </childnode>
      </node>
      <node id="12130">
        <label>optional&lt; dpp::embed_author &gt;</label>
      </node>
      <node id="12119">
        <label>dpp::message::allowed_ref</label>
        <link refid="structdpp_1_1message_1_1allowed__ref"/>
        <childnode refid="12105" relation="usage">
          <edgelabel>replied_user</edgelabel>
          <edgelabel>parse_roles</edgelabel>
          <edgelabel>parse_everyone</edgelabel>
          <edgelabel>parse_users</edgelabel>
        </childnode>
        <childnode refid="12111" relation="usage">
          <edgelabel>users</edgelabel>
          <edgelabel>roles</edgelabel>
        </childnode>
      </node>
      <node id="12134">
        <label>sticker_type</label>
      </node>
      <node id="12125">
        <label>optional&lt; dpp::embed_image &gt;</label>
      </node>
      <node id="12116">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="12103" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="12129">
        <label>optional&lt; dpp::embed_footer &gt;</label>
      </node>
      <node id="12121">
        <label>dpp::reaction</label>
        <link refid="structdpp_1_1reaction"/>
        <childnode refid="12103" relation="usage">
          <edgelabel>emoji_id</edgelabel>
        </childnode>
        <childnode refid="12104" relation="usage">
          <edgelabel>count</edgelabel>
        </childnode>
        <childnode refid="12106" relation="usage">
          <edgelabel>emoji_name</edgelabel>
        </childnode>
        <childnode refid="12105" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
      </node>
      <node id="12101">
        <label>std::vector&lt; dpp::attachment &gt;</label>
        <childnode refid="12102" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12100">
        <label>dpp::message</label>
        <link refid="structdpp_1_1message"/>
        <childnode refid="12101" relation="usage">
          <edgelabel>attachments</edgelabel>
        </childnode>
        <childnode refid="12108" relation="usage">
          <edgelabel>edited</edgelabel>
          <edgelabel>sent</edgelabel>
        </childnode>
        <childnode refid="12103" relation="usage">
          <edgelabel>webhook_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="12109" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="12112" relation="usage">
          <edgelabel>components</edgelabel>
        </childnode>
        <childnode refid="12114" relation="usage">
          <edgelabel>interaction</edgelabel>
        </childnode>
        <childnode refid="12115" relation="usage">
          <edgelabel>self_author</edgelabel>
          <edgelabel>author</edgelabel>
        </childnode>
        <childnode refid="12110" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="12105" relation="usage">
          <edgelabel>pinned</edgelabel>
          <edgelabel>mention_everyone</edgelabel>
          <edgelabel>tts</edgelabel>
        </childnode>
        <childnode refid="12106" relation="usage">
          <edgelabel>filecontent</edgelabel>
          <edgelabel>nonce</edgelabel>
          <edgelabel>content</edgelabel>
          <edgelabel>filename</edgelabel>
        </childnode>
        <childnode refid="12119" relation="usage">
          <edgelabel>allowed_mentions</edgelabel>
        </childnode>
        <childnode refid="12111" relation="usage">
          <edgelabel>mentions</edgelabel>
          <edgelabel>mention_channels</edgelabel>
          <edgelabel>mention_roles</edgelabel>
        </childnode>
        <childnode refid="12120" relation="usage">
          <edgelabel>reactions</edgelabel>
        </childnode>
        <childnode refid="12122" relation="usage">
          <edgelabel>message_reference</edgelabel>
        </childnode>
        <childnode refid="12123" relation="usage">
          <edgelabel>embeds</edgelabel>
        </childnode>
        <childnode refid="12131" relation="usage">
          <edgelabel>stickers</edgelabel>
        </childnode>
      </node>
      <node id="12105">
        <label>bool</label>
      </node>
      <node id="12120">
        <label>std::vector&lt; dpp::reaction &gt;</label>
        <childnode refid="12121" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12114">
        <label>dpp::message::message_interaction_struct</label>
        <link refid="structdpp_1_1message_1_1message__interaction__struct"/>
        <childnode refid="12103" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="12115" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
        <childnode refid="12106" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="12110" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="12111">
        <label>std::vector&lt; snowflake &gt;</label>
        <childnode refid="12103" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12106">
        <label>std::string</label>
        <childnode refid="12107" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/slashcommand.h" line="182" column="1" bodyfile="/home/brain/D++/include/dpp/slashcommand.h" bodystart="182" bodyend="230"/>
    <listofallmembers>
      <member refid="structdpp_1_1interaction__response_1a725680cd7d74f416b86cb4c04e7cb3a5" prot="public" virt="non-virtual"><scope>dpp::interaction_response</scope><name>build_json</name></member>
      <member refid="structdpp_1_1interaction__response_1ac7d7ddd127b1510ddfd2cb4a543699bb" prot="public" virt="non-virtual"><scope>dpp::interaction_response</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1interaction__response_1a074094acbb739670f92520011cdcff09" prot="public" virt="non-virtual"><scope>dpp::interaction_response</scope><name>interaction_response</name></member>
      <member refid="structdpp_1_1interaction__response_1a50e33b74f32d9e100db207c1ae5f3b9c" prot="public" virt="non-virtual"><scope>dpp::interaction_response</scope><name>interaction_response</name></member>
      <member refid="structdpp_1_1interaction__response_1afa292ebb598e2ecbb1d8eb089f415493" prot="public" virt="non-virtual"><scope>dpp::interaction_response</scope><name>msg</name></member>
      <member refid="structdpp_1_1interaction__response_1a7c06a118113d431b3725b70e12d92f19" prot="public" virt="non-virtual"><scope>dpp::interaction_response</scope><name>type</name></member>
      <member refid="structdpp_1_1interaction__response_1a314950e3ab3b3938a0b9493492d334f5" prot="public" virt="non-virtual"><scope>dpp::interaction_response</scope><name>~interaction_response</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
