<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="building-a-cpp-discord-bot-in-repl" kind="page">
    <compoundname>building-a-cpp-discord-bot-in-repl</compoundname>
    <title>Creating a Discord bot in Repl.it</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>To build a D++ bot in a repl.it instance, follow the following steps. These steps are slightly more convoluted than installing D++ into a standard container as we don&apos;t have access to root in the conventional way or write access to any files outside of our home directory in a repl. This guide sidesteps the issue by locally extracting a libdpp deb file installer, and referencing the local dependencies from the command-line.</para>
<para><orderedlist>
<listitem><para>Use wget, or the upload button, to get the precompiled x64 release into your repl as a file, e.g. <computeroutput><ulink url="https://github.com/brainboxdotcc/DPP/releases/download/v9.0.16/libdpp-9.0.16-linux-x64.deb">https://github.com/brainboxdotcc/DPP/releases/download/v9.0.16/libdpp-9.0.16-linux-x64.deb</ulink></computeroutput></para>
</listitem><listitem><para>Extract this deb file using <computeroutput>dpkg</computeroutput>: <programlisting><codeline><highlight class="normal">dpkg<sp/>-x<sp/>*.deb<sp/>.</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Compile your bot, note that you should be sure to include the <computeroutput>pthread</computeroutput> library explicitly and reference the extracted dpp installation you just put into the repl: <programlisting><codeline><highlight class="normal">g++<sp/>-o<sp/>bot<sp/>main.cpp<sp/>-ldpp<sp/>-lpthread<sp/>-L./usr/lib<sp/>-I./usr/include<sp/>-std=c++17</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Run your bot! Note that you will need to set <computeroutput>LD_PRELOAD</computeroutput> to reference <computeroutput>libdpp.so</computeroutput> as it will be located in <computeroutput>$HOME</computeroutput> and not <computeroutput>/usr/lib</computeroutput>: <programlisting><codeline><highlight class="normal">LD_PRELOAD=./usr/lib/libdpp.so<sp/>./bot</highlight></codeline>
</programlisting></para>
</listitem></orderedlist>
</para>
<para><simplesect kind="note"><para>There is a premade repl, ready for use which was built using the steps above. If you wish to use this repl simply <ulink url="https://replit.com/@braindigitalis/dpp-demo-bot">clone it by clicking here</ulink>. <bold>Be sure to set a token</bold> in the secrets, using an environment variable named <computeroutput>TOKEN</computeroutput> before attempting to run the repl container!</para>
</simplesect>
</para>
<sect2 id="building-a-cpp-discord-bot-in-repl_1autotoc_md34">
<title>Troubleshooting</title>
<para>If the bot fails to start and instead you receive an error message about being banned from the Discord API, there is nothing you can do about this. These bans are temporary but because repl.it is a shared platform, you share an IP address with many thousands of bots, some abusive and some badly written. This will happen often and is outside of the control of yourself and us. If this is a problem for you, we recommend instead you obtain some affordable non-free hosting instead. </para>
</sect2>
    </detaileddescription>
    <location file="docpages/02_building_a_bot.md"/>
  </compounddef>
</doxygen>
