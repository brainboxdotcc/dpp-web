<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdpp_1_1log__t" kind="struct" prot="public">
    <compoundname>dpp::log_t</compoundname>
    <basecompoundref refid="structdpp_1_1event__dispatch__t" prot="public" virt="non-virtual">dpp::event_dispatch_t</basecompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1log__t_1ae1316a6ace98555175a4c1c70c9d0549" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">loglevel</ref></type>
        <definition>loglevel dpp::log_t::severity</definition>
        <argsstring></argsstring>
        <name>severity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Severity </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="61" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1log__t_1a127b3f7ba1478e9ee378248e98c3bad7" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::log_t::message</definition>
        <argsstring></argsstring>
        <name>message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Log Message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="63" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw event text </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="40" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::event_dispatch_t::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shard the event came from </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="43" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1log__t_1af5ba0a481ddc4381df21ad7b1e4efe7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::log_t::log_t</definition>
        <argsstring>(class discord_client *client, const std::string &amp;raw)</argsstring>
        <name>log_t</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on. CAN BE NULL for log events originating from the cluster object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event text as JSON </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="59" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="96" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Log messages. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="12179">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
      <node id="12178">
        <label>dpp::log_t</label>
        <link refid="structdpp_1_1log__t"/>
        <childnode refid="12179" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="12259">
        <label>function&lt; void(const dpp::guild_integrations_update_t &amp;event)&gt;</label>
      </node>
      <node id="12197">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="12196" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="12189" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="12198" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="12200" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="12203" relation="usage">
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>numshards</edgelabel>
          <edgelabel>intents</edgelabel>
        </childnode>
        <childnode refid="12182" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="12206" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
      </node>
      <node id="12193">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="12194" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="12195" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="12223">
        <label>function&lt; void(const dpp::stage_instance_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12238">
        <label>function&lt; void(const dpp::message_create_t &amp;event)&gt;</label>
      </node>
      <node id="12224">
        <label>function&lt; void(const dpp::thread_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="12271">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="12188" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="12272" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="12182" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>session_id</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
      </node>
      <node id="12264">
        <label>function&lt; void(const dpp::voice_buffer_send_t &amp;event)&gt;</label>
      </node>
      <node id="12251">
        <label>function&lt; void(const dpp::user_update_t &amp;event)&gt;</label>
      </node>
      <node id="12200">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="12201" relation="public-inheritance">
        </childnode>
        <childnode refid="12202" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="12203" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="12204" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="12182" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="12205" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="12209">
        <label>function&lt; void(const dpp::thread_members_update_t &amp;event)&gt;</label>
      </node>
      <node id="12253">
        <label>function&lt; void(const dpp::invite_create_t &amp;event)&gt;</label>
      </node>
      <node id="12225">
        <label>function&lt; void(const dpp::guild_create_t &amp;event)&gt;</label>
      </node>
      <node id="12255">
        <label>function&lt; void(const dpp::guild_emojis_update_t &amp;event)&gt;</label>
      </node>
      <node id="12265">
        <label>function&lt; void(const dpp::guild_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="12191">
        <label>function&lt; int()&gt;</label>
      </node>
      <node id="12206">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="12207" relation="usage">
          <edgelabel>guild_role_create</edgelabel>
        </childnode>
        <childnode refid="12208" relation="usage">
          <edgelabel>voice_state_update</edgelabel>
        </childnode>
        <childnode refid="12209" relation="usage">
          <edgelabel>thread_members_update</edgelabel>
        </childnode>
        <childnode refid="12210" relation="usage">
          <edgelabel>channel_delete</edgelabel>
        </childnode>
        <childnode refid="12211" relation="usage">
          <edgelabel>thread_delete</edgelabel>
        </childnode>
        <childnode refid="12212" relation="usage">
          <edgelabel>integration_update</edgelabel>
        </childnode>
        <childnode refid="12213" relation="usage">
          <edgelabel>message_reaction_remove_emoji</edgelabel>
        </childnode>
        <childnode refid="12214" relation="usage">
          <edgelabel>resumed</edgelabel>
        </childnode>
        <childnode refid="12215" relation="usage">
          <edgelabel>presence_update</edgelabel>
        </childnode>
        <childnode refid="12216" relation="usage">
          <edgelabel>message_delete_bulk</edgelabel>
        </childnode>
        <childnode refid="12217" relation="usage">
          <edgelabel>voice_ready</edgelabel>
        </childnode>
        <childnode refid="12218" relation="usage">
          <edgelabel>guild_ban_remove</edgelabel>
        </childnode>
        <childnode refid="12219" relation="usage">
          <edgelabel>guild_role_delete</edgelabel>
        </childnode>
        <childnode refid="12220" relation="usage">
          <edgelabel>channel_update</edgelabel>
        </childnode>
        <childnode refid="12221" relation="usage">
          <edgelabel>stickers_update</edgelabel>
        </childnode>
        <childnode refid="12222" relation="usage">
          <edgelabel>guild_members_chunk</edgelabel>
        </childnode>
        <childnode refid="12223" relation="usage">
          <edgelabel>stage_instance_delete</edgelabel>
        </childnode>
        <childnode refid="12224" relation="usage">
          <edgelabel>thread_member_update</edgelabel>
        </childnode>
        <childnode refid="12225" relation="usage">
          <edgelabel>guild_create</edgelabel>
        </childnode>
        <childnode refid="12226" relation="usage">
          <edgelabel>message_reaction_remove</edgelabel>
        </childnode>
        <childnode refid="12227" relation="usage">
          <edgelabel>select_click</edgelabel>
        </childnode>
        <childnode refid="12228" relation="usage">
          <edgelabel>interaction_create</edgelabel>
        </childnode>
        <childnode refid="12229" relation="usage">
          <edgelabel>guild_join_request_delete</edgelabel>
        </childnode>
        <childnode refid="12230" relation="usage">
          <edgelabel>guild_member_add</edgelabel>
        </childnode>
        <childnode refid="12231" relation="usage">
          <edgelabel>voice_user_talking</edgelabel>
        </childnode>
        <childnode refid="12232" relation="usage">
          <edgelabel>thread_create</edgelabel>
        </childnode>
        <childnode refid="12233" relation="usage">
          <edgelabel>application_command_create</edgelabel>
        </childnode>
        <childnode refid="12234" relation="usage">
          <edgelabel>button_click</edgelabel>
        </childnode>
        <childnode refid="12235" relation="usage">
          <edgelabel>guild_update</edgelabel>
        </childnode>
        <childnode refid="12236" relation="usage">
          <edgelabel>message_reaction_remove_all</edgelabel>
        </childnode>
        <childnode refid="12237" relation="usage">
          <edgelabel>voice_receive</edgelabel>
        </childnode>
        <childnode refid="12238" relation="usage">
          <edgelabel>message_create</edgelabel>
        </childnode>
        <childnode refid="12239" relation="usage">
          <edgelabel>webhooks_update</edgelabel>
        </childnode>
        <childnode refid="12240" relation="usage">
          <edgelabel>message_reaction_add</edgelabel>
        </childnode>
        <childnode refid="12241" relation="usage">
          <edgelabel>message_delete</edgelabel>
        </childnode>
        <childnode refid="12242" relation="usage">
          <edgelabel>voice_track_marker</edgelabel>
        </childnode>
        <childnode refid="12243" relation="usage">
          <edgelabel>thread_list_sync</edgelabel>
        </childnode>
        <childnode refid="12244" relation="usage">
          <edgelabel>integration_delete</edgelabel>
        </childnode>
        <childnode refid="12245" relation="usage">
          <edgelabel>guild_ban_add</edgelabel>
        </childnode>
        <childnode refid="12246" relation="usage">
          <edgelabel>channel_pins_update</edgelabel>
        </childnode>
        <childnode refid="12247" relation="usage">
          <edgelabel>typing_start</edgelabel>
        </childnode>
        <childnode refid="12248" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="12249" relation="usage">
          <edgelabel>thread_update</edgelabel>
        </childnode>
        <childnode refid="12250" relation="usage">
          <edgelabel>integration_create</edgelabel>
        </childnode>
        <childnode refid="12251" relation="usage">
          <edgelabel>user_update</edgelabel>
        </childnode>
        <childnode refid="12252" relation="usage">
          <edgelabel>message_update</edgelabel>
        </childnode>
        <childnode refid="12253" relation="usage">
          <edgelabel>invite_create</edgelabel>
        </childnode>
        <childnode refid="12254" relation="usage">
          <edgelabel>invite_delete</edgelabel>
        </childnode>
        <childnode refid="12255" relation="usage">
          <edgelabel>guild_emojis_update</edgelabel>
        </childnode>
        <childnode refid="12256" relation="usage">
          <edgelabel>guild_delete</edgelabel>
        </childnode>
        <childnode refid="12257" relation="usage">
          <edgelabel>application_command_delete</edgelabel>
        </childnode>
        <childnode refid="12258" relation="usage">
          <edgelabel>application_command_update</edgelabel>
        </childnode>
        <childnode refid="12259" relation="usage">
          <edgelabel>guild_integrations_update</edgelabel>
        </childnode>
        <childnode refid="12260" relation="usage">
          <edgelabel>voice_server_update</edgelabel>
        </childnode>
        <childnode refid="12261" relation="usage">
          <edgelabel>guild_role_update</edgelabel>
        </childnode>
        <childnode refid="12262" relation="usage">
          <edgelabel>channel_create</edgelabel>
        </childnode>
        <childnode refid="12263" relation="usage">
          <edgelabel>stage_instance_create</edgelabel>
        </childnode>
        <childnode refid="12264" relation="usage">
          <edgelabel>voice_buffer_send</edgelabel>
        </childnode>
        <childnode refid="12265" relation="usage">
          <edgelabel>guild_member_update</edgelabel>
        </childnode>
        <childnode refid="12266" relation="usage">
          <edgelabel>guild_member_remove</edgelabel>
        </childnode>
        <childnode refid="12267" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
      </node>
      <node id="12213">
        <label>function&lt; void(const dpp::message_reaction_remove_emoji_t &amp;event)&gt;</label>
      </node>
      <node id="12220">
        <label>function&lt; void(const dpp::channel_update_t &amp;event)&gt;</label>
      </node>
      <node id="12262">
        <label>function&lt; void(const dpp::channel_create_t &amp;event)&gt;</label>
      </node>
      <node id="12188">
        <label>uint64_t</label>
      </node>
      <node id="12257">
        <label>function&lt; void(const dpp::application_command_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12254">
        <label>function&lt; void(const dpp::invite_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12240">
        <label>function&lt; void(const dpp::message_reaction_add_t &amp;event)&gt;</label>
      </node>
      <node id="12234">
        <label>function&lt; void(const dpp::button_click_t &amp;event)&gt;</label>
      </node>
      <node id="12222">
        <label>function&lt; void(const dpp::guild_members_chunk_t &amp;event)&gt;</label>
      </node>
      <node id="12211">
        <label>function&lt; void(const dpp::thread_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12230">
        <label>function&lt; void(const dpp::guild_member_add_t &amp;event)&gt;</label>
      </node>
      <node id="12247">
        <label>function&lt; void(const dpp::typing_start_t &amp;event)&gt;</label>
      </node>
      <node id="12244">
        <label>function&lt; void(const dpp::integration_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12267">
        <label>function&lt; void(const dpp::log_t &amp;event)&gt;</label>
      </node>
      <node id="12202">
        <label>uint16_t</label>
      </node>
      <node id="12232">
        <label>function&lt; void(const dpp::thread_create_t &amp;event)&gt;</label>
      </node>
      <node id="12189">
        <label>time_t</label>
      </node>
      <node id="12183">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="12266">
        <label>function&lt; void(const dpp::guild_member_remove_t &amp;event)&gt;</label>
      </node>
      <node id="12243">
        <label>function&lt; void(const dpp::thread_list_sync_t &amp;event)&gt;</label>
      </node>
      <node id="12273">
        <label>loglevel</label>
      </node>
      <node id="12272">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="12185" relation="public-inheritance">
        </childnode>
        <childnode refid="12188" relation="usage">
          <edgelabel>server_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="12189" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="12197" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="12203" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="12182" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="12192" relation="usage">
          <edgelabel>terminating</edgelabel>
          <edgelabel>sodium_initialised</edgelabel>
        </childnode>
        <childnode refid="12269" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
      </node>
      <node id="12205">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="12188" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="12242">
        <label>function&lt; void(const dpp::voice_track_marker_t &amp;event)&gt;</label>
      </node>
      <node id="12231">
        <label>function&lt; void(const dpp::voice_user_talking_t &amp;event)&gt;</label>
      </node>
      <node id="12196">
        <label>double</label>
      </node>
      <node id="12186">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="12187" relation="usage">
          <edgelabel>custom_writeable_ready</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
        </childnode>
        <childnode refid="12188" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="12189" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="12190" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="12191" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="12192" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="12182" relation="usage">
          <edgelabel>port</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>buffer</edgelabel>
        </childnode>
        <childnode refid="12193" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="12241">
        <label>function&lt; void(const dpp::message_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12263">
        <label>function&lt; void(const dpp::stage_instance_create_t &amp;event)&gt;</label>
      </node>
      <node id="12203">
        <label>uint32_t</label>
      </node>
      <node id="12261">
        <label>function&lt; void(const dpp::guild_role_update_t &amp;event)&gt;</label>
      </node>
      <node id="12181">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="12182" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="12184" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
      </node>
      <node id="12204">
        <label>uint8_t</label>
      </node>
      <node id="12246">
        <label>function&lt; void(const dpp::channel_pins_update_t &amp;event)&gt;</label>
      </node>
      <node id="12199">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="12185">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="12186" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12198">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="12199" relation="usage">
          <edgelabel>role_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="12215">
        <label>function&lt; void(const dpp::presence_update_t &amp;event)&gt;</label>
      </node>
      <node id="12227">
        <label>function&lt; void(const dpp::select_click_t &amp;event)&gt;</label>
      </node>
      <node id="12212">
        <label>function&lt; void(const dpp::integration_update_t &amp;event)&gt;</label>
      </node>
      <node id="12235">
        <label>function&lt; void(const dpp::guild_update_t &amp;event)&gt;</label>
      </node>
      <node id="12237">
        <label>function&lt; void(const dpp::voice_receive_t &amp;event)&gt;</label>
      </node>
      <node id="12270">
        <label>std::unordered_map&lt; snowflake, dpp::voiceconn * &gt;</label>
        <childnode refid="12188" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="12271" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12187">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="12229">
        <label>function&lt; void(const dpp::guild_join_request_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12184">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="12185" relation="public-inheritance">
        </childnode>
        <childnode refid="12196" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="12188" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="12189" relation="usage">
          <edgelabel>last_heartbeat_ack</edgelabel>
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="12197" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="12268" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="12203" relation="usage">
          <edgelabel>reconnects</edgelabel>
          <edgelabel>shard_id</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="12192" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="12182" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="12269" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="12270" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="12236">
        <label>function&lt; void(const dpp::message_reaction_remove_all_t &amp;event)&gt;</label>
      </node>
      <node id="12194">
        <label>SSL *</label>
      </node>
      <node id="12201">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="12188" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="12249">
        <label>function&lt; void(const dpp::thread_update_t &amp;event)&gt;</label>
      </node>
      <node id="12250">
        <label>function&lt; void(const dpp::integration_create_t &amp;event)&gt;</label>
      </node>
      <node id="12258">
        <label>function&lt; void(const dpp::application_command_update_t &amp;event)&gt;</label>
      </node>
      <node id="12195">
        <label>SSL_CTX *</label>
      </node>
      <node id="12245">
        <label>function&lt; void(const dpp::guild_ban_add_t &amp;event)&gt;</label>
      </node>
      <node id="12268">
        <label>mutex</label>
      </node>
      <node id="12256">
        <label>function&lt; void(const dpp::guild_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12214">
        <label>function&lt; void(const dpp::resumed_t &amp;event)&gt;</label>
      </node>
      <node id="12233">
        <label>function&lt; void(const dpp::application_command_create_t &amp;event)&gt;</label>
      </node>
      <node id="12239">
        <label>function&lt; void(const dpp::webhooks_update_t &amp;event)&gt;</label>
      </node>
      <node id="12252">
        <label>function&lt; void(const dpp::message_update_t &amp;event)&gt;</label>
      </node>
      <node id="12192">
        <label>bool</label>
      </node>
      <node id="12190">
        <label>SOCKET</label>
      </node>
      <node id="12180">
        <label>dpp::log_t</label>
        <link refid="structdpp_1_1log__t"/>
        <childnode refid="12181" relation="public-inheritance">
        </childnode>
        <childnode refid="12182" relation="usage">
          <edgelabel>message</edgelabel>
        </childnode>
        <childnode refid="12273" relation="usage">
          <edgelabel>severity</edgelabel>
        </childnode>
      </node>
      <node id="12228">
        <label>function&lt; void(const dpp::interaction_create_t &amp;event)&gt;</label>
      </node>
      <node id="12260">
        <label>function&lt; void(const dpp::voice_server_update_t &amp;event)&gt;</label>
      </node>
      <node id="12218">
        <label>function&lt; void(const dpp::guild_ban_remove_t &amp;event)&gt;</label>
      </node>
      <node id="12210">
        <label>function&lt; void(const dpp::channel_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12207">
        <label>function&lt; void(const dpp::guild_role_create_t &amp;event)&gt;</label>
      </node>
      <node id="12226">
        <label>function&lt; void(const dpp::message_reaction_remove_t &amp;event)&gt;</label>
      </node>
      <node id="12248">
        <label>function&lt; void(const dpp::ready_t &amp;event)&gt;</label>
      </node>
      <node id="12208">
        <label>function&lt; void(const dpp::voice_state_update_t &amp;event)&gt;</label>
      </node>
      <node id="12221">
        <label>function&lt; void(const dpp::guild_stickers_update_t &amp;event)&gt;</label>
      </node>
      <node id="12217">
        <label>function&lt; void(const dpp::voice_ready_t &amp;event)&gt;</label>
      </node>
      <node id="12269">
        <label>native_handle_type</label>
      </node>
      <node id="12219">
        <label>function&lt; void(const dpp::guild_role_delete_t &amp;event)&gt;</label>
      </node>
      <node id="12182">
        <label>std::string</label>
        <childnode refid="12183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12216">
        <label>function&lt; void(const dpp::message_delete_bulk_t &amp;event)&gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/dispatcher.h" line="53" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="53" bodyend="64"/>
    <listofallmembers>
      <member refid="structdpp_1_1event__dispatch__t_1a4ac4d287ca94f2389cf68e2534d9e1b0" prot="public" virt="non-virtual"><scope>dpp::log_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" virt="non-virtual"><scope>dpp::log_t</scope><name>from</name></member>
      <member refid="structdpp_1_1log__t_1af5ba0a481ddc4381df21ad7b1e4efe7b" prot="public" virt="non-virtual"><scope>dpp::log_t</scope><name>log_t</name></member>
      <member refid="structdpp_1_1log__t_1a127b3f7ba1478e9ee378248e98c3bad7" prot="public" virt="non-virtual"><scope>dpp::log_t</scope><name>message</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" virt="non-virtual"><scope>dpp::log_t</scope><name>raw_event</name></member>
      <member refid="structdpp_1_1log__t_1ae1316a6ace98555175a4c1c70c9d0549" prot="public" virt="non-virtual"><scope>dpp::log_t</scope><name>severity</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
