<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdpp_1_1button__click__t" kind="struct" prot="public">
    <compoundname>dpp::button_click_t</compoundname>
    <basecompoundref refid="structdpp_1_1interaction__create__t" prot="public" virt="non-virtual">dpp::interaction_create_t</basecompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1button__click__t_1a9cd563e83eab3b92b4aecda2680cf3c8" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::button_click_t::custom_id</definition>
        <argsstring></argsstring>
        <name>custom_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="217" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1button__click__t_1a2a5e3ed8a2ccc64fb68926916a39dbfd" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::button_click_t::component_type</definition>
        <argsstring></argsstring>
        <name>component_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="218" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1interaction" kindref="compound">interaction</ref></type>
        <definition>interaction dpp::interaction_create_t::command</definition>
        <argsstring></argsstring>
        <name>command</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="195" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw event text </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="40" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::event_dispatch_t::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shard the event came from </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="43" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1button__click__t_1a18cfc5b1ec6d672e6e8c77f4f467dc7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::button_click_t::button_click_t</definition>
        <argsstring>(class discord_client *client, const std::string &amp;raw)</argsstring>
        <name>button_click_t</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event text as JSON </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="207" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1button__click__t_1a6858bdcabeade87999dea475696e8343" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="namespacedpp_1a710b32b577396ba92917d0578f0bedb6" kindref="member">command_value</ref> &amp;</type>
        <definition>const command_value &amp; dpp::button_click_t::get_parameter</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>get_parameter</name>
        <reimplements refid="structdpp_1_1interaction__create__t_1aa5bc1d5b482aa129a2ca4e321f71049a">get_parameter</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a command line parameter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The command line parameter to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Always returns an empty parameter as buttons dont have parameters! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="215" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a4ed4f3ec8cb17a1bfd7f786fc4a7d285" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(interaction_response_type t, const message &amp;m) const </argsstring>
        <name>reply</name>
        <param>
          <type><ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">interaction_response_type</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reply to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="154" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ad4dea83a9b8e03c431c84389bf71557e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(interaction_response_type t, const std::string &amp;mt) const </argsstring>
        <name>reply</name>
        <param>
          <type><ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">interaction_response_type</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reply to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="162" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a9c9611513143eca3365f9309da6580fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::get_original_response</definition>
        <argsstring>(command_completion_event_t callback={}) const </argsstring>
        <name>get_original_response</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get original response message for this interaction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a37cbc7933dd12462e0630ef03052dad5" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a612750509ef5f81831fa4c8c59fa7711" kindref="member">confirmation_callback_t::get_error()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="170" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ab71587c74f4bbf1ee1b0f0b95523394b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::edit_response</definition>
        <argsstring>(const message &amp;m) const </argsstring>
        <name>edit_response</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit the response for this interaction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="177" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ad94f5ca5d1602958053a7b99fcde57be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::edit_response</definition>
        <argsstring>(const std::string &amp;mt) const </argsstring>
        <name>edit_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
<para>Edit the response for this interaction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="184" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="60" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Click on button. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="8313">
        <label>dpp::button_click_t</label>
        <link refid="structdpp_1_1button__click__t"/>
        <childnode refid="8314" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8315">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
      <node id="8314">
        <label>dpp::interaction_create_t</label>
        <link refid="structdpp_1_1interaction__create__t"/>
        <childnode refid="8315" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8396">
        <label>function&lt; void(const dpp::guild_integrations_update_t &amp;event)&gt;</label>
      </node>
      <node id="8334">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="8333" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="8326" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="8335" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="8337" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="8340" relation="usage">
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>numshards</edgelabel>
          <edgelabel>intents</edgelabel>
        </childnode>
        <childnode refid="8319" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="8343" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
      </node>
      <node id="8330">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="8331" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="8332" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="8360">
        <label>function&lt; void(const dpp::stage_instance_delete_t &amp;event)&gt;</label>
      </node>
      <node id="8375">
        <label>function&lt; void(const dpp::message_create_t &amp;event)&gt;</label>
      </node>
      <node id="8361">
        <label>function&lt; void(const dpp::thread_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="8408">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="8325" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="8409" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="8319" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>session_id</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
      </node>
      <node id="8401">
        <label>function&lt; void(const dpp::voice_buffer_send_t &amp;event)&gt;</label>
      </node>
      <node id="8388">
        <label>function&lt; void(const dpp::user_update_t &amp;event)&gt;</label>
      </node>
      <node id="8337">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="8338" relation="public-inheritance">
        </childnode>
        <childnode refid="8339" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="8340" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="8341" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="8319" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="8342" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="8346">
        <label>function&lt; void(const dpp::thread_members_update_t &amp;event)&gt;</label>
      </node>
      <node id="8390">
        <label>function&lt; void(const dpp::invite_create_t &amp;event)&gt;</label>
      </node>
      <node id="8362">
        <label>function&lt; void(const dpp::guild_create_t &amp;event)&gt;</label>
      </node>
      <node id="8392">
        <label>function&lt; void(const dpp::guild_emojis_update_t &amp;event)&gt;</label>
      </node>
      <node id="8410">
        <label>dpp::interaction</label>
        <link refid="classdpp_1_1interaction"/>
        <childnode refid="8338" relation="public-inheritance">
        </childnode>
        <childnode refid="8325" relation="usage">
          <edgelabel>message_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
          <edgelabel>application_id</edgelabel>
        </childnode>
        <childnode refid="8411" relation="usage">
          <edgelabel>resolved</edgelabel>
        </childnode>
        <childnode refid="8420" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="8337" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
        <childnode refid="8422" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="8319" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="8341" relation="usage">
          <edgelabel>version</edgelabel>
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="8422">
        <label>variant&lt; dpp::command_interaction, dpp::component_interaction &gt;</label>
      </node>
      <node id="8402">
        <label>function&lt; void(const dpp::guild_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="8328">
        <label>function&lt; int()&gt;</label>
      </node>
      <node id="8343">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="8344" relation="usage">
          <edgelabel>guild_role_create</edgelabel>
        </childnode>
        <childnode refid="8345" relation="usage">
          <edgelabel>voice_state_update</edgelabel>
        </childnode>
        <childnode refid="8346" relation="usage">
          <edgelabel>thread_members_update</edgelabel>
        </childnode>
        <childnode refid="8347" relation="usage">
          <edgelabel>channel_delete</edgelabel>
        </childnode>
        <childnode refid="8348" relation="usage">
          <edgelabel>thread_delete</edgelabel>
        </childnode>
        <childnode refid="8349" relation="usage">
          <edgelabel>integration_update</edgelabel>
        </childnode>
        <childnode refid="8350" relation="usage">
          <edgelabel>message_reaction_remove_emoji</edgelabel>
        </childnode>
        <childnode refid="8351" relation="usage">
          <edgelabel>resumed</edgelabel>
        </childnode>
        <childnode refid="8352" relation="usage">
          <edgelabel>presence_update</edgelabel>
        </childnode>
        <childnode refid="8353" relation="usage">
          <edgelabel>message_delete_bulk</edgelabel>
        </childnode>
        <childnode refid="8354" relation="usage">
          <edgelabel>voice_ready</edgelabel>
        </childnode>
        <childnode refid="8355" relation="usage">
          <edgelabel>guild_ban_remove</edgelabel>
        </childnode>
        <childnode refid="8356" relation="usage">
          <edgelabel>guild_role_delete</edgelabel>
        </childnode>
        <childnode refid="8357" relation="usage">
          <edgelabel>channel_update</edgelabel>
        </childnode>
        <childnode refid="8358" relation="usage">
          <edgelabel>stickers_update</edgelabel>
        </childnode>
        <childnode refid="8359" relation="usage">
          <edgelabel>guild_members_chunk</edgelabel>
        </childnode>
        <childnode refid="8360" relation="usage">
          <edgelabel>stage_instance_delete</edgelabel>
        </childnode>
        <childnode refid="8361" relation="usage">
          <edgelabel>thread_member_update</edgelabel>
        </childnode>
        <childnode refid="8362" relation="usage">
          <edgelabel>guild_create</edgelabel>
        </childnode>
        <childnode refid="8363" relation="usage">
          <edgelabel>message_reaction_remove</edgelabel>
        </childnode>
        <childnode refid="8364" relation="usage">
          <edgelabel>select_click</edgelabel>
        </childnode>
        <childnode refid="8365" relation="usage">
          <edgelabel>interaction_create</edgelabel>
        </childnode>
        <childnode refid="8366" relation="usage">
          <edgelabel>guild_join_request_delete</edgelabel>
        </childnode>
        <childnode refid="8367" relation="usage">
          <edgelabel>guild_member_add</edgelabel>
        </childnode>
        <childnode refid="8368" relation="usage">
          <edgelabel>voice_user_talking</edgelabel>
        </childnode>
        <childnode refid="8369" relation="usage">
          <edgelabel>thread_create</edgelabel>
        </childnode>
        <childnode refid="8370" relation="usage">
          <edgelabel>application_command_create</edgelabel>
        </childnode>
        <childnode refid="8371" relation="usage">
          <edgelabel>button_click</edgelabel>
        </childnode>
        <childnode refid="8372" relation="usage">
          <edgelabel>guild_update</edgelabel>
        </childnode>
        <childnode refid="8373" relation="usage">
          <edgelabel>message_reaction_remove_all</edgelabel>
        </childnode>
        <childnode refid="8374" relation="usage">
          <edgelabel>voice_receive</edgelabel>
        </childnode>
        <childnode refid="8375" relation="usage">
          <edgelabel>message_create</edgelabel>
        </childnode>
        <childnode refid="8376" relation="usage">
          <edgelabel>webhooks_update</edgelabel>
        </childnode>
        <childnode refid="8377" relation="usage">
          <edgelabel>message_reaction_add</edgelabel>
        </childnode>
        <childnode refid="8378" relation="usage">
          <edgelabel>message_delete</edgelabel>
        </childnode>
        <childnode refid="8379" relation="usage">
          <edgelabel>voice_track_marker</edgelabel>
        </childnode>
        <childnode refid="8380" relation="usage">
          <edgelabel>thread_list_sync</edgelabel>
        </childnode>
        <childnode refid="8381" relation="usage">
          <edgelabel>integration_delete</edgelabel>
        </childnode>
        <childnode refid="8382" relation="usage">
          <edgelabel>guild_ban_add</edgelabel>
        </childnode>
        <childnode refid="8383" relation="usage">
          <edgelabel>channel_pins_update</edgelabel>
        </childnode>
        <childnode refid="8384" relation="usage">
          <edgelabel>typing_start</edgelabel>
        </childnode>
        <childnode refid="8385" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="8386" relation="usage">
          <edgelabel>thread_update</edgelabel>
        </childnode>
        <childnode refid="8387" relation="usage">
          <edgelabel>integration_create</edgelabel>
        </childnode>
        <childnode refid="8388" relation="usage">
          <edgelabel>user_update</edgelabel>
        </childnode>
        <childnode refid="8389" relation="usage">
          <edgelabel>message_update</edgelabel>
        </childnode>
        <childnode refid="8390" relation="usage">
          <edgelabel>invite_create</edgelabel>
        </childnode>
        <childnode refid="8391" relation="usage">
          <edgelabel>invite_delete</edgelabel>
        </childnode>
        <childnode refid="8392" relation="usage">
          <edgelabel>guild_emojis_update</edgelabel>
        </childnode>
        <childnode refid="8393" relation="usage">
          <edgelabel>guild_delete</edgelabel>
        </childnode>
        <childnode refid="8394" relation="usage">
          <edgelabel>application_command_delete</edgelabel>
        </childnode>
        <childnode refid="8395" relation="usage">
          <edgelabel>application_command_update</edgelabel>
        </childnode>
        <childnode refid="8396" relation="usage">
          <edgelabel>guild_integrations_update</edgelabel>
        </childnode>
        <childnode refid="8397" relation="usage">
          <edgelabel>voice_server_update</edgelabel>
        </childnode>
        <childnode refid="8398" relation="usage">
          <edgelabel>guild_role_update</edgelabel>
        </childnode>
        <childnode refid="8399" relation="usage">
          <edgelabel>channel_create</edgelabel>
        </childnode>
        <childnode refid="8400" relation="usage">
          <edgelabel>stage_instance_create</edgelabel>
        </childnode>
        <childnode refid="8401" relation="usage">
          <edgelabel>voice_buffer_send</edgelabel>
        </childnode>
        <childnode refid="8402" relation="usage">
          <edgelabel>guild_member_update</edgelabel>
        </childnode>
        <childnode refid="8403" relation="usage">
          <edgelabel>guild_member_remove</edgelabel>
        </childnode>
        <childnode refid="8404" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
      </node>
      <node id="8316">
        <label>dpp::button_click_t</label>
        <link refid="structdpp_1_1button__click__t"/>
        <childnode refid="8317" relation="public-inheritance">
        </childnode>
        <childnode refid="8341" relation="usage">
          <edgelabel>component_type</edgelabel>
        </childnode>
        <childnode refid="8319" relation="usage">
          <edgelabel>custom_id</edgelabel>
        </childnode>
      </node>
      <node id="8420">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="8326" relation="usage">
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="8325" relation="usage">
          <edgelabel>user_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
        </childnode>
        <childnode refid="8341" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="8319" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="8421" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
      </node>
      <node id="8350">
        <label>function&lt; void(const dpp::message_reaction_remove_emoji_t &amp;event)&gt;</label>
      </node>
      <node id="8357">
        <label>function&lt; void(const dpp::channel_update_t &amp;event)&gt;</label>
      </node>
      <node id="8416">
        <label>std::map&lt; dpp::snowflake, dpp::dpp::user &gt;</label>
        <childnode refid="8325" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="8417" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="8399">
        <label>function&lt; void(const dpp::channel_create_t &amp;event)&gt;</label>
      </node>
      <node id="8325">
        <label>uint64_t</label>
      </node>
      <node id="8394">
        <label>function&lt; void(const dpp::application_command_delete_t &amp;event)&gt;</label>
      </node>
      <node id="8391">
        <label>function&lt; void(const dpp::invite_delete_t &amp;event)&gt;</label>
      </node>
      <node id="8377">
        <label>function&lt; void(const dpp::message_reaction_add_t &amp;event)&gt;</label>
      </node>
      <node id="8371">
        <label>function&lt; void(const dpp::button_click_t &amp;event)&gt;</label>
      </node>
      <node id="8359">
        <label>function&lt; void(const dpp::guild_members_chunk_t &amp;event)&gt;</label>
      </node>
      <node id="8415">
        <label>channel</label>
      </node>
      <node id="8348">
        <label>function&lt; void(const dpp::thread_delete_t &amp;event)&gt;</label>
      </node>
      <node id="8367">
        <label>function&lt; void(const dpp::guild_member_add_t &amp;event)&gt;</label>
      </node>
      <node id="8384">
        <label>function&lt; void(const dpp::typing_start_t &amp;event)&gt;</label>
      </node>
      <node id="8381">
        <label>function&lt; void(const dpp::integration_delete_t &amp;event)&gt;</label>
      </node>
      <node id="8404">
        <label>function&lt; void(const dpp::log_t &amp;event)&gt;</label>
      </node>
      <node id="8339">
        <label>uint16_t</label>
      </node>
      <node id="8369">
        <label>function&lt; void(const dpp::thread_create_t &amp;event)&gt;</label>
      </node>
      <node id="8326">
        <label>time_t</label>
      </node>
      <node id="8320">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="8403">
        <label>function&lt; void(const dpp::guild_member_remove_t &amp;event)&gt;</label>
      </node>
      <node id="8380">
        <label>function&lt; void(const dpp::thread_list_sync_t &amp;event)&gt;</label>
      </node>
      <node id="8418">
        <label>std::map&lt; dpp::snowflake, dpp::dpp::role &gt;</label>
        <childnode refid="8325" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="8419" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="8409">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="8322" relation="public-inheritance">
        </childnode>
        <childnode refid="8325" relation="usage">
          <edgelabel>server_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="8326" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="8334" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="8340" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="8319" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="8329" relation="usage">
          <edgelabel>terminating</edgelabel>
          <edgelabel>sodium_initialised</edgelabel>
        </childnode>
        <childnode refid="8406" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
      </node>
      <node id="8342">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="8325" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="8379">
        <label>function&lt; void(const dpp::voice_track_marker_t &amp;event)&gt;</label>
      </node>
      <node id="8368">
        <label>function&lt; void(const dpp::voice_user_talking_t &amp;event)&gt;</label>
      </node>
      <node id="8333">
        <label>double</label>
      </node>
      <node id="8323">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="8324" relation="usage">
          <edgelabel>custom_writeable_ready</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
        </childnode>
        <childnode refid="8325" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="8326" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="8327" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="8328" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="8329" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="8319" relation="usage">
          <edgelabel>port</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>buffer</edgelabel>
        </childnode>
        <childnode refid="8330" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="8378">
        <label>function&lt; void(const dpp::message_delete_t &amp;event)&gt;</label>
      </node>
      <node id="8400">
        <label>function&lt; void(const dpp::stage_instance_create_t &amp;event)&gt;</label>
      </node>
      <node id="8340">
        <label>uint32_t</label>
      </node>
      <node id="8398">
        <label>function&lt; void(const dpp::guild_role_update_t &amp;event)&gt;</label>
      </node>
      <node id="8318">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="8319" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="8321" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
      </node>
      <node id="8341">
        <label>uint8_t</label>
      </node>
      <node id="8411">
        <label>dpp::command_resolved</label>
        <link refid="structdpp_1_1command__resolved"/>
        <childnode refid="8412" relation="usage">
          <edgelabel>members</edgelabel>
        </childnode>
        <childnode refid="8414" relation="usage">
          <edgelabel>channels</edgelabel>
        </childnode>
        <childnode refid="8416" relation="usage">
          <edgelabel>users</edgelabel>
        </childnode>
        <childnode refid="8418" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
      </node>
      <node id="8383">
        <label>function&lt; void(const dpp::channel_pins_update_t &amp;event)&gt;</label>
      </node>
      <node id="8413">
        <label>guild_member</label>
      </node>
      <node id="8336">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="8322">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="8323" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8335">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="8336" relation="usage">
          <edgelabel>role_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="8317">
        <label>dpp::interaction_create_t</label>
        <link refid="structdpp_1_1interaction__create__t"/>
        <childnode refid="8318" relation="public-inheritance">
        </childnode>
        <childnode refid="8410" relation="usage">
          <edgelabel>command</edgelabel>
        </childnode>
      </node>
      <node id="8352">
        <label>function&lt; void(const dpp::presence_update_t &amp;event)&gt;</label>
      </node>
      <node id="8364">
        <label>function&lt; void(const dpp::select_click_t &amp;event)&gt;</label>
      </node>
      <node id="8349">
        <label>function&lt; void(const dpp::integration_update_t &amp;event)&gt;</label>
      </node>
      <node id="8372">
        <label>function&lt; void(const dpp::guild_update_t &amp;event)&gt;</label>
      </node>
      <node id="8374">
        <label>function&lt; void(const dpp::voice_receive_t &amp;event)&gt;</label>
      </node>
      <node id="8407">
        <label>std::unordered_map&lt; snowflake, dpp::voiceconn * &gt;</label>
        <childnode refid="8325" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="8408" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="8324">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="8366">
        <label>function&lt; void(const dpp::guild_join_request_delete_t &amp;event)&gt;</label>
      </node>
      <node id="8321">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="8322" relation="public-inheritance">
        </childnode>
        <childnode refid="8333" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="8325" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="8326" relation="usage">
          <edgelabel>last_heartbeat_ack</edgelabel>
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="8334" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="8405" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="8340" relation="usage">
          <edgelabel>reconnects</edgelabel>
          <edgelabel>shard_id</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="8329" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="8319" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="8406" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="8407" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="8373">
        <label>function&lt; void(const dpp::message_reaction_remove_all_t &amp;event)&gt;</label>
      </node>
      <node id="8331">
        <label>SSL *</label>
      </node>
      <node id="8419">
        <label>role</label>
      </node>
      <node id="8338">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="8325" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="8386">
        <label>function&lt; void(const dpp::thread_update_t &amp;event)&gt;</label>
      </node>
      <node id="8414">
        <label>std::map&lt; dpp::snowflake, dpp::dpp::channel &gt;</label>
        <childnode refid="8415" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="8325" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="8387">
        <label>function&lt; void(const dpp::integration_create_t &amp;event)&gt;</label>
      </node>
      <node id="8395">
        <label>function&lt; void(const dpp::application_command_update_t &amp;event)&gt;</label>
      </node>
      <node id="8332">
        <label>SSL_CTX *</label>
      </node>
      <node id="8382">
        <label>function&lt; void(const dpp::guild_ban_add_t &amp;event)&gt;</label>
      </node>
      <node id="8405">
        <label>mutex</label>
      </node>
      <node id="8393">
        <label>function&lt; void(const dpp::guild_delete_t &amp;event)&gt;</label>
      </node>
      <node id="8351">
        <label>function&lt; void(const dpp::resumed_t &amp;event)&gt;</label>
      </node>
      <node id="8370">
        <label>function&lt; void(const dpp::application_command_create_t &amp;event)&gt;</label>
      </node>
      <node id="8376">
        <label>function&lt; void(const dpp::webhooks_update_t &amp;event)&gt;</label>
      </node>
      <node id="8389">
        <label>function&lt; void(const dpp::message_update_t &amp;event)&gt;</label>
      </node>
      <node id="8417">
        <label>user</label>
      </node>
      <node id="8329">
        <label>bool</label>
      </node>
      <node id="8327">
        <label>SOCKET</label>
      </node>
      <node id="8365">
        <label>function&lt; void(const dpp::interaction_create_t &amp;event)&gt;</label>
      </node>
      <node id="8397">
        <label>function&lt; void(const dpp::voice_server_update_t &amp;event)&gt;</label>
      </node>
      <node id="8355">
        <label>function&lt; void(const dpp::guild_ban_remove_t &amp;event)&gt;</label>
      </node>
      <node id="8347">
        <label>function&lt; void(const dpp::channel_delete_t &amp;event)&gt;</label>
      </node>
      <node id="8344">
        <label>function&lt; void(const dpp::guild_role_create_t &amp;event)&gt;</label>
      </node>
      <node id="8363">
        <label>function&lt; void(const dpp::message_reaction_remove_t &amp;event)&gt;</label>
      </node>
      <node id="8385">
        <label>function&lt; void(const dpp::ready_t &amp;event)&gt;</label>
      </node>
      <node id="8345">
        <label>function&lt; void(const dpp::voice_state_update_t &amp;event)&gt;</label>
      </node>
      <node id="8358">
        <label>function&lt; void(const dpp::guild_stickers_update_t &amp;event)&gt;</label>
      </node>
      <node id="8354">
        <label>function&lt; void(const dpp::voice_ready_t &amp;event)&gt;</label>
      </node>
      <node id="8421">
        <label>std::vector&lt; snowflake &gt;</label>
        <childnode refid="8325" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="8406">
        <label>native_handle_type</label>
      </node>
      <node id="8356">
        <label>function&lt; void(const dpp::guild_role_delete_t &amp;event)&gt;</label>
      </node>
      <node id="8319">
        <label>std::string</label>
        <childnode refid="8320" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8353">
        <label>function&lt; void(const dpp::message_delete_bulk_t &amp;event)&gt;</label>
      </node>
      <node id="8412">
        <label>std::map&lt; dpp::snowflake, dpp::dpp::guild_member &gt;</label>
        <childnode refid="8325" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="8413" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/dispatcher.h" line="201" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="201" bodyend="219"/>
    <listofallmembers>
      <member refid="structdpp_1_1button__click__t_1a18cfc5b1ec6d672e6e8c77f4f467dc7b" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>button_click_t</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>command</name></member>
      <member refid="structdpp_1_1button__click__t_1a2a5e3ed8a2ccc64fb68926916a39dbfd" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>component_type</name></member>
      <member refid="structdpp_1_1button__click__t_1a9cd563e83eab3b92b4aecda2680cf3c8" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>custom_id</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ab71587c74f4bbf1ee1b0f0b95523394b" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>edit_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ad94f5ca5d1602958053a7b99fcde57be" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>edit_response</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a4ac4d287ca94f2389cf68e2534d9e1b0" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>from</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a9c9611513143eca3365f9309da6580fb" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>get_original_response</name></member>
      <member refid="structdpp_1_1button__click__t_1a6858bdcabeade87999dea475696e8343" prot="public" virt="virtual"><scope>dpp::button_click_t</scope><name>get_parameter</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ab0b360b2769c2e3be693aae2f0df27b6" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>interaction_create_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>raw_event</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a4ed4f3ec8cb17a1bfd7f786fc4a7d285" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ad4dea83a9b8e03c431c84389bf71557e" prot="public" virt="non-virtual"><scope>dpp::button_click_t</scope><name>reply</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
