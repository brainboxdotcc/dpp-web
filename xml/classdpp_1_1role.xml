<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classdpp_1_1role" kind="class" prot="public">
    <compoundname>dpp::role</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">role.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1role_1a6451e41576902faa14d0394d47d19934" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::role::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role name </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="86" column="1" bodyfile="/home/brain/D++/include/dpp/role.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ab831d734d6cfe3a88c54bb91b0f578ea" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::role::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild id </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="88" column="1" bodyfile="/home/brain/D++/include/dpp/role.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a42f8b747f7a04cd1022ce3bc42e6a05b" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::role::colour</definition>
        <argsstring></argsstring>
        <name>colour</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role colour </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="90" column="1" bodyfile="/home/brain/D++/include/dpp/role.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a08996823fc9ba1eb8c95b1e2e855d958" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::role::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role position </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="92" column="1" bodyfile="/home/brain/D++/include/dpp/role.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ad1d79b737f5e7d2cc71238068fc36ad4" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::role::permissions</definition>
        <argsstring></argsstring>
        <name>permissions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role permissions bitmask values from <ref refid="namespacedpp_1a2b8b5573bf936e034d33a7238fe5604f" kindref="member">dpp::role_permissions</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="94" column="1" bodyfile="/home/brain/D++/include/dpp/role.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a67fa7fe9f3650b5783cf4f5d2ed37de0" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::role::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role flags from <ref refid="namespacedpp_1a0dc77b8a509bf5337322d02e93e96c2e" kindref="member">dpp::role_flags</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="96" column="1" bodyfile="/home/brain/D++/include/dpp/role.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1aa44718ae47c00bcf2008366218646572" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::role::integration_id</definition>
        <argsstring></argsstring>
        <name>integration_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integration id if any (e.g. role is a bot&apos;s role created when it was invited) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="98" column="1" bodyfile="/home/brain/D++/include/dpp/role.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ada5cb5675b012b2cf55d285d5b233df3" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::role::bot_id</definition>
        <argsstring></argsstring>
        <name>bot_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bot id if any (e.g. role is a bot&apos;s role created when it was invited) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="100" column="1" bodyfile="/home/brain/D++/include/dpp/role.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unique ID of object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discord.h" line="44" column="1" bodyfile="/home/brain/D++/include/dpp/discord.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1role_1aa23013a7a7d7c03c4ef44d6e6fc02baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::role::role</definition>
        <argsstring>()</argsstring>
        <name>role</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="103" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="30" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a1cd275ca1aa52763e05b78a8a3443476" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>dpp::role::~role</definition>
        <argsstring>()</argsstring>
        <name>~role</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="106" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a5352cd2a40c1c2c430ec9448bd45723f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::fill_from_json</definition>
        <argsstring>(snowflake guild_id, nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill this role from json. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the guild id to place in the json </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The json data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="113" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="46" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ab8271fab2fdbd2382b7096a408ce9d40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::role::build_json</definition>
        <argsstring>(bool with_id=false) const </argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a json string from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the ID is to be included in the json text </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The json of the role </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="119" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="66" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a4ad327e906431f6aea33520c32e23145" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_hoisted</definition>
        <argsstring>() const </argsstring>
        <name>is_hoisted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if the role is hoisted </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="122" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac7f342629a689d8fb75fec58bae46edb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_mentionable</definition>
        <argsstring>() const </argsstring>
        <name>is_mentionable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if the role is mentionable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="124" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9ab872f97029bfe56226fa275df859d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_managed</definition>
        <argsstring>() const </argsstring>
        <name>is_managed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if the role is managed (belongs to a bot or application) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="126" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1abadbc4995e84296c8de067fd307b261d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_create_instant_invite</definition>
        <argsstring>() const </argsstring>
        <name>has_create_instant_invite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has create instant invite permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="128" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a2ca31d56845c49f029465e1851c61327" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_kick_members</definition>
        <argsstring>() const </argsstring>
        <name>has_kick_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the kick members permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="130" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a889ebb09e9d09d5bef1e515ad9d599ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_ban_members</definition>
        <argsstring>() const </argsstring>
        <name>has_ban_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the ban members permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="132" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a7556228edcaf22dd3bf8b154c2a36253" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_administrator</definition>
        <argsstring>() const </argsstring>
        <name>has_administrator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the administrator permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="134" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ada7e5dd9aa3d1dbb045ffc437d794132" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_channels</definition>
        <argsstring>() const </argsstring>
        <name>has_manage_channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage channels permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="136" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a683d3eb2875ba84666172a60ecf22c50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_guild</definition>
        <argsstring>() const </argsstring>
        <name>has_manage_guild</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage guild permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="138" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a24a546474b97992fadca3d7b3ab06281" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_add_reactions</definition>
        <argsstring>() const </argsstring>
        <name>has_add_reactions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the add reactions permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="140" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1acf674750cc0f613815fa80f78065fd5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_audit_log</definition>
        <argsstring>() const </argsstring>
        <name>has_view_audit_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the view audit log permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="142" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a2e9c5cb498c0f6f0fe955d14393f846a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_priority_speaker</definition>
        <argsstring>() const </argsstring>
        <name>has_priority_speaker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the priority speaker permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="144" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a678e24bb87c06f7f3bc263600ffa63ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_stream</definition>
        <argsstring>() const </argsstring>
        <name>has_stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the stream permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="146" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a41f3a992677fb797f5e802fb6104313e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_channel</definition>
        <argsstring>() const </argsstring>
        <name>has_view_channel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the view channel permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="148" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a047de28b800eb73daf00e055c773c51b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_messages</definition>
        <argsstring>() const </argsstring>
        <name>has_send_messages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the send messages permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="150" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a12f1c655fd7ecc23e533e5e607e5a375" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_tts_messages</definition>
        <argsstring>() const </argsstring>
        <name>has_send_tts_messages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the send TTS messages permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="152" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a4eff689ce3c319f4da0dc1ba36f1c63c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_messages</definition>
        <argsstring>() const </argsstring>
        <name>has_manage_messages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage messages permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="154" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="147" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a3052a262ae7714897319525385f03e92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_embed_links</definition>
        <argsstring>() const </argsstring>
        <name>has_embed_links</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the embed links permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="156" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a99c0f5d5bd10a81f7663ebef9f0e8eae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_attach_files</definition>
        <argsstring>() const </argsstring>
        <name>has_attach_files</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the attach files permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="158" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a4ea373aa6cebfe0fc575435da8b0e91d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_read_message_history</definition>
        <argsstring>() const </argsstring>
        <name>has_read_message_history</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the read message history permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="160" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a7329afe0dd8deb1158ba92b04c8f36c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_mention_everyone</definition>
        <argsstring>() const </argsstring>
        <name>has_mention_everyone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the mention @everyone and @here permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="162" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a641d7e7a6752ef33dd09dd56e41e0c07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_external_emojis</definition>
        <argsstring>() const </argsstring>
        <name>has_use_external_emojis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the use external emojis permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="164" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a4db8bac8686328f3783fad1ef375049e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_guild_insights</definition>
        <argsstring>() const </argsstring>
        <name>has_view_guild_insights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the view guild insights permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="166" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a4ba180420f888e9a161bea1be8ea0bd9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_connect</definition>
        <argsstring>() const </argsstring>
        <name>has_connect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the connect voice permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="168" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="175" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a8704ca39c53c618af618c777ddd72c54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_speak</definition>
        <argsstring>() const </argsstring>
        <name>has_speak</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the speak permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="170" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1af6d4ee50df06a5a91a122c4adf5130b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_mute_members</definition>
        <argsstring>() const </argsstring>
        <name>has_mute_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the mute members permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="172" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a099fe7d1faae0009d395c29d9bd3ff82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_deafen_members</definition>
        <argsstring>() const </argsstring>
        <name>has_deafen_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the deafen members permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="174" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a61da46111b5bf6411fff5dae3a5d1211" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_move_members</definition>
        <argsstring>() const </argsstring>
        <name>has_move_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the move members permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="176" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="191" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9fbd60f5416b66c66544cc08c2515373" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_vad</definition>
        <argsstring>() const </argsstring>
        <name>has_use_vad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has use voice activity detection permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="178" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="195" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a11df7852a7397628154acc21d5b0d1ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_change_nickname</definition>
        <argsstring>() const </argsstring>
        <name>has_change_nickname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the change nickname permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="180" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9c822e3bdbfd1b093e3f44e9ede52f89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_nicknames</definition>
        <argsstring>() const </argsstring>
        <name>has_manage_nicknames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage nicknames permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="182" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="203" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a09cfeae91c1f26a5e8598b86c8217967" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_roles</definition>
        <argsstring>() const </argsstring>
        <name>has_manage_roles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage roles permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="184" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a78ef2335192c3377275e1d1a660075c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_webhooks</definition>
        <argsstring>() const </argsstring>
        <name>has_manage_webhooks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage webhooks permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="186" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="211" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a84ab1f3a7864cb5655156eb9103b0942" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_emojis_and_stickers</definition>
        <argsstring>() const </argsstring>
        <name>has_manage_emojis_and_stickers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage emojis and stickers permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="188" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0037d2a05bd0d99e5381405a61563872" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_application_commands</definition>
        <argsstring>() const </argsstring>
        <name>has_use_application_commands</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the use application commands permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="190" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a64835f84df2a1366f68936213ae1e3b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_request_to_speak</definition>
        <argsstring>() const </argsstring>
        <name>has_request_to_speak</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the request to speak permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="192" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a36773e923d442162aeb18c5c85a4efa9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_threads</definition>
        <argsstring>() const </argsstring>
        <name>has_manage_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage threads permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="194" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a212e187eaec8fab88f56ba58b3770320" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_create_public_threads</definition>
        <argsstring>() const </argsstring>
        <name>has_create_public_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the create public threads permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="196" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ab6b219b08f6bd64ecefa04bb3ca671d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_create_private_threads</definition>
        <argsstring>() const </argsstring>
        <name>has_create_private_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the create private threads permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="198" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="235" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a664c117a8f6d62252bfe0c9472d6c64f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_external_stickers</definition>
        <argsstring>() const </argsstring>
        <name>has_use_external_stickers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the use external stickers permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="200" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aaecf6cf51dbf7b05999b50fac26fc34e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_messages_in_threads</definition>
        <argsstring>() const </argsstring>
        <name>has_send_messages_in_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the send messages in threads permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="202" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1af2397b4f8546f7f77a30dc7bd449fc76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_start_embedded_activities</definition>
        <argsstring>() const </argsstring>
        <name>has_start_embedded_activities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the start embedded activities permission </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/role.h" line="204" column="1" bodyfile="/home/brain/D++/src/dpp/role.cpp" bodystart="247" bodyend="249"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a role within a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="13797">
        <label>dpp::role</label>
        <link refid="classdpp_1_1role"/>
        <childnode refid="13798" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13798">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="13801">
        <label>uint64_t</label>
      </node>
      <node id="13805">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="13802">
        <label>uint32_t</label>
      </node>
      <node id="13799">
        <label>dpp::role</label>
        <link refid="classdpp_1_1role"/>
        <childnode refid="13800" relation="public-inheritance">
        </childnode>
        <childnode refid="13801" relation="usage">
          <edgelabel>integration_id</edgelabel>
          <edgelabel>bot_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="13802" relation="usage">
          <edgelabel>colour</edgelabel>
        </childnode>
        <childnode refid="13803" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>position</edgelabel>
        </childnode>
        <childnode refid="13804" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="13803">
        <label>uint8_t</label>
      </node>
      <node id="13800">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="13801" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="13804">
        <label>std::string</label>
        <childnode refid="13805" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/role.h" line="83" column="1" bodyfile="/home/brain/D++/include/dpp/role.h" bodystart="83" bodyend="205"/>
    <listofallmembers>
      <member refid="classdpp_1_1role_1ada5cb5675b012b2cf55d285d5b233df3" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>bot_id</name></member>
      <member refid="classdpp_1_1role_1ab8271fab2fdbd2382b7096a408ce9d40" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>build_json</name></member>
      <member refid="classdpp_1_1role_1a42f8b747f7a04cd1022ce3bc42e6a05b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>colour</name></member>
      <member refid="classdpp_1_1role_1a5352cd2a40c1c2c430ec9448bd45723f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1role_1a67fa7fe9f3650b5783cf4f5d2ed37de0" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>flags</name></member>
      <member refid="classdpp_1_1role_1ab831d734d6cfe3a88c54bb91b0f578ea" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1role_1a24a546474b97992fadca3d7b3ab06281" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_add_reactions</name></member>
      <member refid="classdpp_1_1role_1a7556228edcaf22dd3bf8b154c2a36253" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_administrator</name></member>
      <member refid="classdpp_1_1role_1a99c0f5d5bd10a81f7663ebef9f0e8eae" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_attach_files</name></member>
      <member refid="classdpp_1_1role_1a889ebb09e9d09d5bef1e515ad9d599ba" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_ban_members</name></member>
      <member refid="classdpp_1_1role_1a11df7852a7397628154acc21d5b0d1ef" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_change_nickname</name></member>
      <member refid="classdpp_1_1role_1a4ba180420f888e9a161bea1be8ea0bd9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_connect</name></member>
      <member refid="classdpp_1_1role_1abadbc4995e84296c8de067fd307b261d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_create_instant_invite</name></member>
      <member refid="classdpp_1_1role_1ab6b219b08f6bd64ecefa04bb3ca671d3" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_create_private_threads</name></member>
      <member refid="classdpp_1_1role_1a212e187eaec8fab88f56ba58b3770320" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_create_public_threads</name></member>
      <member refid="classdpp_1_1role_1a099fe7d1faae0009d395c29d9bd3ff82" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_deafen_members</name></member>
      <member refid="classdpp_1_1role_1a3052a262ae7714897319525385f03e92" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_embed_links</name></member>
      <member refid="classdpp_1_1role_1a2ca31d56845c49f029465e1851c61327" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_kick_members</name></member>
      <member refid="classdpp_1_1role_1ada7e5dd9aa3d1dbb045ffc437d794132" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_channels</name></member>
      <member refid="classdpp_1_1role_1a84ab1f3a7864cb5655156eb9103b0942" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_emojis_and_stickers</name></member>
      <member refid="classdpp_1_1role_1a683d3eb2875ba84666172a60ecf22c50" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_guild</name></member>
      <member refid="classdpp_1_1role_1a4eff689ce3c319f4da0dc1ba36f1c63c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_messages</name></member>
      <member refid="classdpp_1_1role_1a9c822e3bdbfd1b093e3f44e9ede52f89" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_nicknames</name></member>
      <member refid="classdpp_1_1role_1a09cfeae91c1f26a5e8598b86c8217967" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_roles</name></member>
      <member refid="classdpp_1_1role_1a36773e923d442162aeb18c5c85a4efa9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_threads</name></member>
      <member refid="classdpp_1_1role_1a78ef2335192c3377275e1d1a660075c4" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_webhooks</name></member>
      <member refid="classdpp_1_1role_1a7329afe0dd8deb1158ba92b04c8f36c4" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_mention_everyone</name></member>
      <member refid="classdpp_1_1role_1a61da46111b5bf6411fff5dae3a5d1211" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_move_members</name></member>
      <member refid="classdpp_1_1role_1af6d4ee50df06a5a91a122c4adf5130b6" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_mute_members</name></member>
      <member refid="classdpp_1_1role_1a2e9c5cb498c0f6f0fe955d14393f846a" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_priority_speaker</name></member>
      <member refid="classdpp_1_1role_1a4ea373aa6cebfe0fc575435da8b0e91d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_read_message_history</name></member>
      <member refid="classdpp_1_1role_1a64835f84df2a1366f68936213ae1e3b7" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_request_to_speak</name></member>
      <member refid="classdpp_1_1role_1a047de28b800eb73daf00e055c773c51b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_messages</name></member>
      <member refid="classdpp_1_1role_1aaecf6cf51dbf7b05999b50fac26fc34e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_messages_in_threads</name></member>
      <member refid="classdpp_1_1role_1a12f1c655fd7ecc23e533e5e607e5a375" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_tts_messages</name></member>
      <member refid="classdpp_1_1role_1a8704ca39c53c618af618c777ddd72c54" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_speak</name></member>
      <member refid="classdpp_1_1role_1af2397b4f8546f7f77a30dc7bd449fc76" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_start_embedded_activities</name></member>
      <member refid="classdpp_1_1role_1a678e24bb87c06f7f3bc263600ffa63ad" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_stream</name></member>
      <member refid="classdpp_1_1role_1a0037d2a05bd0d99e5381405a61563872" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_application_commands</name></member>
      <member refid="classdpp_1_1role_1a641d7e7a6752ef33dd09dd56e41e0c07" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_external_emojis</name></member>
      <member refid="classdpp_1_1role_1a664c117a8f6d62252bfe0c9472d6c64f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_external_stickers</name></member>
      <member refid="classdpp_1_1role_1a9fbd60f5416b66c66544cc08c2515373" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_vad</name></member>
      <member refid="classdpp_1_1role_1acf674750cc0f613815fa80f78065fd5d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_audit_log</name></member>
      <member refid="classdpp_1_1role_1a41f3a992677fb797f5e802fb6104313e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_channel</name></member>
      <member refid="classdpp_1_1role_1a4db8bac8686328f3783fad1ef375049e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_guild_insights</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>id</name></member>
      <member refid="classdpp_1_1role_1aa44718ae47c00bcf2008366218646572" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>integration_id</name></member>
      <member refid="classdpp_1_1role_1a4ad327e906431f6aea33520c32e23145" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_hoisted</name></member>
      <member refid="classdpp_1_1role_1a9ab872f97029bfe56226fa275df859d2" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_managed</name></member>
      <member refid="classdpp_1_1role_1ac7f342629a689d8fb75fec58bae46edb" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_mentionable</name></member>
      <member refid="classdpp_1_1managed_1a3e2b7d69e7313d84aff23cadf9ba9a6a" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>managed</name></member>
      <member refid="classdpp_1_1role_1a6451e41576902faa14d0394d47d19934" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>name</name></member>
      <member refid="classdpp_1_1role_1ad1d79b737f5e7d2cc71238068fc36ad4" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>permissions</name></member>
      <member refid="classdpp_1_1role_1a08996823fc9ba1eb8c95b1e2e855d958" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>position</name></member>
      <member refid="classdpp_1_1role_1aa23013a7a7d7c03c4ef44d6e6fc02baa" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>role</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::role</scope><name>~managed</name></member>
      <member refid="classdpp_1_1role_1a1cd275ca1aa52763e05b78a8a3443476" prot="public" virt="virtual"><scope>dpp::role</scope><name>~role</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
