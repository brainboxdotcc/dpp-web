<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1role" kind="class" language="C++" prot="public">
    <compoundname>dpp::role</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; role &gt;</basecompoundref>
    <includes local="no">role.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1role_1ae11eb9dd97cb82714a8c094a9e735ee0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; role &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; role &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="classdpp_1_1role" kindref="compound">role</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="1013" column="21" bodyfile="include/dpp/role.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classdpp_1_1role_1a01e2b587ca511c7fa2b32306aa633b3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const role &amp;lhs, const role &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator less than, used for checking if a role is below another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first role to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second role to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if lhs is less than rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="328" column="15" bodyfile="include/dpp/role.h" bodystart="328" bodyend="335"/>
      </memberdef>
      <memberdef kind="friend" id="classdpp_1_1role_1a9f67634c6559af28e6a11d446aa052e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const role &amp;lhs, const role &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Operator greater than, used for checking if a role is above another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first role to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second role to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if lhs is greater than rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="344" column="20" bodyfile="include/dpp/role.h" bodystart="344" bodyend="346"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1role_1ada5cb5675b012b2cf55d285d5b233df3" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::role::bot_id</definition>
        <argsstring></argsstring>
        <name>bot_id</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Bot id if any. (e.g. role is a bot&apos;s role created when it was invited) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="150" column="11" bodyfile="include/dpp/role.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a42f8b747f7a04cd1022ce3bc42e6a05b" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::role::colour</definition>
        <argsstring></argsstring>
        <name>colour</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Role colour. A colour of 0 means no colour. If you want a black role, you must use the value 0x000001. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="119" column="10" bodyfile="include/dpp/role.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a67fa7fe9f3650b5783cf4f5d2ed37de0" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::role::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Role flags from <ref refid="namespacedpp_1af803e69eddf23c5862947295f3df5d53" kindref="member">dpp::role_flags</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="138" column="9" bodyfile="include/dpp/role.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ab831d734d6cfe3a88c54bb91b0f578ea" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::role::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Guild ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="112" column="11" bodyfile="include/dpp/role.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a9647a12d7cb2eed2746cc09f06c5c9c9" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1icon" kindref="compound">utility::icon</ref></type>
        <definition>utility::icon dpp::role::icon</definition>
        <argsstring></argsstring>
        <name>icon</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The role icon. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="167" column="15" bodyfile="include/dpp/role.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1aa44718ae47c00bcf2008366218646572" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::role::integration_id</definition>
        <argsstring></argsstring>
        <name>integration_id</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Integration id if any. (e.g. role is a bot&apos;s role created when it was invited). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="144" column="11" bodyfile="include/dpp/role.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a6451e41576902faa14d0394d47d19934" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::role::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Role name Between 1 and 100 characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="107" column="13" bodyfile="include/dpp/role.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ad6deb5559a2378196b92e496c4db501c" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1permission" kindref="compound">permission</ref></type>
        <definition>permission dpp::role::permissions</definition>
        <argsstring></argsstring>
        <name>permissions</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Role permissions bitmask values from <ref refid="namespacedpp_1a64f16cd622b3a09ae96803ba07fa75b7" kindref="member">dpp::permissions</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="133" column="12" bodyfile="include/dpp/role.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a08996823fc9ba1eb8c95b1e2e855d958" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::role::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Role position. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>multiple roles can have the same position number. As a result, comparing roles by position alone can lead to subtle bugs when checking for role hierarchy. The recommended and correct way to compare for roles in the hierarchy is using the comparison operators on the role objects themselves. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="128" column="9" bodyfile="include/dpp/role.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a41c75bd2ab4e4d6caac220e9bcd47a07" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::role::subscription_listing_id</definition>
        <argsstring></argsstring>
        <name>subscription_listing_id</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The id of the role&apos;s subscription sku and listing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="155" column="11" bodyfile="include/dpp/role.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ad84006ea16f3dc59cfd67559a60c5d10" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::role::unicode_emoji</definition>
        <argsstring></argsstring>
        <name>unicode_emoji</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The unicode emoji used for the role&apos;s icon. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This can be an empty string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="162" column="13" bodyfile="include/dpp/role.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1role_1a229ce6729c8846104f7b55afc2a1feb9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill this role from json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The json data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="92" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a8e8c227b1166660d8297aa01880a7777" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>virtual json dpp::role::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build a json from this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the ID is to be included in the json </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The json of the role </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="100" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1role_1a29cb3b0ae37af81ffec2ad50bda8ac94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::role::role</definition>
        <argsstring>()=default</argsstring>
        <name>role</name>
        <briefdescription>
<para>Construct a new role object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a4a8dc930d217a3e33d75e0767d427548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::role::role</definition>
        <argsstring>(const role &amp;rhs)=default</argsstring>
        <name>role</name>
        <param>
          <type>const <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Construct a new role object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Role object to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a6728977a7b358f99d64756a2ead50de2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::role::role</definition>
        <argsstring>(role &amp;&amp;rhs)=default</argsstring>
        <name>role</name>
        <param>
          <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Construct a new role object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Role object to move </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1acb81ebcbb734da1bfc84d0f52586028a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::role::~role</definition>
        <argsstring>()=default</argsstring>
        <name>~role</name>
        <briefdescription>
<para>Destroy the role object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="205" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; role  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role  &amp; dpp::json_interface&lt; role  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a5352cd2a40c1c2c430ec9448bd45723f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::fill_from_json</definition>
        <argsstring>(snowflake guild_id, nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill this role from json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the guild id to place in the json </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The json data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="283" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a492aa7a36a4ef0e0cad8e33f8f386ea8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::role::get_icon_url</definition>
        <argsstring>(uint16_t size=0, const image_type format=i_png) const</argsstring>
        <name>get_icon_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref></type>
          <declname>format</declname>
          <defval><ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <briefdescription>
<para>Returns the role&apos;s icon url if they have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the icon in pixels. It can be any power of two between 16 and 4096, otherwise the default sized icon is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format to use for the avatar. It can be one of <computeroutput>i_webp</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string icon url or an empty string, if required attributes are missing or an invalid format was passed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="300" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a60bd9c7e3901c18f5ec3c4f835e1c1de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a674dfd30e37779538e80d95fcb13770f" kindref="member">members_container</ref></type>
        <definition>members_container dpp::role::get_members</definition>
        <argsstring>() const</argsstring>
        <name>get_members</name>
        <briefdescription>
<para>Get guild members who have this role. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method requires user/members cache to be active </para>
</simplesect>
<simplesect kind="return"><para>members_container List of members who have this role </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="846" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a82eb1c7df3ee72db92cf502bb575e799" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::role::get_mention</definition>
        <argsstring>() const</argsstring>
        <name>get_mention</name>
        <briefdescription>
<para>Get the mention/ping for the role. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string mention </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="290" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0e2683fd21c1743132eb29f8155c12a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_add_reactions</definition>
        <argsstring>() const</argsstring>
        <name>has_add_reactions</name>
        <briefdescription>
<para>True if has the add reactions permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the add reactions permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="478" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a3ffcaced8369d47cc3f954fa0978c40c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_administrator</definition>
        <argsstring>() const</argsstring>
        <name>has_administrator</name>
        <briefdescription>
<para>True if has the administrator permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the administrator permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="451" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a848a39ba5ff6b5c42c3246d041582d00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_attach_files</definition>
        <argsstring>() const</argsstring>
        <name>has_attach_files</name>
        <briefdescription>
<para>True if has the attach files permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the attach files permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="559" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac8eaec9aac9633c7d05cb208da7fc4d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_ban_members</definition>
        <argsstring>() const</argsstring>
        <name>has_ban_members</name>
        <briefdescription>
<para>True if has the ban members permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the ban members permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="442" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a2b158e7e37bb66c17a4ed412a71f7222" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_change_nickname</definition>
        <argsstring>() const</argsstring>
        <name>has_change_nickname</name>
        <briefdescription>
<para>True if has the change nickname permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the change nickname permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="658" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0be98542c2299aa41829d69bf348b54d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_connect</definition>
        <argsstring>() const</argsstring>
        <name>has_connect</name>
        <briefdescription>
<para>True if has the connect voice permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the connect voice permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="604" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a7005a2a951c2917edb6f5ce189093234" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_create_instant_invite</definition>
        <argsstring>() const</argsstring>
        <name>has_create_instant_invite</name>
        <briefdescription>
<para>True if has create instant invite permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the instant invite permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="424" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aa3127166dafb6cd4685a1e84b80a7e86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_create_private_threads</definition>
        <argsstring>() const</argsstring>
        <name>has_create_private_threads</name>
        <briefdescription>
<para>True if has the create private threads permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the create private threads permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="739" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ad593d01c7a2fac0413c939c80d81c590" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_create_public_threads</definition>
        <argsstring>() const</argsstring>
        <name>has_create_public_threads</name>
        <briefdescription>
<para>True if has the create public threads permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the create public threads permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="730" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0a197983ea6fc5047c7873d804f7646a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_deafen_members</definition>
        <argsstring>() const</argsstring>
        <name>has_deafen_members</name>
        <briefdescription>
<para>True if has the deafen members permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the deafen members permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="631" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae1dc87323b6ab2e499fee7c8bfa69d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_embed_links</definition>
        <argsstring>() const</argsstring>
        <name>has_embed_links</name>
        <briefdescription>
<para>True if has the embed links permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the embed links permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="550" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a7b76518e70c32391bbae2c80439a2a76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_kick_members</definition>
        <argsstring>() const</argsstring>
        <name>has_kick_members</name>
        <briefdescription>
<para>True if has the kick members permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the kick members permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="433" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9630315e9c31cb53335e077140497ad7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_channels</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_channels</name>
        <briefdescription>
<para>True if has the manage channels permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage channels permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="460" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a6d9b1dd5f966530c162b85409b00561c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_emojis_and_stickers</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_emojis_and_stickers</name>
        <briefdescription>
<para>True if has the manage emojis and stickers permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage emojis and stickers permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="694" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a04025962b533f09ea8a55d3c2815a442" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_events</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_events</name>
        <briefdescription>
<para>True if has the manage events permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage events permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="775" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ad1de8e0ce44138225e9e7620b0834cb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_guild</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_guild</name>
        <briefdescription>
<para>True if has the manage guild permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage guild permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="469" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a1a28c7f8685b1c0287067665aecf6efb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_messages</name>
        <briefdescription>
<para>True if has the manage messages permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage messages permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="541" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a80c8b573fc16edfd685294e0326b38d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_nicknames</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_nicknames</name>
        <briefdescription>
<para>True if has the manage nicknames permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage nicknames permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="667" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0b2cf553aab82c6a6a388c3f6e3c240d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_roles</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_roles</name>
        <briefdescription>
<para>True if has the manage roles permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage roles permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="676" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a032ce15247e135d733e6879bed928e7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_threads</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_threads</name>
        <briefdescription>
<para>True if has the manage threads permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage threads permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="721" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9ac39f8c39f870603f0e9d9760159ef9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_webhooks</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_webhooks</name>
        <briefdescription>
<para>True if has the manage webhooks permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage webhooks permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="685" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aed437137a98c1f99d28942070c8ccf0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_mention_everyone</definition>
        <argsstring>() const</argsstring>
        <name>has_mention_everyone</name>
        <briefdescription>
<para>True if has the mention @everyone and @here permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the mention @everyone and @here permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="577" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a12d4fba5e5a0a02425c923234dd486bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_moderate_members</definition>
        <argsstring>() const</argsstring>
        <name>has_moderate_members</name>
        <briefdescription>
<para>True if has the moderate users permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the moderate users permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="784" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac9605d0d14e4fff0c0848e08682c6da5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_move_members</definition>
        <argsstring>() const</argsstring>
        <name>has_move_members</name>
        <briefdescription>
<para>True if has the move members permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the move members permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="640" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a504ae68edc2bfe1c21ffdb6745c1194c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_mute_members</definition>
        <argsstring>() const</argsstring>
        <name>has_mute_members</name>
        <briefdescription>
<para>True if has the mute members permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the mute members permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="622" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a2d2505749dc22fe91918c31676c8591f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_pin_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_pin_messages</name>
        <briefdescription>
<para>True if has permission to use pin messages. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the Pin Messages permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="838" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a640358a9aa6e34c0e0b16020af176e55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_priority_speaker</definition>
        <argsstring>() const</argsstring>
        <name>has_priority_speaker</name>
        <briefdescription>
<para>True if has the priority speaker permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the priority speaker permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="496" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac5f664643c59d7e24271bb790735c68f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_read_message_history</definition>
        <argsstring>() const</argsstring>
        <name>has_read_message_history</name>
        <briefdescription>
<para>True if has the read message history permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the read message history permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="568" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a84cfa9cd3dc9526f3a6a04ae25d3c775" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_request_to_speak</definition>
        <argsstring>() const</argsstring>
        <name>has_request_to_speak</name>
        <briefdescription>
<para>True if has the request to speak permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the request to speak permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="712" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a31d923d5f1020215b836db355991870b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_send_messages</name>
        <briefdescription>
<para>True if has the send messages permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the send messages permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="523" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae7e42a98476a40201e9bce274f748954" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_messages_in_threads</definition>
        <argsstring>() const</argsstring>
        <name>has_send_messages_in_threads</name>
        <briefdescription>
<para>True if has the send messages in threads permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the send messages in threads permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="757" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1af54ea9f64ea035675a26b0d8e8b356f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_tts_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_send_tts_messages</name>
        <briefdescription>
<para>True if has the send TTS messages permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the send TTS messages permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="532" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a49b93d4629f889d1e35b5927c6e1854d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_voice_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_send_voice_messages</name>
        <briefdescription>
<para>True if has the send voice messages permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the send voice messages permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="820" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a92ce258f420bce887cc9c92ad006fe06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_speak</definition>
        <argsstring>() const</argsstring>
        <name>has_speak</name>
        <briefdescription>
<para>True if has the speak permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the speak permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="613" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae6173507d17a12012cf46da70929a49e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_stream</definition>
        <argsstring>() const</argsstring>
        <name>has_stream</name>
        <briefdescription>
<para>True if has the stream permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the stream permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="505" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac19332b3de93ecf0a38d0f07589fd6c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_application_commands</definition>
        <argsstring>() const</argsstring>
        <name>has_use_application_commands</name>
        <briefdescription>
<para>True if has the use application commands permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the use application commands permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="703" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ab45dcfc76c222f721ff8d1a903fe7e4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_clyde_ai</definition>
        <argsstring>() const</argsstring>
        <name>has_use_clyde_ai</name>
        <briefdescription>
<para>True if has permission to use clyde AI. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the clyde AI permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="829" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a15be7092d8c6843c387d4811c8b4ac2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_embedded_activities</definition>
        <argsstring>() const</argsstring>
        <name>has_use_embedded_activities</name>
        <briefdescription>
<para>True if has the start embedded activities permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the start embedded activities permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="766" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a363303c06726e049586b8ae4f3f6375e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_external_emojis</definition>
        <argsstring>() const</argsstring>
        <name>has_use_external_emojis</name>
        <briefdescription>
<para>True if has the use external emojis permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the use external emojis permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="586" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a2fbc05580870a68ced13f6ba657181c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_external_sounds</definition>
        <argsstring>() const</argsstring>
        <name>has_use_external_sounds</name>
        <briefdescription>
<para>True if has the use external sounds permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the use external sounds permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="811" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a3ec1376d0b72ba7d42b3b0167daef425" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_external_stickers</definition>
        <argsstring>() const</argsstring>
        <name>has_use_external_stickers</name>
        <briefdescription>
<para>True if has the use external stickers permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the use external stickers permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="749" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1af47897c84d878c1b494160ac14b0e449" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_soundboard</definition>
        <argsstring>() const</argsstring>
        <name>has_use_soundboard</name>
        <briefdescription>
<para>True if has the use soundboard permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the use soundboard permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="802" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9ffd7c58994f9c3e0a38245462eb6766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_vad</definition>
        <argsstring>() const</argsstring>
        <name>has_use_vad</name>
        <briefdescription>
<para>True if has use voice activity detection permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has use voice activity detection permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="649" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a600d347d4f491ba32969a76d9d0cf3c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_audit_log</definition>
        <argsstring>() const</argsstring>
        <name>has_view_audit_log</name>
        <briefdescription>
<para>True if has the view audit log permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the view audit log permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="487" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1acbe56d5d1d54e9fea3a6b7acd66ef888" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_channel</definition>
        <argsstring>() const</argsstring>
        <name>has_view_channel</name>
        <briefdescription>
<para>True if has the view channel permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the view channel permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="514" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1af5de498bfe90e5b390d9a367a0afe0a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_creator_monetization_analytics</definition>
        <argsstring>() const</argsstring>
        <name>has_view_creator_monetization_analytics</name>
        <briefdescription>
<para>True if has the view creator monetization analytics permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the view creator monetization analytics permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="793" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac71887da3f920e070d1fa743ea000d1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_guild_insights</definition>
        <argsstring>() const</argsstring>
        <name>has_view_guild_insights</name>
        <briefdescription>
<para>True if has the view guild insights permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the view guild insights permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="595" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a2a45972a178c1cb6873335969eadef6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_available_for_purchase</definition>
        <argsstring>() const</argsstring>
        <name>is_available_for_purchase</name>
        <briefdescription>
<para>True if the role is available for purchase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool whether this role is available for purchase </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="401" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae0cb040c022f08d210c885012bf47919" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_hoisted</definition>
        <argsstring>() const</argsstring>
        <name>is_hoisted</name>
        <briefdescription>
<para>True if the role is hoisted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Role appears separated from others in the member list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="373" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a960be31089b54b425089ce212ce69963" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_linked</definition>
        <argsstring>() const</argsstring>
        <name>is_linked</name>
        <briefdescription>
<para>True if the role is a linked role. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if the role is a linked role </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="408" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a479bc27fe486bb70dd3fc1376df3c5b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_managed</definition>
        <argsstring>() const</argsstring>
        <name>is_managed</name>
        <briefdescription>
<para>True if the role is managed (belongs to a bot or application). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if the role is managed (introduced for a bot or other application by Discord) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="387" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a1d5a026fa3773f52b9c2cee6c590509f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_mentionable</definition>
        <argsstring>() const</argsstring>
        <name>is_mentionable</name>
        <briefdescription>
<para>True if the role is mentionable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Role is mentionable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="380" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a3992fa5ec4a368f71e65be75704c6c33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_premium_subscriber</definition>
        <argsstring>() const</argsstring>
        <name>is_premium_subscriber</name>
        <briefdescription>
<para>True if the role is the guild&apos;s Booster role. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool whether the role is the premium subscriber, AKA &quot;boost&quot;, role for the guild </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="394" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aeac5902a95f0a278c8e248e1f4b964b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_selectable_in_prompt</definition>
        <argsstring>() const</argsstring>
        <name>is_selectable_in_prompt</name>
        <briefdescription>
<para>True if the role can be selected by members in an onboarding prompt. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if the role can be selected by members in an onboarding prompt </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="415" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a14485e59c67c899826ed27d29017bcfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::load_image</definition>
        <argsstring>(const std::byte *data, uint32_t size, const image_type type)</argsstring>
        <name>load_image</name>
        <param>
          <type>const std::byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Load a role icon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Image binary data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of image. It can be one of <computeroutput>i_gif</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="319" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aa62b1a1265f5f486331446af4ccc7524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::load_image</definition>
        <argsstring>(std::string_view image_blob, const image_type type)</argsstring>
        <name>load_image</name>
        <param>
          <type>std::string_view</type>
          <declname>image_blob</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Load a role icon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>Image binary data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of image. It can be one of <computeroutput>i_gif</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="309" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a923f1020ad9e4076252e3ce1dce4bb3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::operator!=</definition>
        <argsstring>(const role &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Operator not equals, used for checking if a role is ranked equal to another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>role to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if is not equal to other </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="364" column="13" bodyfile="include/dpp/role.h" bodystart="364" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a1ad528ff033da65ce622d3b05c730d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::operator=</definition>
        <argsstring>(const role &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy another role object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Role object to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="193" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a4d724e631e0c7c2c3565c86750e0cfe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::operator=</definition>
        <argsstring>(role &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move from another role object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Role object to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="200" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a630f1f8f442b987743143e3749bf3944" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::operator==</definition>
        <argsstring>(const role &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Operator equals, used for checking if a role is ranked equal to another. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>role to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if is equal to other </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="354" column="13" bodyfile="include/dpp/role.h" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a50e37b69fd90533aae8d998c0dba3054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_bot_id</definition>
        <argsstring>(snowflake b)</argsstring>
        <name>set_bot_id</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Set the bot ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Bot ID to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="264" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1acdf6e9513f3dffca42499ed9dcc255a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_color</definition>
        <argsstring>(uint32_t c)</argsstring>
        <name>set_color</name>
        <param>
          <type>uint32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Set the color. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Colour to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is an alias of <ref refid="classdpp_1_1role_1ad5add725167aa1be8c43ec167ce14d4f" kindref="member">role::set_colour</ref> for American spelling. </para>
</simplesect>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="240" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ad5add725167aa1be8c43ec167ce14d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_colour</definition>
        <argsstring>(uint32_t c)</argsstring>
        <name>set_colour</name>
        <param>
          <type>uint32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Set the colour. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Colour to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>There is an americanised version of this method, <ref refid="classdpp_1_1role_1acdf6e9513f3dffca42499ed9dcc255a9" kindref="member">role::set_color()</ref>. </para>
</simplesect>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="231" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a8d710124a87c30664e1e0f6507a9ebe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_flags</definition>
        <argsstring>(uint8_t f)</argsstring>
        <name>set_flags</name>
        <param>
          <type>uint8_t</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Set the flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to set from <ref refid="namespacedpp_1af803e69eddf23c5862947295f3df5d53" kindref="member">dpp::role_flags</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="248" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aca74c158ab06219bbf3a0c61d96e2043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_guild_id</definition>
        <argsstring>(snowflake gid)</argsstring>
        <name>set_guild_id</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>gid</declname>
        </param>
        <briefdescription>
<para>Set the guild ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="272" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a4eab09f700a66b003adfd9adfd3cd5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_integration_id</definition>
        <argsstring>(snowflake i)</argsstring>
        <name>set_integration_id</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Set the integration ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="256" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aecb03f1ceb58c646db0347ad8908b849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_name</definition>
        <argsstring>(const std::string &amp;n)</argsstring>
        <name>set_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Set the name of the role. Maximum length: 100 Minimum length: 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if role length is less than 1 character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="222" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; role  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classdpp_1_1role_1aa43b2369719812a849c83c52e044127b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string dpp::role::get_mention</definition>
        <argsstring>(const snowflake &amp;id)</argsstring>
        <name>get_mention</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Create a mentionable role. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the role. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The formatted mention of the role. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="212" column="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a role within a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref>. Roles are combined via logical OR of the permission bitmasks, then channel-specific overrides can be applied on top, deny types apply a logic NOT to the bit mask, and allows apply a logical OR. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Every guild has at least one role, called the &apos;everyone&apos; role, which always has the same role ID as the guild&apos;s ID. This is the base permission set applied to all users where no other role or override applies, and is the starting value of the bit mask looped through to calculate channel permissions. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::role</label>
        <link refid="classdpp_1_1role"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; role &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; role &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>dpp::permission</label>
        <link refid="classdpp_1_1permission"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::role</label>
        <link refid="classdpp_1_1role"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>unicode_emoji</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>bot_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>integration_id</edgelabel>
          <edgelabel>subscription_listing_id</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>colour</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>position</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>icon</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::utility::icon</label>
        <link refid="structdpp_1_1utility_1_1icon"/>
        <childnode refid="13" relation="usage">
          <edgelabel>hash_or_data</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; role &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; role &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>variant&lt;</label>
      </node>
      <node id="9">
        <label>uint32_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="10">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/role.h" line="82" column="1" bodyfile="include/dpp/role.h" bodystart="82" bodyend="847"/>
    <listofallmembers>
      <member refid="classdpp_1_1role_1ada5cb5675b012b2cf55d285d5b233df3" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>bot_id</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>build_json</name></member>
      <member refid="classdpp_1_1role_1a42f8b747f7a04cd1022ce3bc42e6a05b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>colour</name></member>
      <member refid="classdpp_1_1role_1a5352cd2a40c1c2c430ec9448bd45723f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual" ambiguityscope="json_interface&lt; role &gt;::"><scope>dpp::role</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1role_1a229ce6729c8846104f7b55afc2a1feb9" prot="protected" virt="non-virtual"><scope>dpp::role</scope><name>fill_from_json_impl</name></member>
      <member refid="classdpp_1_1role_1a67fa7fe9f3650b5783cf4f5d2ed37de0" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>flags</name></member>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1role_1a492aa7a36a4ef0e0cad8e33f8f386ea8" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>get_icon_url</name></member>
      <member refid="classdpp_1_1role_1a60bd9c7e3901c18f5ec3c4f835e1c1de" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>get_members</name></member>
      <member refid="classdpp_1_1role_1aa43b2369719812a849c83c52e044127b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>get_mention</name></member>
      <member refid="classdpp_1_1role_1a82eb1c7df3ee72db92cf502bb575e799" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>get_mention</name></member>
      <member refid="classdpp_1_1role_1ab831d734d6cfe3a88c54bb91b0f578ea" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1role_1a0e2683fd21c1743132eb29f8155c12a2" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_add_reactions</name></member>
      <member refid="classdpp_1_1role_1a3ffcaced8369d47cc3f954fa0978c40c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_administrator</name></member>
      <member refid="classdpp_1_1role_1a848a39ba5ff6b5c42c3246d041582d00" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_attach_files</name></member>
      <member refid="classdpp_1_1role_1ac8eaec9aac9633c7d05cb208da7fc4d9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_ban_members</name></member>
      <member refid="classdpp_1_1role_1a2b158e7e37bb66c17a4ed412a71f7222" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_change_nickname</name></member>
      <member refid="classdpp_1_1role_1a0be98542c2299aa41829d69bf348b54d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_connect</name></member>
      <member refid="classdpp_1_1role_1a7005a2a951c2917edb6f5ce189093234" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_create_instant_invite</name></member>
      <member refid="classdpp_1_1role_1aa3127166dafb6cd4685a1e84b80a7e86" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_create_private_threads</name></member>
      <member refid="classdpp_1_1role_1ad593d01c7a2fac0413c939c80d81c590" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_create_public_threads</name></member>
      <member refid="classdpp_1_1role_1a0a197983ea6fc5047c7873d804f7646a" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_deafen_members</name></member>
      <member refid="classdpp_1_1role_1ae1dc87323b6ab2e499fee7c8bfa69d58" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_embed_links</name></member>
      <member refid="classdpp_1_1role_1a7b76518e70c32391bbae2c80439a2a76" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_kick_members</name></member>
      <member refid="classdpp_1_1role_1a9630315e9c31cb53335e077140497ad7" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_channels</name></member>
      <member refid="classdpp_1_1role_1a6d9b1dd5f966530c162b85409b00561c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_emojis_and_stickers</name></member>
      <member refid="classdpp_1_1role_1a04025962b533f09ea8a55d3c2815a442" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_events</name></member>
      <member refid="classdpp_1_1role_1ad1de8e0ce44138225e9e7620b0834cb0" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_guild</name></member>
      <member refid="classdpp_1_1role_1a1a28c7f8685b1c0287067665aecf6efb" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_messages</name></member>
      <member refid="classdpp_1_1role_1a80c8b573fc16edfd685294e0326b38d2" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_nicknames</name></member>
      <member refid="classdpp_1_1role_1a0b2cf553aab82c6a6a388c3f6e3c240d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_roles</name></member>
      <member refid="classdpp_1_1role_1a032ce15247e135d733e6879bed928e7e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_threads</name></member>
      <member refid="classdpp_1_1role_1a9ac39f8c39f870603f0e9d9760159ef9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_webhooks</name></member>
      <member refid="classdpp_1_1role_1aed437137a98c1f99d28942070c8ccf0f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_mention_everyone</name></member>
      <member refid="classdpp_1_1role_1a12d4fba5e5a0a02425c923234dd486bf" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_moderate_members</name></member>
      <member refid="classdpp_1_1role_1ac9605d0d14e4fff0c0848e08682c6da5" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_move_members</name></member>
      <member refid="classdpp_1_1role_1a504ae68edc2bfe1c21ffdb6745c1194c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_mute_members</name></member>
      <member refid="classdpp_1_1role_1a2d2505749dc22fe91918c31676c8591f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_pin_messages</name></member>
      <member refid="classdpp_1_1role_1a640358a9aa6e34c0e0b16020af176e55" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_priority_speaker</name></member>
      <member refid="classdpp_1_1role_1ac5f664643c59d7e24271bb790735c68f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_read_message_history</name></member>
      <member refid="classdpp_1_1role_1a84cfa9cd3dc9526f3a6a04ae25d3c775" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_request_to_speak</name></member>
      <member refid="classdpp_1_1role_1a31d923d5f1020215b836db355991870b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_messages</name></member>
      <member refid="classdpp_1_1role_1ae7e42a98476a40201e9bce274f748954" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_messages_in_threads</name></member>
      <member refid="classdpp_1_1role_1af54ea9f64ea035675a26b0d8e8b356f5" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_tts_messages</name></member>
      <member refid="classdpp_1_1role_1a49b93d4629f889d1e35b5927c6e1854d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_voice_messages</name></member>
      <member refid="classdpp_1_1role_1a92ce258f420bce887cc9c92ad006fe06" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_speak</name></member>
      <member refid="classdpp_1_1role_1ae6173507d17a12012cf46da70929a49e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_stream</name></member>
      <member refid="classdpp_1_1role_1ac19332b3de93ecf0a38d0f07589fd6c5" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_application_commands</name></member>
      <member refid="classdpp_1_1role_1ab45dcfc76c222f721ff8d1a903fe7e4b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_clyde_ai</name></member>
      <member refid="classdpp_1_1role_1a15be7092d8c6843c387d4811c8b4ac2b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_embedded_activities</name></member>
      <member refid="classdpp_1_1role_1a363303c06726e049586b8ae4f3f6375e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_external_emojis</name></member>
      <member refid="classdpp_1_1role_1a2fbc05580870a68ced13f6ba657181c9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_external_sounds</name></member>
      <member refid="classdpp_1_1role_1a3ec1376d0b72ba7d42b3b0167daef425" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_external_stickers</name></member>
      <member refid="classdpp_1_1role_1af47897c84d878c1b494160ac14b0e449" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_soundboard</name></member>
      <member refid="classdpp_1_1role_1a9ffd7c58994f9c3e0a38245462eb6766" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_vad</name></member>
      <member refid="classdpp_1_1role_1a600d347d4f491ba32969a76d9d0cf3c3" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_audit_log</name></member>
      <member refid="classdpp_1_1role_1acbe56d5d1d54e9fea3a6b7acd66ef888" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_channel</name></member>
      <member refid="classdpp_1_1role_1af5de498bfe90e5b390d9a367a0afe0a8" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_creator_monetization_analytics</name></member>
      <member refid="classdpp_1_1role_1ac71887da3f920e070d1fa743ea000d1c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_guild_insights</name></member>
      <member refid="classdpp_1_1role_1a9647a12d7cb2eed2746cc09f06c5c9c9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>icon</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>id</name></member>
      <member refid="classdpp_1_1role_1aa44718ae47c00bcf2008366218646572" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>integration_id</name></member>
      <member refid="classdpp_1_1role_1a2a45972a178c1cb6873335969eadef6e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_available_for_purchase</name></member>
      <member refid="classdpp_1_1role_1ae0cb040c022f08d210c885012bf47919" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_hoisted</name></member>
      <member refid="classdpp_1_1role_1a960be31089b54b425089ce212ce69963" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_linked</name></member>
      <member refid="classdpp_1_1role_1a479bc27fe486bb70dd3fc1376df3c5b9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_managed</name></member>
      <member refid="classdpp_1_1role_1a1d5a026fa3773f52b9c2cee6c590509f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_mentionable</name></member>
      <member refid="classdpp_1_1role_1a3992fa5ec4a368f71e65be75704c6c33" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_premium_subscriber</name></member>
      <member refid="classdpp_1_1role_1aeac5902a95f0a278c8e248e1f4b964b4" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_selectable_in_prompt</name></member>
      <member refid="classdpp_1_1role_1ae11eb9dd97cb82714a8c094a9e735ee0" prot="protected" virt="non-virtual"><scope>dpp::role</scope><name>json_interface&lt; role &gt;</name></member>
      <member refid="classdpp_1_1role_1aa62b1a1265f5f486331446af4ccc7524" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>load_image</name></member>
      <member refid="classdpp_1_1role_1a14485e59c67c899826ed27d29017bcfa" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>load_image</name></member>
      <member refid="classdpp_1_1managed_1a49ce0d7fdbeab770ec46be27771c2285" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1aa3ee436836ab0e2bf4f842c2c2bc3b52" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a198b514f7e6a2b26734fd2dad85f481d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1ac7a876ad1764b89f0568a1f1bc6bf640" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>managed</name></member>
      <member refid="classdpp_1_1role_1a6451e41576902faa14d0394d47d19934" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>name</name></member>
      <member refid="classdpp_1_1role_1a923f1020ad9e4076252e3ce1dce4bb3a" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual" ambiguityscope="dpp::managed::"><scope>dpp::role</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1role_1a01e2b587ca511c7fa2b32306aa633b3a" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>operator&lt;</name></member>
      <member refid="classdpp_1_1role_1a1ad528ff033da65ce622d3b05c730d06" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>operator=</name></member>
      <member refid="classdpp_1_1role_1a4d724e631e0c7c2c3565c86750e0cfe6" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a48b542729f1352f93f1c60950986517f" prot="public" virt="non-virtual" ambiguityscope="dpp::managed::"><scope>dpp::role</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a4a4be34febb174eaee3c0964d0bf1e21" prot="public" virt="non-virtual" ambiguityscope="dpp::managed::"><scope>dpp::role</scope><name>operator=</name></member>
      <member refid="classdpp_1_1role_1a630f1f8f442b987743143e3749bf3944" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>operator==</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual" ambiguityscope="dpp::managed::"><scope>dpp::role</scope><name>operator==</name></member>
      <member refid="classdpp_1_1role_1a9f67634c6559af28e6a11d446aa052e8" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>operator&gt;</name></member>
      <member refid="classdpp_1_1role_1ad6deb5559a2378196b92e496c4db501c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>permissions</name></member>
      <member refid="classdpp_1_1role_1a08996823fc9ba1eb8c95b1e2e855d958" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>position</name></member>
      <member refid="classdpp_1_1role_1a29cb3b0ae37af81ffec2ad50bda8ac94" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>role</name></member>
      <member refid="classdpp_1_1role_1a4a8dc930d217a3e33d75e0767d427548" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>role</name></member>
      <member refid="classdpp_1_1role_1a6728977a7b358f99d64756a2ead50de2" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>role</name></member>
      <member refid="classdpp_1_1role_1a50e37b69fd90533aae8d998c0dba3054" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_bot_id</name></member>
      <member refid="classdpp_1_1role_1acdf6e9513f3dffca42499ed9dcc255a9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_color</name></member>
      <member refid="classdpp_1_1role_1ad5add725167aa1be8c43ec167ce14d4f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_colour</name></member>
      <member refid="classdpp_1_1role_1a8d710124a87c30664e1e0f6507a9ebe3" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_flags</name></member>
      <member refid="classdpp_1_1role_1aca74c158ab06219bbf3a0c61d96e2043" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_guild_id</name></member>
      <member refid="classdpp_1_1role_1a4eab09f700a66b003adfd9adfd3cd5d6" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_integration_id</name></member>
      <member refid="classdpp_1_1role_1aecb03f1ceb58c646db0347ad8908b849" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_name</name></member>
      <member refid="classdpp_1_1role_1a41c75bd2ab4e4d6caac220e9bcd47a07" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>subscription_listing_id</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>to_json</name></member>
      <member refid="classdpp_1_1role_1a8e8c227b1166660d8297aa01880a7777" prot="protected" virt="virtual"><scope>dpp::role</scope><name>to_json_impl</name></member>
      <member refid="classdpp_1_1role_1ad84006ea16f3dc59cfd67559a60c5d10" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>unicode_emoji</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::role</scope><name>~managed</name></member>
      <member refid="classdpp_1_1role_1acb81ebcbb734da1bfc84d0f52586028a" prot="public" virt="virtual"><scope>dpp::role</scope><name>~role</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
