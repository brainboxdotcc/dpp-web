<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1request__queue" kind="class" language="C++" prot="public">
    <compoundname>dpp::request_queue</compoundname>
    <includes local="no">queues.h</includes>
    <innerclass refid="structdpp_1_1request__queue_1_1completed__request" prot="public">dpp::request_queue::completed_request</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1request__queue_1a3d7a9c3d8fe07096512bf5c3e6442d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class request_concurrency_queue</definition>
        <argsstring></argsstring>
        <name>request_concurrency_queue</name>
        <param>
          <type><ref refid="classdpp_1_1request__concurrency__queue" kindref="compound">request_concurrency_queue</ref></type>
        </param>
        <briefdescription>
<para>Required so <ref refid="classdpp_1_1request__concurrency__queue" kindref="compound">request_concurrency_queue</ref> can access these member variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="528" column="14" bodyfile="include/dpp/queues.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1request__queue_1afc5bd2c27798f38630d996d1666dbbca" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::request_queue::creator</definition>
        <argsstring></argsstring>
        <name>creator</name>
        <briefdescription>
<para>The cluster that owns this <ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="533" column="15" bodyfile="include/dpp/queues.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a4caf0261af3f71b7b6251a6876b0d205" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classdpp_1_1request__concurrency__queue" kindref="compound">request_concurrency_queue</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;request_concurrency_queue&gt; &gt; dpp::request_queue::requests_in</definition>
        <argsstring></argsstring>
        <name>requests_in</name>
        <briefdescription>
<para>A vector of timers forming a pool. </para>
        </briefdescription>
        <detaileddescription>
<para>There are a set number of these defined by a constant in cluster.cpp. A request is always placed on the same element in this vector, based upon its url, so that two conditions are satisfied:</para>
<para>1) Any requests for the same ratelimit bucket are handled by the same concurrency queue in the pool so that they do not create unnecessary 429 errors, 2) Requests for different endpoints go into different buckets, so that they may be requested in parallel A global ratelimit event pauses all timers in the pool. These are few and far between. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="561" column="13" bodyfile="include/dpp/queues.h" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1aea5ae71c447221809505b2a9b326da8b" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; dpp::request_queue::terminating</definition>
        <argsstring></argsstring>
        <name>terminating</name>
        <briefdescription>
<para>Set to true if the timers should terminate. When this is set to true no further requests are accepted to the queues. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="567" column="13" bodyfile="include/dpp/queues.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a72a95ae8742f8d76d69ffbf63993b383" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::request_queue::globally_ratelimited</definition>
        <argsstring></argsstring>
        <name>globally_ratelimited</name>
        <briefdescription>
<para>True if globally rate limited. </para>
        </briefdescription>
        <detaileddescription>
<para>When globally rate limited the concurrency queues associated with this request queue will not process any requests in their timers until the global rate limit expires. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="575" column="6" bodyfile="include/dpp/queues.h" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a4afc7b0771639f50b8c8c3ac29811d5c" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::request_queue::globally_limited_until</definition>
        <argsstring></argsstring>
        <name>globally_limited_until</name>
        <briefdescription>
<para>When we are globally rate limited until (unix epoch) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Only valid if globally_rate limited is true. If we are globally rate limited, queues in this class will not process requests until the current unix epoch time is greater than this time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="584" column="8" bodyfile="include/dpp/queues.h" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1aba9533238e86684583e82082559a77d5" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::request_queue::in_queue_pool_size</definition>
        <argsstring></argsstring>
        <name>in_queue_pool_size</name>
        <briefdescription>
<para>Number of request queues in the pool. This is the direct size of the requests_in vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="590" column="10" bodyfile="include/dpp/queues.h" bodystart="590" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1request__queue_1a15b79f23d7cd685c827b26d9470674a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::request_queue::request_queue</definition>
        <argsstring>(class cluster *owner, uint32_t request_concurrency=8)</argsstring>
        <name>request_queue</name>
        <param>
          <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>request_concurrency</declname>
          <defval>8</defval>
        </param>
        <briefdescription>
<para>constructor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>The creating cluster. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_concurrency</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of http request queues to allocate. Each request queue is a <ref refid="namespacedpp_1a8b9ab0b8cf29978147a7df3947cd8f30" kindref="member">dpp::timer</ref> which ticks every second looking for new requests to run. The timer will hold back requests if we are waiting as to comply with rate limits. Adding a request to this class will cause the queue it is placed in to run immediately but this cannot override rate limits. By default eight concurrency queues are allocated. Side effects: Creates timers for the queue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="603" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1request__queue_1a814e3fc2d3684b462db4f852554620b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t dpp::request_queue::get_request_queue_count</definition>
        <argsstring>() const</argsstring>
        <name>get_request_queue_count</name>
        <briefdescription>
<para>Get the request queue concurrency count. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t number of request queues that are active </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="609" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1request__queue_1a5ccaae72d03d626852be0a0d3c6b86dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::request_queue::~request_queue</definition>
        <argsstring>()</argsstring>
        <name>~request_queue</name>
        <briefdescription>
<para>Destroy the request queue object. Side effects: Ends and deletes concurrency timers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="615" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1request__queue_1a78a3adde76b2c5ddb6c06b36d00a9646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> &amp;</type>
        <definition>request_queue &amp; dpp::request_queue::post_request</definition>
        <argsstring>(std::unique_ptr&lt; http_request &gt; req)</argsstring>
        <name>post_request</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classdpp_1_1http__request" kindref="compound">http_request</ref> &gt;</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Put a <ref refid="classdpp_1_1http__request" kindref="compound">http_request</ref> into the request queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Will use a simple hash function to determine which of the &apos;in queues&apos; to place this request onto. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>request to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="624" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1request__queue_1adf8d6cdce3298446bc199d8a04a9d158" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::request_queue::is_globally_ratelimited</definition>
        <argsstring>() const</argsstring>
        <name>is_globally_ratelimited</name>
        <briefdescription>
<para>Returns true if the bot is currently globally rate limited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if globally rate limited </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="630" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1request__queue_1ac14da0303e89f6f7a32b919f85d70ae7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::request_queue::get_active_request_count</definition>
        <argsstring>() const</argsstring>
        <name>get_active_request_count</name>
        <briefdescription>
<para>Returns the number of active requests on this queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Total number of active requests </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="636" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> class manages rate limits and marshalls HTTP requests that have been built as <ref refid="classdpp_1_1http__request" kindref="compound">http_request</ref> objects. </para>
    </briefdescription>
    <detaileddescription>
<para>It ensures asynchronous delivery of events and queueing of requests.</para>
<para>It will spawn multiple timers to make outbound HTTP requests and then call the callbacks of those requests on completion within the <ref refid="structdpp_1_1thread__pool" kindref="compound">dpp::thread_pool</ref> for the cluster. If the user decides to take a long time processing a reply in their callback it won&apos;t affect when other requests are sent, and if a HTTP request takes a long time due to latency, it won&apos;t hold up user processing.</para>
<para>There are usually two <ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> objects in each <ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref>, one of which is used internally for the various REST methods to Discord such as sending messages, and the other used to support user REST calls via <ref refid="classdpp_1_1cluster_1aa4ead3406c471a64fa1fa578cc51cf2e" kindref="member">dpp::cluster::request()</ref>. They are separated so that the one for user requests can be specifically configured to never ever send the Discord token unless it is explicitly placed into the request, for security reasons. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="25">
        <label>bool</label>
      </node>
      <node id="18">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="7">
        <label>double</label>
      </node>
      <node id="17">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="18" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="3" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>socketengine</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="9">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="10" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::request_queue</label>
        <link refid="classdpp_1_1request__queue"/>
        <childnode refid="2" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>requests_in</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>globally_ratelimited</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>globally_limited_until</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>in_queue_pool_size</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="11" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="11" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>event_router_t&lt;</label>
      </node>
      <node id="12">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="13" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>atomic&lt;</label>
      </node>
      <node id="20">
        <label>atomic_bool</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="23">
        <label>vector&lt;</label>
      </node>
      <node id="5">
        <label>time_t</label>
      </node>
      <node id="15">
        <label>uint16_t</label>
      </node>
      <node id="6">
        <label>uint32_t</label>
      </node>
      <node id="11">
        <label>uint64_t</label>
      </node>
      <node id="16">
        <label>uint8_t</label>
      </node>
      <node id="19">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/queues.h" line="523" column="1" bodyfile="include/dpp/queues.h" bodystart="523" bodyend="637"/>
    <listofallmembers>
      <member refid="classdpp_1_1request__queue_1afc5bd2c27798f38630d996d1666dbbca" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>creator</name></member>
      <member refid="classdpp_1_1request__queue_1ac14da0303e89f6f7a32b919f85d70ae7" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>get_active_request_count</name></member>
      <member refid="classdpp_1_1request__queue_1a814e3fc2d3684b462db4f852554620b6" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>get_request_queue_count</name></member>
      <member refid="classdpp_1_1request__queue_1a4afc7b0771639f50b8c8c3ac29811d5c" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>globally_limited_until</name></member>
      <member refid="classdpp_1_1request__queue_1a72a95ae8742f8d76d69ffbf63993b383" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>globally_ratelimited</name></member>
      <member refid="classdpp_1_1request__queue_1aba9533238e86684583e82082559a77d5" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>in_queue_pool_size</name></member>
      <member refid="classdpp_1_1request__queue_1adf8d6cdce3298446bc199d8a04a9d158" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>is_globally_ratelimited</name></member>
      <member refid="classdpp_1_1request__queue_1a78a3adde76b2c5ddb6c06b36d00a9646" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>post_request</name></member>
      <member refid="classdpp_1_1request__queue_1a3d7a9c3d8fe07096512bf5c3e6442d41" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>request_concurrency_queue</name></member>
      <member refid="classdpp_1_1request__queue_1a15b79f23d7cd685c827b26d9470674a4" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>request_queue</name></member>
      <member refid="classdpp_1_1request__queue_1a4caf0261af3f71b7b6251a6876b0d205" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>requests_in</name></member>
      <member refid="classdpp_1_1request__queue_1aea5ae71c447221809505b2a9b326da8b" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>terminating</name></member>
      <member refid="classdpp_1_1request__queue_1a5ccaae72d03d626852be0a0d3c6b86dd" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>~request_queue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
