<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classdpp_1_1user" kind="class" prot="public">
    <compoundname>dpp::user</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">user.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1user_1a4e72b2e5ac7d5539fdae64be6e01246c" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::user::username</definition>
        <argsstring></argsstring>
        <name>username</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discord username </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="79" column="1" bodyfile="/home/brain/D++/include/dpp/user.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1afe658cc2d4adcf83a76f798dead3e5e6" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::user::discriminator</definition>
        <argsstring></argsstring>
        <name>discriminator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discriminator (aka tag), 4 digits usually displayed with leading zeroes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="81" column="1" bodyfile="/home/brain/D++/include/dpp/user.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1ae9d90b269f17fc2c5a0021dcb2b8dce3" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::user::avatar</definition>
        <argsstring></argsstring>
        <name>avatar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Avatar hash </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="83" column="1" bodyfile="/home/brain/D++/include/dpp/user.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1aab86456a191f214b38277cf65bb6af05" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::user::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags built from a bitmask of values in <ref refid="namespacedpp_1ace1318b24526febab72157cdd8b7b468" kindref="member">dpp::user_flags</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="85" column="1" bodyfile="/home/brain/D++/include/dpp/user.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1a68d336b1fc0b592ea970c11eaf9f2048" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::user::refcount</definition>
        <argsstring></argsstring>
        <name>refcount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference count of how many guilds this user is in </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="87" column="1" bodyfile="/home/brain/D++/include/dpp/user.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unique ID of object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discord.h" line="44" column="1" bodyfile="/home/brain/D++/include/dpp/discord.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1user_1a10ae5c579f6d60370d825e71fdff697b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::user::user</definition>
        <argsstring>()</argsstring>
        <name>user</name>
        <briefdescription>
<para>Construct a new user object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="92" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="47" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a7787310b4607e5e3eb61c2b504bae94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>dpp::user::~user</definition>
        <argsstring>()</argsstring>
        <name>~user</name>
        <briefdescription>
<para>Destroy the user object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="97" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1ae9fecaa47d8ba5330c4cdda978ffe267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref> &amp;</type>
        <definition>user &amp; dpp::user::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill this record from json. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The json to fill this record from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="103" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a097d52cec3ae64f14a1c0d082e15a9e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::user::get_avatar_url</definition>
        <argsstring>() const </argsstring>
        <name>get_avatar_url</name>
        <briefdescription>
<para>Get the avatar url of the user object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string avatar url </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="110" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="59" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1af0a538101071dd5a04391a6fafd21d73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bot</definition>
        <argsstring>() const </argsstring>
        <name>is_bot</name>
        <briefdescription>
<para>User is a bot. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the user is a bot </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="117" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1abb451bf7fcbef0622cb3872fb81d53f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_system</definition>
        <argsstring>() const </argsstring>
        <name>is_system</name>
        <briefdescription>
<para>User is a system user (Clyde) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user is a system user </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="123" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a9a4dc242ceb0aa385a625d158c748b3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_mfa_enabled</definition>
        <argsstring>() const </argsstring>
        <name>is_mfa_enabled</name>
        <briefdescription>
<para>User has multi-factor authentication enabled. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if multi-factor is enabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="129" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1ade6e466e81cb2e62127b5fe71b63d549" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_verified</definition>
        <argsstring>() const </argsstring>
        <name>is_verified</name>
        <briefdescription>
<para>Return true if user has verified account. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if verified </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="135" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a3a33216d06fd817a14cc8cfa782efd24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_nitro_full</definition>
        <argsstring>() const </argsstring>
        <name>has_nitro_full</name>
        <briefdescription>
<para>Return true if user has full nitro. This is mutually exclusive with full nitro. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user has full nitro </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="142" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1aaa38eed7b5e1af6fe055e61aa3b3e75f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_nitro_classic</definition>
        <argsstring>() const </argsstring>
        <name>has_nitro_classic</name>
        <briefdescription>
<para>Return true if user has nitro classic. This is mutually exclusive with nitro classic. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user has nitro classic </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="149" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a997d4d25a2074cee6d477e57d88d2f49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_discord_employee</definition>
        <argsstring>() const </argsstring>
        <name>is_discord_employee</name>
        <briefdescription>
<para>Return true if user is a discord employee. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user is discord staff </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="155" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a967603184f377f9ab5b2cab2def20fbc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_partnered_owner</definition>
        <argsstring>() const </argsstring>
        <name>is_partnered_owner</name>
        <briefdescription>
<para>Return true if user owns a partnered server. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user has partnered server </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="161" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1ad4fdeabdcabc6431fd7d3516129e9358" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_hypesquad_events</definition>
        <argsstring>() const </argsstring>
        <name>has_hypesquad_events</name>
        <briefdescription>
<para>Return true if user has hypesquad events. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has hypesquad events </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="167" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a84613800f6c203eea56c9fc560934eb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bughunter_1</definition>
        <argsstring>() const </argsstring>
        <name>is_bughunter_1</name>
        <briefdescription>
<para>Return true if user has the bughunter level 1 badge. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has bughunter level 1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="173" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a3b269bd5fdaa1ff60275587eff33aaf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_house_bravery</definition>
        <argsstring>() const </argsstring>
        <name>is_house_bravery</name>
        <briefdescription>
<para>Return true if user is in house bravery. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in house bravery </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="179" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1af4651db478cccacdb1aca302ff045000" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_house_brilliance</definition>
        <argsstring>() const </argsstring>
        <name>is_house_brilliance</name>
        <briefdescription>
<para>Return true if user is in house brilliance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in house brilliance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="185" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a86a72ddecd1e155fd8c1db3777cdc015" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_house_balanace</definition>
        <argsstring>() const </argsstring>
        <name>is_house_balanace</name>
        <briefdescription>
<para>Return true if user is in house balance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in house brilliance </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="191" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1af77532a2b5975a27510991b5253ebc7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_early_supporter</definition>
        <argsstring>() const </argsstring>
        <name>is_early_supporter</name>
        <briefdescription>
<para>Return true if user is an early supporter. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if early supporter </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="197" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1ab662aeb55a140fbbd2d54deef30c5479" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_team_user</definition>
        <argsstring>() const </argsstring>
        <name>is_team_user</name>
        <briefdescription>
<para>Return true if user is a team user. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if a team user </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="203" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1adc1e92229bf1a3be703d35e181b93cb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bughunter_2</definition>
        <argsstring>() const </argsstring>
        <name>is_bughunter_2</name>
        <briefdescription>
<para>Return true if user has the bughunter level 2 badge. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has bughunter level 2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="209" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1aaf2882b35da271f6d79f0b41be5aecf4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_verified_bot</definition>
        <argsstring>() const </argsstring>
        <name>is_verified_bot</name>
        <briefdescription>
<para>Return true if user has the verified bot badge. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if verified bot </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="215" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1af39cec5c8d97d2a238f4505a14609de1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_verified_bot_dev</definition>
        <argsstring>() const </argsstring>
        <name>is_verified_bot_dev</name>
        <briefdescription>
<para>Return true if user is an early verified bot developer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if verified bot developer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="221" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1afb89ac416c1589a7f3ac2a373b84a3f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_certified_moderator</definition>
        <argsstring>() const </argsstring>
        <name>is_certified_moderator</name>
        <briefdescription>
<para>Return true if user is a certified moderator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if certified moderator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="227" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a1b948b8c168fbd4c545185acfbd98eb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_animated_icon</definition>
        <argsstring>() const </argsstring>
        <name>has_animated_icon</name>
        <briefdescription>
<para>Return true if user has an animated icon. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if icon is animated (gif) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/user.h" line="233" column="1" bodyfile="/home/brain/D++/src/dpp/user.cpp" bodystart="147" bodyend="149"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a user on discord. May or may not be a member of a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="14807">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="14808" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14808">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="14809">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="14810" relation="public-inheritance">
        </childnode>
        <childnode refid="14812" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="14813" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="14814" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="14815" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="14817" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="14811">
        <label>uint64_t</label>
      </node>
      <node id="14812">
        <label>uint16_t</label>
      </node>
      <node id="14816">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="14817">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="14811" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="14813">
        <label>uint32_t</label>
      </node>
      <node id="14814">
        <label>uint8_t</label>
      </node>
      <node id="14810">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="14811" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="14815">
        <label>std::string</label>
        <childnode refid="14816" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/user.h" line="76" column="1" bodyfile="/home/brain/D++/include/dpp/user.h" bodystart="76" bodyend="234"/>
    <listofallmembers>
      <member refid="classdpp_1_1user_1ae9d90b269f17fc2c5a0021dcb2b8dce3" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>avatar</name></member>
      <member refid="classdpp_1_1user_1afe658cc2d4adcf83a76f798dead3e5e6" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>discriminator</name></member>
      <member refid="classdpp_1_1user_1ae9fecaa47d8ba5330c4cdda978ffe267" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1user_1aab86456a191f214b38277cf65bb6af05" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>flags</name></member>
      <member refid="classdpp_1_1user_1a097d52cec3ae64f14a1c0d082e15a9e6" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>get_avatar_url</name></member>
      <member refid="classdpp_1_1user_1a1b948b8c168fbd4c545185acfbd98eb5" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>has_animated_icon</name></member>
      <member refid="classdpp_1_1user_1ad4fdeabdcabc6431fd7d3516129e9358" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>has_hypesquad_events</name></member>
      <member refid="classdpp_1_1user_1aaa38eed7b5e1af6fe055e61aa3b3e75f" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>has_nitro_classic</name></member>
      <member refid="classdpp_1_1user_1a3a33216d06fd817a14cc8cfa782efd24" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>has_nitro_full</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>id</name></member>
      <member refid="classdpp_1_1user_1af0a538101071dd5a04391a6fafd21d73" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_bot</name></member>
      <member refid="classdpp_1_1user_1a84613800f6c203eea56c9fc560934eb8" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_bughunter_1</name></member>
      <member refid="classdpp_1_1user_1adc1e92229bf1a3be703d35e181b93cb4" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_bughunter_2</name></member>
      <member refid="classdpp_1_1user_1afb89ac416c1589a7f3ac2a373b84a3f8" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_certified_moderator</name></member>
      <member refid="classdpp_1_1user_1a997d4d25a2074cee6d477e57d88d2f49" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_discord_employee</name></member>
      <member refid="classdpp_1_1user_1af77532a2b5975a27510991b5253ebc7d" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_early_supporter</name></member>
      <member refid="classdpp_1_1user_1a86a72ddecd1e155fd8c1db3777cdc015" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_house_balanace</name></member>
      <member refid="classdpp_1_1user_1a3b269bd5fdaa1ff60275587eff33aaf2" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_house_bravery</name></member>
      <member refid="classdpp_1_1user_1af4651db478cccacdb1aca302ff045000" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_house_brilliance</name></member>
      <member refid="classdpp_1_1user_1a9a4dc242ceb0aa385a625d158c748b3d" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_mfa_enabled</name></member>
      <member refid="classdpp_1_1user_1a967603184f377f9ab5b2cab2def20fbc" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_partnered_owner</name></member>
      <member refid="classdpp_1_1user_1abb451bf7fcbef0622cb3872fb81d53f5" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_system</name></member>
      <member refid="classdpp_1_1user_1ab662aeb55a140fbbd2d54deef30c5479" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_team_user</name></member>
      <member refid="classdpp_1_1user_1ade6e466e81cb2e62127b5fe71b63d549" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_verified</name></member>
      <member refid="classdpp_1_1user_1aaf2882b35da271f6d79f0b41be5aecf4" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_verified_bot</name></member>
      <member refid="classdpp_1_1user_1af39cec5c8d97d2a238f4505a14609de1" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_verified_bot_dev</name></member>
      <member refid="classdpp_1_1managed_1a3e2b7d69e7313d84aff23cadf9ba9a6a" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>managed</name></member>
      <member refid="classdpp_1_1user_1a68d336b1fc0b592ea970c11eaf9f2048" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>refcount</name></member>
      <member refid="classdpp_1_1user_1a10ae5c579f6d60370d825e71fdff697b" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>user</name></member>
      <member refid="classdpp_1_1user_1a4e72b2e5ac7d5539fdae64be6e01246c" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>username</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::user</scope><name>~managed</name></member>
      <member refid="classdpp_1_1user_1a7787310b4607e5e3eb61c2b504bae94e" prot="public" virt="virtual"><scope>dpp::user</scope><name>~user</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
