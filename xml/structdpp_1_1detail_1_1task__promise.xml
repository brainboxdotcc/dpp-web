<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1detail_1_1task__promise" kind="struct" language="C++" prot="public">
    <compoundname>dpp::detail::task_promise</compoundname>
    <basecompoundref refid="structdpp_1_1detail_1_1task__promise__base" prot="public" virt="non-virtual">dpp::detail::task_promise_base</basecompoundref>
    <includes local="no">task.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise_1a4e5a8e0fe109e3c8ba250947d58a6bac" prot="public" static="no" mutable="no">
        <type>std::array&lt; std::byte, sizeof(R)&gt;</type>
        <definition>std::array&lt;std::byte, sizeof(R)&gt; dpp::detail::task_promise&lt; R &gt;::result_storage</definition>
        <argsstring></argsstring>
        <name>result_storage</name>
        <briefdescription>
<para>Stored return value of the coroutine. </para>
        </briefdescription>
        <detaileddescription>
<para>The main reason we use std::optional&lt;R&gt; here and not R is to avoid default construction of the value so we only require R to have a move constructor, instead of both a default constructor and move assignment operator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="579" column="20" bodyfile="include/dpp/coro/task.h" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1acfcd8284a6a4820706fda882d4df3a1d" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; <ref refid="namespacedpp_1_1detail_1a55d58fcb55862a7ad5ef0dac76500c36" kindref="member">task_state_t</ref> &gt;</type>
        <definition>std::atomic&lt;task_state_t&gt; dpp::detail::task_promise_base::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <initializer>= <ref refid="namespacedpp_1_1detail_1a55d58fcb55862a7ad5ef0dac76500c36a3bebb2f89180b03fa5ae736665f648d9" kindref="member">task_state_t::started</ref></initializer>
        <briefdescription>
<para>State of the task, used to keep track of lifetime and status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="487" column="13" bodyfile="include/dpp/coro/task.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1a8842c427d4015c8a54434f5f94593f44" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; dpp::detail::task_promise_base::cancelled</definition>
        <argsstring></argsstring>
        <name>cancelled</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Whether the task is cancelled or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="492" column="13" bodyfile="include/dpp/coro/task.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1a03690dffabdfa0772ed0f27be5465354" prot="public" static="no" mutable="no">
        <type>detail::std_coroutine::coroutine_handle</type>
        <definition>detail::std_coroutine::coroutine_handle dpp::detail::task_promise_base::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Parent coroutine to return to for nested coroutines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="497" column="2" bodyfile="include/dpp/coro/task.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise_1a9e49918eb6f5f56b562e1ac33ea50cc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::task_promise&lt; R &gt;::~task_promise</definition>
        <argsstring>()</argsstring>
        <name>~task_promise</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="569" column="1" bodyfile="include/dpp/coro/task.h" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise_1a10e644d564334a4684725ae636aeef8a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task_promise&lt; R &gt;::return_value</definition>
        <argsstring>(R &amp;&amp;expr) noexcept(std::is_nothrow_move_constructible_v&lt; R &gt;)</argsstring>
        <name>return_value</name>
        <param>
          <type>R &amp;&amp;</type>
          <declname>expr</declname>
        </param>
    <requiresclause>std::move_constructible&lt;R&gt;    </requiresclause>
        <briefdescription>
<para>Function called by the standard library when the coroutine co_returns a value. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the value internally to hand to the caller when it resumes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>The value given to co_return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="588" column="6" bodyfile="include/dpp/coro/task.h" bodystart="588" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise_1ac312f1f52ff2ba0610c33ee0457b2bba" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task_promise&lt; R &gt;::return_value</definition>
        <argsstring>(const R &amp;expr) noexcept(std::is_nothrow_copy_constructible_v&lt; R &gt;)</argsstring>
        <name>return_value</name>
        <param>
          <type>const R &amp;</type>
          <declname>expr</declname>
        </param>
    <requiresclause>std::copy_constructible&lt;R&gt;    </requiresclause>
        <briefdescription>
<para>Function called by the standard library when the coroutine co_returns a value. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the value internally to hand to the caller when it resumes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>The value given to co_return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="599" column="6" bodyfile="include/dpp/coro/task.h" bodystart="599" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise_1a8ff6cd3d74ac1c2b2f47506535b493a3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dpp::detail::task_promise&lt; R &gt;::return_value</definition>
        <argsstring>(T &amp;&amp;expr) noexcept(std::is_nothrow_convertible_v&lt; T, R &gt;)</argsstring>
        <name>return_value</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>expr</declname>
        </param>
    <requiresclause>(!std::is_same_v&lt;R, std::remove_cvref_t&lt;T&gt;&gt; &amp;&amp; std::convertible_to&lt;T, R&gt;)    </requiresclause>
        <briefdescription>
<para>Function called by the standard library when the coroutine co_returns a value. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the value internally to hand to the caller when it resumes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>The value given to co_return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="612" column="6" bodyfile="include/dpp/coro/task.h" bodystart="612" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise_1a9cc42b222b4de74e80a239885646ee80" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1task" kindref="compound">task</ref>&lt; R &gt;</type>
        <definition>task&lt; R &gt; dpp::detail::task_promise&lt; R &gt;::get_return_object</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_return_object</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is created. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>task The coroutine object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="621" column="6" bodyfile="include/dpp/coro/task.h" bodystart="621" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise_1a8e2b63733a0094f99476fff12bb830bb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1detail_1_1task__chain__final__awaiter" kindref="compound">task_chain_final_awaiter</ref>&lt; R &gt;</type>
        <definition>task_chain_final_awaiter&lt; R &gt; dpp::detail::task_promise&lt; R &gt;::final_suspend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>final_suspend</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine reaches its last suspension point. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1detail_1_1task__chain__final__awaiter" kindref="compound">task_chain_final_awaiter</ref> Special object containing the chain resolution and clean-up logic. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="630" column="26" bodyfile="include/dpp/coro/task.h" bodystart="630" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise__base_1a34db20615e74c9f48b27fdb3e55a99ef" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std_coroutine::suspend_never</type>
        <definition>std_coroutine::suspend_never dpp::detail::task_promise_base::initial_suspend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>initial_suspend</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is created. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ulink url="https://en.cppreference.com/w/cpp/coroutine/suspend_never">std::suspend_never</ulink> Don&apos;t suspend, the coroutine starts immediately. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="521" column="30" bodyfile="include/dpp/coro/task.h" bodystart="521" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise__base_1af015d8af8e261d051216d5ab291a935a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task_promise_base::unhandled_exception</definition>
        <argsstring>()</argsstring>
        <name>unhandled_exception</name>
        <briefdescription>
<para>Function called by the standard library when an exception is thrown and not caught in the coroutine. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the exception pointer to rethrow on co_await. If the task object is destroyed and was not cancelled, throw instead </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="530" column="6" bodyfile="include/dpp/coro/task.h" bodystart="530" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise__base_1a68de48510b48e50a620c9875a553344e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto dpp::detail::task_promise_base::await_transform</definition>
        <argsstring>(T &amp;&amp;expr) const noexcept(noexcept(co_await_resolve(std::forward&lt; T &gt;(expr))))</argsstring>
        <name>await_transform</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="558" column="6" bodyfile="include/dpp/coro/task.h" bodystart="558" bodyend="561"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A task&apos;s promise type, with special logic for handling nested tasks. </para>
    </briefdescription>
    <detaileddescription>
<para>Implementation of <ref refid="structdpp_1_1detail_1_1task__promise" kindref="compound">task_promise</ref> for non-void return type. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::detail::task_promise&lt; R &gt;</label>
        <link refid="structdpp_1_1detail_1_1task__promise"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::detail::task_promise_base</label>
        <link refid="structdpp_1_1detail_1_1task__promise__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::detail::task_promise&lt; R &gt;</label>
        <link refid="structdpp_1_1detail_1_1task__promise"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>result_storage</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::detail::task_promise_base</label>
        <link refid="structdpp_1_1detail_1_1task__promise__base"/>
        <childnode refid="3" relation="usage">
          <edgelabel>cancelled</edgelabel>
          <edgelabel>state</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>array&lt;</label>
      </node>
      <node id="3">
        <label>atomic&lt;</label>
      </node>
      <node id="4">
        <label>coroutine_handle&lt; coroutine_promise&lt; R &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro/task.h" line="568" column="1" bodyfile="include/dpp/coro/task.h" bodystart="568" bodyend="633"/>
    <listofallmembers>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a68de48510b48e50a620c9875a553344e" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>await_transform</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a8842c427d4015c8a54434f5f94593f44" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>cancelled</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise_1a8e2b63733a0094f99476fff12bb830bb" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>final_suspend</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise_1a9cc42b222b4de74e80a239885646ee80" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>get_return_object</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a34db20615e74c9f48b27fdb3e55a99ef" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>initial_suspend</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a03690dffabdfa0772ed0f27be5465354" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>parent</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise_1a4e5a8e0fe109e3c8ba250947d58a6bac" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>result_storage</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise_1a10e644d564334a4684725ae636aeef8a" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>return_value</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise_1ac312f1f52ff2ba0610c33ee0457b2bba" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>return_value</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise_1a8ff6cd3d74ac1c2b2f47506535b493a3" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>return_value</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1acfcd8284a6a4820706fda882d4df3a1d" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>state</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1af015d8af8e261d051216d5ab291a935a" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>unhandled_exception</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise_1a9e49918eb6f5f56b562e1ac33ea50cc5" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise</scope><name>~task_promise</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
