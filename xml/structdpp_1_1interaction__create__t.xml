<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1interaction__create__t" kind="struct" language="C++" prot="public">
    <compoundname>dpp::interaction_create_t</compoundname>
    <basecompoundref refid="structdpp_1_1event__dispatch__t" prot="public" virt="non-virtual">dpp::event_dispatch_t</basecompoundref>
    <derivedcompoundref refid="structdpp_1_1autocomplete__t" prot="public" virt="non-virtual">dpp::autocomplete_t</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1button__click__t" prot="public" virt="non-virtual">dpp::button_click_t</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1form__submit__t" prot="public" virt="non-virtual">dpp::form_submit_t</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1select__click__t" prot="public" virt="non-virtual">dpp::select_click_t</derivedcompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1interaction" kindref="compound">interaction</ref></type>
        <definition>interaction dpp::interaction_create_t::command</definition>
        <argsstring></argsstring>
        <name>command</name>
        <briefdescription>
<para>command interaction </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="412" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a22df2fa7e547eaefbd65e501d8bf67b7" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <briefdescription>
<para>Raw event data. If you are using json on your websocket, this will contain json, and if you are using ETF as your websocket protocol, it will contain raw ETF data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="69" column="19" bodyfile="include/dpp/dispatcher.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::event_dispatch_t::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
<para>Shard the event came from. Note that for some events, notably voice events, this may be nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="75" column="22" bodyfile="include/dpp/dispatcher.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ab0b360b2769c2e3be693aae2f0df27b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::interaction_create_t::interaction_create_t</definition>
        <argsstring>(class discord_client *client, const std::string &amp;raw)</argsstring>
        <name>interaction_create_t</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event text as JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="297" column="1" bodyfile="src/dpp/dispatcher.cpp" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1aa5fcd66cf01e5dbce8f5ec921a58db63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(interaction_response_type t, const message &amp;m, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>reply</name>
        <param>
          <type><ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">interaction_response_type</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reply to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="307" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a946783aee86efa1f18c4d7ceb0e07313" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(interaction_response_type t, const std::string &amp;mt, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>reply</name>
        <param>
          <type><ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">interaction_response_type</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reply to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="317" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1aebdd5a0cd0258a372dc1b55aa594a44a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(const message &amp;m, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>reply</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. Uses the default type of <ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02a5a9b185d739d649208ea5e903391901c" kindref="member">dpp::ir_channel_message_with_source</ref>, a simple message reply. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="327" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="105" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a56c5b18e31d5042ce01c814620013d2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(const std::string &amp;mt, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>reply</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. Uses the default type of <ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02a5a9b185d739d649208ea5e903391901c" kindref="member">dpp::ir_channel_message_with_source</ref>, a simple message reply. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="337" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a63076b1d3b1fc2e1c3f97384f1fe8b4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::dialog</definition>
        <argsstring>(const interaction_modal_response &amp;mr, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>dialog</name>
        <param>
          <type>const <ref refid="structdpp_1_1interaction__modal__response" kindref="compound">interaction_modal_response</ref> &amp;</type>
          <declname>mr</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Reply to interaction with a dialog box. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mr</parametername>
</parameternamelist>
<parameterdescription>
<para>Dialog box response to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="346" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a274aaa562766588128c2e3699b515b41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::edit_response</definition>
        <argsstring>(const message &amp;m, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>edit_response</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit the response for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="355" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1aa65d3bc92cad7ef094e90ca05ba45859" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::edit_response</definition>
        <argsstring>(const std::string &amp;mt, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>edit_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit the response for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="364" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ab0c0133ac861e7752cd700903303b7fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::thinking</definition>
        <argsstring>(bool ephemeral=false, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>thinking</name>
        <param>
          <type>bool</type>
          <declname>ephemeral</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Set the bot to &apos;thinking&apos; state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ephemeral</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the thinking state should be ephemeral </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="373" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="115" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ad106ea02219af2a9bc35519f3bde6b36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::get_original_response</definition>
        <argsstring>(command_completion_event_t callback) const</argsstring>
        <name>get_original_response</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get original response message for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="381" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="151" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a10553ebb8d10ba58595f825e0a89eb1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::edit_original_response</definition>
        <argsstring>(const message &amp;m, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>edit_original_response</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit original response message for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="390" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="160" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a42a7aada4ad321e9d8e3645b8b4abc97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::delete_original_response</definition>
        <argsstring>(command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>delete_original_response</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete original response message for this interaction. This cannot be used on an ephemeral interaction response. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="398" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="169" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a9ed8c6f8eaf7862de50a30e9642fbc56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="namespacedpp_1a710b32b577396ba92917d0578f0bedb6" kindref="member">command_value</ref> &amp;</type>
        <definition>const command_value &amp; dpp::interaction_create_t::get_parameter</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>get_parameter</name>
        <reimplementedby refid="structdpp_1_1button__click__t_1af2c6ff89794c5d0e719b2742fcede3bc">get_parameter</reimplementedby>
        <reimplementedby refid="structdpp_1_1form__submit__t_1a7282fbf5ac16164b7274358c2c5c70bd">get_parameter</reimplementedby>
        <reimplementedby refid="structdpp_1_1autocomplete__t_1a9e46b59ec205a971235573c73d8437d3">get_parameter</reimplementedby>
        <reimplementedby refid="structdpp_1_1select__click__t_1a3b67abd4d7858b669e939de9c0bf06d7">get_parameter</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a command line parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The command line parameter to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const command_value&amp; If the command line parameter does not exist, an empty variant is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="407" column="29" bodyfile="src/dpp/dispatcher.cpp" bodystart="178" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a99295cd531165826282fed0b1f547c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::interaction_create_t::~interaction_create_t</definition>
        <argsstring>()=default</argsstring>
        <name>~interaction_create_t</name>
        <briefdescription>
<para>Destroy this object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="417" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1a5afbcd36109734ad0fca14ec848b73b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>const event_dispatch_t &amp; dpp::event_dispatch_t::cancel_event</definition>
        <argsstring>() const</argsstring>
        <name>cancel_event</name>
        <briefdescription>
<para>Cancels the event in progress. Any other attached lambdas for this event after this one are not called. Note that event cancellation is a thread local state, and not stored in the object (because object which can be cancelled is <computeroutput>const</computeroutput> during the event, and cannot itself contain the changeable state). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref>&amp; reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="91" column="24" bodyfile="src/dpp/dispatcher.cpp" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1aca2880114f69b7ba62eb5137824c1432" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::event_dispatch_t::is_cancelled</definition>
        <argsstring>() const</argsstring>
        <name>is_cancelled</name>
        <briefdescription>
<para>Returns true if the event is cancelled. Note that event cancellation is a thread local state, and not stored in the object (because object which can be cancelled is <computeroutput>const</computeroutput> during the event, and cannot itself contain the changeable state). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the event is cancelled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="99" column="6" bodyfile="src/dpp/dispatcher.cpp" bodystart="51" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Create interaction. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::autocomplete_t</label>
        <link refid="structdpp_1_1autocomplete__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::button_click_t</label>
        <link refid="structdpp_1_1button__click__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
      <node id="5">
        <label>dpp::form_submit_t</label>
        <link refid="structdpp_1_1form__submit__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::interaction_create_t</label>
        <link refid="structdpp_1_1interaction__create__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>dpp::select_click_t</label>
        <link refid="structdpp_1_1select__click__t"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>SSL *</label>
      </node>
      <node id="8">
        <label>bool</label>
      </node>
      <node id="27">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="18">
        <label>double</label>
      </node>
      <node id="26">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="27" relation="usage">
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="3" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>on_form_submit</edgelabel>
          <edgelabel>on_guild_ban_add</edgelabel>
          <edgelabel>on_guild_ban_remove</edgelabel>
          <edgelabel>on_guild_create</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>dpp::command_resolved</label>
        <link refid="structdpp_1_1command__resolved"/>
        <childnode refid="45" relation="usage">
          <edgelabel>attachments</edgelabel>
          <edgelabel>channels</edgelabel>
          <edgelabel>member_permissions</edgelabel>
          <edgelabel>members</edgelabel>
          <edgelabel>messages</edgelabel>
          <edgelabel>roles</edgelabel>
          <edgelabel>users</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ready</edgelabel>
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>reconnects</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
          <edgelabel>last_heartbeat_ack</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>sessionid</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>protocol</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="3" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="3" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>dpp::interaction</label>
        <link refid="classdpp_1_1interaction"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>application_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>type</edgelabel>
          <edgelabel>version</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>msg</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_locale</edgelabel>
          <edgelabel>locale</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>resolved</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::interaction_create_t</label>
        <link refid="structdpp_1_1interaction__create__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>command</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="20">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="13" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>dpp::message</label>
        <link refid="structdpp_1_1message"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>webhook_id</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>author</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>content</edgelabel>
          <edgelabel>nonce</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>attachments</edgelabel>
          <edgelabel>components</edgelabel>
          <edgelabel>embeds</edgelabel>
          <edgelabel>filecontent</edgelabel>
          <edgelabel>filename</edgelabel>
          <edgelabel>mention_channels</edgelabel>
          <edgelabel>mention_roles</edgelabel>
          <edgelabel>mentions</edgelabel>
          <edgelabel>reactions</edgelabel>
          <edgelabel>stickers</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>edited</edgelabel>
          <edgelabel>sent</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>mention_everyone</edgelabel>
          <edgelabel>pinned</edgelabel>
          <edgelabel>tts</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>message_reference</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>interaction</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>allowed_mentions</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>dpp::message::allowed_ref</label>
        <link refid="structdpp_1_1message_1_1allowed__ref"/>
        <childnode refid="8" relation="usage">
          <edgelabel>parse_everyone</edgelabel>
          <edgelabel>parse_roles</edgelabel>
          <edgelabel>parse_users</edgelabel>
          <edgelabel>replied_user</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>roles</edgelabel>
          <edgelabel>users</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>dpp::message::message_interaction_struct</label>
        <link refid="structdpp_1_1message_1_1message__interaction__struct"/>
        <childnode refid="13" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>dpp::message::message_ref</label>
        <link refid="structdpp_1_1message_1_1message__ref"/>
        <childnode refid="13" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>fail_if_not_exists</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>dpp::openssl_connection</label>
        <link refid="classdpp_1_1openssl__connection"/>
        <childnode refid="11" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="3" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>keepalive</edgelabel>
          <edgelabel>make_new</edgelabel>
          <edgelabel>nonblocking</edgelabel>
          <edgelabel>plaintext</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>custom_readable_ready</edgelabel>
          <edgelabel>custom_writeable_ready</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="20" relation="public-inheritance">
        </childnode>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="13" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>event_router_t&lt;</label>
      </node>
      <node id="9">
        <label>int</label>
      </node>
      <node id="35">
        <label>dpp::json_interface&lt; interaction &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; interaction &gt;</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>message_type</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="29">
        <label>condition_variable</label>
      </node>
      <node id="14">
        <label>function&lt; dpp::socket()&gt;</label>
      </node>
      <node id="15">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="45">
        <label>map&lt;</label>
      </node>
      <node id="32">
        <label>std::mutex</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>native_handle_type</label>
      </node>
      <node id="33">
        <label>unordered_map&lt;</label>
      </node>
      <node id="36">
        <label>variant&lt;</label>
      </node>
      <node id="39">
        <label>vector&lt;</label>
      </node>
      <node id="12">
        <label>time_t</label>
      </node>
      <node id="24">
        <label>uint16_t</label>
      </node>
      <node id="17">
        <label>uint32_t</label>
      </node>
      <node id="13">
        <label>uint64_t</label>
      </node>
      <node id="25">
        <label>uint8_t</label>
      </node>
      <node id="28">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dispatcher.h" line="291" column="1" bodyfile="include/dpp/dispatcher.h" bodystart="291" bodyend="418"/>
    <listofallmembers>
      <member refid="structdpp_1_1event__dispatch__t_1a5afbcd36109734ad0fca14ec848b73b7" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>cancel_event</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>command</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a42a7aada4ad321e9d8e3645b8b4abc97" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>delete_original_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a63076b1d3b1fc2e1c3f97384f1fe8b4b" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>dialog</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a10553ebb8d10ba58595f825e0a89eb1b" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>edit_original_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a274aaa562766588128c2e3699b515b41" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>edit_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1aa65d3bc92cad7ef094e90ca05ba45859" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>edit_response</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a4ac4d287ca94f2389cf68e2534d9e1b0" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>from</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ad106ea02219af2a9bc35519f3bde6b36" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>get_original_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a9ed8c6f8eaf7862de50a30e9642fbc56" prot="public" virt="virtual"><scope>dpp::interaction_create_t</scope><name>get_parameter</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ab0b360b2769c2e3be693aae2f0df27b6" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>interaction_create_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1aca2880114f69b7ba62eb5137824c1432" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>is_cancelled</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a22df2fa7e547eaefbd65e501d8bf67b7" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>raw_event</name></member>
      <member refid="structdpp_1_1interaction__create__t_1aa5fcd66cf01e5dbce8f5ec921a58db63" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a946783aee86efa1f18c4d7ceb0e07313" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1aebdd5a0cd0258a372dc1b55aa594a44a" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a56c5b18e31d5042ce01c814620013d2d" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ab0c0133ac861e7752cd700903303b7fb" prot="public" virt="non-virtual"><scope>dpp::interaction_create_t</scope><name>thinking</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a99295cd531165826282fed0b1f547c8b" prot="public" virt="virtual"><scope>dpp::interaction_create_t</scope><name>~interaction_create_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
