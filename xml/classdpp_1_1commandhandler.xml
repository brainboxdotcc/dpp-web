<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1commandhandler" kind="class" language="C++" prot="public">
    <compoundname>dpp::commandhandler</compoundname>
    <includes local="no">commandhandler.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1commandhandler_1ad24bee0504065fc7170bba93687c9411" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">dpp::snowflake</ref>, std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref> &gt; &gt;</type>
        <definition>std::map&lt;dpp::snowflake, std::vector&lt;dpp::slashcommand&gt; &gt; dpp::commandhandler::bulk_registration_list_guild</definition>
        <argsstring></argsstring>
        <name>bulk_registration_list_guild</name>
        <briefdescription>
<para>List of guild commands to bulk register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="227" column="10" bodyfile="include/dpp/commandhandler.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1commandhandler_1a83db1736b0a7dba94c6f5c18cd64dfc1" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref> &gt;</type>
        <definition>std::vector&lt;dpp::slashcommand&gt; dpp::commandhandler::bulk_registration_list_global</definition>
        <argsstring></argsstring>
        <name>bulk_registration_list_global</name>
        <briefdescription>
<para>List of global commands to bulk register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="231" column="13" bodyfile="include/dpp/commandhandler.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1commandhandler_1aaeb676a799cda302d4b08106f898a867" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, <ref refid="structdpp_1_1command__info__t" kindref="compound">command_info_t</ref> &gt;</type>
        <definition>std::unordered_map&lt;std::string, command_info_t&gt; dpp::commandhandler::commands</definition>
        <argsstring></argsstring>
        <name>commands</name>
        <briefdescription>
<para>Commands in the handler. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="236" column="20" bodyfile="include/dpp/commandhandler.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1commandhandler_1acbbac80b9d8fd5b3f82fd5bfc919f9bc" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::commandhandler::prefixes</definition>
        <argsstring></argsstring>
        <name>prefixes</name>
        <briefdescription>
<para>Valid prefixes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="241" column="13" bodyfile="include/dpp/commandhandler.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1commandhandler_1a29e869380af75e438094960b2e66a898" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::commandhandler::slash_commands_enabled</definition>
        <argsstring></argsstring>
        <name>slash_commands_enabled</name>
        <briefdescription>
<para>Set to true automatically if one of the prefixes added is &quot;/&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="246" column="6" bodyfile="include/dpp/commandhandler.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1commandhandler_1a81203fb77ae98d8cfe81d95bf714fcf0" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::commandhandler::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
<para>Cluster we are attached to for issuing REST calls. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="251" column="15" bodyfile="include/dpp/commandhandler.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1commandhandler_1aa77b113d11ae040d9eb32a462bd88a7c" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::commandhandler::app_id</definition>
        <argsstring></argsstring>
        <name>app_id</name>
        <briefdescription>
<para>Application ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="256" column="11" bodyfile="include/dpp/commandhandler.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1commandhandler_1af8ca0a5c050b1774794de79e221a4b4e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref></type>
        <definition>event_handle dpp::commandhandler::interactions</definition>
        <argsstring></argsstring>
        <name>interactions</name>
        <briefdescription>
<para>Interaction event handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="261" column="14" bodyfile="include/dpp/commandhandler.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1commandhandler_1ac2ed801cb8ac1697bd92799acfae2c0a" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref></type>
        <definition>event_handle dpp::commandhandler::messages</definition>
        <argsstring></argsstring>
        <name>messages</name>
        <briefdescription>
<para>Message event handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="266" column="14" bodyfile="include/dpp/commandhandler.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1commandhandler_1a064419ada0fd30cee04faec9f75ba04d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::commandhandler::string_has_prefix</definition>
        <argsstring>(std::string &amp;str)</argsstring>
        <name>string_has_prefix</name>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns true if the string has a known prefix on the start. Modifies string to remove prefix if it returns true. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>String to check and modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true string contained a prefix, prefix removed from string </para>
</simplesect>
<simplesect kind="return"><para>false string did not contain a prefix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="276" column="6" bodyfile="src/dpp/commandhandler.cpp" bodystart="167" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1commandhandler_1a7300779eb1aaf04041e48c756abafafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::commandhandler::commandhandler</definition>
        <argsstring>(class cluster *o, bool auto_hook_events=true, snowflake application_id=0)</argsstring>
        <name>commandhandler</name>
        <param>
          <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>auto_hook_events</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>application_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct a new commandhandler object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Owning cluster to attach to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_hook_events</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to automatically hook the on_slashcommand and on_message events. You should not need to set this to false unless you have a specific use case, as D++ supports multiple listeners to an event, so will allow the commandhandler to hook to your command events without disrupting other uses for the events you may have. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application id of the bot. If not specified, the class will look within the cluster object and use cluster::me::id instead. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="291" column="1" bodyfile="src/dpp/commandhandler.cpp" bodystart="42" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1commandhandler_1a62373f8cdd5b887eb78eb4f4cb265baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::commandhandler::~commandhandler</definition>
        <argsstring>()</argsstring>
        <name>~commandhandler</name>
        <briefdescription>
<para>Destroy the commandhandler object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="296" column="1" bodyfile="src/dpp/commandhandler.cpp" bodystart="66" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1commandhandler_1a8640d327288a6dd1c5fdbde85726e7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1commandhandler" kindref="compound">commandhandler</ref> &amp;</type>
        <definition>commandhandler &amp; dpp::commandhandler::set_owner</definition>
        <argsstring>(class cluster *o)</argsstring>
        <name>set_owner</name>
        <param>
          <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Set the application id after construction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Owning cluster to attach to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="303" column="16" bodyfile="src/dpp/commandhandler.cpp" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1commandhandler_1a69ce2bb96adb1a658b3a29c37274f2bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1commandhandler" kindref="compound">commandhandler</ref> &amp;</type>
        <definition>commandhandler &amp; dpp::commandhandler::add_prefix</definition>
        <argsstring>(const std::string &amp;prefix)</argsstring>
        <name>add_prefix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
<para>Add a prefix to the command handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix to be handled by the command handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>commandhandler&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="311" column="16" bodyfile="src/dpp/commandhandler.cpp" bodystart="74" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1commandhandler_1a791ed0c75ef77306af84be30ded619f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1commandhandler" kindref="compound">commandhandler</ref> &amp;</type>
        <definition>commandhandler &amp; dpp::commandhandler::add_command</definition>
        <argsstring>(const std::string &amp;command, const parameter_registration_t &amp;parameters, command_handler handler, const std::string &amp;description=&quot;&quot;, snowflake guild_id=0)</argsstring>
        <name>add_command</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>command</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a6daf230da747f01eeaa36fd3d5e51a65" kindref="member">parameter_registration_t</ref> &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a72a8ab3231965d0e361f305a7fe431f3" kindref="member">command_handler</ref></type>
          <declname>handler</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Add a command to the command handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to be handled. Note that if any one of your prefixes is &quot;/&quot; this will attempt to register a global command using the API and you will receive notification of this command via an interaction event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_handler" kindref="compound">Handler</ref> function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters to use for the command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>The description of the command, shown for slash commands </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild ID to restrict the command to. For slash commands causes registration of a guild command as opposed to a global command. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>commandhandler&amp; reference to self </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if application ID cannot be determined </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="327" column="16" bodyfile="src/dpp/commandhandler.cpp" bodystart="84" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1commandhandler_1a208f3684f3987d87074824bd13699e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1commandhandler" kindref="compound">commandhandler</ref> &amp;</type>
        <definition>commandhandler &amp; dpp::commandhandler::register_commands</definition>
        <argsstring>()</argsstring>
        <name>register_commands</name>
        <briefdescription>
<para>Register all slash commands with Discord This method must be called at least once if you are using the &quot;/&quot; prefix to mark the end of commands being added to the handler. Note that this uses bulk registration and will replace any existing slash commands. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that if you have previously registered your commands and they have not changed, you do not need to call this again. Discord retains a cache of previously added commands.</para>
<para><simplesect kind="return"><para>commandhandler&amp; Reference to self for chaining method calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="340" column="16" bodyfile="src/dpp/commandhandler.cpp" bodystart="150" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1commandhandler_1a957dfe206c80cd7176e7ab663e9a1bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::commandhandler::route</definition>
        <argsstring>(const struct dpp::message_create_t &amp;event)</argsstring>
        <name>route</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message__create__t" kindref="compound">dpp::message_create_t</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Route a command from the on_message_create function. Call this method from within your on_message_create with the received <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object if you have disabled automatic registration of events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>message create event to parse </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="349" column="6" bodyfile="src/dpp/commandhandler.cpp" bodystart="183" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1commandhandler_1a2a49a132a938c1952f77a31de8335cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::commandhandler::route</definition>
        <argsstring>(const struct slashcommand_t &amp;event)</argsstring>
        <name>route</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1slashcommand__t" kindref="compound">slashcommand_t</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Route a command from the on_slashcommand function. Call this method from your on_slashcommand with the received <ref refid="structdpp_1_1interaction__create__t" kindref="compound">dpp::interaction_create_t</ref> object if you have disabled automatic registration of events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>command interaction event to parse </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="358" column="6" bodyfile="src/dpp/commandhandler.cpp" bodystart="301" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1commandhandler_1ad8ddefafe9e85a86829775f385fe5f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::commandhandler::reply</definition>
        <argsstring>(const dpp::message &amp;m, command_source source, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>reply</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structdpp_1_1command__source" kindref="compound">command_source</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Reply to a command. You should use this method rather than <ref refid="classdpp_1_1cluster_1aa6ae3dc32ebc2dd14264962710d35af7" kindref="member">cluster::message_create</ref> as the way you reply varies between slash commands and message commands. Note you should ALWAYS reply. Slash commands will emit an ugly error to the user if you do not emit some form of reply within 3 seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>message to reply with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>source of the command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="371" column="6" bodyfile="src/dpp/commandhandler.cpp" bodystart="411" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1commandhandler_1af41ce62f462d7bb8ea2046a9c7311c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::commandhandler::thinking</definition>
        <argsstring>(command_source source, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>thinking</name>
        <param>
          <type><ref refid="structdpp_1_1command__source" kindref="compound">command_source</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Reply to a command without a message, causing the discord client to display &quot;Bot name is thinking...&quot;. The &quot;thinking&quot; message will persist for a maximum of 15 minutes. This counts as a reply for a slash command. Slash commands will emit an ugly error to the user if you do not emit some form of reply within 3 seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>source of the command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/commandhandler.h" line="384" column="6" bodyfile="src/dpp/commandhandler.cpp" bodystart="424" bodyend="433"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The commandhandler class represents a group of commands, prefixed or slash commands with handling functions. </para>
    </briefdescription>
    <detaileddescription>
<para>It can automatically register slash commands, and handle routing of messages and interactions to separated command handler functions. <xrefsect id="deprecated_1_deprecated000014"><xreftitle>Deprecated</xreftitle><xrefdescription><para>commandhandler and message commands are deprecated and <ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref> is encouraged as a replacement. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>bool</label>
      </node>
      <node id="20">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="10">
        <label>double</label>
      </node>
      <node id="19">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="20" relation="usage">
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="6" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>on_form_submit</edgelabel>
          <edgelabel>on_guild_ban_add</edgelabel>
          <edgelabel>on_guild_ban_remove</edgelabel>
          <edgelabel>on_guild_create</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::commandhandler</label>
        <link refid="classdpp_1_1commandhandler"/>
        <childnode refid="2" relation="usage">
          <edgelabel>commands</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>prefixes</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>slash_commands_enabled</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>app_id</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>interactions</edgelabel>
          <edgelabel>messages</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="12">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="13" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="13" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>event_router_t&lt;</label>
      </node>
      <node id="14">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="15" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>size_t</label>
      </node>
      <node id="7">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="22">
        <label>condition_variable</label>
      </node>
      <node id="6">
        <label>std::string</label>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>unordered_map&lt;</label>
      </node>
      <node id="3">
        <label>vector&lt;</label>
      </node>
      <node id="8">
        <label>time_t</label>
      </node>
      <node id="17">
        <label>uint16_t</label>
      </node>
      <node id="9">
        <label>uint32_t</label>
      </node>
      <node id="13">
        <label>uint64_t</label>
      </node>
      <node id="18">
        <label>uint8_t</label>
      </node>
      <node id="21">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/commandhandler.h" line="222" column="1" bodyfile="include/dpp/commandhandler.h" bodystart="222" bodyend="389"/>
    <listofallmembers>
      <member refid="classdpp_1_1commandhandler_1a791ed0c75ef77306af84be30ded619f8" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>add_command</name></member>
      <member refid="classdpp_1_1commandhandler_1a69ce2bb96adb1a658b3a29c37274f2bb" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>add_prefix</name></member>
      <member refid="classdpp_1_1commandhandler_1aa77b113d11ae040d9eb32a462bd88a7c" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>app_id</name></member>
      <member refid="classdpp_1_1commandhandler_1a83db1736b0a7dba94c6f5c18cd64dfc1" prot="private" virt="non-virtual"><scope>dpp::commandhandler</scope><name>bulk_registration_list_global</name></member>
      <member refid="classdpp_1_1commandhandler_1ad24bee0504065fc7170bba93687c9411" prot="private" virt="non-virtual"><scope>dpp::commandhandler</scope><name>bulk_registration_list_guild</name></member>
      <member refid="classdpp_1_1commandhandler_1a7300779eb1aaf04041e48c756abafafb" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>commandhandler</name></member>
      <member refid="classdpp_1_1commandhandler_1aaeb676a799cda302d4b08106f898a867" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>commands</name></member>
      <member refid="classdpp_1_1commandhandler_1af8ca0a5c050b1774794de79e221a4b4e" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>interactions</name></member>
      <member refid="classdpp_1_1commandhandler_1ac2ed801cb8ac1697bd92799acfae2c0a" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>messages</name></member>
      <member refid="classdpp_1_1commandhandler_1a81203fb77ae98d8cfe81d95bf714fcf0" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>owner</name></member>
      <member refid="classdpp_1_1commandhandler_1acbbac80b9d8fd5b3f82fd5bfc919f9bc" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>prefixes</name></member>
      <member refid="classdpp_1_1commandhandler_1a208f3684f3987d87074824bd13699e42" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>register_commands</name></member>
      <member refid="classdpp_1_1commandhandler_1ad8ddefafe9e85a86829775f385fe5f23" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>reply</name></member>
      <member refid="classdpp_1_1commandhandler_1a957dfe206c80cd7176e7ab663e9a1bf2" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>route</name></member>
      <member refid="classdpp_1_1commandhandler_1a2a49a132a938c1952f77a31de8335cce" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>route</name></member>
      <member refid="classdpp_1_1commandhandler_1a8640d327288a6dd1c5fdbde85726e7de" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>set_owner</name></member>
      <member refid="classdpp_1_1commandhandler_1a29e869380af75e438094960b2e66a898" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>slash_commands_enabled</name></member>
      <member refid="classdpp_1_1commandhandler_1a064419ada0fd30cee04faec9f75ba04d" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>string_has_prefix</name></member>
      <member refid="classdpp_1_1commandhandler_1af41ce62f462d7bb8ea2046a9c7311c4f" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>thinking</name></member>
      <member refid="classdpp_1_1commandhandler_1a62373f8cdd5b887eb78eb4f4cb265baf" prot="public" virt="non-virtual"><scope>dpp::commandhandler</scope><name>~commandhandler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
