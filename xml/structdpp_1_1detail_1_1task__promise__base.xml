<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1detail_1_1task__promise__base" kind="struct" language="C++" prot="public">
    <compoundname>dpp::detail::task_promise_base</compoundname>
    <derivedcompoundref refid="structdpp_1_1detail_1_1task__promise" prot="public" virt="non-virtual">dpp::detail::task_promise&lt; R &gt;</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1detail_1_1task__promise_3_01void_01_4" prot="public" virt="non-virtual">dpp::detail::task_promise&lt; void &gt;</derivedcompoundref>
    <includes local="no">task.h</includes>
    <innerclass refid="structdpp_1_1detail_1_1task__promise__base_1_1proxy__awaiter" prot="public">dpp::detail::task_promise_base::proxy_awaiter</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1acfcd8284a6a4820706fda882d4df3a1d" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; <ref refid="namespacedpp_1_1detail_1a55d58fcb55862a7ad5ef0dac76500c36" kindref="member">task_state_t</ref> &gt;</type>
        <definition>std::atomic&lt;task_state_t&gt; dpp::detail::task_promise_base::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <initializer>= <ref refid="namespacedpp_1_1detail_1a55d58fcb55862a7ad5ef0dac76500c36a3bebb2f89180b03fa5ae736665f648d9" kindref="member">task_state_t::started</ref></initializer>
        <briefdescription>
<para>State of the task, used to keep track of lifetime and status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="487" column="13" bodyfile="include/dpp/coro/task.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1a8842c427d4015c8a54434f5f94593f44" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; dpp::detail::task_promise_base::cancelled</definition>
        <argsstring></argsstring>
        <name>cancelled</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Whether the task is cancelled or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="492" column="13" bodyfile="include/dpp/coro/task.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1a03690dffabdfa0772ed0f27be5465354" prot="public" static="no" mutable="no">
        <type>detail::std_coroutine::coroutine_handle</type>
        <definition>detail::std_coroutine::coroutine_handle dpp::detail::task_promise_base::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Parent coroutine to return to for nested coroutines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="497" column="2" bodyfile="include/dpp/coro/task.h" bodystart="497" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise__base_1a34db20615e74c9f48b27fdb3e55a99ef" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std_coroutine::suspend_never</type>
        <definition>std_coroutine::suspend_never dpp::detail::task_promise_base::initial_suspend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>initial_suspend</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is created. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ulink url="https://en.cppreference.com/w/cpp/coroutine/suspend_never">std::suspend_never</ulink> Don&apos;t suspend, the coroutine starts immediately. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="521" column="30" bodyfile="include/dpp/coro/task.h" bodystart="521" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise__base_1af015d8af8e261d051216d5ab291a935a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task_promise_base::unhandled_exception</definition>
        <argsstring>()</argsstring>
        <name>unhandled_exception</name>
        <briefdescription>
<para>Function called by the standard library when an exception is thrown and not caught in the coroutine. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the exception pointer to rethrow on co_await. If the task object is destroyed and was not cancelled, throw instead </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="530" column="6" bodyfile="include/dpp/coro/task.h" bodystart="530" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise__base_1a68de48510b48e50a620c9875a553344e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto dpp::detail::task_promise_base::await_transform</definition>
        <argsstring>(T &amp;&amp;expr) const noexcept(noexcept(co_await_resolve(std::forward&lt; T &gt;(expr))))</argsstring>
        <name>await_transform</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="558" column="6" bodyfile="include/dpp/coro/task.h" bodystart="558" bodyend="561"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base implementation of <ref refid="structdpp_1_1detail_1_1task__promise" kindref="compound">task_promise</ref>, without the logic that would depend on the return type. Meant to be inherited from. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::detail::task_promise&lt; R &gt;</label>
        <link refid="structdpp_1_1detail_1_1task__promise"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::detail::task_promise&lt; void &gt;</label>
        <link refid="structdpp_1_1detail_1_1task__promise_3_01void_01_4"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::detail::task_promise_base</label>
        <link refid="structdpp_1_1detail_1_1task__promise__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::detail::task_promise_base</label>
        <link refid="structdpp_1_1detail_1_1task__promise__base"/>
        <childnode refid="2" relation="usage">
          <edgelabel>cancelled</edgelabel>
          <edgelabel>state</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>atomic&lt;</label>
      </node>
      <node id="3">
        <label>coroutine_handle&lt; coroutine_promise&lt; R &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro/task.h" line="483" column="1" bodyfile="include/dpp/coro/task.h" bodystart="483" bodyend="562"/>
    <listofallmembers>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a68de48510b48e50a620c9875a553344e" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise_base</scope><name>await_transform</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a8842c427d4015c8a54434f5f94593f44" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise_base</scope><name>cancelled</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a34db20615e74c9f48b27fdb3e55a99ef" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise_base</scope><name>initial_suspend</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a03690dffabdfa0772ed0f27be5465354" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise_base</scope><name>parent</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1acfcd8284a6a4820706fda882d4df3a1d" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise_base</scope><name>state</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1af015d8af8e261d051216d5ab291a935a" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise_base</scope><name>unhandled_exception</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
