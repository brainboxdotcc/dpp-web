<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1detail_1_1task__promise_3_01void_01_4" kind="struct" language="C++" prot="public">
    <compoundname>dpp::detail::task_promise&lt; void &gt;</compoundname>
    <basecompoundref refid="structdpp_1_1detail_1_1task__promise__base" prot="public" virt="non-virtual">dpp::detail::task_promise_base</basecompoundref>
    <includes local="no">coro.h</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise_3_01void_01_4_1a2def1cff0be909658ebcbcd38edb2ca0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task_promise&lt; void &gt;::return_void</definition>
        <argsstring>()</argsstring>
        <name>return_void</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine co_returns. </para>
        </briefdescription>
        <detaileddescription>
<para>Does nothing but is required by the standard library. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="366" column="6" bodyfile="include/dpp/coro.h" bodystart="366" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise_3_01void_01_4_1a5eeb701548382ea1902410a7642aa0f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1task" kindref="compound">task</ref>&lt; void &gt;</type>
        <definition>task&lt; void &gt; dpp::detail::task_promise&lt; void &gt;::get_return_object</definition>
        <argsstring>()</argsstring>
        <name>get_return_object</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is created. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>task The coroutine object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="373" column="6" bodyfile="include/dpp/coro.h" bodystart="373" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise_3_01void_01_4_1a4b22c2e0635db825be57158fa5a8c827" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1detail_1_1task__chain__final__awaiter" kindref="compound">task_chain_final_awaiter</ref>&lt; void &gt;</type>
        <definition>task_chain_final_awaiter&lt; void &gt; dpp::detail::task_promise&lt; void &gt;::final_suspend</definition>
        <argsstring>() noexcept</argsstring>
        <name>final_suspend</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine reaches its last suspension point. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1detail_1_1task__chain__final__awaiter" kindref="compound">task_chain_final_awaiter</ref> Special object containing the chain resolution and clean-up logic. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="382" column="26" bodyfile="include/dpp/coro.h" bodystart="382" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise__base_1a06b70f31b07ef6337c2fffdc00a79a1a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std_coroutine::suspend_never</type>
        <definition>std_coroutine::suspend_never dpp::detail::task_promise_base::initial_suspend</definition>
        <argsstring>() noexcept</argsstring>
        <name>initial_suspend</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is created. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ulink url="https://en.cppreference.com/w/cpp/coroutine/suspend_never">std::suspend_never</ulink> Don&apos;t suspend, the coroutine starts immediately. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="300" column="30" bodyfile="include/dpp/coro.h" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task__promise__base_1af015d8af8e261d051216d5ab291a935a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task_promise_base::unhandled_exception</definition>
        <argsstring>()</argsstring>
        <name>unhandled_exception</name>
        <briefdescription>
<para>Function called by the standard library when an exception is thrown and not caught in the coroutine. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the exception pointer to rethrow later </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="309" column="6" bodyfile="include/dpp/coro.h" bodystart="309" bodyend="311"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1a3a1bbef802c522da04647c803885444a" prot="public" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex dpp::detail::task_promise_base::mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Mutex for async task destruction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="264" column="12" bodyfile="include/dpp/coro.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1a03690dffabdfa0772ed0f27be5465354" prot="public" static="no" mutable="no">
        <type>detail::std_coroutine::coroutine_handle</type>
        <definition>detail::std_coroutine::coroutine_handle dpp::detail::task_promise_base::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Parent coroutine to return to for nested coroutines. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="269" column="2" bodyfile="include/dpp/coro.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1ab018754f2033fbb47fe0fc5ae6c2e34a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::detail::task_promise_base::is_sync</definition>
        <argsstring></argsstring>
        <name>is_sync</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>Whether the coroutine has async calls or not. </para>
        </briefdescription>
        <detaileddescription>
<para>Will only ever change on the calling thread while callback mutex guards the async thread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="283" column="6" bodyfile="include/dpp/coro.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1a4b8ec65467650319e96a7dfd8910cfc4" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::detail::task_promise_base::destroy</definition>
        <argsstring></argsstring>
        <name>destroy</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Whether either the task object or the promise is gone and the next one to end will clean up. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="288" column="6" bodyfile="include/dpp/coro.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task__promise__base_1ac451b7ef5be63bb5463d4e7e832d6a50" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(std::exception_ptr)&gt;</type>
        <definition>std::function&lt;void(std::exception_ptr)&gt; dpp::detail::task_promise_base::exception_handler</definition>
        <argsstring></argsstring>
        <name>exception_handler</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Function object called when an exception is thrown from a coroutine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="293" column="15" bodyfile="include/dpp/coro.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of <ref refid="structdpp_1_1detail_1_1task__promise" kindref="compound">task_promise</ref> for void return type. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::detail::task_promise&lt; void &gt;</label>
        <link refid="structdpp_1_1detail_1_1task__promise_3_01void_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::detail::task_promise_base</label>
        <link refid="structdpp_1_1detail_1_1task__promise__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>bool</label>
      </node>
      <node id="4">
        <label>coroutine_handle</label>
      </node>
      <node id="1">
        <label>dpp::detail::task_promise&lt; void &gt;</label>
        <link refid="structdpp_1_1detail_1_1task__promise_3_01void_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::detail::task_promise_base</label>
        <link refid="structdpp_1_1detail_1_1task__promise__base"/>
        <childnode refid="3" relation="usage">
          <edgelabel>mutex</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>parent</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>destroy</edgelabel>
          <edgelabel>is_sync</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>exception_handler</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>function&lt;</label>
      </node>
      <node id="3">
        <label>std::mutex</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro.h" line="360" column="1" bodyfile="include/dpp/coro.h" bodystart="360" bodyend="385"/>
    <listofallmembers>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a4b8ec65467650319e96a7dfd8910cfc4" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise&lt; void &gt;</scope><name>destroy</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1ac451b7ef5be63bb5463d4e7e832d6a50" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise&lt; void &gt;</scope><name>exception_handler</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise_3_01void_01_4_1a4b22c2e0635db825be57158fa5a8c827" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise&lt; void &gt;</scope><name>final_suspend</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise_3_01void_01_4_1a5eeb701548382ea1902410a7642aa0f0" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise&lt; void &gt;</scope><name>get_return_object</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a06b70f31b07ef6337c2fffdc00a79a1a" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise&lt; void &gt;</scope><name>initial_suspend</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1ab018754f2033fbb47fe0fc5ae6c2e34a" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise&lt; void &gt;</scope><name>is_sync</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a3a1bbef802c522da04647c803885444a" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise&lt; void &gt;</scope><name>mutex</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1a03690dffabdfa0772ed0f27be5465354" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise&lt; void &gt;</scope><name>parent</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise_3_01void_01_4_1a2def1cff0be909658ebcbcd38edb2ca0" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise&lt; void &gt;</scope><name>return_void</name></member>
      <member refid="structdpp_1_1detail_1_1task__promise__base_1af015d8af8e261d051216d5ab291a935a" prot="public" virt="non-virtual"><scope>dpp::detail::task_promise&lt; void &gt;</scope><name>unhandled_exception</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
