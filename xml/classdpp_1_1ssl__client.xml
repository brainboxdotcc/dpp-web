<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1ssl__client" kind="class" language="C++" prot="public">
    <compoundname>dpp::ssl_client</compoundname>
    <derivedcompoundref refid="classdpp_1_1https__client" prot="public" virt="non-virtual">dpp::https_client</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1websocket__client" prot="public" virt="non-virtual">dpp::websocket_client</derivedcompoundref>
    <includes local="no">sslclient.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1ae0e5e0799448bf29506bfcc21168d3fa" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input buffer received from openssl </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="58" column="13" bodyfile="include/dpp/sslclient.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a1f9600d4fd902c74c6d8b748c359eecc" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::obuffer</definition>
        <argsstring></argsstring>
        <name>obuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output buffer for sending to openssl </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="61" column="13" bodyfile="include/dpp/sslclient.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a1486b3df6780a842552442a25634fcc9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::nonblocking</definition>
        <argsstring></argsstring>
        <name>nonblocking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if in nonblocking mode. The socket switches to nonblocking mode once ReadLoop is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="66" column="6" bodyfile="include/dpp/sslclient.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a423ca70d4046067ebe219f85c7baa540" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a51156024d6211aef2731770340cfe452" kindref="member">dpp::socket</ref></type>
        <definition>dpp::socket dpp::ssl_client::sfd</definition>
        <argsstring></argsstring>
        <name>sfd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw file descriptor of connection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="69" column="13" bodyfile="include/dpp/sslclient.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a2398ebb5fe51346ca7e97ec162327c4e" prot="protected" static="no" mutable="no">
        <type><ref refid="classdpp_1_1opensslcontext" kindref="compound">opensslcontext</ref> *</type>
        <definition>opensslcontext* dpp::ssl_client::ssl</definition>
        <argsstring></argsstring>
        <name>ssl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Openssl opaque contexts </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="72" column="16" bodyfile="include/dpp/sslclient.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a5fc2e7836da5485216419bbf17e49428" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::cipher</definition>
        <argsstring></argsstring>
        <name>cipher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SSL cipher in use </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="75" column="13" bodyfile="include/dpp/sslclient.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a61f0bbeefa25de686ac93887afa65895" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_client::last_tick</definition>
        <argsstring></argsstring>
        <name>last_tick</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For timers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="78" column="8" bodyfile="include/dpp/sslclient.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a9aab17086711ef6777a01ee0974b5ce8" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::hostname</definition>
        <argsstring></argsstring>
        <name>hostname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hostname connected to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="81" column="13" bodyfile="include/dpp/sslclient.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a53cda56d5d61e3371bd7be2424e7ff07" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Port connected to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="84" column="13" bodyfile="include/dpp/sslclient.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a8022a8002cfc6f394016546168ef4085" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::bytes_out</definition>
        <argsstring></argsstring>
        <name>bytes_out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bytes out </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="87" column="10" bodyfile="include/dpp/sslclient.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a7b3bbb4e6a9e271c8f19736b36b71d5d" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::bytes_in</definition>
        <argsstring></argsstring>
        <name>bytes_in</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bytes in </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="90" column="10" bodyfile="include/dpp/sslclient.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1aa735feca3545e156e0607c06d55288c4" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::plaintext</definition>
        <argsstring></argsstring>
        <name>plaintext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="92" column="6" bodyfile="include/dpp/sslclient.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1aa183564aac368ba97b653260ab5f5b6b" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a982a3efeac04ddb820bbe87b08155640" kindref="member">socket_callback_t</ref></type>
        <definition>socket_callback_t dpp::ssl_client::custom_readable_fd</definition>
        <argsstring></argsstring>
        <name>custom_readable_fd</name>
        <briefdescription>
<para>Attaching an additional file descriptor to this function will send notifications when there is data to read. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Only hook this if you NEED it as it can increase CPU usage of the thread! Returning -1 means that you don&apos;t want to be notified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="118" column="19" bodyfile="include/dpp/sslclient.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1afa81c27a0b2fc2d68b3939e102bf2cbf" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a982a3efeac04ddb820bbe87b08155640" kindref="member">socket_callback_t</ref></type>
        <definition>socket_callback_t dpp::ssl_client::custom_writeable_fd</definition>
        <argsstring></argsstring>
        <name>custom_writeable_fd</name>
        <briefdescription>
<para>Attaching an additional file descriptor to this function will send notifications when you are able to write to the socket. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Only hook this if you NEED it as it can increase CPU usage of the thread! You should toggle this to -1 when you do not have anything to write otherwise it&apos;ll keep triggering repeatedly (it is level triggered). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="127" column="19" bodyfile="include/dpp/sslclient.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a47fa1e38d3b5d26b6913577ffe9c73cd" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a9f89983921c7ddfa7f91705bd05e2b9e" kindref="member">socket_notification_t</ref></type>
        <definition>socket_notification_t dpp::ssl_client::custom_readable_ready</definition>
        <argsstring></argsstring>
        <name>custom_readable_ready</name>
        <briefdescription>
<para>This event will be called when you can read from the custom fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="132" column="23" bodyfile="include/dpp/sslclient.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1aa1a9af1a95e1fb4ac1504de8d591b650" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a9f89983921c7ddfa7f91705bd05e2b9e" kindref="member">socket_notification_t</ref></type>
        <definition>socket_notification_t dpp::ssl_client::custom_writeable_ready</definition>
        <argsstring></argsstring>
        <name>custom_writeable_ready</name>
        <briefdescription>
<para>This event will be called when you can write to a custom fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="137" column="23" bodyfile="include/dpp/sslclient.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1ssl__client_1ae78617d00003abcbfce5446cb6bdde41" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::one_second_timer</definition>
        <argsstring>()</argsstring>
        <name>one_second_timer</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a8e90fb79f5686c73a2024ed6ba704c6b">one_second_timer</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a79b878e8bec47a04cb0132b34fe1f6f9">one_second_timer</reimplementedby>
        <reimplementedby refid="classdpp_1_1https__client_1aa6195f58a7a4805e09ec3e56179056fe">one_second_timer</reimplementedby>
        <reimplementedby refid="classdpp_1_1websocket__client_1a113d7064f2d7f61ac7246850b6cd66cb">one_second_timer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called every second </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="95" column="14" bodyfile="src/dpp/sslclient.cpp" bodystart="229" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1afa72c083a644eba592b5da9392ebc5bd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::connect</definition>
        <argsstring>()</argsstring>
        <name>connect</name>
        <reimplementedby refid="classdpp_1_1https__client_1a42616cd36716baeff8e8b086f70b365f">connect</reimplementedby>
        <reimplementedby refid="classdpp_1_1websocket__client_1a055feb8555795bd25c3f98997af962ba">connect</reimplementedby>
        <briefdescription>
<para>Start SSL connection and connect to TCP endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Failed to initialise connection </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="101" column="14" bodyfile="src/dpp/sslclient.cpp" bodystart="128" bodyend="208"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1ssl__client_1aad4da6489c8f08030ca49c060a23740a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::get_bytes_out</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total bytes sent </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="104" column="10" bodyfile="src/dpp/sslclient.cpp" bodystart="446" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1afa5d5654ce0b631d07045088ef347418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::get_bytes_in</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_in</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total bytes received </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="107" column="10" bodyfile="src/dpp/sslclient.cpp" bodystart="451" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1abf247ed0871e89e6a319c95841a315bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::get_cipher</definition>
        <argsstring>()</argsstring>
        <name>get_cipher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get SSL cipher name </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="110" column="13" bodyfile="src/dpp/sslclient.cpp" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a5b4e115d8a21b01efe0678af9b2d03b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::ssl_client::ssl_client</definition>
        <argsstring>(const std::string &amp;_hostname, const std::string &amp;_port=&quot;443&quot;, bool plaintext_downgrade=false)</argsstring>
        <name>ssl_client</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>_hostname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_port</declname>
          <defval>&quot;443&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>plaintext_downgrade</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Connect to a specified host and port. Throws std::runtime_error on fatal error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>The hostname to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_port</parametername>
</parameternamelist>
<parameterdescription>
<para>the Port number to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_downgrade</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to connect using plaintext only, without initialising SSL. Note that no Discord endpoints will function when downgraded. This option is provided only for connection to non-Discord addresses such as within <ref refid="classdpp_1_1cluster_1a156fe68358c421111e690f553c4e4f52" kindref="member">dpp::cluster::request()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Failed to initialise connection </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="148" column="1" bodyfile="src/dpp/sslclient.cpp" bodystart="92" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::read_loop</definition>
        <argsstring>()</argsstring>
        <name>read_loop</name>
        <briefdescription>
<para>Nonblocking I/O loop. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::exception</parametername>
</parameternamelist>
<parameterdescription>
<para>Any std::exception (or derivative) thrown from <ref refid="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" kindref="member">read_loop()</ref> causes reconnection of the shard </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="154" column="6" bodyfile="src/dpp/sslclient.cpp" bodystart="241" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1ab805a3cc483018dbba6b745f7fa6ff24" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>dpp::ssl_client::~ssl_client</definition>
        <argsstring>()</argsstring>
        <name>~ssl_client</name>
        <briefdescription>
<para>Destroy the <ref refid="classdpp_1_1ssl__client" kindref="compound">ssl_client</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="159" column="9" bodyfile="src/dpp/sslclient.cpp" bodystart="484" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a17e09b948aa1c61cf8c5f73281dd07e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool dpp::ssl_client::handle_buffer</definition>
        <argsstring>(std::string &amp;buffer)</argsstring>
        <name>handle_buffer</name>
        <reimplementedby refid="classdpp_1_1https__client_1a5dd64c8f3adb03956bacbc30841954f9">handle_buffer</reimplementedby>
        <reimplementedby refid="classdpp_1_1websocket__client_1a96a1c910426a6094a81f5bf26ce9119b">handle_buffer</reimplementedby>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Handle input from the input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer content. Will be modified removing any processed front elements </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="165" column="14" bodyfile="src/dpp/sslclient.cpp" bodystart="456" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a4d9bde88c0c1926be915c6d232506176" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::write</definition>
        <argsstring>(const std::string &amp;data)</argsstring>
        <name>write</name>
        <reimplementedby refid="classdpp_1_1websocket__client_1aac65765349cbd3e787c0fd2af576ec6d">write</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write to the output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written to the buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="171" column="14" bodyfile="src/dpp/sslclient.cpp" bodystart="210" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1af20b792a7590e0b9457dec6cdb52568a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <reimplementedby refid="classdpp_1_1https__client_1ad7950ce811dc619ab4956275651e0637">close</reimplementedby>
        <reimplementedby refid="classdpp_1_1websocket__client_1a3398642150ca79c8f266de83ee93aa30">close</reimplementedby>
        <briefdescription>
<para>Close SSL connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="176" column="14" bodyfile="src/dpp/sslclient.cpp" bodystart="461" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a6037b1a66cf83e022655bd47f0df61a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const</argsstring>
        <name>log</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a9880e3f13c00cd6e4397fe64ae23b4d0">log</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1ac06f68e15b979b0590f09c9732548f16">log</reimplementedby>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>severity of log message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="184" column="14" bodyfile="src/dpp/sslclient.cpp" bodystart="237" bodyend="239"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a simple non-blocking SSL stream client. </para>
    </briefdescription>
    <detaileddescription>
<para>Note that although the design is non-blocking the run() method will execute in an infinite loop until the socket disconnects. This is intended to be run within a std::thread. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::https_client</label>
        <link refid="classdpp_1_1https__client"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
      </node>
      <node id="3">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>SSL *</label>
      </node>
      <node id="8">
        <label>SSL_CTX *</label>
      </node>
      <node id="4">
        <label>bool</label>
      </node>
      <node id="6">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="7" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="2" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>nonblocking</edgelabel>
          <edgelabel>plaintext</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>custom_readable_ready</edgelabel>
          <edgelabel>custom_writeable_ready</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>int</label>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="11">
        <label>function&lt; dpp::socket()&gt;</label>
      </node>
      <node id="12">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>time_t</label>
      </node>
      <node id="10">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/sslclient.h" line="54" column="1" bodyfile="include/dpp/sslclient.h" bodystart="55" bodyend="185"/>
    <listofallmembers>
      <member refid="classdpp_1_1ssl__client_1ae0e5e0799448bf29506bfcc21168d3fa" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>buffer</name></member>
      <member refid="classdpp_1_1ssl__client_1a7b3bbb4e6a9e271c8f19736b36b71d5d" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>bytes_in</name></member>
      <member refid="classdpp_1_1ssl__client_1a8022a8002cfc6f394016546168ef4085" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>bytes_out</name></member>
      <member refid="classdpp_1_1ssl__client_1a5fc2e7836da5485216419bbf17e49428" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>cipher</name></member>
      <member refid="classdpp_1_1ssl__client_1af20b792a7590e0b9457dec6cdb52568a" prot="public" virt="virtual"><scope>dpp::ssl_client</scope><name>close</name></member>
      <member refid="classdpp_1_1ssl__client_1afa72c083a644eba592b5da9392ebc5bd" prot="protected" virt="virtual"><scope>dpp::ssl_client</scope><name>connect</name></member>
      <member refid="classdpp_1_1ssl__client_1aa183564aac368ba97b653260ab5f5b6b" prot="public" virt="non-virtual"><scope>dpp::ssl_client</scope><name>custom_readable_fd</name></member>
      <member refid="classdpp_1_1ssl__client_1a47fa1e38d3b5d26b6913577ffe9c73cd" prot="public" virt="non-virtual"><scope>dpp::ssl_client</scope><name>custom_readable_ready</name></member>
      <member refid="classdpp_1_1ssl__client_1afa81c27a0b2fc2d68b3939e102bf2cbf" prot="public" virt="non-virtual"><scope>dpp::ssl_client</scope><name>custom_writeable_fd</name></member>
      <member refid="classdpp_1_1ssl__client_1aa1a9af1a95e1fb4ac1504de8d591b650" prot="public" virt="non-virtual"><scope>dpp::ssl_client</scope><name>custom_writeable_ready</name></member>
      <member refid="classdpp_1_1ssl__client_1afa5d5654ce0b631d07045088ef347418" prot="public" virt="non-virtual"><scope>dpp::ssl_client</scope><name>get_bytes_in</name></member>
      <member refid="classdpp_1_1ssl__client_1aad4da6489c8f08030ca49c060a23740a" prot="public" virt="non-virtual"><scope>dpp::ssl_client</scope><name>get_bytes_out</name></member>
      <member refid="classdpp_1_1ssl__client_1abf247ed0871e89e6a319c95841a315bd" prot="public" virt="non-virtual"><scope>dpp::ssl_client</scope><name>get_cipher</name></member>
      <member refid="classdpp_1_1ssl__client_1a17e09b948aa1c61cf8c5f73281dd07e6" prot="public" virt="virtual"><scope>dpp::ssl_client</scope><name>handle_buffer</name></member>
      <member refid="classdpp_1_1ssl__client_1a9aab17086711ef6777a01ee0974b5ce8" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>hostname</name></member>
      <member refid="classdpp_1_1ssl__client_1a61f0bbeefa25de686ac93887afa65895" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>last_tick</name></member>
      <member refid="classdpp_1_1ssl__client_1a6037b1a66cf83e022655bd47f0df61a5" prot="public" virt="virtual"><scope>dpp::ssl_client</scope><name>log</name></member>
      <member refid="classdpp_1_1ssl__client_1a1486b3df6780a842552442a25634fcc9" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>nonblocking</name></member>
      <member refid="classdpp_1_1ssl__client_1a1f9600d4fd902c74c6d8b748c359eecc" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>obuffer</name></member>
      <member refid="classdpp_1_1ssl__client_1ae78617d00003abcbfce5446cb6bdde41" prot="protected" virt="virtual"><scope>dpp::ssl_client</scope><name>one_second_timer</name></member>
      <member refid="classdpp_1_1ssl__client_1aa735feca3545e156e0607c06d55288c4" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>plaintext</name></member>
      <member refid="classdpp_1_1ssl__client_1a53cda56d5d61e3371bd7be2424e7ff07" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>port</name></member>
      <member refid="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" prot="public" virt="non-virtual"><scope>dpp::ssl_client</scope><name>read_loop</name></member>
      <member refid="classdpp_1_1ssl__client_1a423ca70d4046067ebe219f85c7baa540" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>sfd</name></member>
      <member refid="classdpp_1_1ssl__client_1a2398ebb5fe51346ca7e97ec162327c4e" prot="protected" virt="non-virtual"><scope>dpp::ssl_client</scope><name>ssl</name></member>
      <member refid="classdpp_1_1ssl__client_1a5b4e115d8a21b01efe0678af9b2d03b7" prot="public" virt="non-virtual"><scope>dpp::ssl_client</scope><name>ssl_client</name></member>
      <member refid="classdpp_1_1ssl__client_1a4d9bde88c0c1926be915c6d232506176" prot="public" virt="virtual"><scope>dpp::ssl_client</scope><name>write</name></member>
      <member refid="classdpp_1_1ssl__client_1ab805a3cc483018dbba6b745f7fa6ff24" prot="public" virt="virtual"><scope>dpp::ssl_client</scope><name>~ssl_client</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
