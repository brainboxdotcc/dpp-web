<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1emoji" kind="class" language="C++" prot="public">
    <compoundname>dpp::emoji</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">emoji.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1emoji_1a54f464b7094256975294cfd3ed9efcc1" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::emoji::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Emoji name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="55" column="13" bodyfile="include/dpp/emoji.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1emoji_1a9032a433eae36211c7d3730543dea0db" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::emoji::user_id</definition>
        <argsstring></argsstring>
        <name>user_id</name>
        <briefdescription>
<para>User id who uploaded the emoji. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="59" column="11" bodyfile="include/dpp/emoji.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1emoji_1aa022607f3828123364721c6420b57f2f" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::emoji::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
<para>Flags for the emoji from <ref refid="namespacedpp_1a79e9b19c1aa69ef048c79d37801b947c" kindref="member">dpp::emoji_flags</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="63" column="9" bodyfile="include/dpp/emoji.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1emoji_1a2ca8d99b2fbca47818c7b2a442858de8" prot="public" static="no" mutable="no">
        <type>std::string *</type>
        <definition>std::string* dpp::emoji::image_data</definition>
        <argsstring></argsstring>
        <name>image_data</name>
        <briefdescription>
<para>Image data for the emoji if uploading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="67" column="13" bodyfile="include/dpp/emoji.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="38" column="11" bodyfile="include/dpp/managed.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1emoji_1aee6f71256204a1882749bf3f8939a2e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::emoji::emoji</definition>
        <argsstring>()</argsstring>
        <name>emoji</name>
        <briefdescription>
<para>Construct a new emoji object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="72" column="1" bodyfile="src/dpp/emoji.cpp" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1aaeb35bb6ddb0b46c4099386ba074a0d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::emoji::emoji</definition>
        <argsstring>(const std::string n, const snowflake i=0, const uint8_t f=0)</argsstring>
        <name>emoji</name>
        <param>
          <type>const std::string</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>i</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>f</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct a new emoji object with name, ID and flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The emoji&apos;s name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>ID, if it has one (unicode does not) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji flags (emoji_flags) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="81" column="1" bodyfile="src/dpp/emoji.cpp" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a0a25072ec7ccc6e5da014fa888c6d8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>dpp::emoji::~emoji</definition>
        <argsstring>()</argsstring>
        <name>~emoji</name>
        <briefdescription>
<para>Destroy the emoji object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="86" column="9" bodyfile="src/dpp/emoji.cpp" bodystart="38" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a01f1788797bbf2bde2b8856f50c280f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
        <definition>emoji &amp; dpp::emoji::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Read class values from json object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="94" column="7" bodyfile="src/dpp/emoji.cpp" bodystart="42" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1ade185b8cd672f2cc8aea02d80935a111" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::emoji::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build the json for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>include the id in the JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string json data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="102" column="13" bodyfile="src/dpp/emoji.cpp" bodystart="60" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a8e664abe1d5e91ea6b34677cf2206fcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::emoji::requires_colons</definition>
        <argsstring>() const</argsstring>
        <name>requires_colons</name>
        <briefdescription>
<para>Emoji requires colons. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true Requires colons </para>
</simplesect>
<simplesect kind="return"><para>false Does not require colons </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="110" column="6" bodyfile="src/dpp/emoji.cpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1ae92572e9263cf62cc3e1cc826d98f5ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::emoji::is_managed</definition>
        <argsstring>() const</argsstring>
        <name>is_managed</name>
        <briefdescription>
<para>Emoji is managed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true Is managed </para>
</simplesect>
<simplesect kind="return"><para>false Is not managed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="118" column="6" bodyfile="src/dpp/emoji.cpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a0ae9784ca14fe91f695d88e5734058ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::emoji::is_animated</definition>
        <argsstring>() const</argsstring>
        <name>is_animated</name>
        <briefdescription>
<para>Emoji is animated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true Is animated </para>
</simplesect>
<simplesect kind="return"><para>false Is noy animated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="126" column="6" bodyfile="src/dpp/emoji.cpp" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1aa9447aeb490efc316f85363bb2b60220" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::emoji::is_available</definition>
        <argsstring>() const</argsstring>
        <name>is_available</name>
        <briefdescription>
<para>Is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true Is available </para>
</simplesect>
<simplesect kind="return"><para>false Is unavailable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="134" column="6" bodyfile="src/dpp/emoji.cpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a33694c119238d58da105c55fdf9dbcd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
        <definition>emoji &amp; dpp::emoji::load_image</definition>
        <argsstring>(const std::string &amp;image_blob, const image_type type)</argsstring>
        <name>load_image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>image_blob</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Load an image into the object as base64. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>Image binary data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of image </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji&amp; Reference to self </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Image content exceeds discord maximum of 256 kilobytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="144" column="7" bodyfile="src/dpp/emoji.cpp" bodystart="88" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a180ce7e313d6ac86277798012e3b7ece" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::emoji::format</definition>
        <argsstring>() const</argsstring>
        <name>format</name>
        <briefdescription>
<para>Format to name if unicode, name:id if has id or a:name:id if animated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Formatted name for reactions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="151" column="13" bodyfile="src/dpp/emoji.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a772e74a4a2e929d7ccc4c242f932a8af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::emoji::get_mention</definition>
        <argsstring>() const</argsstring>
        <name>get_mention</name>
        <briefdescription>
<para>Get the mention/ping for the emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string mention </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="158" column="13" bodyfile="src/dpp/emoji.cpp" bodystart="111" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8" bodyfile="src/dpp/discordevents.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an emoji for a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::emoji</label>
        <link refid="classdpp_1_1emoji"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::emoji</label>
        <link refid="classdpp_1_1emoji"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>image_data</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
      <node id="6">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/emoji.h" line="50" column="1" bodyfile="include/dpp/emoji.h" bodystart="50" bodyend="159"/>
    <listofallmembers>
      <member refid="classdpp_1_1emoji_1ade185b8cd672f2cc8aea02d80935a111" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>build_json</name></member>
      <member refid="classdpp_1_1emoji_1aee6f71256204a1882749bf3f8939a2e9" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>emoji</name></member>
      <member refid="classdpp_1_1emoji_1aaeb35bb6ddb0b46c4099386ba074a0d4" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>emoji</name></member>
      <member refid="classdpp_1_1emoji_1a01f1788797bbf2bde2b8856f50c280f5" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1emoji_1aa022607f3828123364721c6420b57f2f" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>flags</name></member>
      <member refid="classdpp_1_1emoji_1a180ce7e313d6ac86277798012e3b7ece" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>format</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1emoji_1a772e74a4a2e929d7ccc4c242f932a8af" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>get_mention</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>id</name></member>
      <member refid="classdpp_1_1emoji_1a2ca8d99b2fbca47818c7b2a442858de8" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>image_data</name></member>
      <member refid="classdpp_1_1emoji_1a0ae9784ca14fe91f695d88e5734058ad" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>is_animated</name></member>
      <member refid="classdpp_1_1emoji_1aa9447aeb490efc316f85363bb2b60220" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>is_available</name></member>
      <member refid="classdpp_1_1emoji_1ae92572e9263cf62cc3e1cc826d98f5ad" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>is_managed</name></member>
      <member refid="classdpp_1_1emoji_1a33694c119238d58da105c55fdf9dbcd9" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>load_image</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>managed</name></member>
      <member refid="classdpp_1_1emoji_1a54f464b7094256975294cfd3ed9efcc1" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>name</name></member>
      <member refid="classdpp_1_1emoji_1a8e664abe1d5e91ea6b34677cf2206fcc" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>requires_colons</name></member>
      <member refid="classdpp_1_1emoji_1a9032a433eae36211c7d3730543dea0db" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>user_id</name></member>
      <member refid="classdpp_1_1emoji_1a0a25072ec7ccc6e5da014fa888c6d8e9" prot="public" virt="virtual"><scope>dpp::emoji</scope><name>~emoji</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::emoji</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
