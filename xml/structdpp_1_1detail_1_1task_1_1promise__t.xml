<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1detail_1_1task_1_1promise__t" kind="struct" language="C++" prot="public">
    <compoundname>dpp::detail::task::promise_t</compoundname>
    <basecompoundref refid="structdpp_1_1detail_1_1task_1_1promise__base" prot="public" virt="non-virtual">dpp::detail::task::promise_base&lt; R &gt;</basecompoundref>
    <includes local="no">task.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdpp_1_1detail_1_1task_1_1promise__t_1a4f0a7365cb4864a90cb5c11d8ba85b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct final_awaiter&lt; R &gt;</definition>
        <argsstring></argsstring>
        <name>final_awaiter&lt; R &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1detail_1_1task_1_1final__awaiter" kindref="compound">final_awaiter</ref>&lt; R &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="294" column="10" bodyfile="include/dpp/coro/task.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1promise__t_1a4a5ec6543d79738e50abe0d5a61ee4f1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task::promise_t&lt; R &gt;::return_value</definition>
        <argsstring>(R &amp;&amp;expr) noexcept(std::is_nothrow_move_constructible_v&lt; R &gt;)</argsstring>
        <name>return_value</name>
        <param>
          <type>R &amp;&amp;</type>
          <declname>expr</declname>
        </param>
    <requiresclause>std::move_constructible&lt;R&gt;    </requiresclause>
        <briefdescription>
<para>Function called by the standard library when the coroutine co_returns a value. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the value internally to hand to the caller when it resumes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>The value given to co_return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="330" column="6" bodyfile="include/dpp/coro/task.h" bodystart="330" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1promise__t_1ac8266fdb811f31005274ee408cc08ea0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task::promise_t&lt; R &gt;::return_value</definition>
        <argsstring>(const R &amp;expr) noexcept(std::is_nothrow_copy_constructible_v&lt; R &gt;)</argsstring>
        <name>return_value</name>
        <param>
          <type>const R &amp;</type>
          <declname>expr</declname>
        </param>
    <requiresclause>std::copy_constructible&lt;R&gt;    </requiresclause>
        <briefdescription>
<para>Function called by the standard library when the coroutine co_returns a value. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the value internally to hand to the caller when it resumes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>The value given to co_return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="341" column="6" bodyfile="include/dpp/coro/task.h" bodystart="341" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1promise__t_1a1da54a2e4b185a58f003f2de0f11bc44" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dpp::detail::task::promise_t&lt; R &gt;::return_value</definition>
        <argsstring>(T &amp;&amp;expr) noexcept(std::is_nothrow_convertible_v&lt; T, R &gt;)</argsstring>
        <name>return_value</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>expr</declname>
        </param>
    <requiresclause>(!std::is_same_v&lt;R, std::remove_cvref_t&lt;T&gt;&gt; &amp;&amp; std::convertible_to&lt;T, R&gt;)    </requiresclause>
        <briefdescription>
<para>Function called by the standard library when the coroutine co_returns a value. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the value internally to hand to the caller when it resumes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>The value given to co_return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="354" column="6" bodyfile="include/dpp/coro/task.h" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1promise__t_1a68fd0463817d6a2131c528faff23e364" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1task" kindref="compound">dpp::task</ref>&lt; R &gt;</type>
        <definition>dpp::task&lt; R &gt; dpp::detail::task::promise_t&lt; R &gt;::get_return_object</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_return_object</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is created. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classdpp_1_1task" kindref="compound">dpp::task</ref> The coroutine object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="363" column="12" bodyfile="include/dpp/coro/task.h" bodystart="363" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1promise__t_1acd9e25d44a3c6f7e89ef03907ea3b754" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1detail_1_1task_1_1final__awaiter" kindref="compound">final_awaiter</ref>&lt; R &gt;</type>
        <definition>final_awaiter&lt; R &gt; dpp::detail::task::promise_t&lt; R &gt;::final_suspend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>final_suspend</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine reaches its last suspension point. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1detail_1_1task_1_1final__awaiter" kindref="compound">final_awaiter</ref> Special object containing the chain resolution and clean-up logic. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="372" column="16" bodyfile="include/dpp/coro/task.h" bodystart="372" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1promise__base_1a3e55d165c4a53add9adcdaa161092370" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std_coroutine::suspend_never</type>
        <definition>std_coroutine::suspend_never dpp::detail::task::promise_base&lt; R &gt;::initial_suspend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>initial_suspend</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is created. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ulink url="https://en.cppreference.com/w/cpp/coroutine/suspend_never">std::suspend_never</ulink> Don&apos;t suspend, the coroutine starts immediately. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="249" column="31" bodyfile="include/dpp/coro/task.h" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1promise__base_1a7e0acbc2f985cceb4b6af1329df73d61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task::promise_base&lt; R &gt;::unhandled_exception</definition>
        <argsstring>()</argsstring>
        <name>unhandled_exception</name>
        <briefdescription>
<para>Function called by the standard library when an exception is thrown and not caught in the coroutine. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the exception pointer to rethrow on co_await. If the task object is destroyed and was not cancelled, throw instead </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="258" column="6" bodyfile="include/dpp/coro/task.h" bodystart="258" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1promise__base_1afae29aacdf3cc3cb043ee6124ac17fb0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacedpp_1_1detail_1a449419ec6538a4e7f4476940f0041606" kindref="member">awaitable_type</ref></type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto dpp::detail::task::promise_base&lt; R &gt;::await_transform</definition>
        <argsstring>(T &amp;&amp;expr) const noexcept(noexcept(co_await_resolve(std::forward&lt; T &gt;(expr))))</argsstring>
        <name>await_transform</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Function called whenever co_await is used inside of the task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1task__cancelled__exception" kindref="compound">dpp::task_cancelled_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>On resumption if the task was cancelled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1detail_1_1task_1_1promise__base_1_1proxy__awaiter" kindref="compound">proxy_awaiter</ref> Returns a proxy awaiter that will check for cancellation on resumption </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="310" column="7" bodyfile="include/dpp/coro/task.h" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1basic__promise_1a0db85d35ebb20c8ae33fb7bcb8126be8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::basic_promise&lt; R  &gt;::emplace_value</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace_value</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct the result in place by forwarding the arguments, and by default resume any awaiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Notify</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to resume any awaiter or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the promise is not empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="524" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="524" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1basic__promise_1a447db9b10164abd6c003e1c0d7e8c8e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::basic_promise&lt; R  &gt;::set_value</definition>
        <argsstring>(U &amp;&amp;v)</argsstring>
        <name>set_value</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Construct the result by forwarding reference, and resume any awaiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Notify</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to resume any awaiter or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the promise is not empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="547" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="547" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1basic__promise_1a73fd19246018779cdb69160e858b61f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::basic_promise&lt; R  &gt;::set_value</definition>
        <argsstring>()</argsstring>
        <name>set_value</name>
        <briefdescription>
<para>Construct a void result, and resume any awaiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Notify</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to resume any awaiter or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the promise is not empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="559" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="559" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1promise_1_1promise__base_1a3692b8c1d5876c3d5e5cbeacd80ccd21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Notify</declname>
            <defname>Notify</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dpp::detail::promise::promise_base&lt; T &gt;::set_exception</definition>
        <argsstring>(std::exception_ptr ptr)</argsstring>
        <name>set_exception</name>
        <param>
          <type>std::exception_ptr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Set this promise to an exception and resume any awaiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Notify</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to resume any awaiter or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the promise is not empty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>?</parametername>
</parameternamelist>
<parameterdescription>
<para>Any exception thrown by the coroutine if resumed will propagate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="461" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="461" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1promise_1_1promise__base_1ac0f07d73a364294c41a356c625c771a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::promise::promise_base&lt; T &gt;::notify_awaiter</definition>
        <argsstring>()</argsstring>
        <name>notify_awaiter</name>
        <briefdescription>
<para>Notify a currently awaiting coroutine that the result is ready. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This may resume the coroutine on the current thread. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>?</parametername>
</parameternamelist>
<parameterdescription>
<para>Any exception thrown by the coroutine if resumed will propagate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="478" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="478" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1promise_1_1promise__base_1ad8a08251ee1f02a54db0b47086dd0430" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1awaitable" kindref="compound">awaitable</ref>&lt; T &gt;</type>
        <definition>awaitable&lt; T &gt; dpp::detail::promise::promise_base&lt; T &gt;::get_awaitable</definition>
        <argsstring>()</argsstring>
        <name>get_awaitable</name>
        <briefdescription>
<para>Get an awaitable object for this promise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if get_awaitable has already been called on this object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>awaitable&lt;T&gt; An object that can be co_await-ed to retrieve the value of this promise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="490" column="11" bodyfile="include/dpp/coro/awaitable.h" bodystart="490" bodyend="496"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1detail_1_1task_1_1promise__base_1aee864731d67eaf313fc4c8cf8d714951" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; dpp::detail::task::promise_base&lt; R &gt;::cancelled</definition>
        <argsstring></argsstring>
        <name>cancelled</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Whether the task is cancelled or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="232" column="13" bodyfile="include/dpp/coro/task.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classdpp_1_1detail_1_1promise_1_1promise__base_1a05ced1bc5f364cb854aa167e8c68e761" prot="protected" static="no">
        <type>result_t&lt; T &gt;</type>
        <definition>using dpp::detail::promise::promise_base&lt; T &gt;::storage_type =  result_t&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>storage_type</name>
        <briefdescription>
<para>Variant representing one of either 3 states of the result value : empty, result, exception. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="383" column="1" bodyfile="include/dpp/coro/awaitable.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1detail_1_1promise_1_1promise__base_1a22eae277a3f57f66e58ce5b85f200b92" prot="protected" static="no" mutable="no">
        <type><ref refid="classdpp_1_1detail_1_1promise_1_1promise__base_1a05ced1bc5f364cb854aa167e8c68e761" kindref="member">storage_type</ref></type>
        <definition>storage_type dpp::detail::promise::promise_base&lt; T &gt;::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>= std::monostate{}</initializer>
        <briefdescription>
<para>State of the result value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1detail_1_1promise_1_1promise__base_1a05ced1bc5f364cb854aa167e8c68e761" kindref="member">storage_type</ref></para>
</simplesect>
<simplesect kind="note"><para>use .index() instead of std::holds_alternative to support <ref refid="classdpp_1_1detail_1_1promise_1_1promise__base_1ae513ed75fe60ae8ebdf22c92d067b019" kindref="member">promise_base&lt;std::exception_ptr&gt;</ref> and <ref refid="classdpp_1_1detail_1_1promise_1_1promise__base_1ae513ed75fe60ae8ebdf22c92d067b019" kindref="member">promise_base&lt;std::monostate&gt;</ref> :) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="392" column="14" bodyfile="include/dpp/coro/awaitable.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1detail_1_1promise_1_1promise__base_1a14eff25d580b969666ea65ce8e8f3ee5" prot="protected" static="no" mutable="no">
        <type>std::atomic&lt; uint8_t &gt;</type>
        <definition>std::atomic&lt;uint8_t&gt; dpp::detail::promise::promise_base&lt; T &gt;::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <initializer>= sf_none</initializer>
        <briefdescription>
<para>State of the awaitable tied to this promise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="397" column="13" bodyfile="include/dpp/coro/awaitable.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1detail_1_1promise_1_1promise__base_1af9f80c93e2b4017965b49a4f38ee887c" prot="protected" static="no" mutable="no">
        <type>std_coroutine::coroutine_handle</type>
        <definition>std_coroutine::coroutine_handle dpp::detail::promise::promise_base&lt; T &gt;::awaiter</definition>
        <argsstring></argsstring>
        <name>awaiter</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Coroutine handle currently awaiting the completion of this promise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="402" column="2" bodyfile="include/dpp/coro/awaitable.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1detail_1_1promise_1_1promise__base_1a86f602b42edf028332fabf44cab8f41b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::promise::promise_base&lt; T &gt;::throw_if_not_empty</definition>
        <argsstring>()</argsstring>
        <name>throw_if_not_empty</name>
        <briefdescription>
<para>Check if the result is empty, throws otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the result isn&apos;t empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="409" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="409" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1promise_1_1promise__base_1ab30a2a85e4a1dcdd3dd0bd9febcd01f4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std_coroutine::coroutine_handle</type>
        <definition>std_coroutine::coroutine_handle dpp::detail::promise::promise_base&lt; T &gt;::release_awaiter</definition>
        <argsstring>()</argsstring>
        <name>release_awaiter</name>
        <briefdescription>
<para>Unlinks this promise from its currently linked awaiter and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para>At the time of writing this is only used in the case of a serious internal error in <ref refid="classdpp_1_1task" kindref="compound">dpp::task</ref>. Avoid using this as this will crash if the promise is used after this. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="421" column="2" bodyfile="include/dpp/coro/awaitable.h" bodystart="421" bodyend="423"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classdpp_1_1task" kindref="compound">task</ref>&apos;s <ref refid="structdpp_1_1detail_1_1task_1_1promise__t" kindref="compound">promise_t</ref> type, with special logic for handling nested tasks. </para>
    </briefdescription>
    <detaileddescription>
<para>Implementation of <ref refid="structdpp_1_1detail_1_1task_1_1promise__t" kindref="compound">task::promise_t</ref> for non-void return type.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>Return type of the task </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::basic_promise&lt; R &gt;</label>
        <link refid="classdpp_1_1basic__promise"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; R &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::basic_promise&lt; T &gt;</label>
        <link refid="classdpp_1_1basic__promise"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::detail::promise::promise_base&lt; T &gt;</label>
        <link refid="classdpp_1_1detail_1_1promise_1_1promise__base"/>
      </node>
      <node id="6">
        <label>dpp::detail::promise::promise_base&lt; T &gt;</label>
        <link refid="classdpp_1_1detail_1_1promise_1_1promise__base"/>
      </node>
      <node id="2">
        <label>dpp::detail::task::promise_base&lt; R &gt;</label>
        <link refid="structdpp_1_1detail_1_1task_1_1promise__base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::detail::task::promise_t&lt; R &gt;</label>
        <link refid="structdpp_1_1detail_1_1task_1_1promise__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>dpp::basic_promise&lt; R &gt;</label>
        <link refid="classdpp_1_1basic__promise"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; R &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::basic_promise&lt; T &gt;</label>
        <link refid="classdpp_1_1basic__promise"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::detail::promise::promise_base&lt; T &gt;</label>
        <link refid="classdpp_1_1detail_1_1promise_1_1promise__base"/>
        <childnode refid="5" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>awaiter</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>dpp::detail::promise::promise_base&lt; T &gt;</label>
        <link refid="classdpp_1_1detail_1_1promise_1_1promise__base"/>
        <childnode refid="5" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>awaiter</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::detail::task::promise_base&lt; R &gt;</label>
        <link refid="structdpp_1_1detail_1_1task_1_1promise__base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>cancelled</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::detail::task::promise_t&lt; R &gt;</label>
        <link refid="structdpp_1_1detail_1_1task_1_1promise__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>result_t&lt; T &gt;</label>
      </node>
      <node id="6">
        <label>atomic&lt;</label>
      </node>
      <node id="7">
        <label>coroutine_handle</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro/task.h" line="320" column="1" bodyfile="include/dpp/coro/task.h" bodystart="320" bodyend="375"/>
    <listofallmembers>
      <member refid="structdpp_1_1detail_1_1task_1_1promise__base_1afae29aacdf3cc3cb043ee6124ac17fb0" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>await_transform</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1af9f80c93e2b4017965b49a4f38ee887c" prot="protected" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>awaiter</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1promise__base_1aee864731d67eaf313fc4c8cf8d714951" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>cancelled</name></member>
      <member refid="classdpp_1_1basic__promise_1a0db85d35ebb20c8ae33fb7bcb8126be8" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>emplace_value</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1promise__t_1a4f0a7365cb4864a90cb5c11d8ba85b53" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>final_awaiter&lt; R &gt;</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1promise__t_1acd9e25d44a3c6f7e89ef03907ea3b754" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>final_suspend</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1ad8a08251ee1f02a54db0b47086dd0430" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>get_awaitable</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1promise__t_1a68fd0463817d6a2131c528faff23e364" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>get_return_object</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1promise__base_1a3e55d165c4a53add9adcdaa161092370" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>initial_suspend</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1ac0f07d73a364294c41a356c625c771a0" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>notify_awaiter</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1ad57e7b6b9356c568a6ebde925a3f0271" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>operator=</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1a6c93f001ea860a9d2284cb569808a32c" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>operator=</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1ae513ed75fe60ae8ebdf22c92d067b019" prot="protected" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>promise_base</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1a68bfea36f835e91f954ca8e4bc3adfc2" prot="protected" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>promise_base</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1ac439a6106681c55058f73a27db3d4037" prot="protected" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>promise_base</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1ab30a2a85e4a1dcdd3dd0bd9febcd01f4" prot="protected" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>release_awaiter</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1promise__t_1a4a5ec6543d79738e50abe0d5a61ee4f1" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>return_value</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1promise__t_1ac8266fdb811f31005274ee408cc08ea0" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>return_value</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1promise__t_1a1da54a2e4b185a58f003f2de0f11bc44" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>return_value</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1a3692b8c1d5876c3d5e5cbeacd80ccd21" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>set_exception</name></member>
      <member refid="classdpp_1_1basic__promise_1a447db9b10164abd6c003e1c0d7e8c8e1" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>set_value</name></member>
      <member refid="classdpp_1_1basic__promise_1a73fd19246018779cdb69160e858b61f0" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>set_value</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1a14eff25d580b969666ea65ce8e8f3ee5" prot="protected" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>state</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1a05ced1bc5f364cb854aa167e8c68e761" prot="protected" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>storage_type</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1a86f602b42edf028332fabf44cab8f41b" prot="protected" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>throw_if_not_empty</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1promise__base_1a7e0acbc2f985cceb4b6af1329df73d61" prot="public" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>unhandled_exception</name></member>
      <member refid="classdpp_1_1detail_1_1promise_1_1promise__base_1a22eae277a3f57f66e58ce5b85f200b92" prot="protected" virt="non-virtual"><scope>dpp::detail::task::promise_t</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
