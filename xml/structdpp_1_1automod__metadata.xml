<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1automod__metadata" kind="struct" language="C++" prot="public">
    <compoundname>dpp::automod_metadata</compoundname>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; automod_metadata &gt;</basecompoundref>
    <includes local="no">automod.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdpp_1_1automod__metadata_1a7f5a3314f849c04df1e3605551b9ef9c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; automod_metadata &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; automod_metadata &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="structdpp_1_1automod__metadata" kindref="compound">automod_metadata</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="401" column="28" bodyfile="include/dpp/automod.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1automod__metadata_1add05f221746c0ea2b3136b53498d0cf6" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::automod_metadata::keywords</definition>
        <argsstring></argsstring>
        <name>keywords</name>
        <briefdescription>
<para>Substrings which will be searched for in content (Maximum of 1000). </para>
        </briefdescription>
        <detaileddescription>
<para>Each keyword can be a phrase which contains multiple words. All keywords are case insensitive and can be up to 60 characters.</para>
<para>Wildcard symbols (<computeroutput>*</computeroutput>) can be used to customize how each keyword will be matched.</para>
<para><bold>Examples for the <computeroutput>*</computeroutput> wildcard symbol:</bold></para>
<para>Prefix - word must start with the keyword</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>keyword   </para>
</entry><entry thead="yes"><para>matches    </para>
</entry></row>
<row>
<entry thead="no"><para>cat*   </para>
</entry><entry thead="no"><para><underline><bold>cat</bold></underline>ch, <underline><bold>Cat</bold></underline>apult, <underline><bold>CAt</bold></underline>tLE    </para>
</entry></row>
<row>
<entry thead="no"><para>the mat*   </para>
</entry><entry thead="no"><para><underline><bold>the mat</bold></underline>rix   </para>
</entry></row>
</table>
</para>
<para>Suffix - word must end with the keyword</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>keyword   </para>
</entry><entry thead="yes"><para>matches    </para>
</entry></row>
<row>
<entry thead="no"><para>*cat   </para>
</entry><entry thead="no"><para>wild<underline><bold>cat</bold></underline>, copy<underline><bold>Cat</bold></underline>    </para>
</entry></row>
<row>
<entry thead="no"><para>*the mat   </para>
</entry><entry thead="no"><para>brea<underline><bold>the mat</bold></underline>   </para>
</entry></row>
</table>
</para>
<para>Anywhere - keyword can appear anywhere in the content</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>keyword   </para>
</entry><entry thead="yes"><para>matches    </para>
</entry></row>
<row>
<entry thead="no"><para>*cat*   </para>
</entry><entry thead="no"><para>lo<underline><bold>cat</bold></underline>ion, edu<underline><bold>Cat</bold></underline>ion    </para>
</entry></row>
<row>
<entry thead="no"><para>*the mat*   </para>
</entry><entry thead="no"><para>brea<underline><bold>the mat</bold></underline>ter   </para>
</entry></row>
</table>
</para>
<para>Whole Word - keyword is a full word or phrase and must be surrounded by whitespace at the beginning and end</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>keyword   </para>
</entry><entry thead="yes"><para>matches    </para>
</entry></row>
<row>
<entry thead="no"><para>cat   </para>
</entry><entry thead="no"><para><underline><bold>Cat</bold></underline>    </para>
</entry></row>
<row>
<entry thead="no"><para>the mat   </para>
</entry><entry thead="no"><para><underline><bold>the mat</bold></underline>   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="178" column="13" bodyfile="include/dpp/automod.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__metadata_1a855c12dbe234d7cd0365256ac6db4dbe" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::automod_metadata::regex_patterns</definition>
        <argsstring></argsstring>
        <name>regex_patterns</name>
        <briefdescription>
<para>Regular expression patterns which will be matched against content (Maximum of 10). </para>
        </briefdescription>
        <detaileddescription>
<para>Only Rust flavored regex is currently supported, which can be tested in online editors such as <ulink url="https://rustexp.lpil.uk/">Rustexp</ulink>. Each regex pattern can be up to 260 characters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="186" column="13" bodyfile="include/dpp/automod.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__metadata_1a45f0712c30a208c77283481868994d89" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a8d92860238000a25eeff7eed29ec1067" kindref="member">automod_preset_type</ref> &gt;</type>
        <definition>std::vector&lt;automod_preset_type&gt; dpp::automod_metadata::presets</definition>
        <argsstring></argsstring>
        <name>presets</name>
        <briefdescription>
<para>Preset keyword list types to moderate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespacedpp_1a8d92860238000a25eeff7eed29ec1067" kindref="member">automod_preset_type</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="192" column="13" bodyfile="include/dpp/automod.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__metadata_1ae6bdcf68e58d87cb7d03b97ad25de82d" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::automod_metadata::allow_list</definition>
        <argsstring></argsstring>
        <name>allow_list</name>
        <briefdescription>
<para>Substrings which should not trigger the rule (Maximum of 100 for the trigger type <ref refid="namespacedpp_1a6c4401c19cd7e8b05ba2c066f1fdddb6a648f271e93317f37a59fa53ae8bcf292" kindref="member">dpp::amod_type_keyword</ref>, Maximum of 1000 for the trigger type <ref refid="namespacedpp_1a6c4401c19cd7e8b05ba2c066f1fdddb6ad17b8d9b0d990b569290be887484fc05" kindref="member">dpp::amod_type_keyword_preset</ref>). </para>
        </briefdescription>
        <detaileddescription>
<para>Each keyword can be a phrase which contains multiple words. All keywords are case insensitive and can be up to 60 characters.</para>
<para>Wildcard symbols (<computeroutput>*</computeroutput>) can be used to customize how each keyword will be matched.</para>
<para><bold>Examples for the <computeroutput>*</computeroutput> wildcard symbol:</bold></para>
<para>Prefix - word must start with the keyword</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>keyword   </para>
</entry><entry thead="yes"><para>matches    </para>
</entry></row>
<row>
<entry thead="no"><para>cat*   </para>
</entry><entry thead="no"><para><underline><bold>cat</bold></underline>ch, <underline><bold>Cat</bold></underline>apult, <underline><bold>CAt</bold></underline>tLE    </para>
</entry></row>
<row>
<entry thead="no"><para>the mat*   </para>
</entry><entry thead="no"><para><underline><bold>the mat</bold></underline>rix   </para>
</entry></row>
</table>
</para>
<para>Suffix - word must end with the keyword</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>keyword   </para>
</entry><entry thead="yes"><para>matches    </para>
</entry></row>
<row>
<entry thead="no"><para>*cat   </para>
</entry><entry thead="no"><para>wild<underline><bold>cat</bold></underline>, copy<underline><bold>Cat</bold></underline>    </para>
</entry></row>
<row>
<entry thead="no"><para>*the mat   </para>
</entry><entry thead="no"><para>brea<underline><bold>the mat</bold></underline>   </para>
</entry></row>
</table>
</para>
<para>Anywhere - keyword can appear anywhere in the content</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>keyword   </para>
</entry><entry thead="yes"><para>matches    </para>
</entry></row>
<row>
<entry thead="no"><para>*cat*   </para>
</entry><entry thead="no"><para>lo<underline><bold>cat</bold></underline>ion, edu<underline><bold>Cat</bold></underline>ion    </para>
</entry></row>
<row>
<entry thead="no"><para>*the mat*   </para>
</entry><entry thead="no"><para>brea<underline><bold>the mat</bold></underline>ter   </para>
</entry></row>
</table>
</para>
<para>Whole Word - keyword is a full word or phrase and must be surrounded by whitespace at the beginning and end</para>
<para><table rows="3" cols="2"><row>
<entry thead="yes"><para>keyword   </para>
</entry><entry thead="yes"><para>matches    </para>
</entry></row>
<row>
<entry thead="no"><para>cat   </para>
</entry><entry thead="no"><para><underline><bold>Cat</bold></underline>    </para>
</entry></row>
<row>
<entry thead="no"><para>the mat   </para>
</entry><entry thead="no"><para><underline><bold>the mat</bold></underline>   </para>
</entry></row>
</table>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="233" column="13" bodyfile="include/dpp/automod.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__metadata_1a411294739bcfaee90bdc36009ee92f4b" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::automod_metadata::mention_total_limit</definition>
        <argsstring></argsstring>
        <name>mention_total_limit</name>
        <briefdescription>
<para>Total number of unique role and user mentions allowed per message (Maximum of 50) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="238" column="9" bodyfile="include/dpp/automod.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__metadata_1a7529859f52dd6c49cdb7e1f58e8f9127" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::automod_metadata::mention_raid_protection_enabled</definition>
        <argsstring></argsstring>
        <name>mention_raid_protection_enabled</name>
        <briefdescription>
<para>Whether to automatically detect mention raids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="243" column="6" bodyfile="include/dpp/automod.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structdpp_1_1automod__metadata_1a94fb57e5fc51507b08c7cb34e0151c0d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1automod__metadata" kindref="compound">automod_metadata</ref> &amp;</type>
        <definition>automod_metadata &amp; dpp::automod_metadata::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill object properties from JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON to fill from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1automod__metadata" kindref="compound">automod_metadata</ref>&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="129" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1automod__metadata_1a970b89e22d0aea49900550d3df34da02" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>virtual json dpp::automod_metadata::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build a json for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>json JSON object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="136" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1automod__metadata_1a1d341f6dd7507da28acf9c9add164803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::automod_metadata::automod_metadata</definition>
        <argsstring>()</argsstring>
        <name>automod_metadata</name>
        <briefdescription>
<para>Construct a new automod metadata object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1automod__metadata_1a2671a8e5afaf01085b585ed350376809" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::automod_metadata::~automod_metadata</definition>
        <argsstring>()</argsstring>
        <name>~automod_metadata</name>
        <briefdescription>
<para>Destroy the automod metadata object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="253" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1automod__metadata" kindref="compound">automod_metadata</ref> &amp;</type>
        <definition>automod_metadata  &amp; dpp::json_interface&lt; automod_metadata  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; automod_metadata  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; automod_metadata  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Metadata associated with an automod action. Different fields are relevant based on the value of <ref refid="classdpp_1_1automod__rule_1a63b4e5f3a00d26c67914afdf051a5ab4" kindref="member">dpp::automod_rule::trigger_type</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::automod_metadata</label>
        <link refid="structdpp_1_1automod__metadata"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; automod_metadata &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; automod_metadata &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>bool</label>
      </node>
      <node id="1">
        <label>dpp::automod_metadata</label>
        <link refid="structdpp_1_1automod__metadata"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>allow_list</edgelabel>
          <edgelabel>keywords</edgelabel>
          <edgelabel>presets</edgelabel>
          <edgelabel>regex_patterns</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>mention_total_limit</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>mention_raid_protection_enabled</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; automod_metadata &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; automod_metadata &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>vector&lt;</label>
      </node>
      <node id="5">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/automod.h" line="119" column="1" bodyfile="include/dpp/automod.h" bodystart="119" bodyend="254"/>
    <listofallmembers>
      <member refid="structdpp_1_1automod__metadata_1ae6bdcf68e58d87cb7d03b97ad25de82d" prot="public" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>allow_list</name></member>
      <member refid="structdpp_1_1automod__metadata_1a1d341f6dd7507da28acf9c9add164803" prot="public" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>automod_metadata</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>build_json</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1automod__metadata_1a94fb57e5fc51507b08c7cb34e0151c0d" prot="protected" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>fill_from_json_impl</name></member>
      <member refid="structdpp_1_1automod__metadata_1a7f5a3314f849c04df1e3605551b9ef9c" prot="protected" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>json_interface&lt; automod_metadata &gt;</name></member>
      <member refid="structdpp_1_1automod__metadata_1add05f221746c0ea2b3136b53498d0cf6" prot="public" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>keywords</name></member>
      <member refid="structdpp_1_1automod__metadata_1a7529859f52dd6c49cdb7e1f58e8f9127" prot="public" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>mention_raid_protection_enabled</name></member>
      <member refid="structdpp_1_1automod__metadata_1a411294739bcfaee90bdc36009ee92f4b" prot="public" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>mention_total_limit</name></member>
      <member refid="structdpp_1_1automod__metadata_1a45f0712c30a208c77283481868994d89" prot="public" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>presets</name></member>
      <member refid="structdpp_1_1automod__metadata_1a855c12dbe234d7cd0365256ac6db4dbe" prot="public" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>regex_patterns</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::automod_metadata</scope><name>to_json</name></member>
      <member refid="structdpp_1_1automod__metadata_1a970b89e22d0aea49900550d3df34da02" prot="protected" virt="virtual"><scope>dpp::automod_metadata</scope><name>to_json_impl</name></member>
      <member refid="structdpp_1_1automod__metadata_1a2671a8e5afaf01085b585ed350376809" prot="public" virt="virtual"><scope>dpp::automod_metadata</scope><name>~automod_metadata</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
