<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1async" kind="class" language="C++" prot="public">
    <compoundname>dpp::async</compoundname>
    <basecompoundref refid="classdpp_1_1awaitable" prot="public" virt="non-virtual">dpp::awaitable&lt; R &gt;</basecompoundref>
    <includes local="no">coro/async.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classdpp_1_1async_1ad1561d13a56efc7f5c5063b44d18c8db" prot="public" static="no">
        <type>R</type>
        <definition>using dpp::async&lt; R &gt;::result_type =  R</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
<para>The return type of the API call. Defaults to <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="126" column="1" bodyfile="include/dpp/coro/async.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1async_1afbbe2bb466398cb60d2cbf2801a37784" prot="private" static="no" mutable="no">
        <type><ref refid="structdpp_1_1detail_1_1async_1_1callback" kindref="compound">detail::async::callback</ref>&lt; R &gt;</type>
        <definition>detail::async::callback&lt;R&gt; dpp::async&lt; R &gt;::api_callback</definition>
        <argsstring></argsstring>
        <name>api_callback</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Callable object to pass to API calls. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="111" column="25" bodyfile="include/dpp/coro/async.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1async_1a4cc40bc87b38a40c0ec7c3f948e66d1b" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::async&lt; R &gt;::async</definition>
        <argsstring>(std::shared_ptr&lt; basic_promise&lt; R &gt; &gt; &amp;&amp;promise)</argsstring>
        <name>async</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classdpp_1_1basic__promise" kindref="compound">basic_promise</ref>&lt; R &gt; &gt; &amp;&amp;</type>
          <declname>promise</declname>
        </param>
        <briefdescription>
<para>Internal promise constructor, grabs a promise object for the callback to use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="116" column="10" bodyfile="include/dpp/coro/async.h" bodystart="116" bodyend="116"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1async_1aacfe00bd5adfcdace79eaceb929e2b31" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Obj</type>
          </param>
          <param>
            <type>typename Fun</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dpp::async&lt; R &gt;::async</definition>
        <argsstring>(Obj &amp;&amp;obj, Fun &amp;&amp;fun, Args &amp;&amp;... args)</argsstring>
        <name>async</name>
        <param>
          <type>Obj &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>Fun &amp;&amp;</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct an async object wrapping an object method, the call is made immediately by forwarding to <ulink url="https://en.cppreference.com/w/cpp/utility/functional/invoke">std::invoke</ulink> and can be awaited later to retrieve the result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to call the method on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>The method of the object to call. Its last parameter must be a callback taking a parameter of type R </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters to pass to the method, excluding the callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="139" column="10" bodyfile="include/dpp/coro/async.h" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1async_1a5d38b4712ab7f2d4b9dae3ce44377029" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Fun</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dpp::async&lt; R &gt;::async</definition>
        <argsstring>(Fun &amp;&amp;fun, Args &amp;&amp;... args)</argsstring>
        <name>async</name>
        <param>
          <type>Fun &amp;&amp;</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Construct an async object wrapping an invokeable object, the call is made immediately by forwarding to <ulink url="https://en.cppreference.com/w/cpp/utility/functional/invoke">std::invoke</ulink> and can be awaited later to retrieve the result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to call using <ulink url="https://en.cppreference.com/w/cpp/utility/functional/invoke">std::invoke</ulink>. Its last parameter must be a callable taking a parameter of type R </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters to pass to the object, excluding the callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="153" column="10" bodyfile="include/dpp/coro/async.h" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1async_1a1d098f7733f9890192a480a5490553c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::async&lt; R &gt;::async</definition>
        <argsstring>(const async &amp;)=delete</argsstring>
        <name>async</name>
        <param>
          <type>const <ref refid="classdpp_1_1async" kindref="compound">async</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1async_1a1b8a635e0cbba12e750d0fb57497f866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::async&lt; R &gt;::async</definition>
        <argsstring>(async &amp;&amp;)=default</argsstring>
        <name>async</name>
        <param>
          <type><ref refid="classdpp_1_1async" kindref="compound">async</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Move constructor, moves the awaitable async object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1async_1a8c382ce9ce0062b160934c9c16be09d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref> &amp;</type>
        <definition>async &amp; dpp::async&lt; R &gt;::operator=</definition>
        <argsstring>(const async &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1async" kindref="compound">async</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy assignment operator is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="170" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1async_1a347ad32214c7142958e3718165de1af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref> &amp;</type>
        <definition>async &amp; dpp::async&lt; R &gt;::operator=</definition>
        <argsstring>(async &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdpp_1_1async" kindref="compound">async</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Move assignment operator, moves the awaitable async object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="175" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1async_1aae89c11b1a858c061facb6311b2ec45f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::async&lt; R &gt;::~async</definition>
        <argsstring>()</argsstring>
        <name>~async</name>
        <briefdescription>
<para>Destructor, signals to the callback that the async object is gone and shouldn&apos;t be notified of the result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="180" column="1" bodyfile="include/dpp/coro/async.h" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1awaitable_1a2e8ac296160fcb2a4f9c9b17f05c19d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::awaitable&lt; R  &gt;::if_this_causes_an_invalid_read_your_promise_was_destroyed_before_your_awaitable____check_your_promise_lifetime</definition>
        <argsstring>()</argsstring>
        <name>if_this_causes_an_invalid_read_your_promise_was_destroyed_before_your_awaitable____check_your_promise_lifetime</name>
        <briefdescription>
<para>Title :) </para>
        </briefdescription>
        <detaileddescription>
<para>We use this in the destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="303" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="303" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1awaitable_1af5a9d38341cd3290adf06dabf74fc86e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::awaitable&lt; R  &gt;::valid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>valid</name>
        <briefdescription>
<para>Check whether this awaitable refers to a valid promise. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Whether this awaitable refers to a valid promise or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="336" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="654" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1awaitable_1a1e16ffda1db2dcc811334a2ba0c59be3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::awaitable&lt; R  &gt;::await_ready</definition>
        <argsstring>() const</argsstring>
        <name>await_ready</name>
        <briefdescription>
<para>Check whether or not co_await-ing this would suspend the caller, i.e. if we have the result or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Whether we already have the result or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="343" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="659" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1basic__awaitable_1ae532f5a8ec60af0b49e7c02780f36f0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::basic_awaitable&lt; awaitable&lt; R &gt;  &gt;::sync_wait</definition>
        <argsstring>()</argsstring>
        <name>sync_wait</name>
        <briefdescription>
<para>Blocks this thread and waits for the awaitable to finish. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This will BLOCK THE THREAD. It is likely you want to use co_await instead. </para>
</simplesect>
<simplesect kind="return"><para>If T is void, returns a boolean for which true means the awaitable completed, false means it timed out. </para>
</simplesect>
<simplesect kind="return"><para>If T is non-void, returns a std::optional&lt;T&gt; for which an absence of value means timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="153" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="153" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1basic__awaitable_1a44c9ff53eb87f550aaba04ab7d92c183" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::basic_awaitable&lt; awaitable&lt; R &gt;  &gt;::sync_wait_for</definition>
        <argsstring>(const std::chrono::duration&lt; Rep, Period &gt; &amp;duration)</argsstring>
        <name>sync_wait_for</name>
        <param>
          <type>const std::chrono::duration&lt; Rep, Period &gt; &amp;</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>Blocks this thread and waits for the awaitable to finish. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This will BLOCK THE THREAD. It is likely you want to use co_await instead. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum duration to wait for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If T is void, returns a boolean for which true means the awaitable completed, false means it timed out. </para>
</simplesect>
<simplesect kind="return"><para>If T is non-void, returns a std::optional&lt;T&gt; for which an absence of value means timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="170" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="170" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1basic__awaitable_1a39fe143781a89b19052b6e4d35d30ffe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::basic_awaitable&lt; awaitable&lt; R &gt;  &gt;::sync_wait_until</definition>
        <argsstring>(const std::chrono::time_point&lt; Clock, Duration &gt; &amp;time)</argsstring>
        <name>sync_wait_until</name>
        <param>
          <type>const std::chrono::time_point&lt; Clock, Duration &gt; &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Blocks this thread and waits for the awaitable to finish. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This will BLOCK THE THREAD. It is likely you want to use co_await instead. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time point to wait for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If T is void, returns a boolean for which true means the awaitable completed, false means it timed out. </para>
</simplesect>
<simplesect kind="return"><para>If T is non-void, returns a std::optional&lt;T&gt; for which an absence of value means timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="187" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="187" bodyend="193"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classdpp_1_1awaitable_1a9419b84ca1372b18abc65303f6055826" prot="protected" static="no">
        <type>detail::promise::promise_base&lt; R &gt;</type>
        <definition>using dpp::awaitable&lt; R  &gt;::shared_state =  detail::promise::promise_base&lt;R &gt;</definition>
        <argsstring></argsstring>
        <name>shared_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="210" column="1" bodyfile="include/dpp/coro/awaitable.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdpp_1_1awaitable_1a187e3c1460de31c7278c7593790684cf" prot="protected" static="no">
        <type>detail::promise::state_flags</type>
        <definition>using dpp::awaitable&lt; R  &gt;::state_flags =  detail::promise::state_flags</definition>
        <argsstring></argsstring>
        <name>state_flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="211" column="1" bodyfile="include/dpp/coro/awaitable.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1awaitable_1ada827bdde416f47b2164d245b0bae838" prot="protected" static="no" mutable="no">
        <type><ref refid="classdpp_1_1awaitable_1a9419b84ca1372b18abc65303f6055826" kindref="member">shared_state</ref> *</type>
        <definition>shared_state* dpp::awaitable&lt; R  &gt;::state_ptr</definition>
        <argsstring></argsstring>
        <name>state_ptr</name>
        <briefdescription>
<para>Non-owning pointer to the promise, which must be kept alive for the entire lifetime of the awaitable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="221" column="14" bodyfile="include/dpp/coro/awaitable.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1awaitable_1a7d8e184c4b06848b3e46c780a8bfa5a2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>auto dpp::awaitable&lt; R  &gt;::abandon</definition>
        <argsstring>()</argsstring>
        <name>abandon</name>
        <briefdescription>
<para>Abandons the promise. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the promise&apos;s state to broken and unlinks this awaitable.</para>
<para><simplesect kind="return"><para>uint8_t Flags previously held before setting them to broken </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="237" column="9" bodyfile="include/dpp/coro/awaitable.h" bodystart="639" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1basic__awaitable_1ad920651cfc75f83e7977a8dcd6f32a85" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::basic_awaitable&lt; awaitable&lt; R &gt;  &gt;::sync_wait_impl</definition>
        <argsstring>(auto &amp;&amp;do_wait)</argsstring>
        <name>sync_wait_impl</name>
        <param>
          <type>auto &amp;&amp;</type>
          <declname>do_wait</declname>
        </param>
        <briefdescription>
<para>Implementation for sync_wait. This is code used by sync_wait, sync_wait_for, sync_wait_until. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Timed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the wait function times out or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>do_wait</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to do the actual wait on the cv </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If T is void, returns a boolean for which true means the awaitable completed, false means it timed out. </para>
</simplesect>
<simplesect kind="return"><para>If T is non-void, returns a std::optional&lt;T&gt; for which an absence of value means timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="118" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="118" bodyend="143"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A co_await-able object handling an API call in parallel with the caller. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is the return type of the dpp::cluster::co_* methods, but it can also be created manually to wrap any async call.</para>
<para><simplesect kind="remark"><para>- The coroutine may be resumed in another thread, do not rely on thread_local variables. </para>
</simplesect>
<simplesect kind="warning"><para>- This feature is EXPERIMENTAL. The API may change at any time and there may be bugs. Please report any to <ulink url="https://github.com/brainboxdotcc/DPP/issues">GitHub issues</ulink> or to the <ulink url="https://discord.gg/dpp">D++ Discord server</ulink>. </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>The return type of the API call. Defaults to <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::awaitable&lt; R &gt;</label>
        <link refid="classdpp_1_1awaitable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; R &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::basic_awaitable&lt; awaitable&lt; R &gt; &gt;</label>
        <link refid="classdpp_1_1basic__awaitable"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; awaitable&lt; R &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::basic_awaitable&lt; awaitable&lt; T &gt; &gt;</label>
        <link refid="classdpp_1_1basic__awaitable"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; awaitable&lt; T &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::async&lt; R &gt;</label>
        <link refid="classdpp_1_1async"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>dpp::awaitable&lt; T &gt;</label>
        <link refid="classdpp_1_1awaitable"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::basic_awaitable&lt; Derived &gt;</label>
        <link refid="classdpp_1_1basic__awaitable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dpp::awaitable&lt; R &gt;</label>
        <link refid="classdpp_1_1awaitable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>state_ptr</edgelabel>
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; R &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::basic_awaitable&lt; awaitable&lt; R &gt; &gt;</label>
        <link refid="classdpp_1_1basic__awaitable"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; awaitable&lt; R &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>dpp::basic_awaitable&lt; awaitable&lt; T &gt; &gt;</label>
        <link refid="classdpp_1_1basic__awaitable"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; awaitable&lt; T &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::async&lt; R &gt;</label>
        <link refid="classdpp_1_1async"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>dpp::awaitable&lt; T &gt;</label>
        <link refid="classdpp_1_1awaitable"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>state_ptr</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>dpp::basic_awaitable&lt; Derived &gt;</label>
        <link refid="classdpp_1_1basic__awaitable"/>
      </node>
      <node id="5">
        <label>shared_state *</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro/async.h" line="107" column="1" bodyfile="include/dpp/coro/async.h" bodystart="107" bodyend="183"/>
    <listofallmembers>
      <member refid="classdpp_1_1awaitable_1a7d8e184c4b06848b3e46c780a8bfa5a2" prot="protected" virt="non-virtual"><scope>dpp::async</scope><name>abandon</name></member>
      <member refid="classdpp_1_1async_1afbbe2bb466398cb60d2cbf2801a37784" prot="private" virt="non-virtual"><scope>dpp::async</scope><name>api_callback</name></member>
      <member refid="classdpp_1_1async_1a4cc40bc87b38a40c0ec7c3f948e66d1b" prot="private" virt="non-virtual"><scope>dpp::async</scope><name>async</name></member>
      <member refid="classdpp_1_1async_1aacfe00bd5adfcdace79eaceb929e2b31" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>async</name></member>
      <member refid="classdpp_1_1async_1a5d38b4712ab7f2d4b9dae3ce44377029" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>async</name></member>
      <member refid="classdpp_1_1async_1a1d098f7733f9890192a480a5490553c0" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>async</name></member>
      <member refid="classdpp_1_1async_1a1b8a635e0cbba12e750d0fb57497f866" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>async</name></member>
      <member refid="classdpp_1_1awaitable_1a1e16ffda1db2dcc811334a2ba0c59be3" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>await_ready</name></member>
      <member refid="classdpp_1_1awaitable_1a239fbebf6b93a3e1ed8f8718f19d875b" prot="protected" virt="non-virtual"><scope>dpp::async</scope><name>awaitable</name></member>
      <member refid="classdpp_1_1awaitable_1a634f541ee4d28b9f31f638cadd4b81a9" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>awaitable</name></member>
      <member refid="classdpp_1_1awaitable_1a725b917774e7460e254a8939a28710c5" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>awaitable</name></member>
      <member refid="classdpp_1_1awaitable_1aa20d8bcec589fad037e374e76a3ff1a0" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>awaitable</name></member>
      <member refid="classdpp_1_1awaitable_1a2e8ac296160fcb2a4f9c9b17f05c19d0" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>if_this_causes_an_invalid_read_your_promise_was_destroyed_before_your_awaitable____check_your_promise_lifetime</name></member>
      <member refid="classdpp_1_1async_1a8c382ce9ce0062b160934c9c16be09d3" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>operator=</name></member>
      <member refid="classdpp_1_1async_1a347ad32214c7142958e3718165de1af5" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>operator=</name></member>
      <member refid="classdpp_1_1awaitable_1a0cf608ecf0b6b06e18e249f01f7721d2" prot="public" virt="non-virtual" ambiguityscope="awaitable&lt; R &gt;::"><scope>dpp::async</scope><name>operator=</name></member>
      <member refid="classdpp_1_1awaitable_1a0f3794a44b94a3df90c1f2c3903af349" prot="public" virt="non-virtual" ambiguityscope="awaitable&lt; R &gt;::"><scope>dpp::async</scope><name>operator=</name></member>
      <member refid="classdpp_1_1async_1ad1561d13a56efc7f5c5063b44d18c8db" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>result_type</name></member>
      <member refid="classdpp_1_1awaitable_1a9419b84ca1372b18abc65303f6055826" prot="protected" virt="non-virtual"><scope>dpp::async</scope><name>shared_state</name></member>
      <member refid="classdpp_1_1awaitable_1a187e3c1460de31c7278c7593790684cf" prot="protected" virt="non-virtual"><scope>dpp::async</scope><name>state_flags</name></member>
      <member refid="classdpp_1_1awaitable_1ada827bdde416f47b2164d245b0bae838" prot="protected" virt="non-virtual"><scope>dpp::async</scope><name>state_ptr</name></member>
      <member refid="classdpp_1_1basic__awaitable_1ae532f5a8ec60af0b49e7c02780f36f0d" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>sync_wait</name></member>
      <member refid="classdpp_1_1basic__awaitable_1a44c9ff53eb87f550aaba04ab7d92c183" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>sync_wait_for</name></member>
      <member refid="classdpp_1_1basic__awaitable_1ad920651cfc75f83e7977a8dcd6f32a85" prot="protected" virt="non-virtual"><scope>dpp::async</scope><name>sync_wait_impl</name></member>
      <member refid="classdpp_1_1basic__awaitable_1a39fe143781a89b19052b6e4d35d30ffe" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>sync_wait_until</name></member>
      <member refid="classdpp_1_1awaitable_1af5a9d38341cd3290adf06dabf74fc86e" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>valid</name></member>
      <member refid="classdpp_1_1async_1aae89c11b1a858c061facb6311b2ec45f" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>~async</name></member>
      <member refid="classdpp_1_1awaitable_1abc3db69c3b3103409793d093bbef5782" prot="public" virt="non-virtual"><scope>dpp::async</scope><name>~awaitable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
