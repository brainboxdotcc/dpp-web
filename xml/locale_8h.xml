<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="locale_8h" kind="file">
    <compoundname>locale.h</compoundname>
    <includes local="no">locale</includes>
    <includes local="yes">format.h</includes>
    <includedby refid="chrono_8h" local="yes">chrono.h</includedby>
    <incdepgraph>
      <node id="4852">
        <label>locale</label>
      </node>
      <node id="4851">
        <label>locale.h</label>
        <link refid="locale.h"/>
        <childnode refid="4852" relation="include">
        </childnode>
        <childnode refid="4853" relation="include">
        </childnode>
      </node>
      <node id="4853">
        <label>format.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4854">
        <label>locale.h</label>
        <link refid="locale.h"/>
        <childnode refid="4855" relation="include">
        </childnode>
      </node>
      <node id="4855">
        <label>chrono.h</label>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacedetail">detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="locale_8h_1aafa2cd50cd5c5327f81bd41e1683a1ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::basic_string&lt; Char &gt;</type>
        <definition>std::basic_string&lt;Char&gt; vformat</definition>
        <argsstring>(const std::locale &amp;loc, const S &amp;format_str, basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt;&gt;&gt; args)</argsstring>
        <name>vformat</name>
        <param>
          <type>const std::locale &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt;&gt;&gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/fmt/locale.h" line="29" column="1" bodyfile="/home/brain/D++/include/dpp/fmt/locale.h" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="locale_8h_1a9dc0eb0d0b9490dee1c038ffcf3e6b9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::basic_string&lt; Char &gt;</type>
        <definition>std::basic_string&lt;Char&gt; format</definition>
        <argsstring>(const std::locale &amp;loc, const S &amp;format_str, Args &amp;&amp;...args)</argsstring>
        <name>format</name>
        <param>
          <type>const std::locale &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/fmt/locale.h" line="36" column="1" bodyfile="/home/brain/D++/include/dpp/fmt/locale.h" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="locale_8h_1a9897343ab9029ade0e63628a1640560f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_output_iterator&lt; OutputIt, Char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>OutputIt</type>
        <definition>OutputIt vformat_to</definition>
        <argsstring>(OutputIt out, const std::locale &amp;loc, const S &amp;format_str, basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt;&gt;&gt; args)</argsstring>
        <name>vformat_to</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::locale &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt;&gt;&gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/fmt/locale.h" line="45" column="1" bodyfile="/home/brain/D++/include/dpp/fmt/locale.h" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="locale_8h_1ace57aee3605e7fb1204044608d9d499c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>enable</declname>
            <defname>enable</defname>
            <defval>detail::is_output_iterator&lt;OutputIt, char_t&lt;S&gt;&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto format_to</definition>
        <argsstring>(OutputIt out, const std::locale &amp;loc, const S &amp;format_str, Args &amp;&amp;...args) -&gt; typename std::enable_if&lt; enable, OutputIt &gt;::type</argsstring>
        <name>format_to</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::locale &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/fmt/locale.h" line="55" column="1" bodyfile="/home/brain/D++/include/dpp/fmt/locale.h" bodystart="55" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/brain/D++/include/dpp/fmt/locale.h"/>
  </compounddef>
</doxygen>
