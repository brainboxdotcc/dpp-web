<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1automod__rule__execute__t" kind="struct" language="C++" prot="public">
    <compoundname>dpp::automod_rule_execute_t</compoundname>
    <basecompoundref refid="structdpp_1_1event__dispatch__t" prot="public" virt="non-virtual">dpp::event_dispatch_t</basecompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1a8e48264b714092fae15f6dafd2d3bcb1" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule_execute_t::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>the id of the guild in which action was executed </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="292" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1a12befca9a8714c02ab5b2ea5551a7593" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1automod__action" kindref="compound">automod_action</ref></type>
        <definition>automod_action dpp::automod_rule_execute_t::action</definition>
        <argsstring></argsstring>
        <name>action</name>
        <briefdescription>
<para>the action which was executed </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="293" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1aa1622d5f4ea8d3766205901170a6e6ff" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule_execute_t::rule_id</definition>
        <argsstring></argsstring>
        <name>rule_id</name>
        <briefdescription>
<para>the id of the rule which action belongs to </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="294" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1a8d7a325700d175aacdf625d4b6205f32" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a6c4401c19cd7e8b05ba2c066f1fdddb6" kindref="member">automod_trigger_type</ref></type>
        <definition>automod_trigger_type dpp::automod_rule_execute_t::rule_trigger_type</definition>
        <argsstring></argsstring>
        <name>rule_trigger_type</name>
        <briefdescription>
<para>the trigger type of rule which was triggered </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="295" column="21" bodyfile="include/dpp/dispatcher.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1a3956bfeb0642486f4ed2f177d18e87a6" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule_execute_t::user_id</definition>
        <argsstring></argsstring>
        <name>user_id</name>
        <briefdescription>
<para>the id of the user which generated the content which triggered the rule </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="296" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1a1f953bb35d94f5749676a660dc06d363" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule_execute_t::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>Optional: the id of the channel in which user content was posted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="297" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1a74b6763f5e471f9994876e3dc8af8972" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule_execute_t::message_id</definition>
        <argsstring></argsstring>
        <name>message_id</name>
        <briefdescription>
<para>Optional: the id of any user message which content belongs to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="298" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1a40053b5c622fcba9288b4850e35a8c11" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule_execute_t::alert_system_message_id</definition>
        <argsstring></argsstring>
        <name>alert_system_message_id</name>
        <briefdescription>
<para>Optional: the id of any system auto moderation messages posted as a result of this action. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="299" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1a27bd80bc2e23695ca02a05f5daa74df9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::automod_rule_execute_t::content</definition>
        <argsstring></argsstring>
        <name>content</name>
        <briefdescription>
<para>the user generated text content </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="300" column="12" bodyfile="include/dpp/dispatcher.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1afb80aeb2f486dfa796c3e7c88dd09228" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::automod_rule_execute_t::matched_keyword</definition>
        <argsstring></argsstring>
        <name>matched_keyword</name>
        <briefdescription>
<para>the word or phrase configured in the rule that triggered the rule (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="301" column="12" bodyfile="include/dpp/dispatcher.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__rule__execute__t_1a613ae99c2be35a95631bcab407febc54" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::automod_rule_execute_t::matched_content</definition>
        <argsstring></argsstring>
        <name>matched_content</name>
        <briefdescription>
<para>the substring in content that triggered the rule (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="302" column="12" bodyfile="include/dpp/dispatcher.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a22df2fa7e547eaefbd65e501d8bf67b7" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <briefdescription>
<para>Raw event data. If you are using json on your websocket, this will contain json, and if you are using ETF as your websocket protocol, it will contain raw ETF data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="77" column="19" bodyfile="include/dpp/dispatcher.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::event_dispatch_t::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
<para>Shard the event came from. Note that for some events, notably voice events, this may be nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="83" column="22" bodyfile="include/dpp/dispatcher.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1automod__rule__execute__t_1a1b3e95386721b8abd532a1311bb5453e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::automod_rule_execute_t::automod_rule_execute_t</definition>
        <argsstring>(class discord_client *client, const std::string &amp;raw)</argsstring>
        <name>automod_rule_execute_t</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on. CAN BE NULL for log events originating from the cluster object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event text as JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1a5afbcd36109734ad0fca14ec848b73b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>const event_dispatch_t &amp; dpp::event_dispatch_t::cancel_event</definition>
        <argsstring>() const</argsstring>
        <name>cancel_event</name>
        <briefdescription>
<para>Cancels the event in progress. Any other attached lambdas for this event after this one are not called. Note that event cancellation is a thread local state, and not stored in the object (because object which can be cancelled is <computeroutput>const</computeroutput> during the event, and cannot itself contain the changeable state). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref>&amp; reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="99" column="24"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1aca2880114f69b7ba62eb5137824c1432" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::event_dispatch_t::is_cancelled</definition>
        <argsstring>() const</argsstring>
        <name>is_cancelled</name>
        <briefdescription>
<para>Returns true if the event is cancelled. Note that event cancellation is a thread local state, and not stored in the object (because object which can be cancelled is <computeroutput>const</computeroutput> during the event, and cannot itself contain the changeable state). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the event is cancelled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="107" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Execute/trigger automod rule. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::automod_rule_execute_t</label>
        <link refid="structdpp_1_1automod__rule__execute__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="36">
        <label>automod_action_type</label>
      </node>
      <node id="37">
        <label>automod_trigger_type</label>
      </node>
      <node id="8">
        <label>bool</label>
      </node>
      <node id="27">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="17">
        <label>double</label>
      </node>
      <node id="34">
        <label>dpp::automod_action</label>
        <link refid="structdpp_1_1automod__action"/>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>custom_message</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>duration_seconds</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::automod_rule_execute_t</label>
        <link refid="structdpp_1_1automod__rule__execute__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>alert_system_message_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
          <edgelabel>rule_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>action</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>rule_trigger_type</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>content</edgelabel>
          <edgelabel>matched_content</edgelabel>
          <edgelabel>matched_keyword</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="27" relation="usage">
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="3" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ready</edgelabel>
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>reconnects</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
          <edgelabel>last_heartbeat_ack</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>resume_gateway_url</edgelabel>
          <edgelabel>sessionid</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>protocol</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="3" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="19">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="20" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="12" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="3" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>keepalive</edgelabel>
          <edgelabel>make_new</edgelabel>
          <edgelabel>nonblocking</edgelabel>
          <edgelabel>plaintext</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>custom_readable_ready</edgelabel>
          <edgelabel>custom_writeable_ready</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="12" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>event_router_t&lt;</label>
      </node>
      <node id="9">
        <label>int</label>
      </node>
      <node id="35">
        <label>dpp::json_interface&lt; automod_action &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; automod_action &gt;</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>openssl_connection *</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="29">
        <label>condition_variable</label>
      </node>
      <node id="13">
        <label>function&lt; dpp::socket()&gt;</label>
      </node>
      <node id="14">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="32">
        <label>std::shared_mutex</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>native_handle_type</label>
      </node>
      <node id="33">
        <label>unordered_map&lt;</label>
      </node>
      <node id="11">
        <label>time_t</label>
      </node>
      <node id="24">
        <label>uint16_t</label>
      </node>
      <node id="16">
        <label>uint32_t</label>
      </node>
      <node id="12">
        <label>uint64_t</label>
      </node>
      <node id="25">
        <label>uint8_t</label>
      </node>
      <node id="28">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dispatcher.h" line="284" column="1" bodyfile="include/dpp/dispatcher.h" bodystart="284" bodyend="303"/>
    <listofallmembers>
      <member refid="structdpp_1_1automod__rule__execute__t_1a12befca9a8714c02ab5b2ea5551a7593" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>action</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1a40053b5c622fcba9288b4850e35a8c11" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>alert_system_message_id</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1a1b3e95386721b8abd532a1311bb5453e" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>automod_rule_execute_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a5afbcd36109734ad0fca14ec848b73b7" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>cancel_event</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1a1f953bb35d94f5749676a660dc06d363" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>channel_id</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1a27bd80bc2e23695ca02a05f5daa74df9" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>content</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a4ac4d287ca94f2389cf68e2534d9e1b0" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>from</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1a8e48264b714092fae15f6dafd2d3bcb1" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>guild_id</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1aca2880114f69b7ba62eb5137824c1432" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>is_cancelled</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1a613ae99c2be35a95631bcab407febc54" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>matched_content</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1afb80aeb2f486dfa796c3e7c88dd09228" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>matched_keyword</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1a74b6763f5e471f9994876e3dc8af8972" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>message_id</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a22df2fa7e547eaefbd65e501d8bf67b7" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>raw_event</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1aa1622d5f4ea8d3766205901170a6e6ff" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>rule_id</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1a8d7a325700d175aacdf625d4b6205f32" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>rule_trigger_type</name></member>
      <member refid="structdpp_1_1automod__rule__execute__t_1a3956bfeb0642486f4ed2f177d18e87a6" prot="public" virt="non-virtual"><scope>dpp::automod_rule_execute_t</scope><name>user_id</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
