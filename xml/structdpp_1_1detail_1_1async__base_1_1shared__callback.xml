<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1detail_1_1async__base_1_1shared__callback" kind="struct" language="C++" prot="private">
    <compoundname>dpp::detail::async_base::shared_callback</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a5bccab7d36e9a51d8b2522b1b28b2367" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1detail_1_1async__callback__data" kindref="compound">detail::async_callback_data</ref>&lt; R &gt; *</type>
        <definition>detail::async_callback_data&lt;R&gt;* dpp::detail::async_base&lt; R &gt;::shared_callback::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <initializer>= new <ref refid="structdpp_1_1detail_1_1async__callback__data" kindref="compound">detail::async_callback_data</ref>&lt;R&gt;</initializer>
        <briefdescription>
<para>Self-managed ref-counted pointer to the state data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="120" column="29" bodyfile="include/dpp/coro/async.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1aeb234f824bbb1a02ff92e0a03b1097c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::convertible_to&lt; R &gt;</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dpp::detail::async_base&lt; R &gt;::shared_callback::operator()</definition>
        <argsstring>(V &amp;&amp;cback) const</argsstring>
        <name>operator()</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>cback</declname>
        </param>
        <briefdescription>
<para>Callback function. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs the callback data, and if the coroutine was awaiting, resume it <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cback</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the API call. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>Forwarding reference convertible to R </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="130" column="6" bodyfile="include/dpp/coro/async.h" bodystart="130" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a567c8c92e43574c336098e71c036040c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::async_base&lt; R &gt;::shared_callback::shared_callback</definition>
        <argsstring>()=default</argsstring>
        <name>shared_callback</name>
        <briefdescription>
<para>Main constructor, allocates a new callback_state object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1ac8f83266a03570d4b6d61d6fd1c6310b" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::async_base&lt; R &gt;::shared_callback::shared_callback</definition>
        <argsstring>(detail::empty_tag_t) noexcept</argsstring>
        <name>shared_callback</name>
        <param>
          <type><ref refid="structdpp_1_1detail_1_1empty__tag__t" kindref="compound">detail::empty_tag_t</ref></type>
        </param>
        <briefdescription>
<para>Empty constructor, holds no state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="145" column="10" bodyfile="include/dpp/coro/async.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1af169a662904a7cb98e05d3c65f27100d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::async_base&lt; R &gt;::shared_callback::shared_callback</definition>
        <argsstring>(const shared_callback &amp;other) noexcept</argsstring>
        <name>shared_callback</name>
        <param>
          <type>const shared_callback &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. Takes shared ownership of the callback state, increasing the reference count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="150" column="1" bodyfile="include/dpp/coro/async.h" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1adfbf7f55124dde361479edf8dcbef723" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::async_base&lt; R &gt;::shared_callback::shared_callback</definition>
        <argsstring>(shared_callback &amp;&amp;other) noexcept</argsstring>
        <name>shared_callback</name>
        <param>
          <type>shared_callback &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. Transfers ownership from another object, leaving intact the reference count. The other object releases the callback state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="157" column="1" bodyfile="include/dpp/coro/async.h" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1ad14f6f092bfca94aa7714c221a2feb96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::async_base&lt; R &gt;::shared_callback::~shared_callback</definition>
        <argsstring>()</argsstring>
        <name>~shared_callback</name>
        <briefdescription>
<para>Destructor. Releases the held reference and destroys if no other references exist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="164" column="1" bodyfile="include/dpp/coro/async.h" bodystart="164" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1afbe001228ce0c083f8ddd88a05cfa38b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>shared_callback &amp;</type>
        <definition>shared_callback &amp; dpp::detail::async_base&lt; R &gt;::shared_callback::operator=</definition>
        <argsstring>(const shared_callback &amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const shared_callback &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment. Takes shared ownership of the callback state, increasing the reference count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="177" column="17" bodyfile="include/dpp/coro/async.h" bodystart="177" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a064853867169dec4a2c3460ccc8e6c8c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>shared_callback &amp;</type>
        <definition>shared_callback &amp; dpp::detail::async_base&lt; R &gt;::shared_callback::operator=</definition>
        <argsstring>(shared_callback &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>shared_callback &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment. Transfers ownership from another object, leaving intact the reference count. The other object releases the callback state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="186" column="17" bodyfile="include/dpp/coro/async.h" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a47a0a2b3c8e09d51bbbca13af5d9baeb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::async_base&lt; R &gt;::shared_callback::set_dangling</definition>
        <argsstring>() noexcept</argsstring>
        <name>set_dangling</name>
        <briefdescription>
<para>Function called by the async when it is destroyed when it was never co_awaited, signals to the callback to abort. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="194" column="6" bodyfile="include/dpp/coro/async.h" bodystart="194" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a4e6fe326fd65de9bb0b3b4c525b4dfc7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::detail::async_base&lt; R &gt;::shared_callback::done</definition>
        <argsstring>(std::memory_order order=std::memory_order_seq_cst) const noexcept</argsstring>
        <name>done</name>
        <param>
          <type>std::memory_order</type>
          <declname>order</declname>
          <defval>std::memory_order_seq_cst</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="200" column="6" bodyfile="include/dpp/coro/async.h" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a1bb6685154a4b1af7fff229775c5bf82" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>R &amp;</type>
        <definition>R &amp; dpp::detail::async_base&lt; R &gt;::shared_callback::get_result</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_result</name>
        <briefdescription>
<para>Convenience function to get the shared callback state&apos;s result. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>It is UB to call this on a callback whose state is anything else but <ref refid="namespacedpp_1_1detail_1ab8f8992a67c42dc3b707c8397c3e669ca6b2ded51d81a4403d8a4bd25fa1e57ee" kindref="member">async_state_t::done</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="209" column="3" bodyfile="include/dpp/coro/async.h" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a16fb310dbccece7f71402a13f22ad67e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const R &amp;</type>
        <definition>const R &amp; dpp::detail::async_base&lt; R &gt;::shared_callback::get_result</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_result</name>
        <briefdescription>
<para>Convenience function to get the shared callback state&apos;s result. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>It is UB to call this on a callback whose state is anything else but <ref refid="namespacedpp_1_1detail_1ab8f8992a67c42dc3b707c8397c3e669ca6b2ded51d81a4403d8a4bd25fa1e57ee" kindref="member">async_state_t::done</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/async.h" line="219" column="9" bodyfile="include/dpp/coro/async.h" bodystart="219" bodyend="222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Ref-counted callback, contains the callback logic and manages the lifetime of the callback data over multiple threads. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>async_callback_data&lt;</label>
      </node>
      <node id="1">
        <label>dpp::detail::async_base&lt; R &gt;::shared_callback</label>
        <childnode refid="2" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro/async.h" line="116" column="1" bodyfile="include/dpp/coro/async.h" bodystart="116" bodyend="223"/>
    <listofallmembers>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a4e6fe326fd65de9bb0b3b4c525b4dfc7" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>done</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a1bb6685154a4b1af7fff229775c5bf82" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>get_result</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a16fb310dbccece7f71402a13f22ad67e" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>get_result</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1aeb234f824bbb1a02ff92e0a03b1097c0" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>operator()</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1afbe001228ce0c083f8ddd88a05cfa38b" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>operator=</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a064853867169dec4a2c3460ccc8e6c8c" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>operator=</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a47a0a2b3c8e09d51bbbca13af5d9baeb" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>set_dangling</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a567c8c92e43574c336098e71c036040c" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>shared_callback</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1ac8f83266a03570d4b6d61d6fd1c6310b" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>shared_callback</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1af169a662904a7cb98e05d3c65f27100d" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>shared_callback</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1adfbf7f55124dde361479edf8dcbef723" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>shared_callback</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1a5bccab7d36e9a51d8b2522b1b28b2367" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>state</name></member>
      <member refid="structdpp_1_1detail_1_1async__base_1_1shared__callback_1ad14f6f092bfca94aa7714c221a2feb96" prot="public" virt="non-virtual"><scope>dpp::detail::async_base::shared_callback</scope><name>~shared_callback</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
