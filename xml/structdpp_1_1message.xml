<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdpp_1_1message" kind="struct" prot="public">
    <compoundname>dpp::message</compoundname>
    <includes local="no">message.h</includes>
    <innerclass refid="structdpp_1_1message_1_1allowed__ref" prot="public">dpp::message::allowed_ref</innerclass>
    <innerclass refid="structdpp_1_1message_1_1message__interaction__struct" prot="public">dpp::message::message_interaction_struct</innerclass>
    <innerclass refid="structdpp_1_1message_1_1message__ref" prot="public">dpp::message::message_ref</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1message_1a7c1e0cc707a4168b75945da0d31105a0" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::message::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>id of the message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="843" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1adceaf61877eede79f0ebeb14efa74b5e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::message::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>id of the channel the message was sent in </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="845" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a5e75f7cd8a7e952e6621c520627d5b84" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::message::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: id of the guild the message was sent in </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="847" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a35c14f04382266b29c4ca076b4e0f9e0" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref> *</type>
        <definition>user* dpp::message::author</definition>
        <argsstring></argsstring>
        <name>author</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the author of this message (not guaranteed to be a valid user) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="849" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a550f3dc37e4b55cccc2e78d90fc047fb" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref></type>
        <definition>guild_member dpp::message::member</definition>
        <argsstring></argsstring>
        <name>member</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: member properties for this message&apos;s author </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="851" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1acb17877db423d2ac4b103a67e1ae2ff6" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message::content</definition>
        <argsstring></argsstring>
        <name>content</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>contents of the message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="853" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ab9cb60fc35159bfa604164c5574a4957" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref> &gt;</type>
        <definition>std::vector&lt;dpp::component&gt; dpp::message::components</definition>
        <argsstring></argsstring>
        <name>components</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>message components </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="855" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="855" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a9991c58453a1deb7b785a6b7457372f2" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::message::sent</definition>
        <argsstring></argsstring>
        <name>sent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when this message was sent </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="857" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a94f1f6750ca95e4bb66f069d9b4b3a54" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::message::edited</definition>
        <argsstring></argsstring>
        <name>edited</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when this message was edited (may be 0 if never edited) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="859" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a8f4ab5546606db3ea4bcdb41b60a5dba" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::message::tts</definition>
        <argsstring></argsstring>
        <name>tts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether this was a TTS message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="861" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a499cacfe6a270dca773fc7f91718ac70" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::message::mention_everyone</definition>
        <argsstring></argsstring>
        <name>mention_everyone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether this message mentions everyone </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="863" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a96f97a2ade23d3f58b221f98c60d9950" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::message::mentions</definition>
        <argsstring></argsstring>
        <name>mentions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>users specifically mentioned in the message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="865" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a1f9fbfe4171cdc02306dc505583b7ed9" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::message::mention_roles</definition>
        <argsstring></argsstring>
        <name>mention_roles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>roles specifically mentioned in this message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="867" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ae161a71904462eab6bdd539f4ff32332" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::message::mention_channels</definition>
        <argsstring></argsstring>
        <name>mention_channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: channels specifically mentioned in this message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="869" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1aa59a613a4ee0bab7f9a5ea18fe7edea7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1attachment" kindref="compound">attachment</ref> &gt;</type>
        <definition>std::vector&lt;attachment&gt; dpp::message::attachments</definition>
        <argsstring></argsstring>
        <name>attachments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>any attached files </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="871" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a9c0eb22ba371ead6d960bdf7c9838b6e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &gt;</type>
        <definition>std::vector&lt;embed&gt; dpp::message::embeds</definition>
        <argsstring></argsstring>
        <name>embeds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>zero or more <ref refid="structdpp_1_1embed" kindref="compound">dpp::embed</ref> objects </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="873" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="873" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1af6c6ea9f1319adde40d068a2e9b230e7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1reaction" kindref="compound">reaction</ref> &gt;</type>
        <definition>std::vector&lt;reaction&gt; dpp::message::reactions</definition>
        <argsstring></argsstring>
        <name>reactions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: reactions to the message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="875" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1afaaf4f44ce0631c49c15088b033d25e6" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message::nonce</definition>
        <argsstring></argsstring>
        <name>nonce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: used for validating a message was sent </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="877" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="877" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a029932133e0a6aea2afdea5f2d98146e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::message::pinned</definition>
        <argsstring></argsstring>
        <name>pinned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether this message is pinned </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="879" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="879" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ad1033bc27c5c1436c2e321d1be1d65ed" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::message::webhook_id</definition>
        <argsstring></argsstring>
        <name>webhook_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: if the message is generated by a webhook, its id will be here otherwise the field will be 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="881" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a16fca6ff4595e0fcab2305205eb54626" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::message::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="883" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="883" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a8ab53932e4cf4fa00d021a5ca3f4b906" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &gt;</type>
        <definition>std::vector&lt;sticker&gt; dpp::message::stickers</definition>
        <argsstring></argsstring>
        <name>stickers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stickers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="885" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a9f158cde13b3916c9823b18865b24f41" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message::filename</definition>
        <argsstring></argsstring>
        <name>filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Name of file to upload (for use server-side in discord&apos;s url) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="888" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="888" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a020ceaaad56ff4af60e2325a3cb9fbc7" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message::filecontent</definition>
        <argsstring></argsstring>
        <name>filecontent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>File content to upload (raw binary) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="891" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="891" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a2ed7eaf6f5ff69a94fcb4912c0c795c2" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::message::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Message type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="894" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a01de1e67af35ecb77549ccbe94ab7185" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref></type>
        <definition>user dpp::message::self_author</definition>
        <argsstring></argsstring>
        <name>self_author</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Self allocated user for caching being off </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="897" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a6de961520d75562cf61244e1da63543d" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structdpp_1_1message_1_1message__ref" kindref="compound">dpp::message::message_ref</ref></type>
        <definition>struct dpp::message::message_ref  dpp::message::message_reference</definition>
        <argsstring></argsstring>
        <name>message_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="908" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a674f8896974df8c4c21673ebfef79e61" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structdpp_1_1message_1_1message__interaction__struct" kindref="compound">dpp::message::message_interaction_struct</ref></type>
        <definition>struct dpp::message::message_interaction_struct  dpp::message::interaction</definition>
        <argsstring></argsstring>
        <name>interaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="919" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a6c59498ae2c014b13eb714c494e6493c" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structdpp_1_1message_1_1allowed__ref" kindref="compound">dpp::message::allowed_ref</ref></type>
        <definition>struct dpp::message::allowed_ref  dpp::message::allowed_mentions</definition>
        <argsstring></argsstring>
        <name>allowed_mentions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="928" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1message_1a717067505cfc5f5dcf05459c216c9756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>()</argsstring>
        <name>message</name>
        <briefdescription>
<para>Construct a new message object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="933" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="253" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a4b176cfde5ca415d09dedf3d6156ee97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::~message</definition>
        <argsstring>()</argsstring>
        <name>~message</name>
        <briefdescription>
<para>Destroy the message object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="938" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="775" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a21466e050ee9c0646392ccf5940bb62a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(snowflake channel_id, const std::string &amp;content, message_type type=mt_default)</argsstring>
        <name>message</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bc" kindref="member">message_type</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bcac7573c73d464b30ffd2fee74f8618152" kindref="member">mt_default</ref></defval>
        </param>
        <briefdescription>
<para>Construct a new message object with a channel and content. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to create </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="947" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="291" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a0e71afdc706c7ae83934ddfd8c2ffc38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(snowflake channel_id, const embed &amp;_embed)</argsstring>
        <name>message</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
          <declname>_embed</declname>
        </param>
        <briefdescription>
<para>Construct a new message object with a channel and content. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send the message to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_embed</parametername>
</parameternamelist>
<parameterdescription>
<para>An embed to send </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="955" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a45a0883a10a19e933fbba682aba212f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(const std::string &amp;content, message_type type=mt_default)</argsstring>
        <name>message</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bc" kindref="member">message_type</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bcac7573c73d464b30ffd2fee74f8618152" kindref="member">mt_default</ref></defval>
        </param>
        <briefdescription>
<para>Construct a new message object with content. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to create </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="963" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a8649d77de4e7b1c89b90016d3692f283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_reference</definition>
        <argsstring>(snowflake _message_id, snowflake _guild_id=0, snowflake _channel_id=0, bool fail_if_not_exists=false)</argsstring>
        <name>set_reference</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>_message_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>_guild_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>_channel_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fail_if_not_exists</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Set the original message reference for replies/crossposts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>message id to reply to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>guild id to reply to (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>channel id to reply to (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail_if_not_exists</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the message send should fail if these values are invalid (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="974" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="273" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a13389a16cb9bec891527d2405dfed913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_allowed_mentions</definition>
        <argsstring>(bool _parse_users, bool _parse_roles, bool _parse_everyone, bool _replied_user, const std::vector&lt; snowflake &gt; &amp;users, const std::vector&lt; snowflake &gt; &amp;roles)</argsstring>
        <name>set_allowed_mentions</name>
        <param>
          <type>bool</type>
          <declname>_parse_users</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_parse_roles</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_parse_everyone</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_replied_user</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt; &amp;</type>
          <declname>users</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt; &amp;</type>
          <declname>roles</declname>
        </param>
        <briefdescription>
<para>Set the allowed mentions object for pings on the message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_parse_users</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to parse users in the message content or embeds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_parse_roles</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to parse roles in the message content or embeds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_parse_everyone</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to parse everyone/here in the message content or embeds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_replied_user</parametername>
</parameternamelist>
<parameterdescription>
<para>if set to true and this is a reply, then ping the user we reply to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>list of user ids to allow pings for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roles</parametername>
</parameternamelist>
<parameterdescription>
<para>list of role ids to allow pings for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="987" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="281" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a7e15337119679e582768d794b409cffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::fill_from_json</definition>
        <argsstring>(nlohmann::json *j, cache_policy_t cp={cp_aggressive, cp_aggressive, cp_aggressive})</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdpp_1_1cache__policy__t" kindref="compound">cache_policy_t</ref></type>
          <declname>cp</declname>
          <defval>{<ref refid="namespacedpp_1ace5c63d91b72c5bae7d8cf9d8f531e52a81a53a5c84326ed9419729871d0af46e" kindref="member">cp_aggressive</ref>, <ref refid="namespacedpp_1ace5c63d91b72c5bae7d8cf9d8f531e52a81a53a5c84326ed9419729871d0af46e" kindref="member">cp_aggressive</ref>, <ref refid="namespacedpp_1ace5c63d91b72c5bae7d8cf9d8f531e52a81a53a5c84326ed9419729871d0af46e" kindref="member">cp_aggressive</ref>}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill this object from json. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON object to fill from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cp</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache policy for user records, whether or not we cache users when a message is received </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="994" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="779" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ae2a5e3ddd0eadd028a33d755e567fe86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::message::build_json</definition>
        <argsstring>(bool with_id=false, bool is_interaction_response=false) const </argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_interaction_response</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build JSON from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the ID is to be included in the built JSON </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_interaction_response</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true if this message is intended to be included in an interaction response. This will exclude some fields that are not valid in interactions at this time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON text of the message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1002" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="541" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a29b1e13e6eebcc8529f50a3a403c17e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_crossposted</definition>
        <argsstring>() const </argsstring>
        <name>is_crossposted</name>
        <briefdescription>
<para>Returns true if the message was crossposted to other servers. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if crossposted </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1009" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="742" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a30ec8f9aa1d210b047826adecfe7e5fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_crosspost</definition>
        <argsstring>() const </argsstring>
        <name>is_crosspost</name>
        <briefdescription>
<para>Returns true if posted from other servers news channel via webhook. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if posted from other server </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1016" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="746" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ac131de2cea0b34ca67c8871659ac02a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::suppress_embeds</definition>
        <argsstring>() const </argsstring>
        <name>suppress_embeds</name>
        <briefdescription>
<para>True if embeds have been removed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if embeds removed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1023" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="751" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a000f28d53465976ca14e77baf57848ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_source_message_deleted</definition>
        <argsstring>() const </argsstring>
        <name>is_source_message_deleted</name>
        <briefdescription>
<para>True if source message was deleted. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if source message deleted </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1030" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="755" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ade2685318c082418fd1b02613e19542b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_urgent</definition>
        <argsstring>() const </argsstring>
        <name>is_urgent</name>
        <briefdescription>
<para>True if urgent. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if urgent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1037" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="759" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a9561b3d3bd3e0e0f111c045a3a410adf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::has_thread</definition>
        <argsstring>() const </argsstring>
        <name>has_thread</name>
        <briefdescription>
<para>True if has thread attached. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has thread attached </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1044" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="763" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1addf240902f592afc3418f9af686a7484" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_ephemeral</definition>
        <argsstring>() const </argsstring>
        <name>is_ephemeral</name>
        <briefdescription>
<para>True if ephemeral (visible only to issuer of a slash command) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ephemeral </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1051" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="767" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a7227dae2580372f1f47ab13442da0d1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_loading</definition>
        <argsstring>() const </argsstring>
        <name>is_loading</name>
        <briefdescription>
<para>True if loading. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if loading </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1058" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="771" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a85dbf0b4a0b294eac34ec49feb1d4540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::add_component</definition>
        <argsstring>(const component &amp;c)</argsstring>
        <name>add_component</name>
        <param>
          <type>const <ref refid="classdpp_1_1component" kindref="compound">component</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Add a component (button) to message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>component to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1066" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="297" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a9ff92caceb655fa1f89710445a24c107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::add_embed</definition>
        <argsstring>(const embed &amp;e)</argsstring>
        <name>add_embed</name>
        <param>
          <type>const <ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Add an embed to message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>embed to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1074" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="303" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a3895655222ad8f3b9d9b96c47afb2454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_flags</definition>
        <argsstring>(uint8_t f)</argsstring>
        <name>set_flags</name>
        <param>
          <type>uint8_t</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Set the flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>flags to set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1082" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="309" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ada2f9404e7dbb12b3de0a382c3733587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_type</definition>
        <argsstring>(message_type t)</argsstring>
        <name>set_type</name>
        <param>
          <type><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bc" kindref="member">message_type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set the message type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>type to set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1090" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="315" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a95675acbf18ed30c5141d3180842611f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_filename</definition>
        <argsstring>(const std::string &amp;fn)</argsstring>
        <name>set_filename</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Set the filename. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>filename </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1098" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="321" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a7063a512a6e7f078e2a81bad077dfcde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_file_content</definition>
        <argsstring>(const std::string &amp;fc)</argsstring>
        <name>set_file_content</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fc</declname>
        </param>
        <briefdescription>
<para>Set the file content. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>raw file content contained in std::string </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1106" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="327" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a18a1ebb4b981a0ef46f78f147aa12b66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_content</definition>
        <argsstring>(const std::string &amp;c)</argsstring>
        <name>set_content</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Set the message content. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>message content </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="1114" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="333" bodyend="337"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents messages sent and received on Discord. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="12463">
        <label>dpp::attachment</label>
        <link refid="structdpp_1_1attachment"/>
        <childnode refid="12464" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="12465" relation="usage">
          <edgelabel>width</edgelabel>
          <edgelabel>size</edgelabel>
          <edgelabel>height</edgelabel>
        </childnode>
        <childnode refid="12466" relation="usage">
          <edgelabel>ephemeral</edgelabel>
        </childnode>
        <childnode refid="12467" relation="usage">
          <edgelabel>content_type</edgelabel>
          <edgelabel>url</edgelabel>
          <edgelabel>proxy_url</edgelabel>
          <edgelabel>filename</edgelabel>
        </childnode>
      </node>
      <node id="12476">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="12477" relation="public-inheritance">
        </childnode>
        <childnode refid="12478" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="12465" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="12471" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="12467" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="12479" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="12473">
        <label>std::vector&lt; dpp::dpp::component &gt;</label>
        <childnode refid="12474" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12474">
        <label>component</label>
      </node>
      <node id="12470">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="12469" relation="usage">
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="12464" relation="usage">
          <edgelabel>user_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
        </childnode>
        <childnode refid="12471" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="12467" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="12472" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
      </node>
      <node id="12483">
        <label>dpp::message::message_ref</label>
        <link refid="structdpp_1_1message_1_1message__ref"/>
        <childnode refid="12464" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="12466" relation="usage">
          <edgelabel>fail_if_not_exists</edgelabel>
        </childnode>
      </node>
      <node id="12484">
        <label>std::vector&lt; dpp::embed &gt;</label>
        <childnode refid="12485" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12464">
        <label>uint64_t</label>
      </node>
      <node id="12487">
        <label>std::vector&lt; dpp::embed_field &gt;</label>
        <childnode refid="12488" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12493">
        <label>dpp::sticker</label>
        <link refid="structdpp_1_1sticker"/>
        <childnode refid="12494" relation="usage">
          <edgelabel>format_type</edgelabel>
        </childnode>
        <childnode refid="12464" relation="usage">
          <edgelabel>pack_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="12476" relation="usage">
          <edgelabel>sticker_user</edgelabel>
        </childnode>
        <childnode refid="12471" relation="usage">
          <edgelabel>sort_value</edgelabel>
        </childnode>
        <childnode refid="12466" relation="usage">
          <edgelabel>available</edgelabel>
        </childnode>
        <childnode refid="12467" relation="usage">
          <edgelabel>filecontent</edgelabel>
          <edgelabel>asset</edgelabel>
          <edgelabel>tags</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>filename</edgelabel>
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="12495" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="12492">
        <label>std::vector&lt; dpp::sticker &gt;</label>
        <childnode refid="12493" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12488">
        <label>dpp::embed_field</label>
        <link refid="structdpp_1_1embed__field"/>
        <childnode refid="12466" relation="usage">
          <edgelabel>is_inline</edgelabel>
        </childnode>
        <childnode refid="12467" relation="usage">
          <edgelabel>value</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="12478">
        <label>uint16_t</label>
      </node>
      <node id="12469">
        <label>time_t</label>
      </node>
      <node id="12468">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="12479">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="12464" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="12489">
        <label>optional&lt; dpp::embed_provider &gt;</label>
      </node>
      <node id="12465">
        <label>uint32_t</label>
      </node>
      <node id="12494">
        <label>sticker_format</label>
      </node>
      <node id="12471">
        <label>uint8_t</label>
      </node>
      <node id="12485">
        <label>dpp::embed</label>
        <link refid="structdpp_1_1embed"/>
        <childnode refid="12486" relation="usage">
          <edgelabel>video</edgelabel>
          <edgelabel>thumbnail</edgelabel>
          <edgelabel>image</edgelabel>
        </childnode>
        <childnode refid="12469" relation="usage">
          <edgelabel>timestamp</edgelabel>
        </childnode>
        <childnode refid="12487" relation="usage">
          <edgelabel>fields</edgelabel>
        </childnode>
        <childnode refid="12465" relation="usage">
          <edgelabel>color</edgelabel>
        </childnode>
        <childnode refid="12489" relation="usage">
          <edgelabel>provider</edgelabel>
        </childnode>
        <childnode refid="12467" relation="usage">
          <edgelabel>title</edgelabel>
          <edgelabel>url</edgelabel>
          <edgelabel>type</edgelabel>
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="12490" relation="usage">
          <edgelabel>footer</edgelabel>
        </childnode>
        <childnode refid="12491" relation="usage">
          <edgelabel>author</edgelabel>
        </childnode>
      </node>
      <node id="12491">
        <label>optional&lt; dpp::embed_author &gt;</label>
      </node>
      <node id="12480">
        <label>dpp::message::allowed_ref</label>
        <link refid="structdpp_1_1message_1_1allowed__ref"/>
        <childnode refid="12466" relation="usage">
          <edgelabel>replied_user</edgelabel>
          <edgelabel>parse_roles</edgelabel>
          <edgelabel>parse_everyone</edgelabel>
          <edgelabel>parse_users</edgelabel>
        </childnode>
        <childnode refid="12472" relation="usage">
          <edgelabel>users</edgelabel>
          <edgelabel>roles</edgelabel>
        </childnode>
      </node>
      <node id="12495">
        <label>sticker_type</label>
      </node>
      <node id="12486">
        <label>optional&lt; dpp::embed_image &gt;</label>
      </node>
      <node id="12477">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="12464" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="12490">
        <label>optional&lt; dpp::embed_footer &gt;</label>
      </node>
      <node id="12482">
        <label>dpp::reaction</label>
        <link refid="structdpp_1_1reaction"/>
        <childnode refid="12464" relation="usage">
          <edgelabel>emoji_id</edgelabel>
        </childnode>
        <childnode refid="12465" relation="usage">
          <edgelabel>count</edgelabel>
        </childnode>
        <childnode refid="12467" relation="usage">
          <edgelabel>emoji_name</edgelabel>
        </childnode>
        <childnode refid="12466" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
      </node>
      <node id="12462">
        <label>std::vector&lt; dpp::attachment &gt;</label>
        <childnode refid="12463" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12461">
        <label>dpp::message</label>
        <link refid="structdpp_1_1message"/>
        <childnode refid="12462" relation="usage">
          <edgelabel>attachments</edgelabel>
        </childnode>
        <childnode refid="12469" relation="usage">
          <edgelabel>edited</edgelabel>
          <edgelabel>sent</edgelabel>
        </childnode>
        <childnode refid="12464" relation="usage">
          <edgelabel>webhook_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="12470" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="12473" relation="usage">
          <edgelabel>components</edgelabel>
        </childnode>
        <childnode refid="12475" relation="usage">
          <edgelabel>interaction</edgelabel>
        </childnode>
        <childnode refid="12476" relation="usage">
          <edgelabel>self_author</edgelabel>
          <edgelabel>author</edgelabel>
        </childnode>
        <childnode refid="12471" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="12466" relation="usage">
          <edgelabel>pinned</edgelabel>
          <edgelabel>mention_everyone</edgelabel>
          <edgelabel>tts</edgelabel>
        </childnode>
        <childnode refid="12467" relation="usage">
          <edgelabel>filecontent</edgelabel>
          <edgelabel>nonce</edgelabel>
          <edgelabel>content</edgelabel>
          <edgelabel>filename</edgelabel>
        </childnode>
        <childnode refid="12480" relation="usage">
          <edgelabel>allowed_mentions</edgelabel>
        </childnode>
        <childnode refid="12472" relation="usage">
          <edgelabel>mentions</edgelabel>
          <edgelabel>mention_channels</edgelabel>
          <edgelabel>mention_roles</edgelabel>
        </childnode>
        <childnode refid="12481" relation="usage">
          <edgelabel>reactions</edgelabel>
        </childnode>
        <childnode refid="12483" relation="usage">
          <edgelabel>message_reference</edgelabel>
        </childnode>
        <childnode refid="12484" relation="usage">
          <edgelabel>embeds</edgelabel>
        </childnode>
        <childnode refid="12492" relation="usage">
          <edgelabel>stickers</edgelabel>
        </childnode>
      </node>
      <node id="12466">
        <label>bool</label>
      </node>
      <node id="12481">
        <label>std::vector&lt; dpp::reaction &gt;</label>
        <childnode refid="12482" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12475">
        <label>dpp::message::message_interaction_struct</label>
        <link refid="structdpp_1_1message_1_1message__interaction__struct"/>
        <childnode refid="12464" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="12476" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
        <childnode refid="12467" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="12471" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="12472">
        <label>std::vector&lt; snowflake &gt;</label>
        <childnode refid="12464" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12467">
        <label>std::string</label>
        <childnode refid="12468" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/message.h" line="841" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="841" bodyend="1115"/>
    <listofallmembers>
      <member refid="structdpp_1_1message_1a85dbf0b4a0b294eac34ec49feb1d4540" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>add_component</name></member>
      <member refid="structdpp_1_1message_1a9ff92caceb655fa1f89710445a24c107" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>add_embed</name></member>
      <member refid="structdpp_1_1message_1a6c59498ae2c014b13eb714c494e6493c" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>allowed_mentions</name></member>
      <member refid="structdpp_1_1message_1aa59a613a4ee0bab7f9a5ea18fe7edea7" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>attachments</name></member>
      <member refid="structdpp_1_1message_1a35c14f04382266b29c4ca076b4e0f9e0" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>author</name></member>
      <member refid="structdpp_1_1message_1ae2a5e3ddd0eadd028a33d755e567fe86" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>build_json</name></member>
      <member refid="structdpp_1_1message_1adceaf61877eede79f0ebeb14efa74b5e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>channel_id</name></member>
      <member refid="structdpp_1_1message_1ab9cb60fc35159bfa604164c5574a4957" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>components</name></member>
      <member refid="structdpp_1_1message_1acb17877db423d2ac4b103a67e1ae2ff6" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>content</name></member>
      <member refid="structdpp_1_1message_1a94f1f6750ca95e4bb66f069d9b4b3a54" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>edited</name></member>
      <member refid="structdpp_1_1message_1a9c0eb22ba371ead6d960bdf7c9838b6e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>embeds</name></member>
      <member refid="structdpp_1_1message_1a020ceaaad56ff4af60e2325a3cb9fbc7" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>filecontent</name></member>
      <member refid="structdpp_1_1message_1a9f158cde13b3916c9823b18865b24f41" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>filename</name></member>
      <member refid="structdpp_1_1message_1a7e15337119679e582768d794b409cffb" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1message_1a16fca6ff4595e0fcab2305205eb54626" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>flags</name></member>
      <member refid="structdpp_1_1message_1a5e75f7cd8a7e952e6621c520627d5b84" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>guild_id</name></member>
      <member refid="structdpp_1_1message_1a9561b3d3bd3e0e0f111c045a3a410adf" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>has_thread</name></member>
      <member refid="structdpp_1_1message_1a7c1e0cc707a4168b75945da0d31105a0" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>id</name></member>
      <member refid="structdpp_1_1message_1a674f8896974df8c4c21673ebfef79e61" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>interaction</name></member>
      <member refid="structdpp_1_1message_1a30ec8f9aa1d210b047826adecfe7e5fa" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_crosspost</name></member>
      <member refid="structdpp_1_1message_1a29b1e13e6eebcc8529f50a3a403c17e1" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_crossposted</name></member>
      <member refid="structdpp_1_1message_1addf240902f592afc3418f9af686a7484" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_ephemeral</name></member>
      <member refid="structdpp_1_1message_1a7227dae2580372f1f47ab13442da0d1c" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_loading</name></member>
      <member refid="structdpp_1_1message_1a000f28d53465976ca14e77baf57848ae" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_source_message_deleted</name></member>
      <member refid="structdpp_1_1message_1ade2685318c082418fd1b02613e19542b" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_urgent</name></member>
      <member refid="structdpp_1_1message_1a550f3dc37e4b55cccc2e78d90fc047fb" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>member</name></member>
      <member refid="structdpp_1_1message_1ae161a71904462eab6bdd539f4ff32332" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mention_channels</name></member>
      <member refid="structdpp_1_1message_1a499cacfe6a270dca773fc7f91718ac70" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mention_everyone</name></member>
      <member refid="structdpp_1_1message_1a1f9fbfe4171cdc02306dc505583b7ed9" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mention_roles</name></member>
      <member refid="structdpp_1_1message_1a96f97a2ade23d3f58b221f98c60d9950" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mentions</name></member>
      <member refid="structdpp_1_1message_1a717067505cfc5f5dcf05459c216c9756" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a21466e050ee9c0646392ccf5940bb62a" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a0e71afdc706c7ae83934ddfd8c2ffc38" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a45a0883a10a19e933fbba682aba212f6" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a6de961520d75562cf61244e1da63543d" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message_reference</name></member>
      <member refid="structdpp_1_1message_1afaaf4f44ce0631c49c15088b033d25e6" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>nonce</name></member>
      <member refid="structdpp_1_1message_1a029932133e0a6aea2afdea5f2d98146e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>pinned</name></member>
      <member refid="structdpp_1_1message_1af6c6ea9f1319adde40d068a2e9b230e7" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>reactions</name></member>
      <member refid="structdpp_1_1message_1a01de1e67af35ecb77549ccbe94ab7185" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>self_author</name></member>
      <member refid="structdpp_1_1message_1a9991c58453a1deb7b785a6b7457372f2" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>sent</name></member>
      <member refid="structdpp_1_1message_1a13389a16cb9bec891527d2405dfed913" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_allowed_mentions</name></member>
      <member refid="structdpp_1_1message_1a18a1ebb4b981a0ef46f78f147aa12b66" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_content</name></member>
      <member refid="structdpp_1_1message_1a7063a512a6e7f078e2a81bad077dfcde" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_file_content</name></member>
      <member refid="structdpp_1_1message_1a95675acbf18ed30c5141d3180842611f" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_filename</name></member>
      <member refid="structdpp_1_1message_1a3895655222ad8f3b9d9b96c47afb2454" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_flags</name></member>
      <member refid="structdpp_1_1message_1a8649d77de4e7b1c89b90016d3692f283" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_reference</name></member>
      <member refid="structdpp_1_1message_1ada2f9404e7dbb12b3de0a382c3733587" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_type</name></member>
      <member refid="structdpp_1_1message_1a8ab53932e4cf4fa00d021a5ca3f4b906" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>stickers</name></member>
      <member refid="structdpp_1_1message_1ac131de2cea0b34ca67c8871659ac02a4" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>suppress_embeds</name></member>
      <member refid="structdpp_1_1message_1a8f4ab5546606db3ea4bcdb41b60a5dba" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>tts</name></member>
      <member refid="structdpp_1_1message_1a2ed7eaf6f5ff69a94fcb4912c0c795c2" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>type</name></member>
      <member refid="structdpp_1_1message_1ad1033bc27c5c1436c2e321d1be1d65ed" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>webhook_id</name></member>
      <member refid="structdpp_1_1message_1a4b176cfde5ca415d09dedf3d6156ee97" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>~message</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
