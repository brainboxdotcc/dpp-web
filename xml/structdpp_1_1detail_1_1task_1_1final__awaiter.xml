<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1detail_1_1task_1_1final__awaiter" kind="struct" language="C++" prot="public">
    <compoundname>dpp::detail::task::final_awaiter</compoundname>
    <includes local="no">task.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1final__awaiter_1a31c8c44d69073feb6ce7bb62b407eed6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::detail::task::final_awaiter&lt; R &gt;::await_ready</definition>
        <argsstring>() const noexcept</argsstring>
        <name>await_ready</name>
        <briefdescription>
<para>Always suspend at the end of the task. This allows us to clean up and resume the parent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="518" column="7" bodyfile="include/dpp/coro/task.h" bodystart="518" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1final__awaiter_1a6b72c931f33ff3321548645a41a12f4a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std_coroutine::coroutine_handle</type>
        <definition>std_coroutine::coroutine_handle dpp::detail::task::final_awaiter&lt; R &gt;::await_suspend</definition>
        <argsstring>(handle_t&lt; R &gt; handle) const noexcept</argsstring>
        <name>await_suspend</name>
        <param>
          <type><ref refid="namespacedpp_1_1detail_1_1task_1ae4957e39d00220ebdbf911e94cfa1a8b" kindref="member">handle_t</ref>&lt; R &gt;</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>The suspension logic of the coroutine when it finishes. Always suspend the caller, meaning cleaning up the handle is on us. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of this coroutine </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::coroutine_handle&lt;&gt; Handle to resume, which is either the parent if present or std::noop_coroutine() otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="528" column="3" bodyfile="include/dpp/coro/task.h" bodystart="750" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1task_1_1final__awaiter_1a90a5e2c7472081871780ff1d7f3e2d8c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::task::final_awaiter&lt; R &gt;::await_resume</definition>
        <argsstring>() const noexcept</argsstring>
        <name>await_resume</name>
        <briefdescription>
<para>Function called when this object is co_awaited by the standard library at the end of final_suspend. Do nothing, return nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/task.h" line="533" column="6" bodyfile="include/dpp/coro/task.h" bodystart="533" bodyend="533"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The object automatically co_await-ed at the end of a <ref refid="classdpp_1_1task" kindref="compound">task</ref>. Ensures nested coroutine chains are resolved, and the <ref refid="structdpp_1_1detail_1_1task_1_1promise__t" kindref="compound">promise_t</ref> cleans up if it needs to. </para>
    </briefdescription>
    <detaileddescription>
<para>Awaitable returned from <ref refid="structdpp_1_1detail_1_1task_1_1promise__t" kindref="compound">task::promise_t</ref>&apos;s final_suspend. Resumes the parent and cleans up its handle if needed.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>Return type of the task </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="include/dpp/coro/task.h" line="514" column="1" bodyfile="include/dpp/coro/task.h" bodystart="514" bodyend="534"/>
    <listofallmembers>
      <member refid="structdpp_1_1detail_1_1task_1_1final__awaiter_1a31c8c44d69073feb6ce7bb62b407eed6" prot="public" virt="non-virtual"><scope>dpp::detail::task::final_awaiter</scope><name>await_ready</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1final__awaiter_1a90a5e2c7472081871780ff1d7f3e2d8c" prot="public" virt="non-virtual"><scope>dpp::detail::task::final_awaiter</scope><name>await_resume</name></member>
      <member refid="structdpp_1_1detail_1_1task_1_1final__awaiter_1a6b72c931f33ff3321548645a41a12f4a" prot="public" virt="non-virtual"><scope>dpp::detail::task::final_awaiter</scope><name>await_suspend</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
