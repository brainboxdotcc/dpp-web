<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classtest__cached__object__t" kind="class" language="C++" prot="public">
    <compoundname>test_cached_object_t</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">test.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtest__cached__object__t_1ae0e8f7f9e607a3723fa00f054e4b11a8" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string test_cached_object_t::foo</definition>
        <argsstring></argsstring>
        <name>foo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.h" line="51" column="13" bodyfile="src/test.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type>snowflake</type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="38" column="11" bodyfile="include/dpp/managed.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtest__cached__object__t_1ab12f86114b1bb8683ad499d1e8d9f0bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>test_cached_object_t::test_cached_object_t</definition>
        <argsstring>(dpp::snowflake _id)</argsstring>
        <name>test_cached_object_t</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">dpp::snowflake</ref></type>
          <declname>_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.h" line="49" column="1" bodyfile="src/test.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classtest__cached__object__t_1a604258c04a3f0fb94b6bafc129063e43" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual test_cached_object_t::~test_cached_object_t</definition>
        <argsstring>()=default</argsstring>
        <name>~test_cached_object_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test.h" line="50" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8" bodyfile="src/dpp/discordevents.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>test_cached_object_t</label>
        <link refid="classtest__cached__object__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>test_cached_object_t</label>
        <link refid="classtest__cached__object__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>foo</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="src/test.h" line="47" column="1" bodyfile="src/test.h" bodystart="47" bodyend="52"/>
    <listofallmembers>
      <member refid="classtest__cached__object__t_1ae0e8f7f9e607a3723fa00f054e4b11a8" prot="public" virt="non-virtual"><scope>test_cached_object_t</scope><name>foo</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>test_cached_object_t</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>test_cached_object_t</scope><name>id</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>test_cached_object_t</scope><name>managed</name></member>
      <member refid="classtest__cached__object__t_1ab12f86114b1bb8683ad499d1e8d9f0bd" prot="public" virt="non-virtual"><scope>test_cached_object_t</scope><name>test_cached_object_t</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>test_cached_object_t</scope><name>~managed</name></member>
      <member refid="classtest__cached__object__t_1a604258c04a3f0fb94b6bafc129063e43" prot="public" virt="virtual"><scope>test_cached_object_t</scope><name>~test_cached_object_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
