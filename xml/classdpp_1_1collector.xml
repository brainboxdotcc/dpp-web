<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1collector" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>dpp::collector</compoundname>
    <derivedcompoundref refid="classdpp_1_1channel__collector" prot="public" virt="non-virtual">dpp::channel_collector</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1message__collector" prot="public" virt="non-virtual">dpp::message_collector</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1reaction__collector" prot="public" virt="non-virtual">dpp::reaction_collector</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1role__collector" prot="public" virt="non-virtual">dpp::role_collector</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1scheduled__event__collector" prot="public" virt="non-virtual">dpp::scheduled_event_collector</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1thread__collector" prot="public" virt="non-virtual">dpp::thread_collector</derivedcompoundref>
    <includes local="no">cluster.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type>class C</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1collector_1af7f9cfbcf647292a6eff59c63508171b" prot="protected" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::collector&lt; T, C &gt;::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
<para>Owning cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3565" column="15" bodyfile="include/dpp/cluster.h" bodystart="3565" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1collector_1a6dc9d4da82d2fdc56975b5b08e40ed96" prot="private" static="no" mutable="no">
        <type><ref refid="classdpp_1_1timed__listener" kindref="compound">timed_listener</ref>&lt; <ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; T &gt;, std::function&lt; void(const T &amp;)&gt; &gt; *</type>
        <definition>timed_listener&lt;event_router_t&lt;T&gt;, std::function&lt;void(const T&amp;)&gt; &gt;* dpp::collector&lt; T, C &gt;::tl</definition>
        <argsstring></argsstring>
        <name>tl</name>
        <briefdescription>
<para>Timed listener. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3568" column="16" bodyfile="include/dpp/cluster.h" bodystart="3568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1collector_1aa1a02c2207aa69fd71be817382e6c957" prot="private" static="no" mutable="no">
        <type>std::vector&lt; C &gt;</type>
        <definition>std::vector&lt;C&gt; dpp::collector&lt; T, C &gt;::stored</definition>
        <argsstring></argsstring>
        <name>stored</name>
        <briefdescription>
<para>stored list </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3570" column="13" bodyfile="include/dpp/cluster.h" bodystart="3570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1collector_1a8a4b17c9a7360a9d77fbb6b983870847" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::collector&lt; T, C &gt;::triggered</definition>
        <argsstring></argsstring>
        <name>triggered</name>
        <briefdescription>
<para>Trigger flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3572" column="6" bodyfile="include/dpp/cluster.h" bodystart="3572" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1collector_1a6b1ceac5e4c24685cc698702ef7be338" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::collector&lt; T, C &gt;::collector</definition>
        <argsstring>(class cluster *cl, uint64_t duration, event_router_t&lt; T &gt; &amp;event)</argsstring>
        <name>collector</name>
        <param>
          <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>cl</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>duration</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; T &gt; &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Construct a new collector object. </para>
        </briefdescription>
        <detaileddescription>
<para>The timer for the collector begins immediately on construction of the object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cl</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to cluster which manages this collector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration in seconds to run the collector for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to attach to, e.g. <ref refid="classdpp_1_1cluster_1a1a632b3c2c8d3ff3a47372ffa770acf5" kindref="member">cluster::on_message_create</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3583" column="1" bodyfile="include/dpp/cluster.h" bodystart="3583" bodyend="3596"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1collector_1ad6172faa2391a90cfaa11ca76ec95258" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void dpp::collector&lt; T, C &gt;::completed</definition>
        <argsstring>(const std::vector&lt; C &gt; &amp;list)=0</argsstring>
        <name>completed</name>
        <param>
          <type>const std::vector&lt; C &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>You must implement this function to receive the completed list of captured objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of captured objects in captured order </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3603" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1collector_1abe7a5ff238f82ee08003051468626c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>const C *</type>
        <definition>virtual const C * dpp::collector&lt; T, C &gt;::filter</definition>
        <argsstring>(const T &amp;element)=0</argsstring>
        <name>filter</name>
        <param>
          <type>const T &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Filter the list of elements. </para>
        </briefdescription>
        <detaileddescription>
<para>Every time an event is fired on the collector, this method wil be called to determine if we should add an object to the list or not. This function can then process the <computeroutput>element</computeroutput> value, extract the parts which are to be saved to a list (e.g. a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> out of a <ref refid="structdpp_1_1message__create__t" kindref="compound">dpp::message_create_t</ref>) and return it as the return value. Returning a value of nullptr causes no object to be stored.</para>
<para>Here is an example of how to filter messages which have specific text in them. This should be used with the specialised type <ref refid="classdpp_1_1message__collector" kindref="compound">dpp::message_collector</ref></para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref>*<sp/><ref refid="classdpp_1_1collector_1abe7a5ff238f82ee08003051468626c15" kindref="member">filter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1message__create__t" kindref="compound">dpp::message_create_t</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m.<ref refid="structdpp_1_1message__create__t_1a02298492087c0ba68eeb4ea8e42833b4" kindref="member">msg</ref>.<ref refid="structdpp_1_1message_1acb17877db423d2ac4b103a67e1ae2ff6" kindref="member">content</ref>.find(</highlight><highlight class="stringliteral">&quot;something<sp/>i<sp/>want&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;m.<ref refid="structdpp_1_1message__create__t_1a02298492087c0ba68eeb4ea8e42833b4" kindref="member">msg</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>The event data to filter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const C* Returned object or nullptr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3631" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1collector_1aaaff21b83581001598be2610469ccd4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::collector&lt; T, C &gt;::cancel</definition>
        <argsstring>()</argsstring>
        <name>cancel</name>
        <briefdescription>
<para>Immediately cancels the collector. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this if you have met the conditions for which you are collecting objects early, e.g. you were watching for a message containing &apos;yes&apos; or &apos;no&apos; and have received it before the time is up.</para>
<para><simplesect kind="note"><para>Causes calling of the <ref refid="classdpp_1_1collector_1ad6172faa2391a90cfaa11ca76ec95258" kindref="member">completed()</ref> method if it has not yet been called. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3642" column="14" bodyfile="include/dpp/cluster.h" bodystart="3642" bodyend="3645"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1collector_1a24ad57bf7d5c9b7ed7f18f51d01a7dcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual dpp::collector&lt; T, C &gt;::~collector</definition>
        <argsstring>()</argsstring>
        <name>~collector</name>
        <briefdescription>
<para>Destroy the collector object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Causes calling of the <ref refid="classdpp_1_1collector_1ad6172faa2391a90cfaa11ca76ec95258" kindref="member">completed()</ref> method if it has not yet been called. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3651" column="9" bodyfile="include/dpp/cluster.h" bodystart="3651" bodyend="3653"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Collects objects from events during a specified time period. </para>
    </briefdescription>
    <detaileddescription>
<para>This template must be specialised. There are premade specialisations which you can use such as <ref refid="classdpp_1_1reaction__collector" kindref="compound">dpp::reaction_collector</ref> and <ref refid="classdpp_1_1message__collector" kindref="compound">dpp::message_collector</ref>. For these specialised instances all you need to do is derive a simple class from them which implements <ref refid="classdpp_1_1collector_1ad6172faa2391a90cfaa11ca76ec95258" kindref="member">collector::completed()</ref>.</para>
<para>A collector will run for the specified number of seconds, attaching itself to the given event. During this time any events pass through the collector and <ref refid="classdpp_1_1collector_1abe7a5ff238f82ee08003051468626c15" kindref="member">collector::filter()</ref>. This function can return a pointer to an object to allow a copy of that object to be stored to a vector, or it can return nullptr to do nothing with that object. For example a collector attached to on_message_create would receive an event with the type <ref refid="structdpp_1_1message__create__t" kindref="compound">message_create_t</ref>, and from this may decide to extract the <ref refid="structdpp_1_1message__create__t_1a02298492087c0ba68eeb4ea8e42833b4" kindref="member">message_create_t::msg</ref> structure, returning a pointer to it, or instead may choose to return a nullptr.</para>
<para>When either the predetermined timeout is reached, or the <ref refid="classdpp_1_1collector_1aaaff21b83581001598be2610469ccd4b" kindref="member">collector::cancel()</ref> method is called, or the collector is destroyed, the <ref refid="classdpp_1_1collector_1ad6172faa2391a90cfaa11ca76ec95258" kindref="member">collector::completed()</ref> method is called, which will be passed a list of collected objects in the order they were collected.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter type of the event this collector will monitor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>object type this collector will store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::channel_collector</label>
        <link refid="classdpp_1_1channel__collector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::collector&lt; T, C &gt;</label>
        <link refid="classdpp_1_1collector"/>
      </node>
      <node id="3">
        <label>dpp::message_collector</label>
        <link refid="classdpp_1_1message__collector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::reaction_collector</label>
        <link refid="classdpp_1_1reaction__collector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>dpp::role_collector</label>
        <link refid="classdpp_1_1role__collector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>dpp::scheduled_event_collector</label>
        <link refid="classdpp_1_1scheduled__event__collector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>dpp::thread_collector</label>
        <link refid="classdpp_1_1thread__collector"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="18">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="7">
        <label>double</label>
      </node>
      <node id="17">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="18" relation="usage">
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="3" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::collector&lt; T, C &gt;</label>
        <link refid="classdpp_1_1collector"/>
        <childnode refid="2" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="9">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="10" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="11" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="11" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>event_router_t&lt;</label>
      </node>
      <node id="12">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="13" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="20">
        <label>condition_variable</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>time_t</label>
      </node>
      <node id="15">
        <label>uint16_t</label>
      </node>
      <node id="6">
        <label>uint32_t</label>
      </node>
      <node id="11">
        <label>uint64_t</label>
      </node>
      <node id="16">
        <label>uint8_t</label>
      </node>
      <node id="19">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/cluster.h" line="3561" column="13" bodyfile="include/dpp/cluster.h" bodystart="3562" bodyend="3654"/>
    <listofallmembers>
      <member refid="classdpp_1_1collector_1aaaff21b83581001598be2610469ccd4b" prot="public" virt="virtual"><scope>dpp::collector</scope><name>cancel</name></member>
      <member refid="classdpp_1_1collector_1a6b1ceac5e4c24685cc698702ef7be338" prot="public" virt="non-virtual"><scope>dpp::collector</scope><name>collector</name></member>
      <member refid="classdpp_1_1collector_1ad6172faa2391a90cfaa11ca76ec95258" prot="public" virt="pure-virtual"><scope>dpp::collector</scope><name>completed</name></member>
      <member refid="classdpp_1_1collector_1abe7a5ff238f82ee08003051468626c15" prot="public" virt="pure-virtual"><scope>dpp::collector</scope><name>filter</name></member>
      <member refid="classdpp_1_1collector_1af7f9cfbcf647292a6eff59c63508171b" prot="protected" virt="non-virtual"><scope>dpp::collector</scope><name>owner</name></member>
      <member refid="classdpp_1_1collector_1aa1a02c2207aa69fd71be817382e6c957" prot="private" virt="non-virtual"><scope>dpp::collector</scope><name>stored</name></member>
      <member refid="classdpp_1_1collector_1a6dc9d4da82d2fdc56975b5b08e40ed96" prot="private" virt="non-virtual"><scope>dpp::collector</scope><name>tl</name></member>
      <member refid="classdpp_1_1collector_1a8a4b17c9a7360a9d77fbb6b983870847" prot="private" virt="non-virtual"><scope>dpp::collector</scope><name>triggered</name></member>
      <member refid="classdpp_1_1collector_1a24ad57bf7d5c9b7ed7f18f51d01a7dcd" prot="public" virt="virtual"><scope>dpp::collector</scope><name>~collector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
