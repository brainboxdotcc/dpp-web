<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="build-a-discord-bot-windows-visual-studio" kind="page">
    <compoundname>build-a-discord-bot-windows-visual-studio</compoundname>
    <title>Building a discord bot in Windows using Visual Studio</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>To create a basic bot using <bold>Visual Studio 2019</bold> or <bold>Visual Studio 2022</bold>, follow the steps below to create a <emphasis>working skeleton project you can build upon</emphasis>.</para>
<para><simplesect kind="note"><para>This tutorial assumes you are using a pre-built copy of the library from a release, or from one of the artifacts on our github page. This is much easier than building it yourself and in most cases you do not need to build your own copy of the library. You can also skip this entire tutorial, and obtain a <ulink url="https://github.com/brainboxdotcc/windows-bot-template/">pre-made visual studio template containing the latest D++ build (for 32 and 64 bit, release and debug profiles) by clicking here</ulink>.</para>
</simplesect>
<orderedlist>
<listitem><para>Make sure you have Visual Studio 2019 or 2022. Community, Professional or Enterprise work fine. These instructions are not for Visual Studio Code. You can <ulink url="https://visualstudio.microsoft.com/downloads/">download the correct version here</ulink>. Note that older versions of Visual Studio will not work as they do not support enough of the C++17 standard.</para>
</listitem><listitem><para>Clone the <ulink url="https://github.com/brainboxdotcc/windows-bot-template/">template project</ulink>. Be sure to clone the entire project and not just copy and paste the cpp file.</para>
</listitem><listitem><para>Double click on the MyBot.sln file in the folder you just cloned <image type="html" name="vsproj_1.png"></image>
</para>
</listitem><listitem><para>Add your bot token (see <ref refid="creating-a-bot-application" kindref="compound">Creating a Bot Token</ref>) and guild ID to the example program <image type="html" name="vsproj_2.png"></image>
</para>
</listitem><listitem><para>Click &quot;Local windows debugger&quot; to compile and run your bot! <image type="html" name="vsproj_3.png"></image>
</para>
</listitem><listitem><para>Observe the build output. There may be warnings, but so long as the build output ends with &quot;1 succeeded&quot; then the process has worked. You may now run your bot! <image type="html" name="vsproj_14.png"></image>
</para>
</listitem></orderedlist>
</para>
<sect2 id="build-a-discord-bot-windows-visual-studio_1autotoc_md30">
<title>Troubleshooting</title>
<para><itemizedlist>
<listitem><para>If you get an error that a dll is missing (e.g. <computeroutput>dpp.dll</computeroutput> or <computeroutput>opus.dll</computeroutput>) when starting your bot, then simply copy all dlls from the <bold>bin</bold> directory of where you extracted the DPP zip file to, into the same directory where your bot&apos;s executable is. You only need to do this once. There should be several of these dll files: <computeroutput>dpp.dll</computeroutput>, <computeroutput>zlib.dll</computeroutput>, <computeroutput>openssl.dll</computeroutput> and <computeroutput>libcrypto.dll</computeroutput> (or similarly named SSL related files), <computeroutput>libsodium.dll</computeroutput> and <computeroutput>opus.dll</computeroutput>. Note the template project does this for you, so you should never encounter this issue.</para>
</listitem><listitem><para>Stuck? You can find us on the <ulink url="https://discord.gg/dpp">official discord server</ulink> - ask away! We don&apos;t bite! </para>
</listitem></itemizedlist>
</para>
</sect2>
    </detaileddescription>
    <location file="docpages/02_building_a_bot.md"/>
  </compounddef>
</doxygen>
