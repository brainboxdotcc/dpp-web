<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1managed" kind="class" language="C++" prot="public">
    <compoundname>dpp::managed</compoundname>
    <derivedcompoundref refid="classdpp_1_1application" prot="public" virt="non-virtual">dpp::application</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1automod__rule" prot="public" virt="non-virtual">dpp::automod_rule</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1channel" prot="public" virt="non-virtual">dpp::channel</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1collected__reaction" prot="public" virt="non-virtual">dpp::collected_reaction</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1emoji" prot="public" virt="non-virtual">dpp::emoji</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1forum__tag" prot="public" virt="non-virtual">dpp::forum_tag</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1guild" prot="public" virt="non-virtual">dpp::guild</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1integration" prot="public" virt="non-virtual">dpp::integration</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1interaction" prot="public" virt="non-virtual">dpp::interaction</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1message" prot="public" virt="non-virtual">dpp::message</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1onboarding__prompt" prot="public" virt="non-virtual">dpp::onboarding_prompt</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1onboarding__prompt__option" prot="public" virt="non-virtual">dpp::onboarding_prompt_option</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1role" prot="public" virt="non-virtual">dpp::role</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1scheduled__event" prot="public" virt="non-virtual">dpp::scheduled_event</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1slashcommand" prot="public" virt="non-virtual">dpp::slashcommand</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1stage__instance" prot="public" virt="non-virtual">dpp::stage_instance</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1sticker" prot="public" virt="non-virtual">dpp::sticker</derivedcompoundref>
    <derivedcompoundref refid="structdpp_1_1sticker__pack" prot="public" virt="non-virtual">dpp::sticker_pack</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1user" prot="public" virt="non-virtual">dpp::user</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1webhook" prot="public" virt="non-virtual">dpp::webhook</derivedcompoundref>
    <includes local="no">managed.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1managed_1a46f260c92af75ade75fede7cd3d25f37" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr dpp::managed::managed</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>managed</name>
        <briefdescription>
<para>Constructor, initialises id to 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="44" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a01f791997df9e69e7edcd769881db094" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr dpp::managed::managed</definition>
        <argsstring>(const snowflake nid) noexcept</argsstring>
        <name>managed</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>nid</declname>
        </param>
        <briefdescription>
<para>Constructor, initialises ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nid</parametername>
</parameternamelist>
<parameterdescription>
<para>ID to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="50" column="11" bodyfile="include/dpp/managed.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1abacb65cc2cf478541618fedae5250f0e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr dpp::managed::managed</definition>
        <argsstring>(const managed &amp;rhs) noexcept=default</argsstring>
        <name>managed</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="56" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a20c5eb20346bf7e7b4970f62e00d9b0f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr dpp::managed::managed</definition>
        <argsstring>(managed &amp;&amp;rhs) noexcept=default</argsstring>
        <name>managed</name>
        <param>
          <type><ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Effectively equivalent to copy constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="64" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa2a41ada5edd0625331162f05e1a4f43" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type></type>
        <definition>virtual dpp::managed::~managed</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~managed</name>
        <briefdescription>
<para>Destroy the managed object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="69" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a6a038662365a651079a1e8d46bcf90f0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
        <definition>constexpr managed &amp; dpp::managed::operator=</definition>
        <argsstring>(const managed &amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="75" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1ab44dbed273c2fb3a8e5d66e76e7e0eae" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
        <definition>constexpr managed &amp; dpp::managed::operator=</definition>
        <argsstring>(managed &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="81" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The managed class is the base class for various types that can be stored in a cache that are identified by a <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> id. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::application</label>
        <link refid="classdpp_1_1application"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::automod_rule</label>
        <link refid="classdpp_1_1automod__rule"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::channel</label>
        <link refid="classdpp_1_1channel"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>dpp::collected_reaction</label>
        <link refid="classdpp_1_1collected__reaction"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>dpp::emoji</label>
        <link refid="classdpp_1_1emoji"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>dpp::forum_tag</label>
        <link refid="structdpp_1_1forum__tag"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>dpp::integration</label>
        <link refid="classdpp_1_1integration"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>dpp::interaction</label>
        <link refid="classdpp_1_1interaction"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="12">
        <label>dpp::message</label>
        <link refid="structdpp_1_1message"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>dpp::onboarding_prompt</label>
        <link refid="structdpp_1_1onboarding__prompt"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>dpp::onboarding_prompt_option</label>
        <link refid="structdpp_1_1onboarding__prompt__option"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>dpp::role</label>
        <link refid="classdpp_1_1role"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>dpp::scheduled_event</label>
        <link refid="structdpp_1_1scheduled__event"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>dpp::slashcommand</label>
        <link refid="classdpp_1_1slashcommand"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>dpp::stage_instance</label>
        <link refid="structdpp_1_1stage__instance"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>dpp::sticker</label>
        <link refid="structdpp_1_1sticker"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>dpp::sticker_pack</label>
        <link refid="structdpp_1_1sticker__pack"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>dpp::thread</label>
        <link refid="classdpp_1_1thread"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>dpp::user_identified</label>
        <link refid="classdpp_1_1user__identified"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>dpp::webhook</label>
        <link refid="classdpp_1_1webhook"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="2" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="3" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/managed.h" line="32" column="1" bodyfile="include/dpp/managed.h" bodystart="32" bodyend="114"/>
    <listofallmembers>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::managed</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::managed</scope><name>id</name></member>
      <member refid="classdpp_1_1managed_1a46f260c92af75ade75fede7cd3d25f37" prot="public" virt="non-virtual"><scope>dpp::managed</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a01f791997df9e69e7edcd769881db094" prot="public" virt="non-virtual"><scope>dpp::managed</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1abacb65cc2cf478541618fedae5250f0e" prot="public" virt="non-virtual"><scope>dpp::managed</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a20c5eb20346bf7e7b4970f62e00d9b0f" prot="public" virt="non-virtual"><scope>dpp::managed</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual"><scope>dpp::managed</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1a6a038662365a651079a1e8d46bcf90f0" prot="public" virt="non-virtual"><scope>dpp::managed</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1ab44dbed273c2fb3a8e5d66e76e7e0eae" prot="public" virt="non-virtual"><scope>dpp::managed</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual"><scope>dpp::managed</scope><name>operator==</name></member>
      <member refid="classdpp_1_1managed_1aa2a41ada5edd0625331162f05e1a4f43" prot="public" virt="virtual"><scope>dpp::managed</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
