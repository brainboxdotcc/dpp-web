<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="buildlinux" kind="page">
    <compoundname>buildlinux</compoundname>
    <title>Building on Linux</title>
    <detaileddescription>
<para><heading level="1">Building on Linux</heading>
</para><para><simplesect kind="note"><para>You might not need to build a copy of the library for Linux - precompiled deb files for 64 bit and 32 bit Debian and Ubuntu are provided in the github version releases. Unless you are on a different Linux distribution which cannot install deb files, or wish to submit fixes and enhancements to the library itself you may have an easier time installing the precompiled version instead.</para></simplesect>
<heading level="2">1. Build Source Code</heading>
</para><para><verbatim>mkdir build
cd build
cmake ..
make -j8
</verbatim></para><para>Replace the number after -j with a number suitable for your setup, usually the same as the number of cores on your machine. <computeroutput>cmake</computeroutput> will fetch any dependencies that are required for you and ensure they are compiled alongside the library.</para><para><heading level="2">2. Optional: Run test cases</heading>
</para><para>run <computeroutput>./test</computeroutput> for unit test cases. You will need to create a <computeroutput>config.json</computeroutput> file in the directory above the executable file with a valid bot token in it. See the example file <computeroutput>config.example.json</computeroutput> for an example of the correct format.</para><para><heading level="2">3. Install to /usr/local/include and /usr/local/lib</heading>
</para><para><verbatim>sudo make install
</verbatim></para><para><heading level="2">4. Installation to a different directory</heading>
</para><para>If you want to install the library, its dependencies and header files to a different directory, specify this directory when running <computeroutput>cmake</computeroutput>: <verbatim>cmake .. -DCMAKE_INSTALL_PREFIX=/path/to/install
</verbatim></para><para>Then once the build is complete, run <computeroutput>make install</computeroutput> to install to the location you specified.</para><para><heading level="2">5. Using the library</heading>
</para><para>Once installed to the /usr/local directory, you can make use of the library in standalone programs simply by including it and linking to it: <verbatim>g++ -std=c++17 mydppbot.cpp -o dppbot -ldpp
</verbatim></para><para>The important flags in this command-line are:</para><para><itemizedlist>
<listitem><para><computeroutput>-std=c++17</computeroutput> - Required to compile the headers<itemizedlist>
<listitem><para><computeroutput>mydppbot.cpp</computeroutput> - Your source code</para></listitem></itemizedlist>
</para></listitem><listitem><para><computeroutput>dppbot</computeroutput> - The name of the executable to make</para></listitem></itemizedlist>
</para><para>Of course, this is just a proof of concept - you should really use a more robust build system like GNU <computeroutput>make</computeroutput> or <ref refid="buildcmake" kindref="compound">`cmake`</ref>.</para><para><bold>Have fun!</bold> </para>    </detaileddescription>
  </compounddef>
</doxygen>
