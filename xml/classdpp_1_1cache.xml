<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1cache" kind="class" language="C++" prot="public">
    <compoundname>dpp::cache</compoundname>
    <includes local="no">cache.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1cache_1a6a77ce300428f922964d0f1f7b85816f" prot="private" static="no" mutable="no">
        <type>std::shared_mutex</type>
        <definition>std::shared_mutex dpp::cache&lt; T &gt;::cache_mutex</definition>
        <argsstring></argsstring>
        <name>cache_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mutex to protect the cache </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="44" column="19" bodyfile="include/dpp/cache.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cache_1af05540682d77589f50cc5bd54665ac18" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, T * &gt; *</type>
        <definition>std::unordered_map&lt;snowflake, T*&gt;* dpp::cache&lt; T &gt;::cache_map</definition>
        <argsstring></argsstring>
        <name>cache_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cached items </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="47" column="20" bodyfile="include/dpp/cache.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1cache_1ae7b01fd8baebf24d31f6e0e2f15df8e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::cache&lt; T &gt;::cache</definition>
        <argsstring>()</argsstring>
        <name>cache</name>
        <briefdescription>
<para>Construct a new cache object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="53" column="1" bodyfile="include/dpp/cache.h" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cache_1a9e99a62833153d92a3dd160ae91b031b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::cache&lt; T &gt;::~cache</definition>
        <argsstring>()</argsstring>
        <name>~cache</name>
        <briefdescription>
<para>Destroy the cache object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="60" column="1" bodyfile="include/dpp/cache.h" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cache_1ab2aa9a2fbf0cb47d49d4bba05c2e2039" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cache&lt; T &gt;::store</definition>
        <argsstring>(T *object)</argsstring>
        <name>store</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Store an object in the cache. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>object to store </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="70" column="6" bodyfile="include/dpp/cache.h" bodystart="70" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cache_1a4994e44f3ec37d08acc8c064c95746ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cache&lt; T &gt;::remove</definition>
        <argsstring>(T *object)</argsstring>
        <name>remove</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Remove an object from the cache. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object</parametername>
</parameternamelist>
<parameterdescription>
<para>object to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="91" column="6" bodyfile="include/dpp/cache.h" bodystart="91" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cache_1abf1e2911e8e1559fa15a36c5f90454d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * dpp::cache&lt; T &gt;::find</definition>
        <argsstring>(snowflake id)</argsstring>
        <name>find</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Find an object in the cache by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object id to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Found object or nullptr if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="110" column="3" bodyfile="include/dpp/cache.h" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cache_1a63fb9389314371ca017647db2aad53f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::cache&lt; T &gt;::count</definition>
        <argsstring>()</argsstring>
        <name>count</name>
        <briefdescription>
<para>Return a count of the number of items in the cache. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t count of items in the cache </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="124" column="10" bodyfile="include/dpp/cache.h" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cache_1a5ff19cda1ffdfaa11f0e4027ba8d1b76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_mutex &amp;</type>
        <definition>std::shared_mutex &amp; dpp::cache&lt; T &gt;::get_mutex</definition>
        <argsstring>()</argsstring>
        <name>get_mutex</name>
        <briefdescription>
<para>Return the cache&apos;s locking mutex. Use this whenever you manipulate or iterate raw elements in the cache! </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The mutex used to protect the container </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="135" column="19" bodyfile="include/dpp/cache.h" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cache_1ab7647df5af8f7bf01826bf650b157aa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto &amp; dpp::cache&lt; T &gt;::get_container</definition>
        <argsstring>()</argsstring>
        <name>get_container</name>
        <briefdescription>
<para>Get the container map. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Be sure to use <ref refid="classdpp_1_1cache_1a5ff19cda1ffdfaa11f0e4027ba8d1b76" kindref="member">cache::get_mutex()</ref> correctly if you manipulate or iterate the map returned by this method! If you do not, this is not thread safe and will cause crashes! </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cache_1a5ff19cda1ffdfaa11f0e4027ba8d1b76" kindref="member">cache::get_mutex</ref></para>
</simplesect>
<simplesect kind="return"><para>A reference to the cache&apos;s container map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="148" column="7" bodyfile="include/dpp/cache.h" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cache_1af1c53b4d84ae2d1c1fbf8d540d884034" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cache&lt; T &gt;::rehash</definition>
        <argsstring>()</argsstring>
        <name>rehash</name>
        <briefdescription>
<para>&quot;Rehash&quot; a cache by cleaning out used RAM </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>May be time consuming! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="156" column="6" bodyfile="include/dpp/cache.h" bodystart="156" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cache_1a9b2dc568fe8e6e92006a3bf3891b74c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::cache&lt; T &gt;::bytes</definition>
        <argsstring>()</argsstring>
        <name>bytes</name>
        <briefdescription>
<para>Get &quot;real&quot; size in RAM of the cache. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cache.h" line="172" column="8" bodyfile="include/dpp/cache.h" bodystart="172" bodyend="175"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A cache object maintains a cache of <ref refid="classdpp_1_1managed" kindref="compound">dpp::managed</ref> objects. This is for example users, channels or guilds. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/dpp/cache.h" line="41" column="11" bodyfile="include/dpp/cache.h" bodystart="41" bodyend="177"/>
    <listofallmembers>
      <member refid="classdpp_1_1cache_1a9b2dc568fe8e6e92006a3bf3891b74c3" prot="public" virt="non-virtual"><scope>dpp::cache</scope><name>bytes</name></member>
      <member refid="classdpp_1_1cache_1ae7b01fd8baebf24d31f6e0e2f15df8e2" prot="public" virt="non-virtual"><scope>dpp::cache</scope><name>cache</name></member>
      <member refid="classdpp_1_1cache_1af05540682d77589f50cc5bd54665ac18" prot="private" virt="non-virtual"><scope>dpp::cache</scope><name>cache_map</name></member>
      <member refid="classdpp_1_1cache_1a6a77ce300428f922964d0f1f7b85816f" prot="private" virt="non-virtual"><scope>dpp::cache</scope><name>cache_mutex</name></member>
      <member refid="classdpp_1_1cache_1a63fb9389314371ca017647db2aad53f1" prot="public" virt="non-virtual"><scope>dpp::cache</scope><name>count</name></member>
      <member refid="classdpp_1_1cache_1abf1e2911e8e1559fa15a36c5f90454d3" prot="public" virt="non-virtual"><scope>dpp::cache</scope><name>find</name></member>
      <member refid="classdpp_1_1cache_1ab7647df5af8f7bf01826bf650b157aa4" prot="public" virt="non-virtual"><scope>dpp::cache</scope><name>get_container</name></member>
      <member refid="classdpp_1_1cache_1a5ff19cda1ffdfaa11f0e4027ba8d1b76" prot="public" virt="non-virtual"><scope>dpp::cache</scope><name>get_mutex</name></member>
      <member refid="classdpp_1_1cache_1af1c53b4d84ae2d1c1fbf8d540d884034" prot="public" virt="non-virtual"><scope>dpp::cache</scope><name>rehash</name></member>
      <member refid="classdpp_1_1cache_1a4994e44f3ec37d08acc8c064c95746ad" prot="public" virt="non-virtual"><scope>dpp::cache</scope><name>remove</name></member>
      <member refid="classdpp_1_1cache_1ab2aa9a2fbf0cb47d49d4bba05c2e2039" prot="public" virt="non-virtual"><scope>dpp::cache</scope><name>store</name></member>
      <member refid="classdpp_1_1cache_1a9e99a62833153d92a3dd160ae91b031b" prot="public" virt="non-virtual"><scope>dpp::cache</scope><name>~cache</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
