<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="expiring-buttons" kind="page">
    <compoundname>expiring-buttons</compoundname>
    <title>Making expiring buttons with when_any</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><para><simplesect kind="warning"><para>D++ Coroutines are a very new feature and are currently only supported by D++ on g++ 13, clang/LLVM 14, and MSVC 19.37 or above. Additionally, D++ must be built with the CMake option DPP_CORO, and your program must both define the macro DPP_CORO and use C++20 or above. The feature is experimental and may have bugs or even crashes, please report any to <ulink url="https://github.com/brainboxdotcc/DPP/issues">GitHub Issues</ulink> or to our <ulink url="https://discord.gg/dpp">Discord Server</ulink>. </para>
</simplesect>
</para>
</para>
<para>In the last example we&apos;ve explored how to <ref refid="awaiting-events" kindref="compound">await events</ref> using coroutines, we ran into the problem of the coroutine waiting forever if the button was never clicked. Wouldn&apos;t it be nice if we could add an &quot;or&quot; to our algorithm, for example wait for the button to be clicked <emphasis>or</emphasis> for a timer to expire? I&apos;m glad you asked! D++ offers <ref refid="classdpp_1_1when__any" kindref="compound">when_any</ref> which allows exactly that. It is a templated class that can take any number of awaitable objects and can be <computeroutput>co_await</computeroutput>-ed itself, will resume when the <bold>first</bold> awaitable completes and return a <ref refid="classdpp_1_1when__any_1_1result" kindref="compound">result</ref> object that allows to retrieve which awaitable completed as well as its result, in a similar way as std::variant.</para>
<para><programlisting filename="coro_expiring_buttons.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;dpp/dpp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref><sp/>bot{</highlight><highlight class="stringliteral">&quot;token&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.<ref refid="classdpp_1_1cluster_1ab840686c7cd2e15f4a66ab64f62e106b" kindref="member">on_log</ref>(<ref refid="namespacedpp_1_1utility_1a8c2cc04bb80ffd287b376d5977899277" kindref="member">dpp::utility::cout_logger</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_slashcommand([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1slashcommand__t" kindref="compound">dpp::slashcommand_t</ref>&amp;<sp/>event)<sp/>-&gt;<sp/><ref refid="classdpp_1_1task" kindref="compound">dpp::task&lt;void&gt;</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.<ref refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" kindref="member">command</ref>.<ref refid="classdpp_1_1interaction_1aabbb8d58d708128098516ed443d5c140" kindref="member">get_command_name</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>message<sp/>and<sp/>add<sp/>a<sp/>button<sp/>with<sp/>its<sp/>custom<sp/>ID<sp/>set<sp/>to<sp/>the<sp/>command<sp/>interaction&apos;s<sp/>ID<sp/>so<sp/>we<sp/>can<sp/>identify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dpp::message<sp/>m{</highlight><highlight class="stringliteral">&quot;Test&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">{event.command.id.str()};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedpp_1_1unicode__emoji_1a24ac871c89f4e1779cfeda23077faeac" kindref="member">m</ref>.add_component(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref>{}.<ref refid="classdpp_1_1component_1a3707437be16cc7dfd5edcf321f8e842d" kindref="member">add_component</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classdpp_1_1component_1a281e39d6b8c65b1fd301d195a835e703" kindref="member">set_type</ref>(<ref refid="namespacedpp_1afce43206033521b990e3a72bb87481b7a98228836af5d0c180cfc05eb1f0bfde9" kindref="member">dpp::cot_button</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classdpp_1_1component_1a33f254b5ac5a043870cb30efc99fb580" kindref="member">set_label</ref>(</highlight><highlight class="stringliteral">&quot;Click<sp/>me!&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classdpp_1_1component_1a5b5e20746e11d017569ccc46efd56688" kindref="member">set_id</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">co_await</highlight><highlight class="normal"><sp/>event.<ref refid="structdpp_1_1interaction__create__t_1aef38626cd24d2212b00ab866509b4d59" kindref="member">co_reply</ref>(m);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">co_await</highlight><highlight class="normal"><sp/><ref refid="classdpp_1_1when__any" kindref="compound">dpp::when_any</ref>{<sp/></highlight><highlight class="comment">//<sp/>Whichever<sp/>completes<sp/>first...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event.from-&gt;creator-&gt;on_button_click.when([&amp;id](const<sp/>dpp::button_click_t<sp/>&amp;b)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Button<sp/>clicked</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>b.custom_id<sp/>==<sp/>id;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.from-&gt;creator-&gt;co_sleep(5)<sp/></highlight><highlight class="comment">//<sp/>Or<sp/>sleep<sp/>5<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note!!<sp/>Due<sp/>to<sp/>a<sp/>bug<sp/>in<sp/>g++11<sp/>and<sp/>g++12,<sp/>id<sp/>must<sp/>be<sp/>captured<sp/>as<sp/>a<sp/>reference<sp/>above<sp/>or<sp/>the<sp/>compiler<sp/>will<sp/>destroy<sp/>it<sp/>twice.<sp/>This<sp/>is<sp/>fixed<sp/>in<sp/>g++13</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.index()<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Awaitable<sp/>#0<sp/>completed<sp/>first,<sp/>that<sp/>is<sp/>the<sp/>button<sp/>click<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acknowledge<sp/>the<sp/>click<sp/>and<sp/>edit<sp/>the<sp/>original<sp/>response,<sp/>removing<sp/>the<sp/>button</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1button__click__t" kindref="compound">dpp::button_click_t</ref><sp/>&amp;click_event<sp/>=<sp/>result.get&lt;0&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>click_event.<ref refid="structdpp_1_1interaction__create__t_1a34f374b358f8d2d49fa93bfe5a2c0493" kindref="member">reply</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.edit_original_response(<ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref>{</highlight><highlight class="stringliteral">&quot;You<sp/>clicked<sp/>the<sp/>button<sp/>with<sp/>the<sp/>id<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>click_event.<ref refid="structdpp_1_1button__click__t_1a9cd563e83eab3b92b4aecda2680cf3c8" kindref="member">custom_id</ref>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Here<sp/>index()<sp/>is<sp/>1,<sp/>the<sp/>timer<sp/>expired</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">.edit_original_response(<ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref>{</highlight><highlight class="stringliteral">&quot;I<sp/>haven&apos;t<sp/>got<sp/>all<sp/>day!&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_ready([&amp;bot](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1ready__t" kindref="compound">dpp::ready_t</ref>&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dpp::run_once&lt;struct<sp/>register_bot_commands&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref><sp/>command{</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>awaiting<sp/>for<sp/>an<sp/>event&quot;</highlight><highlight class="normal">,<sp/>bot.me.<ref refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" kindref="member">id</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bot.global_command_create(command);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.start(<ref refid="namespacedpp_1af447e04d0490cd4a9de085e4a758faa4a155f7db65696b4c09b5fcc41787e4726" kindref="member">dpp::st_wait</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Any awaitable can be used with when_any, even <ref refid="classdpp_1_1task" kindref="compound">dpp::task</ref>, <ref refid="classdpp_1_1coroutine" kindref="compound">dpp::coroutine</ref>, <ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>. When the when_any object is destroyed, any of its awaitables with a cancel() method (for example <ref refid="classdpp_1_1task_1a2787e1f8313004716ac12a78be8ed50d" kindref="member">dpp::task</ref>) will have it called. With this you can easily make commands that ask for input in several steps, or maybe a timed text game, the possibilities are endless! Note that if the first awaitable completes with an exception, result.get will throw it.</para>
<para><simplesect kind="note"><para>when_any will try to construct awaitable objects from the parameter you pass it, which it will own. In practice this means you can only pass it <ulink url="https://www.learncpp.com/cpp-tutorial/value-categories-lvalues-and-rvalues/">temporary objects (rvalues)</ulink> as most of the coroutine-related objects in D++ are move-only. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="docpages/example_programs/using_coroutines/expiring_buttons.md"/>
  </compounddef>
</doxygen>
