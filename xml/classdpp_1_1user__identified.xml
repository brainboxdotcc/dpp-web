<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1user__identified" kind="class" language="C++" prot="public">
    <compoundname>dpp::user_identified</compoundname>
    <basecompoundref refid="classdpp_1_1user" prot="public" virt="non-virtual">dpp::user</basecompoundref>
    <includes local="no">user.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1user__identified_1a5b1955e6f623db547bcebccd8da5b1a0" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::user_identified::banner</definition>
        <argsstring></argsstring>
        <name>banner</name>
        <briefdescription>
<para>Optional: the user&apos;s banner hash identify (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="260" column="18" bodyfile="include/dpp/user.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user__identified_1a6cdebbe04c3a6a52a7148a21eea0613c" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::user_identified::accent_color</definition>
        <argsstring></argsstring>
        <name>accent_color</name>
        <briefdescription>
<para>Optional: the user&apos;s banner color encoded as an integer representation of hexadecimal color code identify (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="261" column="9" bodyfile="include/dpp/user.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user__identified_1a0198108a251db7e4d893d8ab39e8e18b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::user_identified::locale</definition>
        <argsstring></argsstring>
        <name>locale</name>
        <briefdescription>
<para>Optional: the user&apos;s chosen language option identify. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="262" column="12" bodyfile="include/dpp/user.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user__identified_1a351cc6902117ad39c86539a41e1c23cd" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::user_identified::verified</definition>
        <argsstring></argsstring>
        <name>verified</name>
        <briefdescription>
<para>Optional: whether the email on this account has been verified email. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="263" column="5" bodyfile="include/dpp/user.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user__identified_1a9636dd7572180e536bb6d96fc9721197" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::user_identified::email</definition>
        <argsstring></argsstring>
        <name>email</name>
        <briefdescription>
<para>Optional: the user&apos;s email email (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="264" column="12" bodyfile="include/dpp/user.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1a4e72b2e5ac7d5539fdae64be6e01246c" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::user::username</definition>
        <argsstring></argsstring>
        <name>username</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discord username </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="81" column="13" bodyfile="include/dpp/user.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1afe658cc2d4adcf83a76f798dead3e5e6" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::user::discriminator</definition>
        <argsstring></argsstring>
        <name>discriminator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discriminator (aka tag), 4 digits usually displayed with leading zeroes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="83" column="10" bodyfile="include/dpp/user.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1ae9d90b269f17fc2c5a0021dcb2b8dce3" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::user::avatar</definition>
        <argsstring></argsstring>
        <name>avatar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Avatar hash </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="85" column="19" bodyfile="include/dpp/user.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1aab86456a191f214b38277cf65bb6af05" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::user::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags built from a bitmask of values in <ref refid="namespacedpp_1a99a238db04976402abb94ea0c989d8c0" kindref="member">dpp::user_flags</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="87" column="10" bodyfile="include/dpp/user.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1a68d336b1fc0b592ea970c11eaf9f2048" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::user::refcount</definition>
        <argsstring></argsstring>
        <name>refcount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference count of how many guilds this user is in </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="89" column="9" bodyfile="include/dpp/user.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relavent to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discord.h" line="48" column="11" bodyfile="include/dpp/discord.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1user__identified_1a60735ed134723b215cb6920ad96e30cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> &amp;</type>
        <definition>user_identified &amp; dpp::user_identified::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill this record from json. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The json to fill this record from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="270" column="17" bodyfile="src/dpp/user.cpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user__identified_1ac66ddd9e773d41eaeb7fc2d6c5eac255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::user_identified::user_identified</definition>
        <argsstring>()</argsstring>
        <name>user_identified</name>
        <briefdescription>
<para>Construct a new user identified object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="275" column="1" bodyfile="src/dpp/user.cpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user__identified_1a9cb53a8e30f9782cd8efc882337e887b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>dpp::user_identified::~user_identified</definition>
        <argsstring>()</argsstring>
        <name>~user_identified</name>
        <briefdescription>
<para>Destroy the user identified object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="280" column="9" bodyfile="src/dpp/user.cpp" bodystart="64" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1adddc16b840a409119b9bda1af4e39e42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::user::get_avatar_url</definition>
        <argsstring>(uint16_t size=0) const</argsstring>
        <name>get_avatar_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the avatar url of the user object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the avatar in pixels. It can be any power of two between 16 and 4096. if not specified, the default size is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string avatar url </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="113" column="13" bodyfile="src/dpp/user.cpp" bodystart="67" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a09743ef07e78406808e74a8bd7b5d658" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::user::get_mention</definition>
        <argsstring>() const</argsstring>
        <name>get_mention</name>
        <briefdescription>
<para>Return a ping/mention for the user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string mention </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="120" column="13" bodyfile="src/dpp/user.cpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1aeb219805eb74e76d7814ba671de31a21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bot</definition>
        <argsstring>() const</argsstring>
        <name>is_bot</name>
        <briefdescription>
<para>User is a bot. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the user is a bot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="127" column="6" bodyfile="src/dpp/user.cpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1ae38c55d7ccd3752f73cf2a7bbe40b8fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_system</definition>
        <argsstring>() const</argsstring>
        <name>is_system</name>
        <briefdescription>
<para>User is a system user (Clyde) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user is a system user </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="133" column="6" bodyfile="src/dpp/user.cpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a08cd09a04a75493693d60a99e0123905" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_mfa_enabled</definition>
        <argsstring>() const</argsstring>
        <name>is_mfa_enabled</name>
        <briefdescription>
<para>User has multi-factor authentication enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if multi-factor is enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="139" column="6" bodyfile="src/dpp/user.cpp" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1aa08cdd77402ef1d08b003e2e5342004a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_verified</definition>
        <argsstring>() const</argsstring>
        <name>is_verified</name>
        <briefdescription>
<para>Return true if user has verified account. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if verified </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="145" column="6" bodyfile="src/dpp/user.cpp" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a9c4116cc16eb91d0a1e3b3803c618395" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_nitro_full</definition>
        <argsstring>() const</argsstring>
        <name>has_nitro_full</name>
        <briefdescription>
<para>Return true if user has full nitro. This is mutually exclusive with full nitro. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user has full nitro </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="152" column="6" bodyfile="src/dpp/user.cpp" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a2a7d44696be1880931498dc48d4bb23c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_nitro_classic</definition>
        <argsstring>() const</argsstring>
        <name>has_nitro_classic</name>
        <briefdescription>
<para>Return true if user has nitro classic. This is mutually exclusive with nitro classic. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user has nitro classic </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="159" column="6" bodyfile="src/dpp/user.cpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a5780e0142e20d952d348c33d51a4d926" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_discord_employee</definition>
        <argsstring>() const</argsstring>
        <name>is_discord_employee</name>
        <briefdescription>
<para>Return true if user is a discord employee. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user is discord staff </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="165" column="6" bodyfile="src/dpp/user.cpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a75120bc6c3b53125f7396853052b6c52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_partnered_owner</definition>
        <argsstring>() const</argsstring>
        <name>is_partnered_owner</name>
        <briefdescription>
<para>Return true if user owns a partnered server. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user has partnered server </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="171" column="6" bodyfile="src/dpp/user.cpp" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1aaaa1239fe84eb4d3c88b8812a14c598b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_hypesquad_events</definition>
        <argsstring>() const</argsstring>
        <name>has_hypesquad_events</name>
        <briefdescription>
<para>Return true if user has hypesquad events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has hypesquad events </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="177" column="6" bodyfile="src/dpp/user.cpp" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1afeb70e25be8585ff557b51dd99bb7f99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bughunter_1</definition>
        <argsstring>() const</argsstring>
        <name>is_bughunter_1</name>
        <briefdescription>
<para>Return true if user has the bughunter level 1 badge. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has bughunter level 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="183" column="6" bodyfile="src/dpp/user.cpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1afe19328a79ed87eb25fcb9fbbd8da2b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_house_bravery</definition>
        <argsstring>() const</argsstring>
        <name>is_house_bravery</name>
        <briefdescription>
<para>Return true if user is in house bravery. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in house bravery </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="189" column="6" bodyfile="src/dpp/user.cpp" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1af4a509ae622f1b4531a758524b34f47e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_house_brilliance</definition>
        <argsstring>() const</argsstring>
        <name>is_house_brilliance</name>
        <briefdescription>
<para>Return true if user is in house brilliance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in house brilliance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="195" column="6" bodyfile="src/dpp/user.cpp" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1ae4fda64d92055ef9ddac0ce0109b8d94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_house_balanace</definition>
        <argsstring>() const</argsstring>
        <name>is_house_balanace</name>
        <briefdescription>
<para>Return true if user is in house balance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in house brilliance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="201" column="6" bodyfile="src/dpp/user.cpp" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a5768865659ca76eebc37a8f02b1b7b9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_early_supporter</definition>
        <argsstring>() const</argsstring>
        <name>is_early_supporter</name>
        <briefdescription>
<para>Return true if user is an early supporter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if early supporter </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="207" column="6" bodyfile="src/dpp/user.cpp" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1ab5309aeff0b712ed39e6fb47dd19d32b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_team_user</definition>
        <argsstring>() const</argsstring>
        <name>is_team_user</name>
        <briefdescription>
<para>Return true if user is a team user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if a team user </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="213" column="6" bodyfile="src/dpp/user.cpp" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a287d9706c6ba49a5d627ceef2d5c3525" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bughunter_2</definition>
        <argsstring>() const</argsstring>
        <name>is_bughunter_2</name>
        <briefdescription>
<para>Return true if user has the bughunter level 2 badge. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has bughunter level 2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="219" column="6" bodyfile="src/dpp/user.cpp" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a9aabc6989097e79dc8e3e8d00d7a0c5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_verified_bot</definition>
        <argsstring>() const</argsstring>
        <name>is_verified_bot</name>
        <briefdescription>
<para>Return true if user has the verified bot badge. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if verified bot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="225" column="6" bodyfile="src/dpp/user.cpp" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1abe54bbcf190f3aba2aeaf8c2d6287152" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_verified_bot_dev</definition>
        <argsstring>() const</argsstring>
        <name>is_verified_bot_dev</name>
        <briefdescription>
<para>Return true if user is an early verified bot developer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if verified bot developer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="231" column="6" bodyfile="src/dpp/user.cpp" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a88d7f40223baa835b92f6aa54af42420" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_certified_moderator</definition>
        <argsstring>() const</argsstring>
        <name>is_certified_moderator</name>
        <briefdescription>
<para>Return true if user is a certified moderator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if certified moderator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="237" column="6" bodyfile="src/dpp/user.cpp" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a897b8816c44f11d99ad54b4f87521a20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bot_http_interactions</definition>
        <argsstring>() const</argsstring>
        <name>is_bot_http_interactions</name>
        <briefdescription>
<para>Return true if user is a bot which exclusively uses HTTP interactions. Bots using HTTP interactions are always considered online even when not connected to a websocket. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if is a http interactions only bot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="244" column="6" bodyfile="src/dpp/user.cpp" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a51c599c37ab5ccc1b770084c937abe98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_animated_icon</definition>
        <argsstring>() const</argsstring>
        <name>has_animated_icon</name>
        <briefdescription>
<para>Return true if user has an animated icon. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if icon is animated (gif) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="250" column="6" bodyfile="src/dpp/user.cpp" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discord.h" line="65" column="8" bodyfile="src/dpp/discordevents.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A user with additional fields only available via the oauth2 identify scope. These are not included in <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> as additional scopes are needed to fetch them which bots do not normally have. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="2">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::user_identified</label>
        <link refid="classdpp_1_1user__identified"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>bool</label>
      </node>
      <node id="3">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="4" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::user_identified</label>
        <link refid="classdpp_1_1user__identified"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>banner</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>accent_color</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>email</edgelabel>
          <edgelabel>locale</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>verified</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="4" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>uint16_t</label>
      </node>
      <node id="9">
        <label>uint32_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="10">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/user.h" line="258" column="1" bodyfile="include/dpp/user.h" bodystart="258" bodyend="282"/>
    <listofallmembers>
      <member refid="classdpp_1_1user__identified_1a6cdebbe04c3a6a52a7148a21eea0613c" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>accent_color</name></member>
      <member refid="classdpp_1_1user_1ae9d90b269f17fc2c5a0021dcb2b8dce3" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>avatar</name></member>
      <member refid="classdpp_1_1user__identified_1a5b1955e6f623db547bcebccd8da5b1a0" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>banner</name></member>
      <member refid="classdpp_1_1user_1afe658cc2d4adcf83a76f798dead3e5e6" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>discriminator</name></member>
      <member refid="classdpp_1_1user__identified_1a9636dd7572180e536bb6d96fc9721197" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>email</name></member>
      <member refid="classdpp_1_1user__identified_1a60735ed134723b215cb6920ad96e30cc" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1user_1aab86456a191f214b38277cf65bb6af05" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>flags</name></member>
      <member refid="classdpp_1_1user_1adddc16b840a409119b9bda1af4e39e42" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>get_avatar_url</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1user_1a09743ef07e78406808e74a8bd7b5d658" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>get_mention</name></member>
      <member refid="classdpp_1_1user_1a51c599c37ab5ccc1b770084c937abe98" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>has_animated_icon</name></member>
      <member refid="classdpp_1_1user_1aaaa1239fe84eb4d3c88b8812a14c598b" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>has_hypesquad_events</name></member>
      <member refid="classdpp_1_1user_1a2a7d44696be1880931498dc48d4bb23c" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>has_nitro_classic</name></member>
      <member refid="classdpp_1_1user_1a9c4116cc16eb91d0a1e3b3803c618395" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>has_nitro_full</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>id</name></member>
      <member refid="classdpp_1_1user_1aeb219805eb74e76d7814ba671de31a21" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_bot</name></member>
      <member refid="classdpp_1_1user_1a897b8816c44f11d99ad54b4f87521a20" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_bot_http_interactions</name></member>
      <member refid="classdpp_1_1user_1afeb70e25be8585ff557b51dd99bb7f99" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_bughunter_1</name></member>
      <member refid="classdpp_1_1user_1a287d9706c6ba49a5d627ceef2d5c3525" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_bughunter_2</name></member>
      <member refid="classdpp_1_1user_1a88d7f40223baa835b92f6aa54af42420" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_certified_moderator</name></member>
      <member refid="classdpp_1_1user_1a5780e0142e20d952d348c33d51a4d926" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_discord_employee</name></member>
      <member refid="classdpp_1_1user_1a5768865659ca76eebc37a8f02b1b7b9b" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_early_supporter</name></member>
      <member refid="classdpp_1_1user_1ae4fda64d92055ef9ddac0ce0109b8d94" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_house_balanace</name></member>
      <member refid="classdpp_1_1user_1afe19328a79ed87eb25fcb9fbbd8da2b5" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_house_bravery</name></member>
      <member refid="classdpp_1_1user_1af4a509ae622f1b4531a758524b34f47e" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_house_brilliance</name></member>
      <member refid="classdpp_1_1user_1a08cd09a04a75493693d60a99e0123905" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_mfa_enabled</name></member>
      <member refid="classdpp_1_1user_1a75120bc6c3b53125f7396853052b6c52" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_partnered_owner</name></member>
      <member refid="classdpp_1_1user_1ae38c55d7ccd3752f73cf2a7bbe40b8fb" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_system</name></member>
      <member refid="classdpp_1_1user_1ab5309aeff0b712ed39e6fb47dd19d32b" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_team_user</name></member>
      <member refid="classdpp_1_1user_1aa08cdd77402ef1d08b003e2e5342004a" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_verified</name></member>
      <member refid="classdpp_1_1user_1a9aabc6989097e79dc8e3e8d00d7a0c5f" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_verified_bot</name></member>
      <member refid="classdpp_1_1user_1abe54bbcf190f3aba2aeaf8c2d6287152" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>is_verified_bot_dev</name></member>
      <member refid="classdpp_1_1user__identified_1a0198108a251db7e4d893d8ab39e8e18b" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>locale</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>managed</name></member>
      <member refid="classdpp_1_1user_1a68d336b1fc0b592ea970c11eaf9f2048" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>refcount</name></member>
      <member refid="classdpp_1_1user_1a10ae5c579f6d60370d825e71fdff697b" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>user</name></member>
      <member refid="classdpp_1_1user__identified_1ac66ddd9e773d41eaeb7fc2d6c5eac255" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>user_identified</name></member>
      <member refid="classdpp_1_1user_1a4e72b2e5ac7d5539fdae64be6e01246c" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>username</name></member>
      <member refid="classdpp_1_1user__identified_1a351cc6902117ad39c86539a41e1c23cd" prot="public" virt="non-virtual"><scope>dpp::user_identified</scope><name>verified</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::user_identified</scope><name>~managed</name></member>
      <member refid="classdpp_1_1user_1a7787310b4607e5e3eb61c2b504bae94e" prot="public" virt="virtual"><scope>dpp::user_identified</scope><name>~user</name></member>
      <member refid="classdpp_1_1user__identified_1a9cb53a8e30f9782cd8efc882337e887b" prot="public" virt="virtual"><scope>dpp::user_identified</scope><name>~user_identified</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
