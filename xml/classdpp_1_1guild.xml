<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classdpp_1_1guild" kind="class" prot="public">
    <compoundname>dpp::guild</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">guild.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1guild_1a80181fee5f66b2dd6f24bad72226bf7c" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::guild::shard_id</definition>
        <argsstring></argsstring>
        <name>shard_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shard ID of the guild </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="166" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a0525bf0e263ae902a4d6fb295691cb34" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::guild::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags bitmask as defined by values within <ref refid="namespacedpp_1a94aba4d1f2669c7da3b676859d54602f" kindref="member">dpp::guild_flags</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="169" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ab39f33c8525ab7f7a02f8e88b0448c1f" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::guild::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild name </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="172" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ade8a95b5a41929f92e1fbc079cedb86e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::guild::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Server description for communities </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="175" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad858d700638f1785f2338e8ec667c74f" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::guild::vanity_url_code</definition>
        <argsstring></argsstring>
        <name>vanity_url_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vanity url code for verified or partnered servers and boost level 3 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="178" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ab0ad04559371a5e732dd1574622ab28d" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::guild::icon</definition>
        <argsstring></argsstring>
        <name>icon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild icon hash </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="181" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a45281957f5252467c6b620c61de4ca14" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::guild::splash</definition>
        <argsstring></argsstring>
        <name>splash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild splash hash </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="184" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a368ba3a6ae2e752a3f702dcba5eb5ce0" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::guild::discovery_splash</definition>
        <argsstring></argsstring>
        <name>discovery_splash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild discovery splash hash </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="187" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a4f608587f82bc3deab0974aeb30b2f24" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::owner_id</definition>
        <argsstring></argsstring>
        <name>owner_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Snowflake id of guild owner </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="190" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ab4e8470fb6d73ecc5cf60d952616fda6" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a51891a9e382f9c396d378de00fa65099" kindref="member">region</ref></type>
        <definition>region dpp::guild::voice_region</definition>
        <argsstring></argsstring>
        <name>voice_region</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild voice region </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="193" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1afe32f37c1ac7dcde9933ba48e7b27130" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::afk_channel_id</definition>
        <argsstring></argsstring>
        <name>afk_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Snowflake ID of AFK voice channel or 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="196" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a624cb68654a2d32be54f4203835b0722" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild::afk_timeout</definition>
        <argsstring></argsstring>
        <name>afk_timeout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Voice AFK timeout before moving users to AFK channel </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="199" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad456524472a24e2592560a4a497c4b01" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::widget_channel_id</definition>
        <argsstring></argsstring>
        <name>widget_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Snowflake ID of widget channel, or 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="202" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a6132ae5944f766ade85c4fc4521180a5" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild::verification_level</definition>
        <argsstring></argsstring>
        <name>verification_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verification level of server </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="205" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a304278e17a5d18d322a91cd6e2843a7f" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild::default_message_notifications</definition>
        <argsstring></argsstring>
        <name>default_message_notifications</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setting for how notifications are to be delivered to users </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="208" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1aaf0bdf8f43b4feafb756431764a8d9aa" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild::explicit_content_filter</definition>
        <argsstring></argsstring>
        <name>explicit_content_filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether or not explicit content filtering is enable and what setting it is </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="211" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a29059b4f68f9d24505beefb1d550092d" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild::mfa_level</definition>
        <argsstring></argsstring>
        <name>mfa_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If multi factor authentication is required for moderators or not </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="214" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a9f9174bd64a91357f618a957db555d20" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::application_id</definition>
        <argsstring></argsstring>
        <name>application_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID of creating application, if any, or 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="217" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a0fc5cec016c0604ce2575fbe5eea5ded" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::system_channel_id</definition>
        <argsstring></argsstring>
        <name>system_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID of system channel where discord update messages are sent </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="220" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a860098b080bc3bf11c1c44bb77edda09" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::rules_channel_id</definition>
        <argsstring></argsstring>
        <name>rules_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID of rules channel for communities </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="223" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a8c861567b28347debc48618653a0cf1e" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::guild::member_count</definition>
        <argsstring></argsstring>
        <name>member_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximate member count. May be sent as zero </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="226" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad5736b31cf35641cb2c78f9353d3a8a5" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::guild::banner</definition>
        <argsstring></argsstring>
        <name>banner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Server banner hash </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="229" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a164e4d1c99fcce1bed5a72d3bb5e493e" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild::premium_tier</definition>
        <argsstring></argsstring>
        <name>premium_tier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Boost level </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="232" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1acd884a98bc58d26d29a6a5d2e249f1c9" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::guild::premium_subscription_count</definition>
        <argsstring></argsstring>
        <name>premium_subscription_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of boosters </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="235" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a10f966d4bc54c233a1ecd6a24ca80dc3" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::public_updates_channel_id</definition>
        <argsstring></argsstring>
        <name>public_updates_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Public updates channel id or 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="238" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad0334ce3a68a51441d539120ceb7123e" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::guild::max_video_channel_users</definition>
        <argsstring></argsstring>
        <name>max_video_channel_users</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum users in a video channel, or 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="241" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a08c72430a41c55914776f3d82e45235c" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::roles</definition>
        <argsstring></argsstring>
        <name>roles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Roles defined on this server </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="244" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a0995288cfbf8ae64973bbf0181d1789a" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::channels</definition>
        <argsstring></argsstring>
        <name>channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of channels on this server </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="247" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a8e13e2dd21e91104a1e8335990046bf7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::threads</definition>
        <argsstring></argsstring>
        <name>threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of threads on this server </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="250" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a65c77ce1a6155bc6e7fd6f8937bd1385" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a674dfd30e37779538e80d95fcb13770f" kindref="member">members_container</ref></type>
        <definition>members_container dpp::guild::members</definition>
        <argsstring></argsstring>
        <name>members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of guild members. Note that when you first receive the guild create event, this may be empty or near empty. This depends upon your <ref refid="namespacedpp_1a0042c0fc8164da4239b977d5be8e2ef5" kindref="member">dpp::intents</ref> and the size of your bot. It will be filled by guild member chunk requests. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="257" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a42066fe3bbfb976ba27fbb9ca38b722f" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, <ref refid="classdpp_1_1voicestate" kindref="compound">voicestate</ref> &gt;</type>
        <definition>std::map&lt;snowflake, voicestate&gt; dpp::guild::voice_members</definition>
        <argsstring></argsstring>
        <name>voice_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of members in voice channels in the guild. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="261" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a9169668a25a134dc50bbdb6dd9ddd203" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::emojis</definition>
        <argsstring></argsstring>
        <name>emojis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of emojis </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="265" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unique ID of object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discord.h" line="44" column="1" bodyfile="/home/brain/D++/include/dpp/discord.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1guild_1aeae6599054436a5a66e07683032089dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::guild::guild</definition>
        <argsstring>()</argsstring>
        <name>guild</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor, zeroes all values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="268" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="69" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a7e494da5ab1aaaddae4d588849ea9f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::guild::~guild</definition>
        <argsstring>()=default</argsstring>
        <name>~guild</name>
        <briefdescription>
<para>Destroy the guild object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1af180ee5682802b64c79d2dc8abc7c9cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::fill_from_json</definition>
        <argsstring>(class discord_client *shard, nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>shard</declname>
        </param>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shard</parametername>
</parameternamelist>
<parameterdescription>
<para>originating shard </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="280" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="278" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ab06f6531b9380ece07b3d8861a4de268" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild::build_json</definition>
        <argsstring>(bool with_id=false) const </argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a JSON string from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if an ID is to be included in the JSON </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="285" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="232" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aab6c11a3f36981309411c979615e1a2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::guild::base_permissions</definition>
        <argsstring>(const class user *member) const </argsstring>
        <name>base_permissions</name>
        <param>
          <type>const class <ref refid="classdpp_1_1user" kindref="compound">user</ref> *</type>
          <declname>member</declname>
        </param>
        <briefdescription>
<para>Get the base permissions for a member on this guild, before permission overwrites are applied. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>member to get permissions for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t permissions bitmask </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="294" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="383" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a6a4f4c513e88f3827c8ae666ae13af26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::guild::permission_overwrites</definition>
        <argsstring>(const uint64_t base_permissions, const user *member, const channel *channel) const </argsstring>
        <name>permission_overwrites</name>
        <param>
          <type>const uint64_t</type>
          <declname>base_permissions</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1user" kindref="compound">user</ref> *</type>
          <declname>member</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> *</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get the permission overwrites for a member merged into a bitmask. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base_permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>base permissions before overwrites, from channel::base_permissions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member to fetch permissions for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to fetch permissions against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t Merged permissions bitmask of overwrites. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="306" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="407" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aeed0e3f51cc2ce2a6752be2ba7b6f8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::guild::rehash_members</definition>
        <argsstring>()</argsstring>
        <name>rehash_members</name>
        <briefdescription>
<para>Rehash members map. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="311" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="268" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a0d5e43e678d6a0448930bd31620d979e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::connect_member_voice</definition>
        <argsstring>(snowflake user_id, bool self_mute=false, bool self_deaf=false)</argsstring>
        <name>connect_member_voice</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>self_mute</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>self_deaf</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Connect to a voice channel another guild member is in. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User id to join </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_mute</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the bot should mute itself </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_deaf</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the bot should deafen itself </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the user specified is in a vc, false if they aren&apos;t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="321" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="449" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a5d10dece15c93608ae53980867d965aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_large</definition>
        <argsstring>() const </argsstring>
        <name>is_large</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is a large server (&gt;250 users) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="324" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a5793a0a2731dd784b17f77bffa14f529" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_unavailable</definition>
        <argsstring>() const </argsstring>
        <name>is_unavailable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is unavailable due to outage (most other fields will be blank or outdated </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="327" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a589a0df44c82fe9521b44a8165a0ac20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::widget_enabled</definition>
        <argsstring>() const </argsstring>
        <name>widget_enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Widget is enabled for this server </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="330" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a288b9cdd721868fc73c375c6919dd563" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_invite_splash</definition>
        <argsstring>() const </argsstring>
        <name>has_invite_splash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild has an invite splash </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="333" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a3fd38418d77e7c03a4954888d0996d3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_vip_regions</definition>
        <argsstring>() const </argsstring>
        <name>has_vip_regions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild has VIP regions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="336" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a076d93f613841640d046825f87ed8c7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_vanity_url</definition>
        <argsstring>() const </argsstring>
        <name>has_vanity_url</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild can have a vanity url </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="339" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a296b148f59dfebe1cb9a5bbe2c20af5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_verified</definition>
        <argsstring>() const </argsstring>
        <name>is_verified</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild is a verified server </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="342" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a84d8e9b43ec2d9d57e1560a876deeb62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_partnered</definition>
        <argsstring>() const </argsstring>
        <name>is_partnered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild is a discord partner server </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="345" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a39c03598958439d01661b27db81c395f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_community</definition>
        <argsstring>() const </argsstring>
        <name>is_community</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild has enabled community </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="348" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aa14963ef4888f0243a6ab25938650302" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_commerce</definition>
        <argsstring>() const </argsstring>
        <name>has_commerce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild has enabled commerce channels </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="351" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aa940f6a4ceadc06905d32c51634ebd2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_news</definition>
        <argsstring>() const </argsstring>
        <name>has_news</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild has news channels </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="354" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="196" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1af5eb464b52f74fc5b8c437fc2979887c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_discoverable</definition>
        <argsstring>() const </argsstring>
        <name>is_discoverable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild is discoverable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="357" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a64d75cbdbdf0965bbb9f1e1339bea7f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_featureable</definition>
        <argsstring>() const </argsstring>
        <name>is_featureable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild is featureable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="360" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aae04375a078b314ed11e18c8b058201b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_animated_icon</definition>
        <argsstring>() const </argsstring>
        <name>has_animated_icon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild is allowed an animated icon </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="363" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ae3b79bd157898acba7fe4475b5ecb31b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_banner</definition>
        <argsstring>() const </argsstring>
        <name>has_banner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild has a banner image </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="366" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ac59c9d19e736ae7f6ce3617684333677" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_welcome_screen_enabled</definition>
        <argsstring>() const </argsstring>
        <name>is_welcome_screen_enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild has enabled welcome screen </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="369" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a11908725a34cd6ef5530c6e0086ed8b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_member_verification_gate</definition>
        <argsstring>() const </argsstring>
        <name>has_member_verification_gate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild has enabled membership screening </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="372" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a5738a87f96c9cc0882721cc499cae68f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_preview_enabled</definition>
        <argsstring>() const </argsstring>
        <name>is_preview_enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild has preview enabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="375" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a1fa976c02abfde9f35ee6da45f0a955b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_animated_icon_hash</definition>
        <argsstring>() const </argsstring>
        <name>has_animated_icon_hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Server icon is actually an animated gif </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/guild.h" line="378" column="1" bodyfile="/home/brain/D++/src/dpp/guild.cpp" bodystart="228" bodyend="230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a guild on Discord (AKA a server) </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="9780">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="9779">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="9780" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9865">
        <label>function&lt; void(const dpp::guild_integrations_update_t &amp;event)&gt;</label>
      </node>
      <node id="9807">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="9806" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="9786" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="9808" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="9810" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="9793" relation="usage">
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>numshards</edgelabel>
          <edgelabel>intents</edgelabel>
        </childnode>
        <childnode refid="9788" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="9812" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
      </node>
      <node id="9803">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="9804" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="9805" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="9829">
        <label>function&lt; void(const dpp::stage_instance_delete_t &amp;event)&gt;</label>
      </node>
      <node id="9844">
        <label>function&lt; void(const dpp::message_create_t &amp;event)&gt;</label>
      </node>
      <node id="9830">
        <label>function&lt; void(const dpp::thread_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="9877">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="9783" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="9878" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="9788" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>session_id</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
      </node>
      <node id="9784">
        <label>std::unordered_map&lt; snowflake, guild_member &gt;</label>
        <childnode refid="9783" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="9785" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9870">
        <label>function&lt; void(const dpp::voice_buffer_send_t &amp;event)&gt;</label>
      </node>
      <node id="9857">
        <label>function&lt; void(const dpp::user_update_t &amp;event)&gt;</label>
      </node>
      <node id="9810">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="9782" relation="public-inheritance">
        </childnode>
        <childnode refid="9792" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="9793" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="9787" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="9788" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="9811" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="9815">
        <label>function&lt; void(const dpp::thread_members_update_t &amp;event)&gt;</label>
      </node>
      <node id="9859">
        <label>function&lt; void(const dpp::invite_create_t &amp;event)&gt;</label>
      </node>
      <node id="9831">
        <label>function&lt; void(const dpp::guild_create_t &amp;event)&gt;</label>
      </node>
      <node id="9861">
        <label>function&lt; void(const dpp::guild_emojis_update_t &amp;event)&gt;</label>
      </node>
      <node id="9791">
        <label>region</label>
      </node>
      <node id="9871">
        <label>function&lt; void(const dpp::guild_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="9801">
        <label>function&lt; int()&gt;</label>
      </node>
      <node id="9795">
        <label>dpp::voicestate</label>
        <link refid="classdpp_1_1voicestate"/>
        <childnode refid="9783" relation="usage">
          <edgelabel>user_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="9787" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="9788" relation="usage">
          <edgelabel>session_id</edgelabel>
        </childnode>
        <childnode refid="9796" relation="usage">
          <edgelabel>shard</edgelabel>
        </childnode>
      </node>
      <node id="9812">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="9813" relation="usage">
          <edgelabel>guild_role_create</edgelabel>
        </childnode>
        <childnode refid="9814" relation="usage">
          <edgelabel>voice_state_update</edgelabel>
        </childnode>
        <childnode refid="9815" relation="usage">
          <edgelabel>thread_members_update</edgelabel>
        </childnode>
        <childnode refid="9816" relation="usage">
          <edgelabel>channel_delete</edgelabel>
        </childnode>
        <childnode refid="9817" relation="usage">
          <edgelabel>thread_delete</edgelabel>
        </childnode>
        <childnode refid="9818" relation="usage">
          <edgelabel>integration_update</edgelabel>
        </childnode>
        <childnode refid="9819" relation="usage">
          <edgelabel>message_reaction_remove_emoji</edgelabel>
        </childnode>
        <childnode refid="9820" relation="usage">
          <edgelabel>resumed</edgelabel>
        </childnode>
        <childnode refid="9821" relation="usage">
          <edgelabel>presence_update</edgelabel>
        </childnode>
        <childnode refid="9822" relation="usage">
          <edgelabel>message_delete_bulk</edgelabel>
        </childnode>
        <childnode refid="9823" relation="usage">
          <edgelabel>voice_ready</edgelabel>
        </childnode>
        <childnode refid="9824" relation="usage">
          <edgelabel>guild_ban_remove</edgelabel>
        </childnode>
        <childnode refid="9825" relation="usage">
          <edgelabel>guild_role_delete</edgelabel>
        </childnode>
        <childnode refid="9826" relation="usage">
          <edgelabel>channel_update</edgelabel>
        </childnode>
        <childnode refid="9827" relation="usage">
          <edgelabel>stickers_update</edgelabel>
        </childnode>
        <childnode refid="9828" relation="usage">
          <edgelabel>guild_members_chunk</edgelabel>
        </childnode>
        <childnode refid="9829" relation="usage">
          <edgelabel>stage_instance_delete</edgelabel>
        </childnode>
        <childnode refid="9830" relation="usage">
          <edgelabel>thread_member_update</edgelabel>
        </childnode>
        <childnode refid="9831" relation="usage">
          <edgelabel>guild_create</edgelabel>
        </childnode>
        <childnode refid="9832" relation="usage">
          <edgelabel>message_reaction_remove</edgelabel>
        </childnode>
        <childnode refid="9833" relation="usage">
          <edgelabel>select_click</edgelabel>
        </childnode>
        <childnode refid="9834" relation="usage">
          <edgelabel>interaction_create</edgelabel>
        </childnode>
        <childnode refid="9835" relation="usage">
          <edgelabel>guild_join_request_delete</edgelabel>
        </childnode>
        <childnode refid="9836" relation="usage">
          <edgelabel>guild_member_add</edgelabel>
        </childnode>
        <childnode refid="9837" relation="usage">
          <edgelabel>voice_user_talking</edgelabel>
        </childnode>
        <childnode refid="9838" relation="usage">
          <edgelabel>thread_create</edgelabel>
        </childnode>
        <childnode refid="9839" relation="usage">
          <edgelabel>application_command_create</edgelabel>
        </childnode>
        <childnode refid="9840" relation="usage">
          <edgelabel>button_click</edgelabel>
        </childnode>
        <childnode refid="9841" relation="usage">
          <edgelabel>guild_update</edgelabel>
        </childnode>
        <childnode refid="9842" relation="usage">
          <edgelabel>message_reaction_remove_all</edgelabel>
        </childnode>
        <childnode refid="9843" relation="usage">
          <edgelabel>voice_receive</edgelabel>
        </childnode>
        <childnode refid="9844" relation="usage">
          <edgelabel>message_create</edgelabel>
        </childnode>
        <childnode refid="9845" relation="usage">
          <edgelabel>webhooks_update</edgelabel>
        </childnode>
        <childnode refid="9846" relation="usage">
          <edgelabel>message_reaction_add</edgelabel>
        </childnode>
        <childnode refid="9847" relation="usage">
          <edgelabel>message_delete</edgelabel>
        </childnode>
        <childnode refid="9848" relation="usage">
          <edgelabel>voice_track_marker</edgelabel>
        </childnode>
        <childnode refid="9849" relation="usage">
          <edgelabel>thread_list_sync</edgelabel>
        </childnode>
        <childnode refid="9850" relation="usage">
          <edgelabel>integration_delete</edgelabel>
        </childnode>
        <childnode refid="9851" relation="usage">
          <edgelabel>guild_ban_add</edgelabel>
        </childnode>
        <childnode refid="9852" relation="usage">
          <edgelabel>channel_pins_update</edgelabel>
        </childnode>
        <childnode refid="9853" relation="usage">
          <edgelabel>typing_start</edgelabel>
        </childnode>
        <childnode refid="9854" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="9855" relation="usage">
          <edgelabel>thread_update</edgelabel>
        </childnode>
        <childnode refid="9856" relation="usage">
          <edgelabel>integration_create</edgelabel>
        </childnode>
        <childnode refid="9857" relation="usage">
          <edgelabel>user_update</edgelabel>
        </childnode>
        <childnode refid="9858" relation="usage">
          <edgelabel>message_update</edgelabel>
        </childnode>
        <childnode refid="9859" relation="usage">
          <edgelabel>invite_create</edgelabel>
        </childnode>
        <childnode refid="9860" relation="usage">
          <edgelabel>invite_delete</edgelabel>
        </childnode>
        <childnode refid="9861" relation="usage">
          <edgelabel>guild_emojis_update</edgelabel>
        </childnode>
        <childnode refid="9862" relation="usage">
          <edgelabel>guild_delete</edgelabel>
        </childnode>
        <childnode refid="9863" relation="usage">
          <edgelabel>application_command_delete</edgelabel>
        </childnode>
        <childnode refid="9864" relation="usage">
          <edgelabel>application_command_update</edgelabel>
        </childnode>
        <childnode refid="9865" relation="usage">
          <edgelabel>guild_integrations_update</edgelabel>
        </childnode>
        <childnode refid="9866" relation="usage">
          <edgelabel>voice_server_update</edgelabel>
        </childnode>
        <childnode refid="9867" relation="usage">
          <edgelabel>guild_role_update</edgelabel>
        </childnode>
        <childnode refid="9868" relation="usage">
          <edgelabel>channel_create</edgelabel>
        </childnode>
        <childnode refid="9869" relation="usage">
          <edgelabel>stage_instance_create</edgelabel>
        </childnode>
        <childnode refid="9870" relation="usage">
          <edgelabel>voice_buffer_send</edgelabel>
        </childnode>
        <childnode refid="9871" relation="usage">
          <edgelabel>guild_member_update</edgelabel>
        </childnode>
        <childnode refid="9872" relation="usage">
          <edgelabel>guild_member_remove</edgelabel>
        </childnode>
        <childnode refid="9873" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
      </node>
      <node id="9785">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="9786" relation="usage">
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="9783" relation="usage">
          <edgelabel>user_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
        </childnode>
        <childnode refid="9787" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="9788" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="9790" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
      </node>
      <node id="9819">
        <label>function&lt; void(const dpp::message_reaction_remove_emoji_t &amp;event)&gt;</label>
      </node>
      <node id="9826">
        <label>function&lt; void(const dpp::channel_update_t &amp;event)&gt;</label>
      </node>
      <node id="9868">
        <label>function&lt; void(const dpp::channel_create_t &amp;event)&gt;</label>
      </node>
      <node id="9783">
        <label>uint64_t</label>
      </node>
      <node id="9863">
        <label>function&lt; void(const dpp::application_command_delete_t &amp;event)&gt;</label>
      </node>
      <node id="9860">
        <label>function&lt; void(const dpp::invite_delete_t &amp;event)&gt;</label>
      </node>
      <node id="9846">
        <label>function&lt; void(const dpp::message_reaction_add_t &amp;event)&gt;</label>
      </node>
      <node id="9840">
        <label>function&lt; void(const dpp::button_click_t &amp;event)&gt;</label>
      </node>
      <node id="9828">
        <label>function&lt; void(const dpp::guild_members_chunk_t &amp;event)&gt;</label>
      </node>
      <node id="9817">
        <label>function&lt; void(const dpp::thread_delete_t &amp;event)&gt;</label>
      </node>
      <node id="9836">
        <label>function&lt; void(const dpp::guild_member_add_t &amp;event)&gt;</label>
      </node>
      <node id="9853">
        <label>function&lt; void(const dpp::typing_start_t &amp;event)&gt;</label>
      </node>
      <node id="9850">
        <label>function&lt; void(const dpp::integration_delete_t &amp;event)&gt;</label>
      </node>
      <node id="9873">
        <label>function&lt; void(const dpp::log_t &amp;event)&gt;</label>
      </node>
      <node id="9792">
        <label>uint16_t</label>
      </node>
      <node id="9838">
        <label>function&lt; void(const dpp::thread_create_t &amp;event)&gt;</label>
      </node>
      <node id="9786">
        <label>time_t</label>
      </node>
      <node id="9789">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="9872">
        <label>function&lt; void(const dpp::guild_member_remove_t &amp;event)&gt;</label>
      </node>
      <node id="9849">
        <label>function&lt; void(const dpp::thread_list_sync_t &amp;event)&gt;</label>
      </node>
      <node id="9878">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="9797" relation="public-inheritance">
        </childnode>
        <childnode refid="9783" relation="usage">
          <edgelabel>server_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="9786" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="9807" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="9793" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="9788" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="9802" relation="usage">
          <edgelabel>terminating</edgelabel>
          <edgelabel>sodium_initialised</edgelabel>
        </childnode>
        <childnode refid="9875" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
      </node>
      <node id="9811">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="9783" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="9848">
        <label>function&lt; void(const dpp::voice_track_marker_t &amp;event)&gt;</label>
      </node>
      <node id="9837">
        <label>function&lt; void(const dpp::voice_user_talking_t &amp;event)&gt;</label>
      </node>
      <node id="9806">
        <label>double</label>
      </node>
      <node id="9798">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="9799" relation="usage">
          <edgelabel>custom_writeable_ready</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
        </childnode>
        <childnode refid="9783" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="9786" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="9800" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="9801" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="9802" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="9788" relation="usage">
          <edgelabel>port</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>buffer</edgelabel>
        </childnode>
        <childnode refid="9803" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="9847">
        <label>function&lt; void(const dpp::message_delete_t &amp;event)&gt;</label>
      </node>
      <node id="9869">
        <label>function&lt; void(const dpp::stage_instance_create_t &amp;event)&gt;</label>
      </node>
      <node id="9793">
        <label>uint32_t</label>
      </node>
      <node id="9867">
        <label>function&lt; void(const dpp::guild_role_update_t &amp;event)&gt;</label>
      </node>
      <node id="9787">
        <label>uint8_t</label>
      </node>
      <node id="9852">
        <label>function&lt; void(const dpp::channel_pins_update_t &amp;event)&gt;</label>
      </node>
      <node id="9794">
        <label>std::map&lt; snowflake, dpp::voicestate &gt;</label>
        <childnode refid="9783" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="9795" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9809">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="9797">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="9798" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9808">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="9809" relation="usage">
          <edgelabel>role_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="9821">
        <label>function&lt; void(const dpp::presence_update_t &amp;event)&gt;</label>
      </node>
      <node id="9833">
        <label>function&lt; void(const dpp::select_click_t &amp;event)&gt;</label>
      </node>
      <node id="9818">
        <label>function&lt; void(const dpp::integration_update_t &amp;event)&gt;</label>
      </node>
      <node id="9841">
        <label>function&lt; void(const dpp::guild_update_t &amp;event)&gt;</label>
      </node>
      <node id="9843">
        <label>function&lt; void(const dpp::voice_receive_t &amp;event)&gt;</label>
      </node>
      <node id="9876">
        <label>std::unordered_map&lt; snowflake, dpp::voiceconn * &gt;</label>
        <childnode refid="9783" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="9877" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9799">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="9835">
        <label>function&lt; void(const dpp::guild_join_request_delete_t &amp;event)&gt;</label>
      </node>
      <node id="9796">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="9797" relation="public-inheritance">
        </childnode>
        <childnode refid="9806" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="9783" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="9786" relation="usage">
          <edgelabel>last_heartbeat_ack</edgelabel>
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="9807" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="9874" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="9793" relation="usage">
          <edgelabel>reconnects</edgelabel>
          <edgelabel>shard_id</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="9802" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="9788" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="9875" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="9876" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="9842">
        <label>function&lt; void(const dpp::message_reaction_remove_all_t &amp;event)&gt;</label>
      </node>
      <node id="9804">
        <label>SSL *</label>
      </node>
      <node id="9782">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="9783" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="9855">
        <label>function&lt; void(const dpp::thread_update_t &amp;event)&gt;</label>
      </node>
      <node id="9856">
        <label>function&lt; void(const dpp::integration_create_t &amp;event)&gt;</label>
      </node>
      <node id="9864">
        <label>function&lt; void(const dpp::application_command_update_t &amp;event)&gt;</label>
      </node>
      <node id="9805">
        <label>SSL_CTX *</label>
      </node>
      <node id="9851">
        <label>function&lt; void(const dpp::guild_ban_add_t &amp;event)&gt;</label>
      </node>
      <node id="9874">
        <label>mutex</label>
      </node>
      <node id="9862">
        <label>function&lt; void(const dpp::guild_delete_t &amp;event)&gt;</label>
      </node>
      <node id="9820">
        <label>function&lt; void(const dpp::resumed_t &amp;event)&gt;</label>
      </node>
      <node id="9839">
        <label>function&lt; void(const dpp::application_command_create_t &amp;event)&gt;</label>
      </node>
      <node id="9845">
        <label>function&lt; void(const dpp::webhooks_update_t &amp;event)&gt;</label>
      </node>
      <node id="9858">
        <label>function&lt; void(const dpp::message_update_t &amp;event)&gt;</label>
      </node>
      <node id="9802">
        <label>bool</label>
      </node>
      <node id="9800">
        <label>SOCKET</label>
      </node>
      <node id="9781">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="9782" relation="public-inheritance">
        </childnode>
        <childnode refid="9783" relation="usage">
          <edgelabel>rules_channel_id</edgelabel>
          <edgelabel>system_channel_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>widget_channel_id</edgelabel>
          <edgelabel>public_updates_channel_id</edgelabel>
          <edgelabel>afk_channel_id</edgelabel>
          <edgelabel>application_id</edgelabel>
        </childnode>
        <childnode refid="9784" relation="usage">
          <edgelabel>members</edgelabel>
        </childnode>
        <childnode refid="9791" relation="usage">
          <edgelabel>voice_region</edgelabel>
        </childnode>
        <childnode refid="9792" relation="usage">
          <edgelabel>shard_id</edgelabel>
          <edgelabel>max_video_channel_users</edgelabel>
          <edgelabel>premium_subscription_count</edgelabel>
        </childnode>
        <childnode refid="9793" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>member_count</edgelabel>
        </childnode>
        <childnode refid="9787" relation="usage">
          <edgelabel>default_message_notifications</edgelabel>
          <edgelabel>explicit_content_filter</edgelabel>
          <edgelabel>verification_level</edgelabel>
          <edgelabel>mfa_level</edgelabel>
          <edgelabel>afk_timeout</edgelabel>
          <edgelabel>premium_tier</edgelabel>
        </childnode>
        <childnode refid="9788" relation="usage">
          <edgelabel>vanity_url_code</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="9794" relation="usage">
          <edgelabel>voice_members</edgelabel>
        </childnode>
        <childnode refid="9790" relation="usage">
          <edgelabel>roles</edgelabel>
          <edgelabel>threads</edgelabel>
          <edgelabel>emojis</edgelabel>
          <edgelabel>channels</edgelabel>
        </childnode>
        <childnode refid="9811" relation="usage">
          <edgelabel>splash</edgelabel>
          <edgelabel>icon</edgelabel>
          <edgelabel>banner</edgelabel>
          <edgelabel>discovery_splash</edgelabel>
        </childnode>
      </node>
      <node id="9834">
        <label>function&lt; void(const dpp::interaction_create_t &amp;event)&gt;</label>
      </node>
      <node id="9866">
        <label>function&lt; void(const dpp::voice_server_update_t &amp;event)&gt;</label>
      </node>
      <node id="9824">
        <label>function&lt; void(const dpp::guild_ban_remove_t &amp;event)&gt;</label>
      </node>
      <node id="9816">
        <label>function&lt; void(const dpp::channel_delete_t &amp;event)&gt;</label>
      </node>
      <node id="9813">
        <label>function&lt; void(const dpp::guild_role_create_t &amp;event)&gt;</label>
      </node>
      <node id="9832">
        <label>function&lt; void(const dpp::message_reaction_remove_t &amp;event)&gt;</label>
      </node>
      <node id="9854">
        <label>function&lt; void(const dpp::ready_t &amp;event)&gt;</label>
      </node>
      <node id="9814">
        <label>function&lt; void(const dpp::voice_state_update_t &amp;event)&gt;</label>
      </node>
      <node id="9827">
        <label>function&lt; void(const dpp::guild_stickers_update_t &amp;event)&gt;</label>
      </node>
      <node id="9823">
        <label>function&lt; void(const dpp::voice_ready_t &amp;event)&gt;</label>
      </node>
      <node id="9790">
        <label>std::vector&lt; snowflake &gt;</label>
        <childnode refid="9783" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9875">
        <label>native_handle_type</label>
      </node>
      <node id="9825">
        <label>function&lt; void(const dpp::guild_role_delete_t &amp;event)&gt;</label>
      </node>
      <node id="9788">
        <label>std::string</label>
        <childnode refid="9789" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9822">
        <label>function&lt; void(const dpp::message_delete_bulk_t &amp;event)&gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/guild.h" line="163" column="1" bodyfile="/home/brain/D++/include/dpp/guild.h" bodystart="163" bodyend="380"/>
    <listofallmembers>
      <member refid="classdpp_1_1guild_1afe32f37c1ac7dcde9933ba48e7b27130" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>afk_channel_id</name></member>
      <member refid="classdpp_1_1guild_1a624cb68654a2d32be54f4203835b0722" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>afk_timeout</name></member>
      <member refid="classdpp_1_1guild_1a9f9174bd64a91357f618a957db555d20" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>application_id</name></member>
      <member refid="classdpp_1_1guild_1ad5736b31cf35641cb2c78f9353d3a8a5" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>banner</name></member>
      <member refid="classdpp_1_1guild_1aab6c11a3f36981309411c979615e1a2f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>base_permissions</name></member>
      <member refid="classdpp_1_1guild_1ab06f6531b9380ece07b3d8861a4de268" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>build_json</name></member>
      <member refid="classdpp_1_1guild_1a0995288cfbf8ae64973bbf0181d1789a" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>channels</name></member>
      <member refid="classdpp_1_1guild_1a0d5e43e678d6a0448930bd31620d979e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>connect_member_voice</name></member>
      <member refid="classdpp_1_1guild_1a304278e17a5d18d322a91cd6e2843a7f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>default_message_notifications</name></member>
      <member refid="classdpp_1_1guild_1ade8a95b5a41929f92e1fbc079cedb86e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>description</name></member>
      <member refid="classdpp_1_1guild_1a368ba3a6ae2e752a3f702dcba5eb5ce0" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>discovery_splash</name></member>
      <member refid="classdpp_1_1guild_1a9169668a25a134dc50bbdb6dd9ddd203" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>emojis</name></member>
      <member refid="classdpp_1_1guild_1aaf0bdf8f43b4feafb756431764a8d9aa" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>explicit_content_filter</name></member>
      <member refid="classdpp_1_1guild_1af180ee5682802b64c79d2dc8abc7c9cd" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1guild_1a0525bf0e263ae902a4d6fb295691cb34" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>flags</name></member>
      <member refid="classdpp_1_1guild_1aeae6599054436a5a66e07683032089dc" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>guild</name></member>
      <member refid="classdpp_1_1guild_1aae04375a078b314ed11e18c8b058201b" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_animated_icon</name></member>
      <member refid="classdpp_1_1guild_1a1fa976c02abfde9f35ee6da45f0a955b" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_animated_icon_hash</name></member>
      <member refid="classdpp_1_1guild_1ae3b79bd157898acba7fe4475b5ecb31b" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_banner</name></member>
      <member refid="classdpp_1_1guild_1aa14963ef4888f0243a6ab25938650302" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_commerce</name></member>
      <member refid="classdpp_1_1guild_1a288b9cdd721868fc73c375c6919dd563" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_invite_splash</name></member>
      <member refid="classdpp_1_1guild_1a11908725a34cd6ef5530c6e0086ed8b0" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_member_verification_gate</name></member>
      <member refid="classdpp_1_1guild_1aa940f6a4ceadc06905d32c51634ebd2f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_news</name></member>
      <member refid="classdpp_1_1guild_1a076d93f613841640d046825f87ed8c7b" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_vanity_url</name></member>
      <member refid="classdpp_1_1guild_1a3fd38418d77e7c03a4954888d0996d3a" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_vip_regions</name></member>
      <member refid="classdpp_1_1guild_1ab0ad04559371a5e732dd1574622ab28d" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>icon</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>id</name></member>
      <member refid="classdpp_1_1guild_1a39c03598958439d01661b27db81c395f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_community</name></member>
      <member refid="classdpp_1_1guild_1af5eb464b52f74fc5b8c437fc2979887c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_discoverable</name></member>
      <member refid="classdpp_1_1guild_1a64d75cbdbdf0965bbb9f1e1339bea7f1" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_featureable</name></member>
      <member refid="classdpp_1_1guild_1a5d10dece15c93608ae53980867d965aa" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_large</name></member>
      <member refid="classdpp_1_1guild_1a84d8e9b43ec2d9d57e1560a876deeb62" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_partnered</name></member>
      <member refid="classdpp_1_1guild_1a5738a87f96c9cc0882721cc499cae68f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_preview_enabled</name></member>
      <member refid="classdpp_1_1guild_1a5793a0a2731dd784b17f77bffa14f529" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_unavailable</name></member>
      <member refid="classdpp_1_1guild_1a296b148f59dfebe1cb9a5bbe2c20af5c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_verified</name></member>
      <member refid="classdpp_1_1guild_1ac59c9d19e736ae7f6ce3617684333677" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_welcome_screen_enabled</name></member>
      <member refid="classdpp_1_1managed_1a3e2b7d69e7313d84aff23cadf9ba9a6a" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>managed</name></member>
      <member refid="classdpp_1_1guild_1ad0334ce3a68a51441d539120ceb7123e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>max_video_channel_users</name></member>
      <member refid="classdpp_1_1guild_1a8c861567b28347debc48618653a0cf1e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>member_count</name></member>
      <member refid="classdpp_1_1guild_1a65c77ce1a6155bc6e7fd6f8937bd1385" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>members</name></member>
      <member refid="classdpp_1_1guild_1a29059b4f68f9d24505beefb1d550092d" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>mfa_level</name></member>
      <member refid="classdpp_1_1guild_1ab39f33c8525ab7f7a02f8e88b0448c1f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>name</name></member>
      <member refid="classdpp_1_1guild_1a4f608587f82bc3deab0974aeb30b2f24" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>owner_id</name></member>
      <member refid="classdpp_1_1guild_1a6a4f4c513e88f3827c8ae666ae13af26" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>permission_overwrites</name></member>
      <member refid="classdpp_1_1guild_1acd884a98bc58d26d29a6a5d2e249f1c9" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>premium_subscription_count</name></member>
      <member refid="classdpp_1_1guild_1a164e4d1c99fcce1bed5a72d3bb5e493e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>premium_tier</name></member>
      <member refid="classdpp_1_1guild_1a10f966d4bc54c233a1ecd6a24ca80dc3" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>public_updates_channel_id</name></member>
      <member refid="classdpp_1_1guild_1aeed0e3f51cc2ce2a6752be2ba7b6f8ac" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>rehash_members</name></member>
      <member refid="classdpp_1_1guild_1a08c72430a41c55914776f3d82e45235c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>roles</name></member>
      <member refid="classdpp_1_1guild_1a860098b080bc3bf11c1c44bb77edda09" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>rules_channel_id</name></member>
      <member refid="classdpp_1_1guild_1a80181fee5f66b2dd6f24bad72226bf7c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>shard_id</name></member>
      <member refid="classdpp_1_1guild_1a45281957f5252467c6b620c61de4ca14" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>splash</name></member>
      <member refid="classdpp_1_1guild_1a0fc5cec016c0604ce2575fbe5eea5ded" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>system_channel_id</name></member>
      <member refid="classdpp_1_1guild_1a8e13e2dd21e91104a1e8335990046bf7" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>threads</name></member>
      <member refid="classdpp_1_1guild_1ad858d700638f1785f2338e8ec667c74f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>vanity_url_code</name></member>
      <member refid="classdpp_1_1guild_1a6132ae5944f766ade85c4fc4521180a5" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>verification_level</name></member>
      <member refid="classdpp_1_1guild_1a42066fe3bbfb976ba27fbb9ca38b722f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>voice_members</name></member>
      <member refid="classdpp_1_1guild_1ab4e8470fb6d73ecc5cf60d952616fda6" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>voice_region</name></member>
      <member refid="classdpp_1_1guild_1ad456524472a24e2592560a4a497c4b01" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>widget_channel_id</name></member>
      <member refid="classdpp_1_1guild_1a589a0df44c82fe9521b44a8165a0ac20" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>widget_enabled</name></member>
      <member refid="classdpp_1_1guild_1a7e494da5ab1aaaddae4d588849ea9f14" prot="public" virt="virtual"><scope>dpp::guild</scope><name>~guild</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::guild</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
