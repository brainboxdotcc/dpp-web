<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1guild" kind="class" language="C++" prot="public">
    <compoundname>dpp::guild</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; guild &gt;</basecompoundref>
    <includes local="no">guild.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1guild_1ace0b3366008c87fcec4428d6f083a5d0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; guild &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; guild &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="809" column="16" bodyfile="include/dpp/guild.h" bodystart="992" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1guild_1ab39f33c8525ab7f7a02f8e88b0448c1f" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::guild::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Guild name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1012" column="13" bodyfile="include/dpp/guild.h" bodystart="1012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ade8a95b5a41929f92e1fbc079cedb86e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::guild::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>Server description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1017" column="13" bodyfile="include/dpp/guild.h" bodystart="1017" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad858d700638f1785f2338e8ec667c74f" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::guild::vanity_url_code</definition>
        <argsstring></argsstring>
        <name>vanity_url_code</name>
        <briefdescription>
<para>Vanity url code for verified or partnered servers and boost level 3. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This field cannot be set from the API. Attempts to change this value will be silently ignored even if the correct number of boosts or verified/partnered status exist. See: <ulink url="https://github.com/discord/discord-api-docs/issues/519">https://github.com/discord/discord-api-docs/issues/519</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1025" column="13" bodyfile="include/dpp/guild.h" bodystart="1025" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a08c72430a41c55914776f3d82e45235c" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::roles</definition>
        <argsstring></argsstring>
        <name>roles</name>
        <briefdescription>
<para>Roles defined on this server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1030" column="13" bodyfile="include/dpp/guild.h" bodystart="1030" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a0995288cfbf8ae64973bbf0181d1789a" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::channels</definition>
        <argsstring></argsstring>
        <name>channels</name>
        <briefdescription>
<para>List of channels on this server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1035" column="13" bodyfile="include/dpp/guild.h" bodystart="1035" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a8e13e2dd21e91104a1e8335990046bf7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::threads</definition>
        <argsstring></argsstring>
        <name>threads</name>
        <briefdescription>
<para>List of threads on this server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1040" column="13" bodyfile="include/dpp/guild.h" bodystart="1040" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a9169668a25a134dc50bbdb6dd9ddd203" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::emojis</definition>
        <argsstring></argsstring>
        <name>emojis</name>
        <briefdescription>
<para>List of emojis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1045" column="13" bodyfile="include/dpp/guild.h" bodystart="1045" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a42066fe3bbfb976ba27fbb9ca38b722f" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref>, <ref refid="classdpp_1_1voicestate" kindref="compound">voicestate</ref> &gt;</type>
        <definition>std::map&lt;snowflake, voicestate&gt; dpp::guild::voice_members</definition>
        <argsstring></argsstring>
        <name>voice_members</name>
        <briefdescription>
<para>List of members in voice channels in the guild. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1050" column="10" bodyfile="include/dpp/guild.h" bodystart="1050" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a65c77ce1a6155bc6e7fd6f8937bd1385" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a674dfd30e37779538e80d95fcb13770f" kindref="member">members_container</ref></type>
        <definition>members_container dpp::guild::members</definition>
        <argsstring></argsstring>
        <name>members</name>
        <briefdescription>
<para>List of guild members. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When you first receive the guild create event, this may be empty or near empty. This depends upon your <ref refid="namespacedpp_1a0042c0fc8164da4239b977d5be8e2ef5" kindref="member">dpp::intents</ref> and the size of your bot. It will be filled by guild member chunk requests. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1060" column="19" bodyfile="include/dpp/guild.h" bodystart="1060" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a79fe96096a15805c1d8c6f977e2e1119" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1welcome__screen" kindref="compound">dpp::welcome_screen</ref></type>
        <definition>dpp::welcome_screen dpp::guild::welcome_screen</definition>
        <argsstring></argsstring>
        <name>welcome_screen</name>
        <briefdescription>
<para>Welcome screen. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1065" column="21" bodyfile="include/dpp/guild.h" bodystart="1065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1af548c524b87179c741c15823bedb7aa4" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1icon" kindref="compound">utility::icon</ref></type>
        <definition>utility::icon dpp::guild::icon</definition>
        <argsstring></argsstring>
        <name>icon</name>
        <briefdescription>
<para>Guild icon. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1070" column="15" bodyfile="include/dpp/guild.h" bodystart="1070" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a9ee654002790e648ba8a4ec6714b00c3" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1icon" kindref="compound">utility::icon</ref></type>
        <definition>utility::icon dpp::guild::splash</definition>
        <argsstring></argsstring>
        <name>splash</name>
        <briefdescription>
<para>Guild splash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1075" column="15" bodyfile="include/dpp/guild.h" bodystart="1075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ada4fe51e21c9c98e7084e3d3ceee7cda" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1icon" kindref="compound">utility::icon</ref></type>
        <definition>utility::icon dpp::guild::discovery_splash</definition>
        <argsstring></argsstring>
        <name>discovery_splash</name>
        <briefdescription>
<para>Guild discovery splash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1080" column="15" bodyfile="include/dpp/guild.h" bodystart="1080" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a9cc1835aad440ccd91680b3548cfec56" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1icon" kindref="compound">utility::icon</ref></type>
        <definition>utility::icon dpp::guild::banner</definition>
        <argsstring></argsstring>
        <name>banner</name>
        <briefdescription>
<para>Server banner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1085" column="15" bodyfile="include/dpp/guild.h" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a4f608587f82bc3deab0974aeb30b2f24" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::guild::owner_id</definition>
        <argsstring></argsstring>
        <name>owner_id</name>
        <briefdescription>
<para>Snowflake id of guild owner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1090" column="11" bodyfile="include/dpp/guild.h" bodystart="1090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1afe32f37c1ac7dcde9933ba48e7b27130" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::guild::afk_channel_id</definition>
        <argsstring></argsstring>
        <name>afk_channel_id</name>
        <briefdescription>
<para>Snowflake ID of AFK voice channel or 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1095" column="11" bodyfile="include/dpp/guild.h" bodystart="1095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a9f9174bd64a91357f618a957db555d20" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::guild::application_id</definition>
        <argsstring></argsstring>
        <name>application_id</name>
        <briefdescription>
<para>ID of creating application, if any, or 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1100" column="11" bodyfile="include/dpp/guild.h" bodystart="1100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a0fc5cec016c0604ce2575fbe5eea5ded" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::guild::system_channel_id</definition>
        <argsstring></argsstring>
        <name>system_channel_id</name>
        <briefdescription>
<para>ID of system channel where discord update messages are sent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1105" column="11" bodyfile="include/dpp/guild.h" bodystart="1105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a860098b080bc3bf11c1c44bb77edda09" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::guild::rules_channel_id</definition>
        <argsstring></argsstring>
        <name>rules_channel_id</name>
        <briefdescription>
<para>ID of rules channel for communities. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1110" column="11" bodyfile="include/dpp/guild.h" bodystart="1110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a10f966d4bc54c233a1ecd6a24ca80dc3" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::guild::public_updates_channel_id</definition>
        <argsstring></argsstring>
        <name>public_updates_channel_id</name>
        <briefdescription>
<para>Public updates channel id or 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1115" column="11" bodyfile="include/dpp/guild.h" bodystart="1115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad456524472a24e2592560a4a497c4b01" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::guild::widget_channel_id</definition>
        <argsstring></argsstring>
        <name>widget_channel_id</name>
        <briefdescription>
<para>Snowflake ID of widget channel, or 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1120" column="11" bodyfile="include/dpp/guild.h" bodystart="1120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1aa201619649888056df9a0149455b33f6" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::guild::safety_alerts_channel_id</definition>
        <argsstring></argsstring>
        <name>safety_alerts_channel_id</name>
        <briefdescription>
<para>The id of the channel where admins and moderators of Community guilds receive safety alerts from Discord. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1125" column="11" bodyfile="include/dpp/guild.h" bodystart="1125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a8c861567b28347debc48618653a0cf1e" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::guild::member_count</definition>
        <argsstring></argsstring>
        <name>member_count</name>
        <briefdescription>
<para>Approximate member count. May be sent as zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1130" column="10" bodyfile="include/dpp/guild.h" bodystart="1130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a0525bf0e263ae902a4d6fb295691cb34" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::guild::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
<para>Flags bitmask as defined by values within <ref refid="namespacedpp_1ace5fc4a0db4c08d37d3a1b8e7e22383a" kindref="member">dpp::guild_flags</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1135" column="10" bodyfile="include/dpp/guild.h" bodystart="1135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ae5071e531ebbf2b8ae42dfbf409af494" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::guild::max_presences</definition>
        <argsstring></argsstring>
        <name>max_presences</name>
        <briefdescription>
<para>the maximum number of presences for the guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Generally Discord always fills this with 0, apart from for the largest of guilds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1141" column="10" bodyfile="include/dpp/guild.h" bodystart="1141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a32e894208805a5326e7a506c73425854" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::guild::max_members</definition>
        <argsstring></argsstring>
        <name>max_members</name>
        <briefdescription>
<para>the maximum number of members for the guild </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1146" column="10" bodyfile="include/dpp/guild.h" bodystart="1146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1af09066eb2f5988e268b5fe05b138ab5a" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::guild::flags_extra</definition>
        <argsstring></argsstring>
        <name>flags_extra</name>
        <briefdescription>
<para>Additional flags (values from <ref refid="namespacedpp_1ad5440c062424f43282b804b7b7de31c9" kindref="member">dpp::guild_flags_extra</ref>) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1151" column="10" bodyfile="include/dpp/guild.h" bodystart="1151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a80181fee5f66b2dd6f24bad72226bf7c" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::guild::shard_id</definition>
        <argsstring></argsstring>
        <name>shard_id</name>
        <briefdescription>
<para>Shard ID of the guild. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1156" column="10" bodyfile="include/dpp/guild.h" bodystart="1156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1acd884a98bc58d26d29a6a5d2e249f1c9" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::guild::premium_subscription_count</definition>
        <argsstring></argsstring>
        <name>premium_subscription_count</name>
        <briefdescription>
<para>Number of boosters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1161" column="10" bodyfile="include/dpp/guild.h" bodystart="1161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad10c23d452ceab28023eace3bc072ad2" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1ad195bc4d4cd3a639ac2090b69997fc9b" kindref="member">guild_afk_timeout_t</ref></type>
        <definition>guild_afk_timeout_t dpp::guild::afk_timeout</definition>
        <argsstring></argsstring>
        <name>afk_timeout</name>
        <briefdescription>
<para>Voice AFK timeout before moving users to AFK channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1166" column="21" bodyfile="include/dpp/guild.h" bodystart="1166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a76661c06c1ee85a3377db6fdd2b2c2c1" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild::max_video_channel_users</definition>
        <argsstring></argsstring>
        <name>max_video_channel_users</name>
        <briefdescription>
<para>Maximum users in a video channel, or 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1171" column="9" bodyfile="include/dpp/guild.h" bodystart="1171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1aac31cabeec4cc88bd75b2ec97731779f" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a3be39a31818d9499750c3efd43281d13" kindref="member">default_message_notification_t</ref></type>
        <definition>default_message_notification_t dpp::guild::default_message_notifications</definition>
        <argsstring></argsstring>
        <name>default_message_notifications</name>
        <briefdescription>
<para>Setting for how notifications are to be delivered to users. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1176" column="32" bodyfile="include/dpp/guild.h" bodystart="1176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ae86fad1b4f155d8ede1bd4c9cedb8b0f" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1ab7f40af8c547f08790e620708879fcba" kindref="member">guild_premium_tier_t</ref></type>
        <definition>guild_premium_tier_t dpp::guild::premium_tier</definition>
        <argsstring></argsstring>
        <name>premium_tier</name>
        <briefdescription>
<para>Boost level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1181" column="22" bodyfile="include/dpp/guild.h" bodystart="1181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad0ab37f1e5665f2563f476073005930e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a15724514db1d98eb10a8bd2d5ba44c85" kindref="member">verification_level_t</ref></type>
        <definition>verification_level_t dpp::guild::verification_level</definition>
        <argsstring></argsstring>
        <name>verification_level</name>
        <briefdescription>
<para>Verification level of server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1186" column="22" bodyfile="include/dpp/guild.h" bodystart="1186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a1c6074e2abbc246282edbd786347b00d" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a47f79e1142def583c59df70b1382319f" kindref="member">guild_explicit_content_t</ref></type>
        <definition>guild_explicit_content_t dpp::guild::explicit_content_filter</definition>
        <argsstring></argsstring>
        <name>explicit_content_filter</name>
        <briefdescription>
<para>Whether or not explicit content filtering is enable and what setting it is. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1191" column="26" bodyfile="include/dpp/guild.h" bodystart="1191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a8a37aaf8be3dadbcba87269bd8405946" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a99a41e59054cde79c2b893ddb9320e4a" kindref="member">mfa_level_t</ref></type>
        <definition>mfa_level_t dpp::guild::mfa_level</definition>
        <argsstring></argsstring>
        <name>mfa_level</name>
        <briefdescription>
<para>If multi factor authentication is required for moderators or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1196" column="13" bodyfile="include/dpp/guild.h" bodystart="1196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a6520b72031ed26371bb23dc9c23b60c0" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1afd5e6717b5f1f374c5c29f91394aa591" kindref="member">guild_nsfw_level_t</ref></type>
        <definition>guild_nsfw_level_t dpp::guild::nsfw_level</definition>
        <argsstring></argsstring>
        <name>nsfw_level</name>
        <briefdescription>
<para>Guild NSFW level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1201" column="20" bodyfile="include/dpp/guild.h" bodystart="1201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1guild_1a10822b090bfa992012dea488a61310f1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="998" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a3521b4102898608f12d75bcc5b67bba6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>json dpp::guild::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a JSON from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if an ID is to be included in the JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1004" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1guild_1aeae6599054436a5a66e07683032089dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::guild::guild</definition>
        <argsstring>()</argsstring>
        <name>guild</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor, zeroes all values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a7e494da5ab1aaaddae4d588849ea9f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::guild::~guild</definition>
        <argsstring>()=default</argsstring>
        <name>~guild</name>
        <briefdescription>
<para>Destroy the guild object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1209" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1af180ee5682802b64c79d2dc8abc7c9cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::fill_from_json</definition>
        <argsstring>(class discord_client *shard, nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>shard</declname>
        </param>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shard</parametername>
</parameternamelist>
<parameterdescription>
<para>originating shard </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1216" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1abd799f5cbe1907c46b86937bda124bee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1permission" kindref="compound">permission</ref></type>
        <definition>permission dpp::guild::base_permissions</definition>
        <argsstring>(const class user *user) const</argsstring>
        <name>base_permissions</name>
        <param>
          <type>const class <ref refid="classdpp_1_1user" kindref="compound">user</ref> *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
<para>Compute the base permissions for a member on this guild, before channel overwrites are applied. This method takes into consideration the following cases: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Guild owner</para>
</listitem><listitem><para>Guild roles including @everyone</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>User to get permissions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>permission permissions bitmask. If the member has administrator privileges, the bitmask returns with all flags set </para>
</simplesect>
<simplesect kind="note"><para>Requires role cache to be enabled (it&apos;s enabled by default).</para>
</simplesect>
<simplesect kind="warning"><para>The method will search for the guild member in the cache by the users id. If the guild member is not in cache, the method will always return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1232" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ad7e3b4418671873df7f59fccfc49dec4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1permission" kindref="compound">permission</ref></type>
        <definition>permission dpp::guild::base_permissions</definition>
        <argsstring>(const guild_member &amp;member) const</argsstring>
        <name>base_permissions</name>
        <param>
          <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
          <declname>member</declname>
        </param>
        <briefdescription>
<para>Compute the base permissions for a member on this guild, before channel overwrites are applied. This method takes into consideration the following cases: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Guild owner</para>
</listitem><listitem><para>Guild roles including @everyone</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>member to get permissions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>permission permissions bitmask. If the member has administrator privileges, the bitmask returns with all flags set </para>
</simplesect>
<simplesect kind="note"><para>Requires role cache to be enabled (it&apos;s enabled by default). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1245" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ad33639446c930d418139a976c9c1a071" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1permission" kindref="compound">permission</ref></type>
        <definition>permission dpp::guild::permission_overwrites</definition>
        <argsstring>(const uint64_t base_permissions, const user *user, const channel *channel) const</argsstring>
        <name>permission_overwrites</name>
        <param>
          <type>const uint64_t</type>
          <declname>base_permissions</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1user" kindref="compound">user</ref> *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> *</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get the overall permissions for a member in this channel, including channel overwrites, role permissions and admin privileges. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base_permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>base permissions before overwrites, from <ref refid="classdpp_1_1guild_1abd799f5cbe1907c46b86937bda124bee" kindref="member">guild::base_permissions</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>The user to resolve the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to compute permission overwrites for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>permission Permission overwrites for the member. Made of bits in <ref refid="namespacedpp_1a64f16cd622b3a09ae96803ba07fa75b7" kindref="member">dpp::permissions</ref>. </para>
</simplesect>
<simplesect kind="note"><para>Requires role cache to be enabled (it&apos;s enabled by default).</para>
</simplesect>
<simplesect kind="warning"><para>The method will search for the guild member in the cache by the users id. If the guild member is not in cache, the method will always return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1260" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a9688339669113aae291c5987beee9f24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1permission" kindref="compound">permission</ref></type>
        <definition>permission dpp::guild::permission_overwrites</definition>
        <argsstring>(const guild_member &amp;member, const channel &amp;channel) const</argsstring>
        <name>permission_overwrites</name>
        <param>
          <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
          <declname>member</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get the overall permissions for a member in this channel, including channel overwrites, role permissions and admin privileges. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>The member to resolve the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to compute permission overwrites for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>permission Permission overwrites for the member. Made of bits in <ref refid="namespacedpp_1a64f16cd622b3a09ae96803ba07fa75b7" kindref="member">dpp::permissions</ref>. </para>
</simplesect>
<simplesect kind="note"><para>Requires role cache to be enabled (it&apos;s enabled by default). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1270" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aeed0e3f51cc2ce2a6752be2ba7b6f8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::guild::rehash_members</definition>
        <argsstring>()</argsstring>
        <name>rehash_members</name>
        <briefdescription>
<para>Rehash members map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1275" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a0d5e43e678d6a0448930bd31620d979e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::connect_member_voice</definition>
        <argsstring>(snowflake user_id, bool self_mute=false, bool self_deaf=false)</argsstring>
        <name>connect_member_voice</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>self_mute</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>self_deaf</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Connect to a voice channel another guild member is in. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User id to join </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_mute</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the bot should mute itself </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_deaf</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the bot should deafen itself </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the user specified is in a vc, false if they aren&apos;t </para>
</simplesect>
<simplesect kind="note"><para>This is NOT a synchronous blocking call! The bot isn&apos;t instantly ready to send or listen for audio, as we have to wait for the connection to the voice server to be established! e.g. wait for <ref refid="classdpp_1_1cluster_1a8f2f865ac3492196a8167a319261ffb6" kindref="member">dpp::cluster::on_voice_ready</ref> event, and then send the audio within that event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1288" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a480e1091c2a035c99643ae9ebf5d38d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild::get_banner_url</definition>
        <argsstring>(uint16_t size=0, const image_type format=i_png, bool prefer_animated=true) const</argsstring>
        <name>get_banner_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
          <defval><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>prefer_animated</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Get the banner url of the guild if it have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the banner in pixels. It can be any power of two between 16 and 4096, otherwise the default sized banner is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format to use for the avatar. It can be one of <computeroutput>i_webp</computeroutput>, <computeroutput>i_jpg</computeroutput>, <computeroutput>i_png</computeroutput> or <computeroutput>i_gif</computeroutput>. Passing <computeroutput>i_gif</computeroutput> might result in an invalid url for non-animated images. Consider using the <computeroutput>prefer_animated</computeroutput> parameter instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefer_animated</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether you prefer gif format. If true, it&apos;ll return gif format whenever the image is available as animated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string banner url or an empty string, if required attributes are missing or an invalid format was passed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1301" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a93d1d4faed6aaa0a13455a8a29c09542" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild::get_discovery_splash_url</definition>
        <argsstring>(uint16_t size=0, const image_type format=i_png) const</argsstring>
        <name>get_discovery_splash_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
          <defval><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <briefdescription>
<para>Get the discovery splash url of the guild if it have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the discovery splash in pixels. It can be any power of two between 16 and 4096, otherwise the default sized discovery splash is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format to use for the avatar. It can be one of <computeroutput>i_webp</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string discovery splash url or an empty string, if required attributes are missing or an invalid format was passed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1311" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ae4ec3933e358da2036b547952b6758c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild::get_icon_url</definition>
        <argsstring>(uint16_t size=0, const image_type format=i_png, bool prefer_animated=true) const</argsstring>
        <name>get_icon_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
          <defval><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>prefer_animated</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Get the icon url of the guild if it have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the icon in pixels. It can be any power of two between 16 and 4096, otherwise the default sized icon is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format to use for the avatar. It can be one of <computeroutput>i_webp</computeroutput>, <computeroutput>i_jpg</computeroutput>, <computeroutput>i_png</computeroutput> or <computeroutput>i_gif</computeroutput>. When passing <computeroutput>i_gif</computeroutput>, it returns an empty string for non-animated images. Consider using the <computeroutput>prefer_animated</computeroutput> parameter instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefer_animated</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether you prefer gif format. If true, it&apos;ll return gif format whenever the image is available as animated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string icon url or an empty string, if required attributes are missing or an invalid format was passed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1324" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aa9e79b8daf552f520262339d60df9a2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild::get_splash_url</definition>
        <argsstring>(uint16_t size=0, const image_type format=i_png) const</argsstring>
        <name>get_splash_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
          <defval><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <briefdescription>
<para>Get the splash url of the guild if it have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the splash in pixels. It can be any power of two between 16 and 4096, otherwise the default sized splash is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format to use for the avatar. It can be one of <computeroutput>i_webp</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string splash url or an empty string, if required attributes are missing or an invalid format was passed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1334" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a2aa137d0bad0143fc22c0e9b45df2540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::set_name</definition>
        <argsstring>(const std::string &amp;n)</argsstring>
        <name>set_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Set the name of the guild in the object Min length: 2, Max length: 100 (not including leading/trailing spaces) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild&amp; reference to self </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1length__exception" kindref="compound">dpp::length_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if guild name is too short </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1343" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a136dcadda527457dab7bad1aa46d5ab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::remove_banner</definition>
        <argsstring>()</argsstring>
        <name>remove_banner</name>
        <briefdescription>
<para>Remove the guild banner. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1349" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1affa8edf95b8588a59a37da5bda306689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::set_banner</definition>
        <argsstring>(image_type format, std::string_view data)</argsstring>
        <name>set_banner</name>
        <param>
          <type><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the guild banner image. Server needs banner feature. Must be 16:9, and depending on nitro level, must be png or jpeg. Animated gif needs the animated banner server feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Image data in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1359" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a1276d7e57c2ed8e3a002a46fcc3edfad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::set_banner</definition>
        <argsstring>(image_type format, const std::byte *data, uint32_t size)</argsstring>
        <name>set_banner</name>
        <param>
          <type><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>const std::byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the guild banner image. Server needs banner feature. Must be 16:9, and depending on nitro level, must be png or jpeg. Animated gif needs the animated banner server feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Image data in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1370" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a1fbf98dc00400bd08488e615d087bca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::remove_discovery_splash</definition>
        <argsstring>()</argsstring>
        <name>remove_discovery_splash</name>
        <briefdescription>
<para>Remove the guild discovery splash. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1376" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1afa18f67376c93735752a575a636a0f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::set_discovery_splash</definition>
        <argsstring>(image_type format, std::string_view data)</argsstring>
        <name>set_discovery_splash</name>
        <param>
          <type><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the guild discovery splash image. Server needs discoverable feature. Must be 16:9 and png or jpeg. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Image data in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1385" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a59d50372738849bec8ba02235f26e602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::set_discovery_splash</definition>
        <argsstring>(image_type format, const std::byte *data, uint32_t size)</argsstring>
        <name>set_discovery_splash</name>
        <param>
          <type><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>const std::byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the guild discovery splash image. Server needs discoverable feature. Must be 16:9 and png or jpeg. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Image data in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1395" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a3031bf16c8790662a8cc63c9c6512e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::remove_splash</definition>
        <argsstring>()</argsstring>
        <name>remove_splash</name>
        <briefdescription>
<para>Remove the guild invite splash. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1401" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ad6125f72b8dae1a627b56e77f28b7450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::set_splash</definition>
        <argsstring>(image_type format, std::string_view data)</argsstring>
        <name>set_splash</name>
        <param>
          <type><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the guild invite splash image. Server needs invite splash feature. Must be 16:9 and png or jpeg. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Image data in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1410" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a15551f8682b5d1394a68d78ccfe5ecf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::set_splash</definition>
        <argsstring>(image_type format, const std::byte *data, uint32_t size)</argsstring>
        <name>set_splash</name>
        <param>
          <type><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>const std::byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the guild invite splash image. Server needs invite splash feature. Must be 16:9 and png or jpeg. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Image data in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1420" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a8823e6fdd084db73a92ae24fb5a2ad0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::remove_icon</definition>
        <argsstring>()</argsstring>
        <name>remove_icon</name>
        <briefdescription>
<para>Remove the guild icon. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1426" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aa658df6cafd492aaf97af4738b32160f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::set_icon</definition>
        <argsstring>(image_type format, std::string_view data)</argsstring>
        <name>set_icon</name>
        <param>
          <type><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the guild icon image. Must be 1024x1024 and png or jpeg. Gif allowed only if the server has animated icon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Image data in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1435" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a9ab11b6c42dddcf210adc2050cf05d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::set_icon</definition>
        <argsstring>(image_type format, const std::byte *data, uint32_t size)</argsstring>
        <name>set_icon</name>
        <param>
          <type><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>const std::byte *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the 1024x1024 guild icon image. Must be png or jpeg. Gif allowed only if the server has animated icon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Image data in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild&amp; Reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1445" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ab345901eb0418b58344b72dbe21d40a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_large</definition>
        <argsstring>() const</argsstring>
        <name>is_large</name>
        <briefdescription>
<para>Is a large server (&gt;250 users) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is a large guild </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1451" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ab7b956f6c07d48e1184cb4b6c727af21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_unavailable</definition>
        <argsstring>() const</argsstring>
        <name>is_unavailable</name>
        <briefdescription>
<para>Is unavailable due to outage (most other fields will be blank or outdated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is unavailable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1457" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1afdfe3c2bd4025d259b42dedddc2301a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::widget_enabled</definition>
        <argsstring>() const</argsstring>
        <name>widget_enabled</name>
        <briefdescription>
<para>Widget is enabled for this server. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool widget enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1463" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aace41d0c42c5ab41b605dee6268f03fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_invite_splash</definition>
        <argsstring>() const</argsstring>
        <name>has_invite_splash</name>
        <briefdescription>
<para>Guild has access to set an invite splash background. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool can have an invite splash </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1469" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a41a4d225e7ad466e1cba1a5352270075" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_vip_regions</definition>
        <argsstring>() const</argsstring>
        <name>has_vip_regions</name>
        <briefdescription>
<para>Guild has access to set 384kbps bitrate in voice. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool can have VIP voice regions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1475" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ac57481c6e6036db6545fcd5a592abee4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_vanity_url</definition>
        <argsstring>() const</argsstring>
        <name>has_vanity_url</name>
        <briefdescription>
<para>Guild has access to set a vanity URL. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool can have vanity url </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1481" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1af79641512c0342d3082174afa2e636e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_verified</definition>
        <argsstring>() const</argsstring>
        <name>is_verified</name>
        <briefdescription>
<para>Guild is a verified server. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is verified </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1487" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a02e42564118a777e6da228de14a0aae2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_partnered</definition>
        <argsstring>() const</argsstring>
        <name>is_partnered</name>
        <briefdescription>
<para>Guild is a discord partnered server. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is discord partnered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1493" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aaf353ec02bc9a4fe25544ec78ee93a8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_community</definition>
        <argsstring>() const</argsstring>
        <name>is_community</name>
        <briefdescription>
<para>Has enabled community. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has enabled community </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1499" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a95e5f5d04c51a86afa750b0dc2bfaa45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_role_subscriptions</definition>
        <argsstring>() const</argsstring>
        <name>has_role_subscriptions</name>
        <briefdescription>
<para>Has enabled role subscriptions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has enabled role subscriptions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1505" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a6dbec232c0e25a769569dd23715f574f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_news</definition>
        <argsstring>() const</argsstring>
        <name>has_news</name>
        <briefdescription>
<para>Guild has access to create announcement channels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has announcement channels features enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1511" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a6123f35315e5fbb8c6ee0dfaeb61300e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_discoverable</definition>
        <argsstring>() const</argsstring>
        <name>is_discoverable</name>
        <briefdescription>
<para>Guild is discoverable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is discoverable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1517" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ad8b3e4ddcc5fb4fbfd717ac275ffc2a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_featureable</definition>
        <argsstring>() const</argsstring>
        <name>is_featureable</name>
        <briefdescription>
<para>Guild is featurable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is featurable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1523" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a5e06bd5f262e0a321bb959f25a7dddf0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_animated_banner</definition>
        <argsstring>() const</argsstring>
        <name>has_animated_banner</name>
        <briefdescription>
<para>Guild has access to set an animated guild banner image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool can have animated banner image </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1529" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a62a651b5bafb7757b20a6bb3303d3542" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_auto_moderation</definition>
        <argsstring>() const</argsstring>
        <name>has_auto_moderation</name>
        <briefdescription>
<para>Guild has auto moderation features. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has auto moderation features </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1535" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a7e36811aef081391cfed101eaad2328e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_support_server</definition>
        <argsstring>() const</argsstring>
        <name>has_support_server</name>
        <briefdescription>
<para>Guild has been set as a support server on the App Directory. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has been set as a support server of an app in the app directory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1541" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ad769b8ca16e90bd837b52bd155086bb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_role_subscriptions_available_for_purchase</definition>
        <argsstring>() const</argsstring>
        <name>has_role_subscriptions_available_for_purchase</name>
        <briefdescription>
<para>Guild has role subscriptions that can be purchased. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has role subscriptions that can be purchased </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1547" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a8aaa556870af360ec85ba05ac680098b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_raid_alerts_disabled</definition>
        <argsstring>() const</argsstring>
        <name>has_raid_alerts_disabled</name>
        <briefdescription>
<para>Guild has disabled alerts for join raids in the configured safety alerts channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool <ref refid="namespacedpp_1ad5440c062424f43282b804b7b7de31c9a4e2eea7fdcda8cc71f12241444933143" kindref="member">dpp::g_raid_alerts_disabled</ref> flag is set </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1553" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a46cf6e3821d628027553641c0623df34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_animated_icon</definition>
        <argsstring>() const</argsstring>
        <name>has_animated_icon</name>
        <briefdescription>
<para>Guild has access to set an animated guild icon. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool can have animated icon </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1559" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a6ec058ad4e9fde64b0a043287c3f6a73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_banner</definition>
        <argsstring>() const</argsstring>
        <name>has_banner</name>
        <briefdescription>
<para>Guild has access to set a guild banner image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool can have banner image </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1565" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a7d1ad4ac2b329f47948c91fe4277932e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_welcome_screen_enabled</definition>
        <argsstring>() const</argsstring>
        <name>is_welcome_screen_enabled</name>
        <briefdescription>
<para>Guild has enabled the welcome screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool enabled welcome screen </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1571" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a96af802a7e704276a86043d11feace1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_member_verification_gate</definition>
        <argsstring>() const</argsstring>
        <name>has_member_verification_gate</name>
        <briefdescription>
<para>Guild has enabled membership screening. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has membership screening </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1577" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a6415e9e4dec10710bd3486c1dae76fdf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_preview_enabled</definition>
        <argsstring>() const</argsstring>
        <name>is_preview_enabled</name>
        <briefdescription>
<para>Guild has preview enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has preview </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1583" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a019d630e2b5aeb708b48d6f8fbb420de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_animated_icon_hash</definition>
        <argsstring>() const</argsstring>
        <name>has_animated_icon_hash</name>
        <briefdescription>
<para>Guild icon is actually an animated gif. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is animated gif </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1589" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a8791d8112a042ab32fd8b5a54cd8f607" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_animated_banner_hash</definition>
        <argsstring>() const</argsstring>
        <name>has_animated_banner_hash</name>
        <briefdescription>
<para>Guild banner is actually an animated gif. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is animated gif </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1595" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a75d864d601d0795c35f2fc3acc08a4a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_monetization_enabled</definition>
        <argsstring>() const</argsstring>
        <name>has_monetization_enabled</name>
        <briefdescription>
<para>guild has access to monetization features </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1602" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a986436ee2749583102be956b863929ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_more_stickers</definition>
        <argsstring>() const</argsstring>
        <name>has_more_stickers</name>
        <briefdescription>
<para>guild has increased custom sticker slots </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has more stickers </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1608" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a0596e28c2513f8ffe2944835117b2f49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_creator_store_page</definition>
        <argsstring>() const</argsstring>
        <name>has_creator_store_page</name>
        <briefdescription>
<para>guild has enabled the role subscription promo page </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has role subscription promo page enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1614" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a73a3dcb37facc18aecdb78393bf96206" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_role_icons</definition>
        <argsstring>() const</argsstring>
        <name>has_role_icons</name>
        <briefdescription>
<para>guild is able to set role icons </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has role icons </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1620" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ac98d9e2481862ca19ba7c2115e5f0b2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_seven_day_thread_archive</definition>
        <argsstring>() const</argsstring>
        <name>has_seven_day_thread_archive</name>
        <briefdescription>
<para>guild has access to the seven day archive time for threads </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has seven day thread archive </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000032"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Removed by Discord </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1627" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a9be0dcb6ed82faac52d0072aed61b69c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_three_day_thread_archive</definition>
        <argsstring>() const</argsstring>
        <name>has_three_day_thread_archive</name>
        <briefdescription>
<para>guild has access to the three day archive time for threads </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has three day thread archive </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000033"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Removed by Discord </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1634" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a5b436fb2cc0bbb1a2e9c4c86b483949c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_ticketed_events</definition>
        <argsstring>() const</argsstring>
        <name>has_ticketed_events</name>
        <briefdescription>
<para>guild has enabled ticketed events </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has ticketed events </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1640" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ac432abc8b361b3c7f20d74650a63f730" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_channel_banners</definition>
        <argsstring>() const</argsstring>
        <name>has_channel_banners</name>
        <briefdescription>
<para>guild has access to channel banners feature </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has channel banners </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000034"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Removed by Discord </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1647" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a9b59643b640847d541844f0b2eb2a98d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_premium_progress_bar_enabled</definition>
        <argsstring>() const</argsstring>
        <name>has_premium_progress_bar_enabled</name>
        <briefdescription>
<para>True if the premium progress bar is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has progress bar enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1653" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a0f3290f777b14686194756a4a4f91e67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_invites_disabled</definition>
        <argsstring>() const</argsstring>
        <name>has_invites_disabled</name>
        <briefdescription>
<para>True if has paused invites, preventing new users from joining. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has paused invites </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="1659" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild  &amp; dpp::json_interface&lt; guild  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; guild  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; guild  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a guild on Discord (AKA a server) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; guild &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; guild &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="18">
        <label>K</label>
      </node>
      <node id="19">
        <label>T</label>
      </node>
      <node id="27">
        <label>default_message_notification_t</label>
      </node>
      <node id="1">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>vanity_url_code</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>channels</edgelabel>
          <edgelabel>emojis</edgelabel>
          <edgelabel>roles</edgelabel>
          <edgelabel>threads</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>voice_members</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>members</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>welcome_screen</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>banner</edgelabel>
          <edgelabel>discovery_splash</edgelabel>
          <edgelabel>icon</edgelabel>
          <edgelabel>splash</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>afk_channel_id</edgelabel>
          <edgelabel>application_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>public_updates_channel_id</edgelabel>
          <edgelabel>rules_channel_id</edgelabel>
          <edgelabel>safety_alerts_channel_id</edgelabel>
          <edgelabel>system_channel_id</edgelabel>
          <edgelabel>widget_channel_id</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>max_members</edgelabel>
          <edgelabel>max_presences</edgelabel>
          <edgelabel>member_count</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>flags_extra</edgelabel>
          <edgelabel>premium_subscription_count</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>afk_timeout</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>max_video_channel_users</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>default_message_notifications</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>premium_tier</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>verification_level</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>explicit_content_filter</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>mfa_level</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>nsfw_level</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>dpp::utility::icon</label>
        <link refid="structdpp_1_1utility_1_1icon"/>
        <childnode refid="23" relation="usage">
          <edgelabel>hash_or_data</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="4" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::welcome_screen</label>
        <link refid="structdpp_1_1welcome__screen"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>welcome_channels</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>guild_afk_timeout_t</label>
      </node>
      <node id="30">
        <label>guild_explicit_content_t</label>
      </node>
      <node id="32">
        <label>guild_nsfw_level_t</label>
      </node>
      <node id="28">
        <label>guild_premium_tier_t</label>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; guild &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; guild &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::json_interface&lt; guild_member &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; guild_member &gt;</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>dpp::json_interface&lt; welcome_screen &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; welcome_screen &gt;</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>mfa_level_t</label>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="10">
        <label>map&lt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>std::unordered_map&lt; K, T &gt;</label>
        <childnode refid="18" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>variant&lt;</label>
      </node>
      <node id="9">
        <label>vector&lt;</label>
      </node>
      <node id="16">
        <label>time_t</label>
      </node>
      <node id="14">
        <label>uint16_t</label>
      </node>
      <node id="24">
        <label>uint32_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="26">
        <label>uint8_t</label>
      </node>
      <node id="11">
        <label>std::unordered_map&lt; snowflake, guild_member &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="17" relation="template-instance">
          <edgelabel>&lt; snowflake, guild_member &gt;</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>verification_level_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/guild.h" line="990" column="1" bodyfile="include/dpp/guild.h" bodystart="990" bodyend="1660"/>
    <listofallmembers>
      <member refid="classdpp_1_1guild_1afe32f37c1ac7dcde9933ba48e7b27130" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>afk_channel_id</name></member>
      <member refid="classdpp_1_1guild_1ad10c23d452ceab28023eace3bc072ad2" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>afk_timeout</name></member>
      <member refid="classdpp_1_1guild_1a9f9174bd64a91357f618a957db555d20" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>application_id</name></member>
      <member refid="classdpp_1_1guild_1a9cc1835aad440ccd91680b3548cfec56" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>banner</name></member>
      <member refid="classdpp_1_1guild_1abd799f5cbe1907c46b86937bda124bee" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>base_permissions</name></member>
      <member refid="classdpp_1_1guild_1ad7e3b4418671873df7f59fccfc49dec4" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>base_permissions</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>build_json</name></member>
      <member refid="classdpp_1_1guild_1a0995288cfbf8ae64973bbf0181d1789a" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>channels</name></member>
      <member refid="classdpp_1_1guild_1a0d5e43e678d6a0448930bd31620d979e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>connect_member_voice</name></member>
      <member refid="classdpp_1_1guild_1aac31cabeec4cc88bd75b2ec97731779f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>default_message_notifications</name></member>
      <member refid="classdpp_1_1guild_1ade8a95b5a41929f92e1fbc079cedb86e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>description</name></member>
      <member refid="classdpp_1_1guild_1ada4fe51e21c9c98e7084e3d3ceee7cda" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>discovery_splash</name></member>
      <member refid="classdpp_1_1guild_1a9169668a25a134dc50bbdb6dd9ddd203" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>emojis</name></member>
      <member refid="classdpp_1_1guild_1a1c6074e2abbc246282edbd786347b00d" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>explicit_content_filter</name></member>
      <member refid="classdpp_1_1guild_1af180ee5682802b64c79d2dc8abc7c9cd" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual" ambiguityscope="json_interface&lt; guild &gt;::"><scope>dpp::guild</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1guild_1a10822b090bfa992012dea488a61310f1" prot="protected" virt="non-virtual"><scope>dpp::guild</scope><name>fill_from_json_impl</name></member>
      <member refid="classdpp_1_1guild_1a0525bf0e263ae902a4d6fb295691cb34" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>flags</name></member>
      <member refid="classdpp_1_1guild_1af09066eb2f5988e268b5fe05b138ab5a" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>flags_extra</name></member>
      <member refid="classdpp_1_1guild_1a480e1091c2a035c99643ae9ebf5d38d0" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>get_banner_url</name></member>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1guild_1a93d1d4faed6aaa0a13455a8a29c09542" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>get_discovery_splash_url</name></member>
      <member refid="classdpp_1_1guild_1ae4ec3933e358da2036b547952b6758c8" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>get_icon_url</name></member>
      <member refid="classdpp_1_1guild_1aa9e79b8daf552f520262339d60df9a2c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>get_splash_url</name></member>
      <member refid="classdpp_1_1guild_1aeae6599054436a5a66e07683032089dc" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>guild</name></member>
      <member refid="classdpp_1_1guild_1a5e06bd5f262e0a321bb959f25a7dddf0" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_animated_banner</name></member>
      <member refid="classdpp_1_1guild_1a8791d8112a042ab32fd8b5a54cd8f607" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_animated_banner_hash</name></member>
      <member refid="classdpp_1_1guild_1a46cf6e3821d628027553641c0623df34" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_animated_icon</name></member>
      <member refid="classdpp_1_1guild_1a019d630e2b5aeb708b48d6f8fbb420de" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_animated_icon_hash</name></member>
      <member refid="classdpp_1_1guild_1a62a651b5bafb7757b20a6bb3303d3542" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_auto_moderation</name></member>
      <member refid="classdpp_1_1guild_1a6ec058ad4e9fde64b0a043287c3f6a73" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_banner</name></member>
      <member refid="classdpp_1_1guild_1ac432abc8b361b3c7f20d74650a63f730" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_channel_banners</name></member>
      <member refid="classdpp_1_1guild_1a0596e28c2513f8ffe2944835117b2f49" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_creator_store_page</name></member>
      <member refid="classdpp_1_1guild_1aace41d0c42c5ab41b605dee6268f03fa" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_invite_splash</name></member>
      <member refid="classdpp_1_1guild_1a0f3290f777b14686194756a4a4f91e67" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_invites_disabled</name></member>
      <member refid="classdpp_1_1guild_1a96af802a7e704276a86043d11feace1a" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_member_verification_gate</name></member>
      <member refid="classdpp_1_1guild_1a75d864d601d0795c35f2fc3acc08a4a4" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_monetization_enabled</name></member>
      <member refid="classdpp_1_1guild_1a986436ee2749583102be956b863929ea" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_more_stickers</name></member>
      <member refid="classdpp_1_1guild_1a6dbec232c0e25a769569dd23715f574f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_news</name></member>
      <member refid="classdpp_1_1guild_1a9b59643b640847d541844f0b2eb2a98d" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_premium_progress_bar_enabled</name></member>
      <member refid="classdpp_1_1guild_1a8aaa556870af360ec85ba05ac680098b" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_raid_alerts_disabled</name></member>
      <member refid="classdpp_1_1guild_1a73a3dcb37facc18aecdb78393bf96206" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_role_icons</name></member>
      <member refid="classdpp_1_1guild_1a95e5f5d04c51a86afa750b0dc2bfaa45" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_role_subscriptions</name></member>
      <member refid="classdpp_1_1guild_1ad769b8ca16e90bd837b52bd155086bb1" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_role_subscriptions_available_for_purchase</name></member>
      <member refid="classdpp_1_1guild_1ac98d9e2481862ca19ba7c2115e5f0b2c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_seven_day_thread_archive</name></member>
      <member refid="classdpp_1_1guild_1a7e36811aef081391cfed101eaad2328e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_support_server</name></member>
      <member refid="classdpp_1_1guild_1a9be0dcb6ed82faac52d0072aed61b69c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_three_day_thread_archive</name></member>
      <member refid="classdpp_1_1guild_1a5b436fb2cc0bbb1a2e9c4c86b483949c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_ticketed_events</name></member>
      <member refid="classdpp_1_1guild_1ac57481c6e6036db6545fcd5a592abee4" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_vanity_url</name></member>
      <member refid="classdpp_1_1guild_1a41a4d225e7ad466e1cba1a5352270075" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_vip_regions</name></member>
      <member refid="classdpp_1_1guild_1af548c524b87179c741c15823bedb7aa4" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>icon</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>id</name></member>
      <member refid="classdpp_1_1guild_1aaf353ec02bc9a4fe25544ec78ee93a8f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_community</name></member>
      <member refid="classdpp_1_1guild_1a6123f35315e5fbb8c6ee0dfaeb61300e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_discoverable</name></member>
      <member refid="classdpp_1_1guild_1ad8b3e4ddcc5fb4fbfd717ac275ffc2a3" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_featureable</name></member>
      <member refid="classdpp_1_1guild_1ab345901eb0418b58344b72dbe21d40a1" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_large</name></member>
      <member refid="classdpp_1_1guild_1a02e42564118a777e6da228de14a0aae2" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_partnered</name></member>
      <member refid="classdpp_1_1guild_1a6415e9e4dec10710bd3486c1dae76fdf" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_preview_enabled</name></member>
      <member refid="classdpp_1_1guild_1ab7b956f6c07d48e1184cb4b6c727af21" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_unavailable</name></member>
      <member refid="classdpp_1_1guild_1af79641512c0342d3082174afa2e636e8" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_verified</name></member>
      <member refid="classdpp_1_1guild_1a7d1ad4ac2b329f47948c91fe4277932e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_welcome_screen_enabled</name></member>
      <member refid="classdpp_1_1guild_1ace0b3366008c87fcec4428d6f083a5d0" prot="protected" virt="non-virtual"><scope>dpp::guild</scope><name>json_interface&lt; guild &gt;</name></member>
      <member refid="classdpp_1_1managed_1a49ce0d7fdbeab770ec46be27771c2285" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1aa3ee436836ab0e2bf4f842c2c2bc3b52" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a198b514f7e6a2b26734fd2dad85f481d" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1ac7a876ad1764b89f0568a1f1bc6bf640" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>managed</name></member>
      <member refid="classdpp_1_1guild_1a32e894208805a5326e7a506c73425854" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>max_members</name></member>
      <member refid="classdpp_1_1guild_1ae5071e531ebbf2b8ae42dfbf409af494" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>max_presences</name></member>
      <member refid="classdpp_1_1guild_1a76661c06c1ee85a3377db6fdd2b2c2c1" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>max_video_channel_users</name></member>
      <member refid="classdpp_1_1guild_1a8c861567b28347debc48618653a0cf1e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>member_count</name></member>
      <member refid="classdpp_1_1guild_1a65c77ce1a6155bc6e7fd6f8937bd1385" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>members</name></member>
      <member refid="classdpp_1_1guild_1a8a37aaf8be3dadbcba87269bd8405946" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>mfa_level</name></member>
      <member refid="classdpp_1_1guild_1ab39f33c8525ab7f7a02f8e88b0448c1f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>name</name></member>
      <member refid="classdpp_1_1guild_1a6520b72031ed26371bb23dc9c23b60c0" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>nsfw_level</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1a48b542729f1352f93f1c60950986517f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a4a4be34febb174eaee3c0964d0bf1e21" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>operator==</name></member>
      <member refid="classdpp_1_1guild_1a4f608587f82bc3deab0974aeb30b2f24" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>owner_id</name></member>
      <member refid="classdpp_1_1guild_1ad33639446c930d418139a976c9c1a071" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>permission_overwrites</name></member>
      <member refid="classdpp_1_1guild_1a9688339669113aae291c5987beee9f24" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>permission_overwrites</name></member>
      <member refid="classdpp_1_1guild_1acd884a98bc58d26d29a6a5d2e249f1c9" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>premium_subscription_count</name></member>
      <member refid="classdpp_1_1guild_1ae86fad1b4f155d8ede1bd4c9cedb8b0f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>premium_tier</name></member>
      <member refid="classdpp_1_1guild_1a10f966d4bc54c233a1ecd6a24ca80dc3" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>public_updates_channel_id</name></member>
      <member refid="classdpp_1_1guild_1aeed0e3f51cc2ce2a6752be2ba7b6f8ac" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>rehash_members</name></member>
      <member refid="classdpp_1_1guild_1a136dcadda527457dab7bad1aa46d5ab1" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>remove_banner</name></member>
      <member refid="classdpp_1_1guild_1a1fbf98dc00400bd08488e615d087bca4" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>remove_discovery_splash</name></member>
      <member refid="classdpp_1_1guild_1a8823e6fdd084db73a92ae24fb5a2ad0b" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>remove_icon</name></member>
      <member refid="classdpp_1_1guild_1a3031bf16c8790662a8cc63c9c6512e4a" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>remove_splash</name></member>
      <member refid="classdpp_1_1guild_1a08c72430a41c55914776f3d82e45235c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>roles</name></member>
      <member refid="classdpp_1_1guild_1a860098b080bc3bf11c1c44bb77edda09" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>rules_channel_id</name></member>
      <member refid="classdpp_1_1guild_1aa201619649888056df9a0149455b33f6" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>safety_alerts_channel_id</name></member>
      <member refid="classdpp_1_1guild_1affa8edf95b8588a59a37da5bda306689" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>set_banner</name></member>
      <member refid="classdpp_1_1guild_1a1276d7e57c2ed8e3a002a46fcc3edfad" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>set_banner</name></member>
      <member refid="classdpp_1_1guild_1afa18f67376c93735752a575a636a0f9d" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>set_discovery_splash</name></member>
      <member refid="classdpp_1_1guild_1a59d50372738849bec8ba02235f26e602" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>set_discovery_splash</name></member>
      <member refid="classdpp_1_1guild_1aa658df6cafd492aaf97af4738b32160f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>set_icon</name></member>
      <member refid="classdpp_1_1guild_1a9ab11b6c42dddcf210adc2050cf05d27" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>set_icon</name></member>
      <member refid="classdpp_1_1guild_1a2aa137d0bad0143fc22c0e9b45df2540" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>set_name</name></member>
      <member refid="classdpp_1_1guild_1ad6125f72b8dae1a627b56e77f28b7450" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>set_splash</name></member>
      <member refid="classdpp_1_1guild_1a15551f8682b5d1394a68d78ccfe5ecf8" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>set_splash</name></member>
      <member refid="classdpp_1_1guild_1a80181fee5f66b2dd6f24bad72226bf7c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>shard_id</name></member>
      <member refid="classdpp_1_1guild_1a9ee654002790e648ba8a4ec6714b00c3" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>splash</name></member>
      <member refid="classdpp_1_1guild_1a0fc5cec016c0604ce2575fbe5eea5ded" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>system_channel_id</name></member>
      <member refid="classdpp_1_1guild_1a8e13e2dd21e91104a1e8335990046bf7" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>threads</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>to_json</name></member>
      <member refid="classdpp_1_1guild_1a3521b4102898608f12d75bcc5b67bba6" prot="protected" virt="non-virtual"><scope>dpp::guild</scope><name>to_json_impl</name></member>
      <member refid="classdpp_1_1guild_1ad858d700638f1785f2338e8ec667c74f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>vanity_url_code</name></member>
      <member refid="classdpp_1_1guild_1ad0ab37f1e5665f2563f476073005930e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>verification_level</name></member>
      <member refid="classdpp_1_1guild_1a42066fe3bbfb976ba27fbb9ca38b722f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>voice_members</name></member>
      <member refid="classdpp_1_1guild_1a79fe96096a15805c1d8c6f977e2e1119" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>welcome_screen</name></member>
      <member refid="classdpp_1_1guild_1ad456524472a24e2592560a4a497c4b01" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>widget_channel_id</name></member>
      <member refid="classdpp_1_1guild_1afdfe3c2bd4025d259b42dedddc2301a1" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>widget_enabled</name></member>
      <member refid="classdpp_1_1guild_1a7e494da5ab1aaaddae4d588849ea9f14" prot="public" virt="virtual"><scope>dpp::guild</scope><name>~guild</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::guild</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
