<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1message__file__data" kind="struct" language="C++" prot="public">
    <compoundname>dpp::message_file_data</compoundname>
    <includes local="no">message.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1message__file__data_1aeb730613e5cb3269cbfe6f22484a3775" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message_file_data::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Name of file to upload (for use server-side in discord&apos;s url). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="126" column="13" bodyfile="include/dpp/message.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message__file__data_1ac5984a75aa50d7a7f765d304c7ebd938" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message_file_data::content</definition>
        <argsstring></argsstring>
        <name>content</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>File content to upload (raw binary) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="131" column="13" bodyfile="include/dpp/message.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message__file__data_1a579186a3b166130edb1ed1ea03517abf" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message_file_data::mimetype</definition>
        <argsstring></argsstring>
        <name>mimetype</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Mime type of files to upload. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000003"><xreftitle>Todo</xreftitle><xrefdescription><para>Look at turning this into an enum? This would allow people to easily compare mimetypes if they happen to change. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="138" column="13" bodyfile="include/dpp/message.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The data for a file attached to a message. </para>
    </briefdescription>
    <detaileddescription>
<para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Change the naming of this and make stickers (and potentially anything else that has data like this) use this. </para>
</xrefdescription></xrefsect></para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::message_file_data</label>
        <link refid="structdpp_1_1message__file__data"/>
        <childnode refid="2" relation="usage">
          <edgelabel>content</edgelabel>
          <edgelabel>mimetype</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/dpp/message.h" line="122" column="1" bodyfile="include/dpp/message.h" bodystart="122" bodyend="139"/>
    <listofallmembers>
      <member refid="structdpp_1_1message__file__data_1ac5984a75aa50d7a7f765d304c7ebd938" prot="public" virt="non-virtual"><scope>dpp::message_file_data</scope><name>content</name></member>
      <member refid="structdpp_1_1message__file__data_1a579186a3b166130edb1ed1ea03517abf" prot="public" virt="non-virtual"><scope>dpp::message_file_data</scope><name>mimetype</name></member>
      <member refid="structdpp_1_1message__file__data_1aeb730613e5cb3269cbfe6f22484a3775" prot="public" virt="non-virtual"><scope>dpp::message_file_data</scope><name>name</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
