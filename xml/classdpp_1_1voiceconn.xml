<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1voiceconn" kind="class" language="C++" prot="public">
    <compoundname>dpp::voiceconn</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; voiceconn &gt;</basecompoundref>
    <includes local="no">discordclient.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a5db744340876d4b586756ea519d5db8a" prot="private" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::voiceconn::creator</definition>
        <argsstring></argsstring>
        <name>creator</name>
        <briefdescription>
<para>Owning <ref refid="classdpp_1_1discord__client" kindref="compound">dpp::discord_client</ref> instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="156" column="22" bodyfile="include/dpp/discordclient.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1af87a2cd4f62934aa7f42b538a16afae4" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a3fd7704763e9ba9cb6f5bf568e3ba118" kindref="member">voice_connection_gateway_request_callback_t</ref></type>
        <definition>voice_connection_gateway_request_callback_t dpp::voiceconn::request_callback</definition>
        <argsstring></argsstring>
        <name>request_callback</name>
        <briefdescription>
<para>Function to ask a <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> instance to make a request to Gateway to connect to a voice channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="161" column="45" bodyfile="include/dpp/discordclient.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a9ae04af7ba5f3ed36e248ece6f2ad25b" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::voiceconn::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>Voice Channel ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="172" column="11" bodyfile="include/dpp/discordclient.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a0bc9cf608a4830f31f317066a28c5dcb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::voiceconn::dave</definition>
        <argsstring></argsstring>
        <name>dave</name>
        <briefdescription>
<para>True to enable DAVE E2EE. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This is an EXPERIMENTAL feature! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="198" column="6" bodyfile="include/dpp/discordclient.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1abe1551bd33ef12327bc070f12341a02f" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::voiceconn::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>Guild to connect to the voice channel on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="167" column="11" bodyfile="include/dpp/discordclient.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1aaaae5391243bb862501088170037b041" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voiceconn::session_id</definition>
        <argsstring></argsstring>
        <name>session_id</name>
        <briefdescription>
<para>Voice Voice session ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="182" column="13" bodyfile="include/dpp/discordclient.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a9c4ef16e1fb1c077f6adb18ce5ac9a41" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voiceconn::token</definition>
        <argsstring></argsstring>
        <name>token</name>
        <briefdescription>
<para>Voice websocket token. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="187" column="13" bodyfile="include/dpp/discordclient.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1abfd122ef3aafa2e91e470fa0f6753a74" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; class <ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &gt;</type>
        <definition>std::unique_ptr&lt;class discord_voice_client&gt; dpp::voiceconn::voiceclient</definition>
        <argsstring></argsstring>
        <name>voiceclient</name>
        <briefdescription>
<para>voice websocket client </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="192" column="17" bodyfile="include/dpp/discordclient.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a9c0868d279364472bf0c86a4b5ae8f1b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voiceconn::websocket_hostname</definition>
        <argsstring></argsstring>
        <name>websocket_hostname</name>
        <briefdescription>
<para>Websocket hostname for status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="177" column="13" bodyfile="include/dpp/discordclient.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a32e6d3057b673c6c621ac6c3fa6b307a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voiceconn::voiceconn</definition>
        <argsstring>(class discord_client *o, voice_connection_gateway_request_callback_t request_callback, snowflake guild_id, snowflake channel_id, bool enable_dave)</argsstring>
        <name>voiceconn</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a3fd7704763e9ba9cb6f5bf568e3ba118" kindref="member">voice_connection_gateway_request_callback_t</ref></type>
          <declname>request_callback</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_dave</declname>
        </param>
        <briefdescription>
<para>Construct a new voiceconn object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>owner </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to ask a <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> instance to make a request to Gateway to connect to a voice channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to connect to the voice channel on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>voice channel id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_dave</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable DAVE E2EE @warn DAVE is an EXPERIMENTAL feature! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a5200c6bba0b6219a0cdd29c6590d0c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voiceconn::~voiceconn</definition>
        <argsstring>()</argsstring>
        <name>~voiceconn</name>
        <briefdescription>
<para>Destroy the voiceconn object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a2644838b6481cedd1d855f144567404c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1voiceconn" kindref="compound">voiceconn</ref> &amp;</type>
        <definition>voiceconn &amp; dpp::voiceconn::connect</definition>
        <argsstring>()</argsstring>
        <name>connect</name>
        <briefdescription>
<para>Create websocket object and connect it. Needs hostname, token and session_id to be set or does nothing. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to self </para>
</simplesect>
<simplesect kind="note"><para>It can spawn a thread to establish the connection, so this is NOT a synchronous blocking call! You shouldn&apos;t call this directly. Use a wrapper function instead. e.g. <ref refid="classdpp_1_1guild_1a6da6cce69156fcbfb6bb44f7d5c5b648" kindref="member">dpp::guild::connect_member_voice</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="242" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a05b4745343840f96e585ece0456bd831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1voiceconn" kindref="compound">voiceconn</ref> &amp;</type>
        <definition>voiceconn &amp; dpp::voiceconn::disconnect</definition>
        <argsstring>()</argsstring>
        <name>disconnect</name>
        <briefdescription>
<para>Disconnect from the currently connected voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="248" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a6d8f549df84d36594f34c6ef1470f1c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voiceconn::is_active</definition>
        <argsstring>() const</argsstring>
        <name>is_active</name>
        <briefdescription>
<para>return true if the connection is active (websocket exists) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has an active websocket </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="230" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1aa63caa0d55507984cb064dddd209908d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voiceconn::is_ready</definition>
        <argsstring>() const</argsstring>
        <name>is_ready</name>
        <briefdescription>
<para>return true if the connection is ready to connect (has hostname, token and session id) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ready to connect </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="223" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1ad35026714c668e2dea3711d82cb29ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::voiceconn::reassign_owner</definition>
        <argsstring>(class discord_client *o)</argsstring>
        <name>reassign_owner</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Reassigns the owner to the given <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="253" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a80569dbf39def9be0a16085a8d315e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1voiceconn" kindref="compound">voiceconn</ref> &amp;</type>
        <definition>voiceconn &amp; dpp::voiceconn::request</definition>
        <argsstring>()</argsstring>
        <name>request</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="232" column="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a connection to a voice channel. A client can only connect to one voice channel per guild at a time, so these are stored in a map in the <ref refid="classdpp_1_1discord__client" kindref="compound">dpp::discord_client</ref> keyed by guild_id. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; voiceconn &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>bool</label>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>session_id</edgelabel>
          <edgelabel>token</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>dave</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>std::enable_shared_from_this&lt; voiceconn &gt;</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/discordclient.h" line="152" column="1" bodyfile="include/dpp/discordclient.h" bodystart="152" bodyend="254"/>
    <listofallmembers>
      <member refid="classdpp_1_1voiceconn_1a9ae04af7ba5f3ed36e248ece6f2ad25b" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>channel_id</name></member>
      <member refid="classdpp_1_1voiceconn_1a2644838b6481cedd1d855f144567404c" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>connect</name></member>
      <member refid="classdpp_1_1voiceconn_1a5db744340876d4b586756ea519d5db8a" prot="private" virt="non-virtual"><scope>dpp::voiceconn</scope><name>creator</name></member>
      <member refid="classdpp_1_1voiceconn_1a0bc9cf608a4830f31f317066a28c5dcb" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>dave</name></member>
      <member refid="classdpp_1_1voiceconn_1a05b4745343840f96e585ece0456bd831" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>disconnect</name></member>
      <member refid="classdpp_1_1voiceconn_1abe1551bd33ef12327bc070f12341a02f" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1voiceconn_1a6d8f549df84d36594f34c6ef1470f1c9" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>is_active</name></member>
      <member refid="classdpp_1_1voiceconn_1aa63caa0d55507984cb064dddd209908d" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>is_ready</name></member>
      <member refid="classdpp_1_1voiceconn_1ad35026714c668e2dea3711d82cb29ae8" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>reassign_owner</name></member>
      <member refid="classdpp_1_1voiceconn_1a80569dbf39def9be0a16085a8d315e2a" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>request</name></member>
      <member refid="classdpp_1_1voiceconn_1af87a2cd4f62934aa7f42b538a16afae4" prot="private" virt="non-virtual"><scope>dpp::voiceconn</scope><name>request_callback</name></member>
      <member refid="classdpp_1_1voiceconn_1aaaae5391243bb862501088170037b041" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>session_id</name></member>
      <member refid="classdpp_1_1voiceconn_1a9c4ef16e1fb1c077f6adb18ce5ac9a41" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>token</name></member>
      <member refid="classdpp_1_1voiceconn_1abfd122ef3aafa2e91e470fa0f6753a74" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>voiceclient</name></member>
      <member refid="classdpp_1_1voiceconn_1a32e6d3057b673c6c621ac6c3fa6b307a" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>voiceconn</name></member>
      <member refid="classdpp_1_1voiceconn_1a9c0868d279364472bf0c86a4b5ae8f1b" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>websocket_hostname</name></member>
      <member refid="classdpp_1_1voiceconn_1a5200c6bba0b6219a0cdd29c6590d0c98" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>~voiceconn</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
