<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classdpp_1_1voiceconn" kind="class" prot="public">
    <compoundname>dpp::voiceconn</compoundname>
    <includes local="no">discordclient.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a5db744340876d4b586756ea519d5db8a" prot="private" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::voiceconn::creator</definition>
        <argsstring></argsstring>
        <name>creator</name>
        <briefdescription>
<para>Owning <ref refid="classdpp_1_1discord__client" kindref="compound">dpp::discord_client</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="63" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a9ae04af7ba5f3ed36e248ece6f2ad25b" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::voiceconn::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>Voice Channel ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="68" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a9c0868d279364472bf0c86a4b5ae8f1b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voiceconn::websocket_hostname</definition>
        <argsstring></argsstring>
        <name>websocket_hostname</name>
        <briefdescription>
<para>Websocket hostname for status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="73" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1aaaae5391243bb862501088170037b041" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voiceconn::session_id</definition>
        <argsstring></argsstring>
        <name>session_id</name>
        <briefdescription>
<para>Voice Voice session ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="78" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a9c4ef16e1fb1c077f6adb18ce5ac9a41" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voiceconn::token</definition>
        <argsstring></argsstring>
        <name>token</name>
        <briefdescription>
<para>Voice websocket token. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="83" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a812e4cdee1fc7ed2a024d78161c84f86" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> *</type>
        <definition>class discord_voice_client* dpp::voiceconn::voiceclient</definition>
        <argsstring></argsstring>
        <name>voiceclient</name>
        <briefdescription>
<para>voice websocket client </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="88" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a2238afc107e4e97daa0693c81fe150fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voiceconn::voiceconn</definition>
        <argsstring>()=default</argsstring>
        <name>voiceconn</name>
        <briefdescription>
<para>Construct a new voiceconn object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a7b0b033f371d814cf04e09ac7cf08ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voiceconn::voiceconn</definition>
        <argsstring>(class discord_client *o, snowflake _channel_id)</argsstring>
        <name>voiceconn</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>_channel_id</declname>
        </param>
        <briefdescription>
<para>Construct a new voiceconn object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>owner </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>voice channel id </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="101" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="590" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a5200c6bba0b6219a0cdd29c6590d0c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voiceconn::~voiceconn</definition>
        <argsstring>()</argsstring>
        <name>~voiceconn</name>
        <briefdescription>
<para>Destroy the voiceconn object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="106" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="610" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a7dd6504b406b5e08f9fd9337a275568d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voiceconn::is_ready</definition>
        <argsstring>()</argsstring>
        <name>is_ready</name>
        <briefdescription>
<para>return true if the connection is ready to connect (has hostname, token and session id) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ready to connect </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="114" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="593" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a8bb23d980d80e0d61c1cadc61bacf278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voiceconn::is_active</definition>
        <argsstring>()</argsstring>
        <name>is_active</name>
        <briefdescription>
<para>return true if the connection is active (websocket exists) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has an active websocket </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="121" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="597" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a596e75341bfd350810241d350e7da112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::voiceconn::connect</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>connect</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Create websocket object and connect it. Needs hosname, token and session_id to be set or does nothing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to connect to the voice channel on </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="129" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="614" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a462b82f234c78686edb38ba9c301d9bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::voiceconn::disconnect</definition>
        <argsstring>()</argsstring>
        <name>disconnect</name>
        <briefdescription>
<para>Disconnect from the currently connected voice channel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="134" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="601" bodyend="608"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a connection to a voice channel. A client can only connect to one voice channel per guild at a time, so these are stored in a map in the <ref refid="classdpp_1_1discord__client" kindref="compound">dpp::discord_client</ref> keyed by guild_id. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="15844">
        <label>function&lt; void(const dpp::guild_integrations_update_t &amp;event)&gt;</label>
      </node>
      <node id="15781">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="15782" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="15772" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="15783" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="15785" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="15788" relation="usage">
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>numshards</edgelabel>
          <edgelabel>intents</edgelabel>
        </childnode>
        <childnode refid="15776" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="15791" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
      </node>
      <node id="15778">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="15779" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="15780" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="15808">
        <label>function&lt; void(const dpp::stage_instance_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15823">
        <label>function&lt; void(const dpp::message_create_t &amp;event)&gt;</label>
      </node>
      <node id="15809">
        <label>function&lt; void(const dpp::thread_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="15766">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="15767" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="15768" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="15776" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>session_id</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
      </node>
      <node id="15849">
        <label>function&lt; void(const dpp::voice_buffer_send_t &amp;event)&gt;</label>
      </node>
      <node id="15836">
        <label>function&lt; void(const dpp::user_update_t &amp;event)&gt;</label>
      </node>
      <node id="15785">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="15786" relation="public-inheritance">
        </childnode>
        <childnode refid="15787" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="15788" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="15789" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="15776" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="15790" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="15794">
        <label>function&lt; void(const dpp::thread_members_update_t &amp;event)&gt;</label>
      </node>
      <node id="15838">
        <label>function&lt; void(const dpp::invite_create_t &amp;event)&gt;</label>
      </node>
      <node id="15810">
        <label>function&lt; void(const dpp::guild_create_t &amp;event)&gt;</label>
      </node>
      <node id="15840">
        <label>function&lt; void(const dpp::guild_emojis_update_t &amp;event)&gt;</label>
      </node>
      <node id="15850">
        <label>function&lt; void(const dpp::guild_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="15774">
        <label>function&lt; int()&gt;</label>
      </node>
      <node id="15791">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="15792" relation="usage">
          <edgelabel>guild_role_create</edgelabel>
        </childnode>
        <childnode refid="15793" relation="usage">
          <edgelabel>voice_state_update</edgelabel>
        </childnode>
        <childnode refid="15794" relation="usage">
          <edgelabel>thread_members_update</edgelabel>
        </childnode>
        <childnode refid="15795" relation="usage">
          <edgelabel>channel_delete</edgelabel>
        </childnode>
        <childnode refid="15796" relation="usage">
          <edgelabel>thread_delete</edgelabel>
        </childnode>
        <childnode refid="15797" relation="usage">
          <edgelabel>integration_update</edgelabel>
        </childnode>
        <childnode refid="15798" relation="usage">
          <edgelabel>message_reaction_remove_emoji</edgelabel>
        </childnode>
        <childnode refid="15799" relation="usage">
          <edgelabel>resumed</edgelabel>
        </childnode>
        <childnode refid="15800" relation="usage">
          <edgelabel>presence_update</edgelabel>
        </childnode>
        <childnode refid="15801" relation="usage">
          <edgelabel>message_delete_bulk</edgelabel>
        </childnode>
        <childnode refid="15802" relation="usage">
          <edgelabel>voice_ready</edgelabel>
        </childnode>
        <childnode refid="15803" relation="usage">
          <edgelabel>guild_ban_remove</edgelabel>
        </childnode>
        <childnode refid="15804" relation="usage">
          <edgelabel>guild_role_delete</edgelabel>
        </childnode>
        <childnode refid="15805" relation="usage">
          <edgelabel>channel_update</edgelabel>
        </childnode>
        <childnode refid="15806" relation="usage">
          <edgelabel>stickers_update</edgelabel>
        </childnode>
        <childnode refid="15807" relation="usage">
          <edgelabel>guild_members_chunk</edgelabel>
        </childnode>
        <childnode refid="15808" relation="usage">
          <edgelabel>stage_instance_delete</edgelabel>
        </childnode>
        <childnode refid="15809" relation="usage">
          <edgelabel>thread_member_update</edgelabel>
        </childnode>
        <childnode refid="15810" relation="usage">
          <edgelabel>guild_create</edgelabel>
        </childnode>
        <childnode refid="15811" relation="usage">
          <edgelabel>message_reaction_remove</edgelabel>
        </childnode>
        <childnode refid="15812" relation="usage">
          <edgelabel>select_click</edgelabel>
        </childnode>
        <childnode refid="15813" relation="usage">
          <edgelabel>interaction_create</edgelabel>
        </childnode>
        <childnode refid="15814" relation="usage">
          <edgelabel>guild_join_request_delete</edgelabel>
        </childnode>
        <childnode refid="15815" relation="usage">
          <edgelabel>guild_member_add</edgelabel>
        </childnode>
        <childnode refid="15816" relation="usage">
          <edgelabel>voice_user_talking</edgelabel>
        </childnode>
        <childnode refid="15817" relation="usage">
          <edgelabel>thread_create</edgelabel>
        </childnode>
        <childnode refid="15818" relation="usage">
          <edgelabel>application_command_create</edgelabel>
        </childnode>
        <childnode refid="15819" relation="usage">
          <edgelabel>button_click</edgelabel>
        </childnode>
        <childnode refid="15820" relation="usage">
          <edgelabel>guild_update</edgelabel>
        </childnode>
        <childnode refid="15821" relation="usage">
          <edgelabel>message_reaction_remove_all</edgelabel>
        </childnode>
        <childnode refid="15822" relation="usage">
          <edgelabel>voice_receive</edgelabel>
        </childnode>
        <childnode refid="15823" relation="usage">
          <edgelabel>message_create</edgelabel>
        </childnode>
        <childnode refid="15824" relation="usage">
          <edgelabel>webhooks_update</edgelabel>
        </childnode>
        <childnode refid="15825" relation="usage">
          <edgelabel>message_reaction_add</edgelabel>
        </childnode>
        <childnode refid="15826" relation="usage">
          <edgelabel>message_delete</edgelabel>
        </childnode>
        <childnode refid="15827" relation="usage">
          <edgelabel>voice_track_marker</edgelabel>
        </childnode>
        <childnode refid="15828" relation="usage">
          <edgelabel>thread_list_sync</edgelabel>
        </childnode>
        <childnode refid="15829" relation="usage">
          <edgelabel>integration_delete</edgelabel>
        </childnode>
        <childnode refid="15830" relation="usage">
          <edgelabel>guild_ban_add</edgelabel>
        </childnode>
        <childnode refid="15831" relation="usage">
          <edgelabel>channel_pins_update</edgelabel>
        </childnode>
        <childnode refid="15832" relation="usage">
          <edgelabel>typing_start</edgelabel>
        </childnode>
        <childnode refid="15833" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="15834" relation="usage">
          <edgelabel>thread_update</edgelabel>
        </childnode>
        <childnode refid="15835" relation="usage">
          <edgelabel>integration_create</edgelabel>
        </childnode>
        <childnode refid="15836" relation="usage">
          <edgelabel>user_update</edgelabel>
        </childnode>
        <childnode refid="15837" relation="usage">
          <edgelabel>message_update</edgelabel>
        </childnode>
        <childnode refid="15838" relation="usage">
          <edgelabel>invite_create</edgelabel>
        </childnode>
        <childnode refid="15839" relation="usage">
          <edgelabel>invite_delete</edgelabel>
        </childnode>
        <childnode refid="15840" relation="usage">
          <edgelabel>guild_emojis_update</edgelabel>
        </childnode>
        <childnode refid="15841" relation="usage">
          <edgelabel>guild_delete</edgelabel>
        </childnode>
        <childnode refid="15842" relation="usage">
          <edgelabel>application_command_delete</edgelabel>
        </childnode>
        <childnode refid="15843" relation="usage">
          <edgelabel>application_command_update</edgelabel>
        </childnode>
        <childnode refid="15844" relation="usage">
          <edgelabel>guild_integrations_update</edgelabel>
        </childnode>
        <childnode refid="15845" relation="usage">
          <edgelabel>voice_server_update</edgelabel>
        </childnode>
        <childnode refid="15846" relation="usage">
          <edgelabel>guild_role_update</edgelabel>
        </childnode>
        <childnode refid="15847" relation="usage">
          <edgelabel>channel_create</edgelabel>
        </childnode>
        <childnode refid="15848" relation="usage">
          <edgelabel>stage_instance_create</edgelabel>
        </childnode>
        <childnode refid="15849" relation="usage">
          <edgelabel>voice_buffer_send</edgelabel>
        </childnode>
        <childnode refid="15850" relation="usage">
          <edgelabel>guild_member_update</edgelabel>
        </childnode>
        <childnode refid="15851" relation="usage">
          <edgelabel>guild_member_remove</edgelabel>
        </childnode>
        <childnode refid="15852" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
      </node>
      <node id="15798">
        <label>function&lt; void(const dpp::message_reaction_remove_emoji_t &amp;event)&gt;</label>
      </node>
      <node id="15805">
        <label>function&lt; void(const dpp::channel_update_t &amp;event)&gt;</label>
      </node>
      <node id="15847">
        <label>function&lt; void(const dpp::channel_create_t &amp;event)&gt;</label>
      </node>
      <node id="15767">
        <label>uint64_t</label>
      </node>
      <node id="15842">
        <label>function&lt; void(const dpp::application_command_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15839">
        <label>function&lt; void(const dpp::invite_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15825">
        <label>function&lt; void(const dpp::message_reaction_add_t &amp;event)&gt;</label>
      </node>
      <node id="15819">
        <label>function&lt; void(const dpp::button_click_t &amp;event)&gt;</label>
      </node>
      <node id="15807">
        <label>function&lt; void(const dpp::guild_members_chunk_t &amp;event)&gt;</label>
      </node>
      <node id="15796">
        <label>function&lt; void(const dpp::thread_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15815">
        <label>function&lt; void(const dpp::guild_member_add_t &amp;event)&gt;</label>
      </node>
      <node id="15832">
        <label>function&lt; void(const dpp::typing_start_t &amp;event)&gt;</label>
      </node>
      <node id="15829">
        <label>function&lt; void(const dpp::integration_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15852">
        <label>function&lt; void(const dpp::log_t &amp;event)&gt;</label>
      </node>
      <node id="15787">
        <label>uint16_t</label>
      </node>
      <node id="15817">
        <label>function&lt; void(const dpp::thread_create_t &amp;event)&gt;</label>
      </node>
      <node id="15772">
        <label>time_t</label>
      </node>
      <node id="15777">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="15851">
        <label>function&lt; void(const dpp::guild_member_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15828">
        <label>function&lt; void(const dpp::thread_list_sync_t &amp;event)&gt;</label>
      </node>
      <node id="15768">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="15769" relation="public-inheritance">
        </childnode>
        <childnode refid="15767" relation="usage">
          <edgelabel>server_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="15772" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="15781" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="15788" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="15776" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="15775" relation="usage">
          <edgelabel>terminating</edgelabel>
          <edgelabel>sodium_initialised</edgelabel>
        </childnode>
        <childnode refid="15853" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
      </node>
      <node id="15790">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="15767" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="15827">
        <label>function&lt; void(const dpp::voice_track_marker_t &amp;event)&gt;</label>
      </node>
      <node id="15816">
        <label>function&lt; void(const dpp::voice_user_talking_t &amp;event)&gt;</label>
      </node>
      <node id="15782">
        <label>double</label>
      </node>
      <node id="15770">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="15771" relation="usage">
          <edgelabel>custom_writeable_ready</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
        </childnode>
        <childnode refid="15767" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="15772" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="15773" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="15774" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="15775" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="15776" relation="usage">
          <edgelabel>port</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>buffer</edgelabel>
        </childnode>
        <childnode refid="15778" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="15826">
        <label>function&lt; void(const dpp::message_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15848">
        <label>function&lt; void(const dpp::stage_instance_create_t &amp;event)&gt;</label>
      </node>
      <node id="15788">
        <label>uint32_t</label>
      </node>
      <node id="15846">
        <label>function&lt; void(const dpp::guild_role_update_t &amp;event)&gt;</label>
      </node>
      <node id="15789">
        <label>uint8_t</label>
      </node>
      <node id="15831">
        <label>function&lt; void(const dpp::channel_pins_update_t &amp;event)&gt;</label>
      </node>
      <node id="15784">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="15769">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="15770" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15783">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="15784" relation="usage">
          <edgelabel>role_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="15800">
        <label>function&lt; void(const dpp::presence_update_t &amp;event)&gt;</label>
      </node>
      <node id="15812">
        <label>function&lt; void(const dpp::select_click_t &amp;event)&gt;</label>
      </node>
      <node id="15797">
        <label>function&lt; void(const dpp::integration_update_t &amp;event)&gt;</label>
      </node>
      <node id="15820">
        <label>function&lt; void(const dpp::guild_update_t &amp;event)&gt;</label>
      </node>
      <node id="15822">
        <label>function&lt; void(const dpp::voice_receive_t &amp;event)&gt;</label>
      </node>
      <node id="15771">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="15814">
        <label>function&lt; void(const dpp::guild_join_request_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15821">
        <label>function&lt; void(const dpp::message_reaction_remove_all_t &amp;event)&gt;</label>
      </node>
      <node id="15779">
        <label>SSL *</label>
      </node>
      <node id="15786">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="15767" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="15834">
        <label>function&lt; void(const dpp::thread_update_t &amp;event)&gt;</label>
      </node>
      <node id="15835">
        <label>function&lt; void(const dpp::integration_create_t &amp;event)&gt;</label>
      </node>
      <node id="15843">
        <label>function&lt; void(const dpp::application_command_update_t &amp;event)&gt;</label>
      </node>
      <node id="15780">
        <label>SSL_CTX *</label>
      </node>
      <node id="15830">
        <label>function&lt; void(const dpp::guild_ban_add_t &amp;event)&gt;</label>
      </node>
      <node id="15841">
        <label>function&lt; void(const dpp::guild_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15799">
        <label>function&lt; void(const dpp::resumed_t &amp;event)&gt;</label>
      </node>
      <node id="15818">
        <label>function&lt; void(const dpp::application_command_create_t &amp;event)&gt;</label>
      </node>
      <node id="15824">
        <label>function&lt; void(const dpp::webhooks_update_t &amp;event)&gt;</label>
      </node>
      <node id="15837">
        <label>function&lt; void(const dpp::message_update_t &amp;event)&gt;</label>
      </node>
      <node id="15775">
        <label>bool</label>
      </node>
      <node id="15773">
        <label>SOCKET</label>
      </node>
      <node id="15813">
        <label>function&lt; void(const dpp::interaction_create_t &amp;event)&gt;</label>
      </node>
      <node id="15845">
        <label>function&lt; void(const dpp::voice_server_update_t &amp;event)&gt;</label>
      </node>
      <node id="15803">
        <label>function&lt; void(const dpp::guild_ban_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15795">
        <label>function&lt; void(const dpp::channel_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15792">
        <label>function&lt; void(const dpp::guild_role_create_t &amp;event)&gt;</label>
      </node>
      <node id="15811">
        <label>function&lt; void(const dpp::message_reaction_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15833">
        <label>function&lt; void(const dpp::ready_t &amp;event)&gt;</label>
      </node>
      <node id="15793">
        <label>function&lt; void(const dpp::voice_state_update_t &amp;event)&gt;</label>
      </node>
      <node id="15806">
        <label>function&lt; void(const dpp::guild_stickers_update_t &amp;event)&gt;</label>
      </node>
      <node id="15802">
        <label>function&lt; void(const dpp::voice_ready_t &amp;event)&gt;</label>
      </node>
      <node id="15853">
        <label>native_handle_type</label>
      </node>
      <node id="15804">
        <label>function&lt; void(const dpp::guild_role_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15776">
        <label>std::string</label>
        <childnode refid="15777" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15801">
        <label>function&lt; void(const dpp::message_delete_bulk_t &amp;event)&gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/discordclient.h" line="59" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="59" bodyend="135"/>
    <listofallmembers>
      <member refid="classdpp_1_1voiceconn_1a9ae04af7ba5f3ed36e248ece6f2ad25b" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>channel_id</name></member>
      <member refid="classdpp_1_1voiceconn_1a596e75341bfd350810241d350e7da112" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>connect</name></member>
      <member refid="classdpp_1_1voiceconn_1a5db744340876d4b586756ea519d5db8a" prot="private" virt="non-virtual"><scope>dpp::voiceconn</scope><name>creator</name></member>
      <member refid="classdpp_1_1voiceconn_1a462b82f234c78686edb38ba9c301d9bb" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>disconnect</name></member>
      <member refid="classdpp_1_1voiceconn_1a8bb23d980d80e0d61c1cadc61bacf278" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>is_active</name></member>
      <member refid="classdpp_1_1voiceconn_1a7dd6504b406b5e08f9fd9337a275568d" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>is_ready</name></member>
      <member refid="classdpp_1_1voiceconn_1aaaae5391243bb862501088170037b041" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>session_id</name></member>
      <member refid="classdpp_1_1voiceconn_1a9c4ef16e1fb1c077f6adb18ce5ac9a41" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>token</name></member>
      <member refid="classdpp_1_1voiceconn_1a812e4cdee1fc7ed2a024d78161c84f86" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>voiceclient</name></member>
      <member refid="classdpp_1_1voiceconn_1a2238afc107e4e97daa0693c81fe150fd" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>voiceconn</name></member>
      <member refid="classdpp_1_1voiceconn_1a7b0b033f371d814cf04e09ac7cf08ac1" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>voiceconn</name></member>
      <member refid="classdpp_1_1voiceconn_1a9c0868d279364472bf0c86a4b5ae8f1b" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>websocket_hostname</name></member>
      <member refid="classdpp_1_1voiceconn_1a5200c6bba0b6219a0cdd29c6590d0c98" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>~voiceconn</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
