<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="classdpp_1_1voiceconn" kind="class" prot="public">
    <compoundname>dpp::voiceconn</compoundname>
    <includes local="no">discordclient.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a5db744340876d4b586756ea519d5db8a" prot="private" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::voiceconn::creator</definition>
        <argsstring></argsstring>
        <name>creator</name>
        <briefdescription>
<para>Owning <ref refid="classdpp_1_1discord__client" kindref="compound">dpp::discord_client</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="63" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a9ae04af7ba5f3ed36e248ece6f2ad25b" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::voiceconn::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>Voice Channel ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="68" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a9c0868d279364472bf0c86a4b5ae8f1b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voiceconn::websocket_hostname</definition>
        <argsstring></argsstring>
        <name>websocket_hostname</name>
        <briefdescription>
<para>Websocket hostname for status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="73" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1aaaae5391243bb862501088170037b041" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voiceconn::session_id</definition>
        <argsstring></argsstring>
        <name>session_id</name>
        <briefdescription>
<para>Voice Voice session ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="78" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a9c4ef16e1fb1c077f6adb18ce5ac9a41" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voiceconn::token</definition>
        <argsstring></argsstring>
        <name>token</name>
        <briefdescription>
<para>Voice websocket token. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="83" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voiceconn_1a812e4cdee1fc7ed2a024d78161c84f86" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> *</type>
        <definition>class discord_voice_client* dpp::voiceconn::voiceclient</definition>
        <argsstring></argsstring>
        <name>voiceclient</name>
        <briefdescription>
<para>voice websocket client </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="88" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a2238afc107e4e97daa0693c81fe150fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voiceconn::voiceconn</definition>
        <argsstring>()=default</argsstring>
        <name>voiceconn</name>
        <briefdescription>
<para>Construct a new voiceconn object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a7b0b033f371d814cf04e09ac7cf08ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voiceconn::voiceconn</definition>
        <argsstring>(class discord_client *o, snowflake _channel_id)</argsstring>
        <name>voiceconn</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>_channel_id</declname>
        </param>
        <briefdescription>
<para>Construct a new voiceconn object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>owner </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>voice channel id </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="101" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="590" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a5200c6bba0b6219a0cdd29c6590d0c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voiceconn::~voiceconn</definition>
        <argsstring>()</argsstring>
        <name>~voiceconn</name>
        <briefdescription>
<para>Destroy the voiceconn object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="106" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="610" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a7dd6504b406b5e08f9fd9337a275568d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voiceconn::is_ready</definition>
        <argsstring>()</argsstring>
        <name>is_ready</name>
        <briefdescription>
<para>return true if the connection is ready to connect (has hostname, token and session id) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ready to connect </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="114" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="593" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a8bb23d980d80e0d61c1cadc61bacf278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voiceconn::is_active</definition>
        <argsstring>()</argsstring>
        <name>is_active</name>
        <briefdescription>
<para>return true if the connection is active (websocket exists) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has an active websocket </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="121" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="597" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a596e75341bfd350810241d350e7da112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::voiceconn::connect</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>connect</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Create websocket object and connect it. Needs hosname, token and session_id to be set or does nothing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to connect to the voice channel on </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="129" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="614" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voiceconn_1a462b82f234c78686edb38ba9c301d9bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::voiceconn::disconnect</definition>
        <argsstring>()</argsstring>
        <name>disconnect</name>
        <briefdescription>
<para>Disconnect from the currently connected voice channel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/discordclient.h" line="134" column="1" bodyfile="/home/brain/D++/src/dpp/discordclient.cpp" bodystart="601" bodyend="608"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a connection to a voice channel. A client can only connect to one voice channel per guild at a time, so these are stored in a map in the <ref refid="classdpp_1_1discord__client" kindref="compound">dpp::discord_client</ref> keyed by guild_id. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="15678">
        <label>function&lt; void(const dpp::guild_integrations_update_t &amp;event)&gt;</label>
      </node>
      <node id="15615">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="15616" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="15606" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="15617" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="15619" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="15622" relation="usage">
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>numshards</edgelabel>
          <edgelabel>intents</edgelabel>
        </childnode>
        <childnode refid="15610" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="15625" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
      </node>
      <node id="15612">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="15613" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="15614" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="15642">
        <label>function&lt; void(const dpp::stage_instance_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15657">
        <label>function&lt; void(const dpp::message_create_t &amp;event)&gt;</label>
      </node>
      <node id="15643">
        <label>function&lt; void(const dpp::thread_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="15600">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="15601" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="15602" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="15610" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>session_id</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
      </node>
      <node id="15683">
        <label>function&lt; void(const dpp::voice_buffer_send_t &amp;event)&gt;</label>
      </node>
      <node id="15670">
        <label>function&lt; void(const dpp::user_update_t &amp;event)&gt;</label>
      </node>
      <node id="15619">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="15620" relation="public-inheritance">
        </childnode>
        <childnode refid="15621" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="15622" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="15623" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="15610" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="15624" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="15628">
        <label>function&lt; void(const dpp::thread_members_update_t &amp;event)&gt;</label>
      </node>
      <node id="15672">
        <label>function&lt; void(const dpp::invite_create_t &amp;event)&gt;</label>
      </node>
      <node id="15644">
        <label>function&lt; void(const dpp::guild_create_t &amp;event)&gt;</label>
      </node>
      <node id="15674">
        <label>function&lt; void(const dpp::guild_emojis_update_t &amp;event)&gt;</label>
      </node>
      <node id="15684">
        <label>function&lt; void(const dpp::guild_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="15608">
        <label>function&lt; int()&gt;</label>
      </node>
      <node id="15625">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="15626" relation="usage">
          <edgelabel>guild_role_create</edgelabel>
        </childnode>
        <childnode refid="15627" relation="usage">
          <edgelabel>voice_state_update</edgelabel>
        </childnode>
        <childnode refid="15628" relation="usage">
          <edgelabel>thread_members_update</edgelabel>
        </childnode>
        <childnode refid="15629" relation="usage">
          <edgelabel>channel_delete</edgelabel>
        </childnode>
        <childnode refid="15630" relation="usage">
          <edgelabel>thread_delete</edgelabel>
        </childnode>
        <childnode refid="15631" relation="usage">
          <edgelabel>integration_update</edgelabel>
        </childnode>
        <childnode refid="15632" relation="usage">
          <edgelabel>message_reaction_remove_emoji</edgelabel>
        </childnode>
        <childnode refid="15633" relation="usage">
          <edgelabel>resumed</edgelabel>
        </childnode>
        <childnode refid="15634" relation="usage">
          <edgelabel>presence_update</edgelabel>
        </childnode>
        <childnode refid="15635" relation="usage">
          <edgelabel>message_delete_bulk</edgelabel>
        </childnode>
        <childnode refid="15636" relation="usage">
          <edgelabel>voice_ready</edgelabel>
        </childnode>
        <childnode refid="15637" relation="usage">
          <edgelabel>guild_ban_remove</edgelabel>
        </childnode>
        <childnode refid="15638" relation="usage">
          <edgelabel>guild_role_delete</edgelabel>
        </childnode>
        <childnode refid="15639" relation="usage">
          <edgelabel>channel_update</edgelabel>
        </childnode>
        <childnode refid="15640" relation="usage">
          <edgelabel>stickers_update</edgelabel>
        </childnode>
        <childnode refid="15641" relation="usage">
          <edgelabel>guild_members_chunk</edgelabel>
        </childnode>
        <childnode refid="15642" relation="usage">
          <edgelabel>stage_instance_delete</edgelabel>
        </childnode>
        <childnode refid="15643" relation="usage">
          <edgelabel>thread_member_update</edgelabel>
        </childnode>
        <childnode refid="15644" relation="usage">
          <edgelabel>guild_create</edgelabel>
        </childnode>
        <childnode refid="15645" relation="usage">
          <edgelabel>message_reaction_remove</edgelabel>
        </childnode>
        <childnode refid="15646" relation="usage">
          <edgelabel>select_click</edgelabel>
        </childnode>
        <childnode refid="15647" relation="usage">
          <edgelabel>interaction_create</edgelabel>
        </childnode>
        <childnode refid="15648" relation="usage">
          <edgelabel>guild_join_request_delete</edgelabel>
        </childnode>
        <childnode refid="15649" relation="usage">
          <edgelabel>guild_member_add</edgelabel>
        </childnode>
        <childnode refid="15650" relation="usage">
          <edgelabel>voice_user_talking</edgelabel>
        </childnode>
        <childnode refid="15651" relation="usage">
          <edgelabel>thread_create</edgelabel>
        </childnode>
        <childnode refid="15652" relation="usage">
          <edgelabel>application_command_create</edgelabel>
        </childnode>
        <childnode refid="15653" relation="usage">
          <edgelabel>button_click</edgelabel>
        </childnode>
        <childnode refid="15654" relation="usage">
          <edgelabel>guild_update</edgelabel>
        </childnode>
        <childnode refid="15655" relation="usage">
          <edgelabel>message_reaction_remove_all</edgelabel>
        </childnode>
        <childnode refid="15656" relation="usage">
          <edgelabel>voice_receive</edgelabel>
        </childnode>
        <childnode refid="15657" relation="usage">
          <edgelabel>message_create</edgelabel>
        </childnode>
        <childnode refid="15658" relation="usage">
          <edgelabel>webhooks_update</edgelabel>
        </childnode>
        <childnode refid="15659" relation="usage">
          <edgelabel>message_reaction_add</edgelabel>
        </childnode>
        <childnode refid="15660" relation="usage">
          <edgelabel>message_delete</edgelabel>
        </childnode>
        <childnode refid="15661" relation="usage">
          <edgelabel>voice_track_marker</edgelabel>
        </childnode>
        <childnode refid="15662" relation="usage">
          <edgelabel>thread_list_sync</edgelabel>
        </childnode>
        <childnode refid="15663" relation="usage">
          <edgelabel>integration_delete</edgelabel>
        </childnode>
        <childnode refid="15664" relation="usage">
          <edgelabel>guild_ban_add</edgelabel>
        </childnode>
        <childnode refid="15665" relation="usage">
          <edgelabel>channel_pins_update</edgelabel>
        </childnode>
        <childnode refid="15666" relation="usage">
          <edgelabel>typing_start</edgelabel>
        </childnode>
        <childnode refid="15667" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="15668" relation="usage">
          <edgelabel>thread_update</edgelabel>
        </childnode>
        <childnode refid="15669" relation="usage">
          <edgelabel>integration_create</edgelabel>
        </childnode>
        <childnode refid="15670" relation="usage">
          <edgelabel>user_update</edgelabel>
        </childnode>
        <childnode refid="15671" relation="usage">
          <edgelabel>message_update</edgelabel>
        </childnode>
        <childnode refid="15672" relation="usage">
          <edgelabel>invite_create</edgelabel>
        </childnode>
        <childnode refid="15673" relation="usage">
          <edgelabel>invite_delete</edgelabel>
        </childnode>
        <childnode refid="15674" relation="usage">
          <edgelabel>guild_emojis_update</edgelabel>
        </childnode>
        <childnode refid="15675" relation="usage">
          <edgelabel>guild_delete</edgelabel>
        </childnode>
        <childnode refid="15676" relation="usage">
          <edgelabel>application_command_delete</edgelabel>
        </childnode>
        <childnode refid="15677" relation="usage">
          <edgelabel>application_command_update</edgelabel>
        </childnode>
        <childnode refid="15678" relation="usage">
          <edgelabel>guild_integrations_update</edgelabel>
        </childnode>
        <childnode refid="15679" relation="usage">
          <edgelabel>voice_server_update</edgelabel>
        </childnode>
        <childnode refid="15680" relation="usage">
          <edgelabel>guild_role_update</edgelabel>
        </childnode>
        <childnode refid="15681" relation="usage">
          <edgelabel>channel_create</edgelabel>
        </childnode>
        <childnode refid="15682" relation="usage">
          <edgelabel>stage_instance_create</edgelabel>
        </childnode>
        <childnode refid="15683" relation="usage">
          <edgelabel>voice_buffer_send</edgelabel>
        </childnode>
        <childnode refid="15684" relation="usage">
          <edgelabel>guild_member_update</edgelabel>
        </childnode>
        <childnode refid="15685" relation="usage">
          <edgelabel>guild_member_remove</edgelabel>
        </childnode>
        <childnode refid="15686" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
      </node>
      <node id="15632">
        <label>function&lt; void(const dpp::message_reaction_remove_emoji_t &amp;event)&gt;</label>
      </node>
      <node id="15639">
        <label>function&lt; void(const dpp::channel_update_t &amp;event)&gt;</label>
      </node>
      <node id="15681">
        <label>function&lt; void(const dpp::channel_create_t &amp;event)&gt;</label>
      </node>
      <node id="15601">
        <label>uint64_t</label>
      </node>
      <node id="15676">
        <label>function&lt; void(const dpp::application_command_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15673">
        <label>function&lt; void(const dpp::invite_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15659">
        <label>function&lt; void(const dpp::message_reaction_add_t &amp;event)&gt;</label>
      </node>
      <node id="15653">
        <label>function&lt; void(const dpp::button_click_t &amp;event)&gt;</label>
      </node>
      <node id="15641">
        <label>function&lt; void(const dpp::guild_members_chunk_t &amp;event)&gt;</label>
      </node>
      <node id="15630">
        <label>function&lt; void(const dpp::thread_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15649">
        <label>function&lt; void(const dpp::guild_member_add_t &amp;event)&gt;</label>
      </node>
      <node id="15666">
        <label>function&lt; void(const dpp::typing_start_t &amp;event)&gt;</label>
      </node>
      <node id="15663">
        <label>function&lt; void(const dpp::integration_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15686">
        <label>function&lt; void(const dpp::log_t &amp;event)&gt;</label>
      </node>
      <node id="15621">
        <label>uint16_t</label>
      </node>
      <node id="15651">
        <label>function&lt; void(const dpp::thread_create_t &amp;event)&gt;</label>
      </node>
      <node id="15606">
        <label>time_t</label>
      </node>
      <node id="15611">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="15685">
        <label>function&lt; void(const dpp::guild_member_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15662">
        <label>function&lt; void(const dpp::thread_list_sync_t &amp;event)&gt;</label>
      </node>
      <node id="15602">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="15603" relation="public-inheritance">
        </childnode>
        <childnode refid="15601" relation="usage">
          <edgelabel>server_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="15606" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="15615" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="15622" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="15610" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="15609" relation="usage">
          <edgelabel>terminating</edgelabel>
          <edgelabel>sodium_initialised</edgelabel>
        </childnode>
        <childnode refid="15687" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
      </node>
      <node id="15624">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="15601" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="15661">
        <label>function&lt; void(const dpp::voice_track_marker_t &amp;event)&gt;</label>
      </node>
      <node id="15650">
        <label>function&lt; void(const dpp::voice_user_talking_t &amp;event)&gt;</label>
      </node>
      <node id="15616">
        <label>double</label>
      </node>
      <node id="15604">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="15605" relation="usage">
          <edgelabel>custom_writeable_ready</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
        </childnode>
        <childnode refid="15601" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="15606" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="15607" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="15608" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="15609" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="15610" relation="usage">
          <edgelabel>port</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>buffer</edgelabel>
        </childnode>
        <childnode refid="15612" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="15660">
        <label>function&lt; void(const dpp::message_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15682">
        <label>function&lt; void(const dpp::stage_instance_create_t &amp;event)&gt;</label>
      </node>
      <node id="15622">
        <label>uint32_t</label>
      </node>
      <node id="15680">
        <label>function&lt; void(const dpp::guild_role_update_t &amp;event)&gt;</label>
      </node>
      <node id="15623">
        <label>uint8_t</label>
      </node>
      <node id="15665">
        <label>function&lt; void(const dpp::channel_pins_update_t &amp;event)&gt;</label>
      </node>
      <node id="15618">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="15603">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="15604" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15617">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="15618" relation="usage">
          <edgelabel>role_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="15634">
        <label>function&lt; void(const dpp::presence_update_t &amp;event)&gt;</label>
      </node>
      <node id="15646">
        <label>function&lt; void(const dpp::select_click_t &amp;event)&gt;</label>
      </node>
      <node id="15631">
        <label>function&lt; void(const dpp::integration_update_t &amp;event)&gt;</label>
      </node>
      <node id="15654">
        <label>function&lt; void(const dpp::guild_update_t &amp;event)&gt;</label>
      </node>
      <node id="15656">
        <label>function&lt; void(const dpp::voice_receive_t &amp;event)&gt;</label>
      </node>
      <node id="15605">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="15648">
        <label>function&lt; void(const dpp::guild_join_request_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15655">
        <label>function&lt; void(const dpp::message_reaction_remove_all_t &amp;event)&gt;</label>
      </node>
      <node id="15613">
        <label>SSL *</label>
      </node>
      <node id="15620">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="15601" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="15668">
        <label>function&lt; void(const dpp::thread_update_t &amp;event)&gt;</label>
      </node>
      <node id="15669">
        <label>function&lt; void(const dpp::integration_create_t &amp;event)&gt;</label>
      </node>
      <node id="15677">
        <label>function&lt; void(const dpp::application_command_update_t &amp;event)&gt;</label>
      </node>
      <node id="15614">
        <label>SSL_CTX *</label>
      </node>
      <node id="15664">
        <label>function&lt; void(const dpp::guild_ban_add_t &amp;event)&gt;</label>
      </node>
      <node id="15675">
        <label>function&lt; void(const dpp::guild_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15633">
        <label>function&lt; void(const dpp::resumed_t &amp;event)&gt;</label>
      </node>
      <node id="15652">
        <label>function&lt; void(const dpp::application_command_create_t &amp;event)&gt;</label>
      </node>
      <node id="15658">
        <label>function&lt; void(const dpp::webhooks_update_t &amp;event)&gt;</label>
      </node>
      <node id="15671">
        <label>function&lt; void(const dpp::message_update_t &amp;event)&gt;</label>
      </node>
      <node id="15609">
        <label>bool</label>
      </node>
      <node id="15607">
        <label>SOCKET</label>
      </node>
      <node id="15647">
        <label>function&lt; void(const dpp::interaction_create_t &amp;event)&gt;</label>
      </node>
      <node id="15679">
        <label>function&lt; void(const dpp::voice_server_update_t &amp;event)&gt;</label>
      </node>
      <node id="15637">
        <label>function&lt; void(const dpp::guild_ban_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15629">
        <label>function&lt; void(const dpp::channel_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15626">
        <label>function&lt; void(const dpp::guild_role_create_t &amp;event)&gt;</label>
      </node>
      <node id="15645">
        <label>function&lt; void(const dpp::message_reaction_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15667">
        <label>function&lt; void(const dpp::ready_t &amp;event)&gt;</label>
      </node>
      <node id="15627">
        <label>function&lt; void(const dpp::voice_state_update_t &amp;event)&gt;</label>
      </node>
      <node id="15640">
        <label>function&lt; void(const dpp::guild_stickers_update_t &amp;event)&gt;</label>
      </node>
      <node id="15636">
        <label>function&lt; void(const dpp::voice_ready_t &amp;event)&gt;</label>
      </node>
      <node id="15687">
        <label>native_handle_type</label>
      </node>
      <node id="15638">
        <label>function&lt; void(const dpp::guild_role_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15610">
        <label>std::string</label>
        <childnode refid="15611" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15635">
        <label>function&lt; void(const dpp::message_delete_bulk_t &amp;event)&gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/discordclient.h" line="59" column="1" bodyfile="/home/brain/D++/include/dpp/discordclient.h" bodystart="59" bodyend="135"/>
    <listofallmembers>
      <member refid="classdpp_1_1voiceconn_1a9ae04af7ba5f3ed36e248ece6f2ad25b" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>channel_id</name></member>
      <member refid="classdpp_1_1voiceconn_1a596e75341bfd350810241d350e7da112" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>connect</name></member>
      <member refid="classdpp_1_1voiceconn_1a5db744340876d4b586756ea519d5db8a" prot="private" virt="non-virtual"><scope>dpp::voiceconn</scope><name>creator</name></member>
      <member refid="classdpp_1_1voiceconn_1a462b82f234c78686edb38ba9c301d9bb" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>disconnect</name></member>
      <member refid="classdpp_1_1voiceconn_1a8bb23d980d80e0d61c1cadc61bacf278" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>is_active</name></member>
      <member refid="classdpp_1_1voiceconn_1a7dd6504b406b5e08f9fd9337a275568d" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>is_ready</name></member>
      <member refid="classdpp_1_1voiceconn_1aaaae5391243bb862501088170037b041" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>session_id</name></member>
      <member refid="classdpp_1_1voiceconn_1a9c4ef16e1fb1c077f6adb18ce5ac9a41" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>token</name></member>
      <member refid="classdpp_1_1voiceconn_1a812e4cdee1fc7ed2a024d78161c84f86" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>voiceclient</name></member>
      <member refid="classdpp_1_1voiceconn_1a2238afc107e4e97daa0693c81fe150fd" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>voiceconn</name></member>
      <member refid="classdpp_1_1voiceconn_1a7b0b033f371d814cf04e09ac7cf08ac1" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>voiceconn</name></member>
      <member refid="classdpp_1_1voiceconn_1a9c0868d279364472bf0c86a4b5ae8f1b" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>websocket_hostname</name></member>
      <member refid="classdpp_1_1voiceconn_1a5200c6bba0b6219a0cdd29c6590d0c98" prot="public" virt="non-virtual"><scope>dpp::voiceconn</scope><name>~voiceconn</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
