<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1snowflake" kind="class" language="C++" prot="public" final="yes">
    <compoundname>dpp::snowflake</compoundname>
    <includes local="no">snowflake.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1snowflake_1a06018349562d2b923dd95302f909ac61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct std::hash&lt; dpp::snowflake &gt;</definition>
        <argsstring></argsstring>
        <name>std::hash&lt; dpp::snowflake &gt;</name>
        <param>
          <type>std::hash&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="50" column="17" bodyfile="include/dpp/snowflake.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1snowflake_1a6e8a05841062cbf9a9d8a639898ca09f" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::snowflake::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The snowflake value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="56" column="10" bodyfile="include/dpp/snowflake.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1snowflake_1ad1618a56148b7049127f26d92599cbda" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr dpp::snowflake::snowflake</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>snowflake</name>
        <briefdescription>
<para>Construct a snowflake object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="62" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a853e3d35ae141236aa7f307def73aa9f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr dpp::snowflake::snowflake</definition>
        <argsstring>(const snowflake &amp;rhs) noexcept=default</argsstring>
        <name>snowflake</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy a snowflake object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="67" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a5dea3adfe24a33bcfcd1cdf0de9e86ac" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr dpp::snowflake::snowflake</definition>
        <argsstring>(snowflake &amp;&amp;rhs) noexcept=default</argsstring>
        <name>snowflake</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move a snowflake object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="72" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a6c3c6bcc9d08ce01e0aff0246f228e47" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr dpp::snowflake::snowflake</definition>
        <argsstring>(T snowflake_val) noexcept(std::is_unsigned_v&lt; T &gt;)</argsstring>
        <name>snowflake</name>
        <param>
          <type>T</type>
          <declname>snowflake_val</declname>
        </param>
        <briefdescription>
<para>Construct a snowflake from an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on assigning a negative value. The function is noexcept if the type given is unsigned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snowflake_val</parametername>
</parameternamelist>
<parameterdescription>
<para>snowflake value as an integer type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>we cast to the unsigned version of the type given - this maintains &quot;possible loss of data&quot; warnings for sizeof(T) &gt; sizeof(value) while suppressing them for signed to unsigned conversion (for example snowflake(42) will call snowflake(int) which is a signed type)</para>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="81" column="11" bodyfile="include/dpp/snowflake.h" bodystart="81" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a739dd77da0c853be3d61f63d1c0c8c60" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::snowflake::snowflake</definition>
        <argsstring>(std::string_view string_value) noexcept</argsstring>
        <name>snowflake</name>
        <param>
          <type>std::string_view</type>
          <declname>string_value</declname>
        </param>
        <briefdescription>
<para>Construct a snowflake object from an unsigned integer in a string. </para>
        </briefdescription>
        <detaileddescription>
<para>On invalid string the value will be 0 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_value</parametername>
</parameternamelist>
<parameterdescription>
<para>A snowflake value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a95ca0c26e0373b5f63931a51f6d676fd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_same_v&lt;T, std::string&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dpp::snowflake::snowflake</definition>
        <argsstring>(const T &amp;string_value) noexcept</argsstring>
        <name>snowflake</name>
        <param>
          <type>const T &amp;</type>
          <declname>string_value</declname>
        </param>
        <briefdescription>
<para>Construct a snowflake object from an unsigned integer in a string. </para>
        </briefdescription>
        <detaileddescription>
<para>On invalid string the value will be 0 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_value</parametername>
</parameternamelist>
<parameterdescription>
<para>A snowflake value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="110" column="1" bodyfile="include/dpp/snowflake.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a0f6af0f4e5aead4811c374062c4463e4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> &amp;</type>
        <definition>constexpr dpp::snowflake &amp; dpp::snowflake::operator=</definition>
        <argsstring>(const dpp::snowflake &amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy value from another snowflake. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The snowflake to copy from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="118" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a6e27c0b5b5cb2f2a080d2b0074cec8cc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> &amp;</type>
        <definition>constexpr dpp::snowflake &amp; dpp::snowflake::operator=</definition>
        <argsstring>(dpp::snowflake &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move value from another snowflake. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The snowflake to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="125" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1af694809022f7ae641cf96362d7e5b768" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> &amp;</type>
        <definition>constexpr dpp::snowflake &amp; dpp::snowflake::operator=</definition>
        <argsstring>(T snowflake_val) noexcept(std::is_unsigned_v&lt; T &gt;)</argsstring>
        <name>operator=</name>
        <param>
          <type>T</type>
          <declname>snowflake_val</declname>
        </param>
        <briefdescription>
<para>Assign integer value to the snowflake. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on assigning a negative value. The function is noexcept if the type given is unsigned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snowflake_val</parametername>
</parameternamelist>
<parameterdescription>
<para>snowflake value as an integer type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="134" column="26" bodyfile="include/dpp/snowflake.h" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1aad9cd12bfd29bca1e285252b27d2d5f0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_convertible_v&lt;T, std::string_view&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> &amp;</type>
        <definition>constexpr dpp::snowflake &amp; dpp::snowflake::operator=</definition>
        <argsstring>(T &amp;&amp;snowflake_val) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>snowflake_val</declname>
        </param>
        <briefdescription>
<para>Assign value converted from a string to the snowflake. </para>
        </briefdescription>
        <detaileddescription>
<para>On invalid string the value will be 0 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snowflake_val</parametername>
</parameternamelist>
<parameterdescription>
<para>snowflake value as a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="145" column="26" bodyfile="include/dpp/snowflake.h" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a7371493322c429865ba1fbbbc7bb1b2c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::snowflake::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns true if the snowflake holds an empty value (is 0) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if empty (zero) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="154" column="16" bodyfile="include/dpp/snowflake.h" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a6231d024d2ab5d3123d456a90bb24b33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::snowflake::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <briefdescription>
<para>Returns the stringified version of the snowflake value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string string form of snowflake value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="163" column="20" bodyfile="include/dpp/snowflake.h" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a72ced117b0d0c2ca4d88ef998d2a8217" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::snowflake::operator==</definition>
        <argsstring>(dpp::snowflake snowflake_val) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref></type>
          <declname>snowflake_val</declname>
        </param>
        <briefdescription>
<para>Comparison operator with another snowflake. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snowflake_val</parametername>
</parameternamelist>
<parameterdescription>
<para>snowflake </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="172" column="16" bodyfile="include/dpp/snowflake.h" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1ae60017d05e0579a6415bf5454b3db850" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::snowflake::operator==</definition>
        <argsstring>(std::string_view snowflake_val) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>std::string_view</type>
          <declname>snowflake_val</declname>
        </param>
        <briefdescription>
<para>Comparison operator with a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snowflake_val</parametername>
</parameternamelist>
<parameterdescription>
<para>snowflake value as a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="181" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1aa0d9444c001286e2355aaa17532e0950" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::snowflake::operator==</definition>
        <argsstring>(T snowflake_val) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>T</type>
          <declname>snowflake_val</declname>
        </param>
        <briefdescription>
<para>Comparison operator with an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>snowflake_val</parametername>
</parameternamelist>
<parameterdescription>
<para>snowflake value as an integer type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="189" column="16" bodyfile="include/dpp/snowflake.h" bodystart="189" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a6555927db7eb9ff369c590456cde4a85" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr dpp::snowflake::operator uint64_t</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator uint64_t</name>
        <briefdescription>
<para>For acting like an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The snowflake value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="198" column="11" bodyfile="include/dpp/snowflake.h" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1acb273a7a337ae6f4a67a92381d3eb19f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr dpp::snowflake::operator uint64_t &amp;</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator uint64_t &amp;</name>
        <briefdescription>
<para>For acting like an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A reference to the snowflake value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="206" column="11" bodyfile="include/dpp/snowflake.h" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a516494d355d2b3aa788c1a745e936610" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::snowflake::operator json</definition>
        <argsstring>() const</argsstring>
        <name>operator json</name>
        <briefdescription>
<para>For building json. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The snowflake value as a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a84a07232cf240be84630eb1ae3f08aef" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::snowflake::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this snowflake according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="222" column="18" bodyfile="include/dpp/snowflake.h" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1ac2f501def798c4b36dbcb5ff036faea5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t dpp::snowflake::get_worker_id</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_worker_id</name>
        <briefdescription>
<para>Get the worker id that produced this snowflake value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint8_t worker id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="232" column="19" bodyfile="include/dpp/snowflake.h" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1a5c76652a16110f7275731a113e4ae120" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t dpp::snowflake::get_process_id</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_process_id</name>
        <briefdescription>
<para>Get the process id that produced this snowflake value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint8_t process id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="241" column="19" bodyfile="include/dpp/snowflake.h" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1snowflake_1ad91dcb90ead67a1751e6cdac53d2879f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr uint16_t</type>
        <definition>constexpr uint16_t dpp::snowflake::get_increment</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_increment</name>
        <briefdescription>
<para>Get the increment, which is incremented for every snowflake created over the one millisecond resolution in the timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t millisecond increment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/snowflake.h" line="251" column="20" bodyfile="include/dpp/snowflake.h" bodystart="251" bodyend="253"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A container for a 64 bit unsigned value representing many things on discord. This value is known in distributed computing as a snowflake value. </para>
    </briefdescription>
    <detaileddescription>
<para>Snowflakes are:</para>
<para><itemizedlist>
<listitem><para>Performant (very fast to generate at source and to compare in code)</para>
</listitem><listitem><para>Uncoordinated (allowing high availability across clusters, data centres etc)</para>
</listitem><listitem><para>Time ordered (newer snowflakes have higher IDs)</para>
</listitem><listitem><para>Directly Sortable (due to time ordering)</para>
</listitem><listitem><para>Compact (64 bit numbers, not 128 bit, or string)</para>
</listitem></itemizedlist>
</para>
<para>An identical format of snowflake is used by Twitter, Instagram and several other platforms.</para>
<para><simplesect kind="see"><para><ulink url="https://en.wikipedia.org/wiki/Snowflake_ID">https://en.wikipedia.org/wiki/Snowflake_ID</ulink> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://github.com/twitter-archive/snowflake/tree/b3f6a3c6ca8e1b6847baa6ff42bf72201e2c2231">https://github.com/twitter-archive/snowflake/tree/b3f6a3c6ca8e1b6847baa6ff42bf72201e2c2231</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="2" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/snowflake.h" line="50" column="1" bodyfile="include/dpp/snowflake.h" bodystart="50" bodyend="254"/>
    <listofallmembers>
      <member refid="classdpp_1_1snowflake_1a7371493322c429865ba1fbbbc7bb1b2c" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>empty</name></member>
      <member refid="classdpp_1_1snowflake_1a84a07232cf240be84630eb1ae3f08aef" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1snowflake_1ad91dcb90ead67a1751e6cdac53d2879f" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>get_increment</name></member>
      <member refid="classdpp_1_1snowflake_1a5c76652a16110f7275731a113e4ae120" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>get_process_id</name></member>
      <member refid="classdpp_1_1snowflake_1ac2f501def798c4b36dbcb5ff036faea5" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>get_worker_id</name></member>
      <member refid="classdpp_1_1snowflake_1a516494d355d2b3aa788c1a745e936610" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>operator json</name></member>
      <member refid="classdpp_1_1snowflake_1a6555927db7eb9ff369c590456cde4a85" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>operator uint64_t</name></member>
      <member refid="classdpp_1_1snowflake_1acb273a7a337ae6f4a67a92381d3eb19f" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>operator uint64_t &amp;</name></member>
      <member refid="classdpp_1_1snowflake_1a0f6af0f4e5aead4811c374062c4463e4" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>operator=</name></member>
      <member refid="classdpp_1_1snowflake_1a6e27c0b5b5cb2f2a080d2b0074cec8cc" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>operator=</name></member>
      <member refid="classdpp_1_1snowflake_1af694809022f7ae641cf96362d7e5b768" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>operator=</name></member>
      <member refid="classdpp_1_1snowflake_1aad9cd12bfd29bca1e285252b27d2d5f0" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>operator=</name></member>
      <member refid="classdpp_1_1snowflake_1a72ced117b0d0c2ca4d88ef998d2a8217" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>operator==</name></member>
      <member refid="classdpp_1_1snowflake_1ae60017d05e0579a6415bf5454b3db850" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>operator==</name></member>
      <member refid="classdpp_1_1snowflake_1aa0d9444c001286e2355aaa17532e0950" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>operator==</name></member>
      <member refid="classdpp_1_1snowflake_1ad1618a56148b7049127f26d92599cbda" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>snowflake</name></member>
      <member refid="classdpp_1_1snowflake_1a853e3d35ae141236aa7f307def73aa9f" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>snowflake</name></member>
      <member refid="classdpp_1_1snowflake_1a5dea3adfe24a33bcfcd1cdf0de9e86ac" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>snowflake</name></member>
      <member refid="classdpp_1_1snowflake_1a6c3c6bcc9d08ce01e0aff0246f228e47" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>snowflake</name></member>
      <member refid="classdpp_1_1snowflake_1a739dd77da0c853be3d61f63d1c0c8c60" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>snowflake</name></member>
      <member refid="classdpp_1_1snowflake_1a95ca0c26e0373b5f63931a51f6d676fd" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>snowflake</name></member>
      <member refid="classdpp_1_1snowflake_1a06018349562d2b923dd95302f909ac61" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>std::hash&lt; dpp::snowflake &gt;</name></member>
      <member refid="classdpp_1_1snowflake_1a6231d024d2ab5d3123d456a90bb24b33" prot="public" virt="non-virtual"><scope>dpp::snowflake</scope><name>str</name></member>
      <member refid="classdpp_1_1snowflake_1a6e8a05841062cbf9a9d8a639898ca09f" prot="protected" virt="non-virtual"><scope>dpp::snowflake</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
