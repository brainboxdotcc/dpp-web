<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="build-a-discord-bot-linux-clion" kind="page">
    <compoundname>build-a-discord-bot-linux-clion</compoundname>
    <title>Building a discord bot in Linux using CLion</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This tutorial teaches you how to create a <emphasis>working skeleton project you can build upon</emphasis>, using the JetBrains-IDE <bold><ulink url="https://www.jetbrains.com/clion/">CLion</ulink></bold>.</para>
<para><simplesect kind="note"><para>This tutorial will use <bold>Ubuntu</bold>! You might use other Distros if you prefer, but keep in mind the setup process might be different!</para>
</simplesect>
Make sure you have CLion installed and works fine (run a <emphasis>hello-world program</emphasis>). You can <ulink url="https://www.jetbrains.com/de-de/clion/download/">download CLion here</ulink>.</para>
<sect2 id="build-a-discord-bot-linux-clion_1autotoc_md100">
<title>Setup a project</title>
<para>Create a new project. Select C++17 as the Language standard, or C++20 if you want something more recent.</para>
<para>We&apos;ll use the following file structure as a <emphasis>skeleton project you can build upon</emphasis>: <verbatim>- your_project/
    |-- libs/
    |-- src/
        |-- main.cpp
    |-- CMakeLists.txt
</verbatim></para>
<para>Create the directories in your project and move the by CLion generated <emphasis>hello-world main.cpp</emphasis> in the <computeroutput>src/</computeroutput> directory.</para>
<para>In the <computeroutput>libs/</computeroutput> directory, clone D++ with: <computeroutput>git clone <ulink url="https://github.com/brainboxdotcc/DPP.git">https://github.com/brainboxdotcc/DPP.git</ulink></computeroutput>. You can also clone <ulink url="https://github.com/gabime/spdlog">spdlog</ulink> into it if you need a logger.</para>
<para>Your project directory should look like this:</para>
<para><image type="html" name="build-clion-project-structure.png"></image>
</para>
<sect3 id="build-a-discord-bot-linux-clion_1autotoc_md101">
<title>Configure CMake file</title>
<para>Paste this CMake configuration in the <computeroutput>CMakeLists.txt</computeroutput> and adapt it according to your needs:</para>
<para><programlisting filename=".cmake"><codeline><highlight class="normal">#<sp/>minimum<sp/>CMake<sp/>version<sp/>required</highlight></codeline>
<codeline><highlight class="normal">cmake_minimum_required(VERSION<sp/>3.15)</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Project<sp/>name,<sp/>version<sp/>and<sp/>description</highlight></codeline>
<codeline><highlight class="normal">project(discord-bot<sp/>VERSION<sp/>1.0<sp/>DESCRIPTION<sp/>&quot;A<sp/>discord<sp/>bot&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Add<sp/>DPP<sp/>as<sp/>dependency</highlight></codeline>
<codeline><highlight class="normal">add_subdirectory(libs/DPP)</highlight></codeline>
<codeline><highlight class="normal">add_subdirectory(libs/spdlog)<sp/>#<sp/>if<sp/>you<sp/>need<sp/>a<sp/>logger.<sp/>Don&apos;t<sp/>forget<sp/>to<sp/>clone<sp/>sources</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>in<sp/>the<sp/>`libs/`<sp/>directory</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Create<sp/>an<sp/>executable</highlight></codeline>
<codeline><highlight class="normal">add_executable(${PROJECT_NAME}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>src/main.cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>your<sp/>others<sp/>files...</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Linking<sp/>libraries</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(${PROJECT_NAME}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog<sp/>#<sp/>Like<sp/>before,<sp/>if<sp/>you<sp/>need<sp/>spdlog</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Specify<sp/>includes</highlight></codeline>
<codeline><highlight class="normal">target_include_directories(${PROJECT_NAME}<sp/>PRIVATE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>libs/DPP/include</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>libs/spdlog/include<sp/>#<sp/>Like<sp/>before,<sp/>if<sp/>you<sp/>need<sp/>spdlog</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Set<sp/>C++<sp/>version</highlight></codeline>
<codeline><highlight class="normal">set_target_properties(${PROJECT_NAME}<sp/>PROPERTIES</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CXX_STANDARD<sp/>17<sp/>#<sp/>or<sp/>20<sp/>if<sp/>you<sp/>want<sp/>something<sp/>more<sp/>recent</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CXX_STANDARD_REQUIRED<sp/>ON</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para>Then open the &quot;File&quot; menu and click on &quot;Reload CMake Project&quot; to reload the CMake configuration.</para>
<para><image type="html" name="build-clion-reload-cmake-project.png"></image>
</para>
</sect3>
<sect3 id="build-a-discord-bot-linux-clion_1autotoc_md102">
<title>Add an example program</title>
<para>The next step is to write the bot. Copy and paste the following <ulink url="https://dpp.dev/firstbot.html">example program</ulink> in the <computeroutput>main.cpp</computeroutput> and set your bot token (see <ulink url="https://dpp.dev/creating-a-bot-application.html">Creating a Bot Token</ulink>) and guild ID to the example program:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;dpp/dpp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><sp/><sp/><sp/>BOT_TOKEN<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;add<sp/>your<sp/>token<sp/>here&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref><sp/>bot(BOT_TOKEN);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_log(<ref refid="namespacedpp_1_1utility_1a8c2cc04bb80ffd287b376d5977899277" kindref="member">dpp::utility::cout_logger</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_slashcommand([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1slashcommand__t" kindref="compound">dpp::slashcommand_t</ref>&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.<ref refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" kindref="member">command</ref>.<ref refid="classdpp_1_1interaction_1aabbb8d58d708128098516ed443d5c140" kindref="member">get_command_name</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ping&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event.reply(</highlight><highlight class="stringliteral">&quot;Pong!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_ready([&amp;bot](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1ready__t" kindref="compound">dpp::ready_t</ref>&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dpp::run_once&lt;struct<sp/>register_bot_commands&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bot.global_command_create(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref>(</highlight><highlight class="stringliteral">&quot;ping&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Ping<sp/>pong!&quot;</highlight><highlight class="normal">,<sp/>bot.me.id)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.start(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Hit the green &quot;Run&quot; button in the top-right to run the bot.</para>
<para><bold>Congratulations, you&apos;ve successfully set up a bot!</bold></para>
</sect3>
</sect2>
<sect2 id="build-a-discord-bot-linux-clion_1autotoc_md103">
<title>Troubleshooting</title>
<para><itemizedlist>
<listitem><para>Stuck? You can find us on the <ulink url="https://discord.gg/dpp">official discord server</ulink> - ask away! We don&apos;t bite! </para>
</listitem></itemizedlist>
</para>
</sect2>
    </detaileddescription>
    <location file="docpages/make_a_bot/clion.md"/>
  </compounddef>
</doxygen>
