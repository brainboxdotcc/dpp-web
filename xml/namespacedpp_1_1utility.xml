<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacedpp_1_1utility" kind="namespace" language="C++">
    <compoundname>dpp::utility</compoundname>
    <innerclass refid="structdpp_1_1utility_1_1iconhash" prot="public">dpp::utility::iconhash</innerclass>
    <innerclass refid="structdpp_1_1utility_1_1uptime" prot="public">dpp::utility::uptime</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacedpp_1_1utility_1a36d13f96f86debc010768d4c812e3fa6" prot="public" static="no">
        <type>std::function&lt; void(const std::string &amp;output)&gt;</type>
        <definition>typedef std::function&lt;void(const std::string&amp; output)&gt; dpp::utility::cmd_result_t</definition>
        <argsstring></argsstring>
        <name>cmd_result_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discord.h" line="80" column="23" bodyfile="include/dpp/discord.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedpp_1_1utility_1a5603a807b2a0384968d07be7581e1d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double CoreExport dpp::utility::time_f</definition>
        <argsstring>()</argsstring>
        <name>time_f</name>
        <briefdescription>
<para>Return the current time with fractions of seconds. This is a unix epoch time with the fractional seconds part after the decimal place. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double time with fractional seconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/utility.cpp" line="48" column="8" bodyfile="src/dpp/utility.cpp" bodystart="48" bodyend="53" declfile="include/dpp/discord.h" declline="176" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a3e939d08d5474d50096fc9e889d9934b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CoreExport dpp::utility::has_voice</definition>
        <argsstring>()</argsstring>
        <name>has_voice</name>
        <briefdescription>
<para>Returns true if D++ was built with voice support. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if voice support is compiled in (libsodium/libopus) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/utility.cpp" line="55" column="6" bodyfile="src/dpp/utility.cpp" bodystart="55" bodyend="61" declfile="include/dpp/discord.h" declline="183" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a92e96c2cb9bc5dcd7343f23f70ccfd94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CoreExport dpp::utility::current_date_time</definition>
        <argsstring>()</argsstring>
        <name>current_date_time</name>
        <briefdescription>
<para>Returns urrent date and time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string Current date and time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/utility.cpp" line="63" column="13" bodyfile="src/dpp/utility.cpp" bodystart="63" bodyend="75" declfile="include/dpp/discord.h" declline="103" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1abd999684969fdf39b77e7f9fd09bf57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CoreExport dpp::utility::loglevel</definition>
        <argsstring>(dpp::loglevel in)</argsstring>
        <name>loglevel</name>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Convert a <ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref> enum value to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>log level to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string string form of log level </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/utility.cpp" line="77" column="13" bodyfile="src/dpp/utility.cpp" bodystart="77" bodyend="87" declfile="include/dpp/discord.h" declline="110" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1aa202188acb66811e6ea0f56571614c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoreExport dpp::utility::debug_dump</definition>
        <argsstring>(uint8_t *data, size_t length)</argsstring>
        <name>debug_dump</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Output hex values of a section of memory for debugging. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The start of the data to display </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of data to display </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/utility.cpp" line="145" column="6" bodyfile="src/dpp/utility.cpp" bodystart="145" bodyend="162" declfile="include/dpp/discord.h" declline="244" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a0175a6451f8d41c9e17833fae9be3c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CoreExport dpp::utility::bytes</definition>
        <argsstring>(uint64_t c)</argsstring>
        <name>bytes</name>
        <param>
          <type>uint64_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Convert a byte count to display value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string display value suffixed with M, G, T where necessary </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/utility.cpp" line="164" column="13" bodyfile="src/dpp/utility.cpp" bodystart="164" bodyend="176" declfile="include/dpp/discord.h" declline="191" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1abeab04272170b56d6075e386db1c7785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoreExport dpp::utility::exec</definition>
        <argsstring>(const std::string &amp;cmd, std::vector&lt; std::string &gt; parameters={}, cmd_result_t callback={})</argsstring>
        <name>exec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>parameters</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1_1utility_1a36d13f96f86debc010768d4c812e3fa6" kindref="member">cmd_result_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Run a commandline program asyncronously. The command line program is spawned in a separate std::thread, and when complete, its output from stdout is passed to the callback function in its string prameter. For eample. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal"><ref refid="namespacedpp_1_1utility_1abeab04272170b56d6075e386db1c7785" kindref="member">dpp::utility::exec</ref>(</highlight><highlight class="stringliteral">&quot;ls&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>output)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>of<sp/>&apos;ls&apos;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>output<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Command line parameters. Each will be escaped using std::quoted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback to call on completion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/utility.cpp" line="178" column="6" bodyfile="src/dpp/utility.cpp" bodystart="178" bodyend="203" declfile="include/dpp/discord.h" declline="96" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a274ad7457496c9c28634c2e11fa08edf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t CoreExport dpp::utility::utf8len</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>utf8len</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns the length of a UTF-8 string in codepoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>string to count length of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t length of string (0 for invalid utf8) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/utility.cpp" line="205" column="8" bodyfile="src/dpp/utility.cpp" bodystart="205" bodyend="241" declfile="include/dpp/discord.h" declline="252" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ad2be660538b63fad0566076c96c88dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CoreExport dpp::utility::utf8substr</definition>
        <argsstring>(const std::string &amp;str, std::string::size_type start, std::string::size_type length)</argsstring>
        <name>utf8substr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string::size_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::string::size_type</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Return substring of a UTF-8 encoded string in codepoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>string to return substring from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>start codepoint offset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length in codepoints </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string Substring in UTF-8 or empty string if invalid UTF-8 passed in </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/utility.cpp" line="243" column="13" bodyfile="src/dpp/utility.cpp" bodystart="243" bodyend="277" declfile="include/dpp/discord.h" declline="262" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utility helper functions, generally for logging. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/dpp/utility.cpp" line="46" column="1"/>
  </compounddef>
</doxygen>
