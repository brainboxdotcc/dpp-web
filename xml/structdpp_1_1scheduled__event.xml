<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1scheduled__event" kind="struct" language="C++" prot="public">
    <compoundname>dpp::scheduled_event</compoundname>
    <includes local="no">scheduled_event.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1a5439abfd87f8cdf968968a2d7b0ebe25" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::scheduled_event::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>the id of the scheduled event </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="94" column="17" bodyfile="include/dpp/scheduled_event.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1a5872e40ff1f2bf3599d5403ec6fe6599" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::scheduled_event::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>the guild id which the scheduled event belongs to </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="95" column="10" bodyfile="include/dpp/scheduled_event.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1a5b6b7c91848c8723141950f370eec2ee" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::scheduled_event::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>the channel id in which the scheduled event will be hosted, or null if scheduled entity type is EXTERNAL (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="96" column="10" bodyfile="include/dpp/scheduled_event.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1aef4360786203c65703c19fc44ad6ed02" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::scheduled_event::creator_id</definition>
        <argsstring></argsstring>
        <name>creator_id</name>
        <briefdescription>
<para>Optional: the id of the user that created the scheduled event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="97" column="10" bodyfile="include/dpp/scheduled_event.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1a3e15cff6d8e5466e5ef90c952fc249de" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::scheduled_event::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>the name of the scheduled event </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="98" column="12" bodyfile="include/dpp/scheduled_event.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1ae88e5cc19ae2dcd72b30461e313527ff" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::scheduled_event::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>Optional: the description of the scheduled event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="99" column="12" bodyfile="include/dpp/scheduled_event.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1a641492ee3c1f21f38072799fa9775d7b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::scheduled_event::image</definition>
        <argsstring></argsstring>
        <name>image</name>
        <briefdescription>
<para>the image of the scheduled event (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="100" column="12" bodyfile="include/dpp/scheduled_event.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1a796cb34ccf0fcb1d92579be2d1132048" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::scheduled_event::scheduled_start_time</definition>
        <argsstring></argsstring>
        <name>scheduled_start_time</name>
        <briefdescription>
<para>the time the scheduled event will start </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="101" column="7" bodyfile="include/dpp/scheduled_event.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1aaf52978adc48f65eb63a3871dd1c784c" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::scheduled_event::scheduled_end_time</definition>
        <argsstring></argsstring>
        <name>scheduled_end_time</name>
        <briefdescription>
<para>the time the scheduled event will end, or null if the event does not have a scheduled time to end (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="102" column="7" bodyfile="include/dpp/scheduled_event.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1a52f6049445ba9debcbdb1ec896c0fcb1" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a6add40f37f2f043dede513edebaa67bd" kindref="member">event_privacy_level</ref></type>
        <definition>event_privacy_level dpp::scheduled_event::privacy_level</definition>
        <argsstring></argsstring>
        <name>privacy_level</name>
        <briefdescription>
<para>the privacy level of the scheduled event </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="103" column="20" bodyfile="include/dpp/scheduled_event.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1a16187b13721a0181c365f15d087295b6" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a07ffd72c4bfd503c9c5980202c354e60" kindref="member">event_status</ref></type>
        <definition>event_status dpp::scheduled_event::status</definition>
        <argsstring></argsstring>
        <name>status</name>
        <briefdescription>
<para>the status of the scheduled event </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="104" column="13" bodyfile="include/dpp/scheduled_event.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1afd4d1b9be6926956b7631eba31ea81f7" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a7d65d1ee306708cb7f7307502aaa1834" kindref="member">event_entity_type</ref></type>
        <definition>event_entity_type dpp::scheduled_event::entity_type</definition>
        <argsstring></argsstring>
        <name>entity_type</name>
        <briefdescription>
<para>the type of hosting entity associated with a scheduled event, e.g. voice channel or stage channel </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="105" column="18" bodyfile="include/dpp/scheduled_event.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1aa9a1f15d3f9ab7fa82747a0576629598" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::scheduled_event::entity_id</definition>
        <argsstring></argsstring>
        <name>entity_id</name>
        <briefdescription>
<para>any additional id of the hosting entity associated with event, e.g. stage instance id) (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="106" column="10" bodyfile="include/dpp/scheduled_event.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1aacfd8d3b0bb171ea11f6613a334d0a73" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1event__entities" kindref="compound">event_entities</ref></type>
        <definition>event_entities dpp::scheduled_event::entity_metadata</definition>
        <argsstring></argsstring>
        <name>entity_metadata</name>
        <briefdescription>
<para>the entity metadata for the scheduled event (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="107" column="15" bodyfile="include/dpp/scheduled_event.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1a00779228a1511d4d256156c68fc058a5" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref></type>
        <definition>user dpp::scheduled_event::creator</definition>
        <argsstring></argsstring>
        <name>creator</name>
        <briefdescription>
<para>Optional: the creator of the scheduled event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="108" column="5" bodyfile="include/dpp/scheduled_event.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1scheduled__event_1a58b45b0ca4be45bde0a2c58a56dfb22f" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::scheduled_event::user_count</definition>
        <argsstring></argsstring>
        <name>user_count</name>
        <briefdescription>
<para>Optional: the number of users subscribed to the scheduled event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="109" column="9" bodyfile="include/dpp/scheduled_event.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1a4b4a32d20426b9a559e4ec0b86e049d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::scheduled_event::scheduled_event</definition>
        <argsstring>()</argsstring>
        <name>scheduled_event</name>
        <briefdescription>
<para>Create a <ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="114" column="1" bodyfile="src/dpp/scheduled_event.cpp" bodystart="31" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1ab23f053c09b3f8fcce9041073de156c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::scheduled_event::~scheduled_event</definition>
        <argsstring>()=default</argsstring>
        <name>~scheduled_event</name>
        <briefdescription>
<para>Destroy the <ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1ae1608ca79998c00779c44ad6c3c0af97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
        <definition>scheduled_event &amp; dpp::scheduled_event::set_name</definition>
        <argsstring>(const std::string &amp;n)</argsstring>
        <name>set_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="121" column="17" bodyfile="src/dpp/scheduled_event.cpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1a8c74e5634eb4c33ee81d823026e61b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
        <definition>scheduled_event &amp; dpp::scheduled_event::set_description</definition>
        <argsstring>(const std::string &amp;d)</argsstring>
        <name>set_description</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="123" column="17" bodyfile="src/dpp/scheduled_event.cpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1a16de78ef83e5f17ed753e5ca33783f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
        <definition>scheduled_event &amp; dpp::scheduled_event::set_location</definition>
        <argsstring>(const std::string &amp;l)</argsstring>
        <name>set_location</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="125" column="17" bodyfile="src/dpp/scheduled_event.cpp" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1aa421c31223c1b130c0c4889e7bb99155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
        <definition>scheduled_event &amp; dpp::scheduled_event::set_channel_id</definition>
        <argsstring>(snowflake c)</argsstring>
        <name>set_channel_id</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="127" column="17" bodyfile="src/dpp/scheduled_event.cpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1a8e85a36227a167e5811f0073effcea8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
        <definition>scheduled_event &amp; dpp::scheduled_event::set_creator_id</definition>
        <argsstring>(snowflake c)</argsstring>
        <name>set_creator_id</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="129" column="17" bodyfile="src/dpp/scheduled_event.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1a7a12e9b5bc3fa270f7ef97590aec737e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
        <definition>scheduled_event &amp; dpp::scheduled_event::set_status</definition>
        <argsstring>(event_status s)</argsstring>
        <name>set_status</name>
        <param>
          <type><ref refid="namespacedpp_1a07ffd72c4bfd503c9c5980202c354e60" kindref="member">event_status</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="131" column="17" bodyfile="src/dpp/scheduled_event.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1a619918a42a53610c81a86865b5f33d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
        <definition>scheduled_event &amp; dpp::scheduled_event::set_start_time</definition>
        <argsstring>(time_t t)</argsstring>
        <name>set_start_time</name>
        <param>
          <type>time_t</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="133" column="17" bodyfile="src/dpp/scheduled_event.cpp" bodystart="78" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1aacb90a20a3a486118dbed4a3da70cfb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
        <definition>scheduled_event &amp; dpp::scheduled_event::set_end_time</definition>
        <argsstring>(time_t t)</argsstring>
        <name>set_end_time</name>
        <param>
          <type>time_t</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="135" column="17" bodyfile="src/dpp/scheduled_event.cpp" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1a99bff586aef0ff58f4d16367f948e997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
        <definition>scheduled_event &amp; dpp::scheduled_event::fill_from_json</definition>
        <argsstring>(const nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>const nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Serialise a <ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> object from json. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref>&amp; a reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="142" column="17" bodyfile="src/dpp/scheduled_event.cpp" bodystart="94" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1scheduled__event_1a60b34edcea4ce3c783d57e9766f17a94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string const</type>
        <definition>std::string const dpp::scheduled_event::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build json for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Include id field in json</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string Dumped json of this object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/scheduled_event.h" line="150" column="19" bodyfile="src/dpp/scheduled_event.cpp" bodystart="120" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A scheduled event. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="9">
        <label>dpp::event_entities</label>
        <link refid="structdpp_1_1event__entities"/>
        <childnode refid="3" relation="usage">
          <edgelabel>location</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="2" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::scheduled_event</label>
        <link refid="structdpp_1_1scheduled__event"/>
        <childnode refid="2" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>creator_id</edgelabel>
          <edgelabel>entity_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>image</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>scheduled_end_time</edgelabel>
          <edgelabel>scheduled_start_time</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>privacy_level</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>status</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>entity_type</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>entity_metadata</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>user_count</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="2" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>event_entity_type</label>
      </node>
      <node id="6">
        <label>event_privacy_level</label>
      </node>
      <node id="7">
        <label>event_status</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>time_t</label>
      </node>
      <node id="12">
        <label>uint16_t</label>
      </node>
      <node id="14">
        <label>uint32_t</label>
      </node>
      <node id="2">
        <label>uint64_t</label>
      </node>
      <node id="15">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/scheduled_event.h" line="93" column="1" bodyfile="include/dpp/scheduled_event.h" bodystart="93" bodyend="151"/>
    <listofallmembers>
      <member refid="structdpp_1_1scheduled__event_1a60b34edcea4ce3c783d57e9766f17a94" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>build_json</name></member>
      <member refid="structdpp_1_1scheduled__event_1a5b6b7c91848c8723141950f370eec2ee" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>channel_id</name></member>
      <member refid="structdpp_1_1scheduled__event_1a00779228a1511d4d256156c68fc058a5" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>creator</name></member>
      <member refid="structdpp_1_1scheduled__event_1aef4360786203c65703c19fc44ad6ed02" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>creator_id</name></member>
      <member refid="structdpp_1_1scheduled__event_1ae88e5cc19ae2dcd72b30461e313527ff" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>description</name></member>
      <member refid="structdpp_1_1scheduled__event_1aa9a1f15d3f9ab7fa82747a0576629598" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>entity_id</name></member>
      <member refid="structdpp_1_1scheduled__event_1aacfd8d3b0bb171ea11f6613a334d0a73" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>entity_metadata</name></member>
      <member refid="structdpp_1_1scheduled__event_1afd4d1b9be6926956b7631eba31ea81f7" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>entity_type</name></member>
      <member refid="structdpp_1_1scheduled__event_1a99bff586aef0ff58f4d16367f948e997" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1scheduled__event_1a5872e40ff1f2bf3599d5403ec6fe6599" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>guild_id</name></member>
      <member refid="structdpp_1_1scheduled__event_1a5439abfd87f8cdf968968a2d7b0ebe25" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>id</name></member>
      <member refid="structdpp_1_1scheduled__event_1a641492ee3c1f21f38072799fa9775d7b" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>image</name></member>
      <member refid="structdpp_1_1scheduled__event_1a3e15cff6d8e5466e5ef90c952fc249de" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>name</name></member>
      <member refid="structdpp_1_1scheduled__event_1a52f6049445ba9debcbdb1ec896c0fcb1" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>privacy_level</name></member>
      <member refid="structdpp_1_1scheduled__event_1aaf52978adc48f65eb63a3871dd1c784c" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>scheduled_end_time</name></member>
      <member refid="structdpp_1_1scheduled__event_1a4b4a32d20426b9a559e4ec0b86e049d1" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>scheduled_event</name></member>
      <member refid="structdpp_1_1scheduled__event_1a796cb34ccf0fcb1d92579be2d1132048" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>scheduled_start_time</name></member>
      <member refid="structdpp_1_1scheduled__event_1aa421c31223c1b130c0c4889e7bb99155" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>set_channel_id</name></member>
      <member refid="structdpp_1_1scheduled__event_1a8e85a36227a167e5811f0073effcea8e" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>set_creator_id</name></member>
      <member refid="structdpp_1_1scheduled__event_1a8c74e5634eb4c33ee81d823026e61b44" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>set_description</name></member>
      <member refid="structdpp_1_1scheduled__event_1aacb90a20a3a486118dbed4a3da70cfb1" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>set_end_time</name></member>
      <member refid="structdpp_1_1scheduled__event_1a16de78ef83e5f17ed753e5ca33783f48" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>set_location</name></member>
      <member refid="structdpp_1_1scheduled__event_1ae1608ca79998c00779c44ad6c3c0af97" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>set_name</name></member>
      <member refid="structdpp_1_1scheduled__event_1a619918a42a53610c81a86865b5f33d56" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>set_start_time</name></member>
      <member refid="structdpp_1_1scheduled__event_1a7a12e9b5bc3fa270f7ef97590aec737e" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>set_status</name></member>
      <member refid="structdpp_1_1scheduled__event_1a16187b13721a0181c365f15d087295b6" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>status</name></member>
      <member refid="structdpp_1_1scheduled__event_1a58b45b0ca4be45bde0a2c58a56dfb22f" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>user_count</name></member>
      <member refid="structdpp_1_1scheduled__event_1ab23f053c09b3f8fcce9041073de156c2" prot="public" virt="non-virtual"><scope>dpp::scheduled_event</scope><name>~scheduled_event</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
