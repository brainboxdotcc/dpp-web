<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1discord__voice__client" kind="class" language="C++" prot="public">
    <compoundname>dpp::discord_voice_client</compoundname>
    <basecompoundref refid="classdpp_1_1websocket__client" prot="public" virt="non-virtual">dpp::websocket_client</basecompoundref>
    <includes local="no">discordvoiceclient.h</includes>
    <innerclass refid="structdpp_1_1discord__voice__client_1_1courier__shared__state__t" prot="private">dpp::discord_voice_client::courier_shared_state_t</innerclass>
    <innerclass refid="structdpp_1_1discord__voice__client_1_1voice__payload" prot="private">dpp::discord_voice_client::voice_payload</innerclass>
    <innerclass refid="structdpp_1_1discord__voice__client_1_1voice__payload__parking__lot" prot="private">dpp::discord_voice_client::voice_payload_parking_lot</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34" prot="public" static="no" strong="no">
        <type></type>
        <name>send_audio_type_t</name>
        <enumvalue id="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34ae2b3cfe5518ced394ad9db0bbfa18483" prot="public">
          <name>satype_recorded_audio</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34a4506440a2c61f352bba696bf9e806219" prot="public">
          <name>satype_live_audio</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34a1d950a0e94c2adf54d55d9ddf1332b4a" prot="public">
          <name>satype_overlap_audio</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The audio type to be sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>On Windows, the default type is overlap audio. On all other platforms, it is recorded audio.</para>
</simplesect>
If the audio is recorded, the sending of audio packets is throttled. Otherwise, if the audio is live, the sending is not throttled.</para>
<para>Discord voice engine is expecting audio data as if they were from some audio device, e.g. microphone, where the data become available as they get captured from the audio device.</para>
<para>In case of recorded audio, unlike from a device, the audio data are usually instantly available in large chunks. Throttling is needed to simulate audio data coming from an audio device. In case of live audio, the throttling is by nature, so no extra throttling is needed.</para>
<para>Using live audio mode for recorded audio can cause Discord to skip audio data because Discord does not expect to receive, say, 3 minutes&apos; worth of audio data in 1 second.</para>
<para>There are some inaccuracies in the throttling method used by the recorded audio mode on some systems (mainly Windows) which causes gaps and stutters in the resulting audio stream. The overlap audio mode provides a different implementation that fixes the issue. This method is slightly more CPU intensive, and should only be used if you encounter issues with recorded audio on your system.</para>
<para>Use <ref refid="classdpp_1_1discord__voice__client_1a6404396de8a2641fcb3890658ce0e054" kindref="member">discord_voice_client::set_send_audio_type</ref> to change this value as it ensures thread safety. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="799" column="1" bodyfile="include/dpp/discordvoiceclient.h" bodystart="800" bodyend="804"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classdpp_1_1discord__voice__client_1a35a16d67874752977e6a4ff2bd7325e3" prot="private" static="no">
        <type>uint16_t</type>
        <definition>using dpp::discord_voice_client::rtp_seq_t =  uint16_t</definition>
        <argsstring></argsstring>
        <name>rtp_seq_t</name>
        <briefdescription>
<para>Data type of RTP packet sequence number field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="313" column="1" bodyfile="include/dpp/discordvoiceclient.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classdpp_1_1discord__voice__client_1a438b95ded97da933b2abcd13892a007d" prot="private" static="no">
        <type>uint32_t</type>
        <definition>using dpp::discord_voice_client::rtp_timestamp_t =  uint32_t</definition>
        <argsstring></argsstring>
        <name>rtp_timestamp_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="314" column="1" bodyfile="include/dpp/discordvoiceclient.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a13e2ca2b646c348597e239d3ab72f67b" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t dpp::discord_voice_client::silence_packet[3]</definition>
        <argsstring>[3]</argsstring>
        <name>silence_packet</name>
        <initializer>= { 0xf8, 0xff, 0xfe }</initializer>
        <briefdescription>
<para>A frame of silence packet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="246" column="26" bodyfile="include/dpp/discordvoiceclient.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1afe4e67fad90702358e32370a0aa4b0aa" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex dpp::discord_voice_client::stream_mutex</definition>
        <argsstring></argsstring>
        <name>stream_mutex</name>
        <briefdescription>
<para>Mutex for outbound packet stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="251" column="12" bodyfile="include/dpp/discordvoiceclient.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a959c6452e0ea0cea3855c48100a4dcf3" prot="private" static="no" mutable="no">
        <type>std::shared_mutex</type>
        <definition>std::shared_mutex dpp::discord_voice_client::queue_mutex</definition>
        <argsstring></argsstring>
        <name>queue_mutex</name>
        <briefdescription>
<para>Mutex for message queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="256" column="19" bodyfile="include/dpp/discordvoiceclient.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a0dfd6ef262902a36dd897baf96e63847" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::discord_voice_client::external_ip</definition>
        <argsstring></argsstring>
        <name>external_ip</name>
        <briefdescription>
<para>Our public IP address. </para>
        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="classdpp_1_1discord__voice__client_1ae8e844ebb991eeb2d63771f6c5ea4938" kindref="member">discord_voice_client::discover_ip()</ref> to access this value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="263" column="13" bodyfile="include/dpp/discordvoiceclient.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1aa88ea27bc7f59500eb44486a782c5f49" prot="private" static="no" mutable="no">
        <type>std::deque&lt; std::string &gt;</type>
        <definition>std::deque&lt;std::string&gt; dpp::discord_voice_client::message_queue</definition>
        <argsstring></argsstring>
        <name>message_queue</name>
        <briefdescription>
<para>Queue of outbound messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="268" column="12" bodyfile="include/dpp/discordvoiceclient.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a5df040856f3fd775e81d99224c0a2218" prot="private" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::discord_voice_client::connect_time</definition>
        <argsstring></argsstring>
        <name>connect_time</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Last connect time of voice session. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="273" column="8" bodyfile="include/dpp/discordvoiceclient.h" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ac496a2c65b1fad84efe2e0b05f247e61" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classdpp_1_1audio__mixer" kindref="compound">audio_mixer</ref> &gt;</type>
        <definition>std::unique_ptr&lt;audio_mixer&gt; dpp::discord_voice_client::mixer</definition>
        <argsstring></argsstring>
        <name>mixer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="278" column="17" bodyfile="include/dpp/discordvoiceclient.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a6bf70617fbf6c0409e964e8465a2f484" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::discord_voice_client::ip</definition>
        <argsstring></argsstring>
        <name>ip</name>
        <briefdescription>
<para>IP of UDP/RTP endpoint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="283" column="13" bodyfile="include/dpp/discordvoiceclient.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a0224045bd2740a12de343c9f4125ab4b" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::discord_voice_client::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Port number of UDP/RTP endpoint. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="288" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a6d51bd69dc867e99e062aef622e9083a" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::discord_voice_client::ssrc</definition>
        <argsstring></argsstring>
        <name>ssrc</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>SSRC value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="293" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a1ff3c6c8fe3650e5be8ddd268dcea6f6" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::discord_voice_client::modes</definition>
        <argsstring></argsstring>
        <name>modes</name>
        <briefdescription>
<para>List of supported audio encoding modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="298" column="13" bodyfile="include/dpp/discordvoiceclient.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1aa7026b375459775b76d5cec4206a9bde" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::discord_voice_client::timescale</definition>
        <argsstring></argsstring>
        <name>timescale</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Timescale in nanoseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="303" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a6439e7757480772486fe0d9397f580a2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1voice__out__packet" kindref="compound">voice_out_packet</ref> &gt;</type>
        <definition>std::vector&lt;voice_out_packet&gt; dpp::discord_voice_client::outbuf</definition>
        <argsstring></argsstring>
        <name>outbuf</name>
        <briefdescription>
<para>Output buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="308" column="13" bodyfile="include/dpp/discordvoiceclient.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a29a53aaa7f907d61d8bf9cee05ce2160" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread dpp::discord_voice_client::voice_courier</definition>
        <argsstring></argsstring>
        <name>voice_courier</name>
        <briefdescription>
<para>Thread used to deliver incoming voice data to handlers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="391" column="13" bodyfile="include/dpp/discordvoiceclient.h" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a25c7eb5700b095d16791b905d7dfa173" prot="private" static="no" mutable="no">
        <type>struct dpp::discord_voice_client::courier_shared_state_t</type>
        <definition>struct dpp::discord_voice_client::courier_shared_state_t dpp::discord_voice_client::voice_courier_shared_state</definition>
        <argsstring></argsstring>
        <name>voice_courier_shared_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="420" column="28"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a99fb90437d53de82d76cff97c4faad54" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::paused</definition>
        <argsstring></argsstring>
        <name>paused</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>If true, audio packet sending is paused. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="430" column="6" bodyfile="include/dpp/discordvoiceclient.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a6009c0a046d090b47dcb3a2d97cc96ad" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::sent_stop_frames</definition>
        <argsstring></argsstring>
        <name>sent_stop_frames</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Whether has sent 5 frame of silence before stopping on pause. </para>
        </briefdescription>
        <detaileddescription>
<para>This is to avoid unintended Opus interpolation with subsequent transmissions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="437" column="6" bodyfile="include/dpp/discordvoiceclient.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a5315fb8492343dc48142f77cc2d28100" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t dpp::discord_voice_client::times_looped</definition>
        <argsstring></argsstring>
        <name>times_looped</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Number of times we have tried to reconnect in the last few seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="442" column="8" bodyfile="include/dpp/discordvoiceclient.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a935814dbd158a739e2b04f3d506af930" prot="private" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::discord_voice_client::last_loop_time</definition>
        <argsstring></argsstring>
        <name>last_loop_time</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Last time we reconnected. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="447" column="8" bodyfile="include/dpp/discordvoiceclient.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a98dc4764408e7bbf5a2eafff24391f9a" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* dpp::discord_voice_client::encoder</definition>
        <argsstring></argsstring>
        <name>encoder</name>
        <briefdescription>
<para>libopus encoder </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="471" column="6" bodyfile="include/dpp/discordvoiceclient.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a7a494f997253706683168470ab695802" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* dpp::discord_voice_client::repacketizer</definition>
        <argsstring></argsstring>
        <name>repacketizer</name>
        <briefdescription>
<para>libopus repacketizer (merges frames into one packet) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="477" column="6" bodyfile="include/dpp/discordvoiceclient.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a8175929e6857660d26b39f5b9393e83d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; int &gt;</type>
        <definition>std::unique_ptr&lt;int&gt; dpp::discord_voice_client::mls_state</definition>
        <argsstring></argsstring>
        <name>mls_state</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This holds the state information for DAVE E2EE. it is only allocated if E2EE is active on the voice channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="483" column="17" bodyfile="include/dpp/discordvoiceclient.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1aa425931577d917c18113f15463eaf458" prot="private" static="no" mutable="no">
        <type>std::set&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> &gt;</type>
        <definition>std::set&lt;dpp::snowflake&gt; dpp::discord_voice_client::dave_mls_user_list</definition>
        <argsstring></argsstring>
        <name>dave_mls_user_list</name>
        <briefdescription>
<para>The list of users that have E2EE potentially enabled for DAVE protocol. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="490" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a47a1915dab8d243f5bc1c52610be06f2" prot="private" static="no" mutable="no">
        <type>std::set&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> &gt;</type>
        <definition>std::set&lt;dpp::snowflake&gt; dpp::discord_voice_client::dave_mls_pending_remove_list</definition>
        <argsstring></argsstring>
        <name>dave_mls_pending_remove_list</name>
        <briefdescription>
<para>The list of users that have left the voice channel but not yet removed from MLS group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="496" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ab35d726d6130295f1948cb5fbeace3b3" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
        <definition>dpp::socket dpp::discord_voice_client::fd</definition>
        <argsstring></argsstring>
        <name>fd</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>File descriptor for UDP connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="501" column="13" bodyfile="include/dpp/discordvoiceclient.h" bodystart="501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a917ab0a295efb4324fe706c2cb9d6853" prot="private" static="no" mutable="no">
        <type>std::array&lt; uint8_t, <ref refid="namespacedpp_1a8dacf5d2b88b00c076bed556cb622a40" kindref="member">secret_key_size</ref> &gt;</type>
        <definition>std::array&lt;uint8_t, secret_key_size&gt; dpp::discord_voice_client::secret_key</definition>
        <argsstring></argsstring>
        <name>secret_key</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Secret key for encrypting voice. If it has been sent, this contains a sequence of exactly 32 bytes (secret_key_size) and has_secret_key is set to true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="508" column="12" bodyfile="include/dpp/discordvoiceclient.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ae0f777580b2e2db9db05525db8b67d94" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::has_secret_key</definition>
        <argsstring></argsstring>
        <name>has_secret_key</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the voice client has a secret key. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="513" column="6" bodyfile="include/dpp/discordvoiceclient.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1aecd8c23811fac92dda3980af6dafacf4" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::discord_voice_client::sequence</definition>
        <argsstring></argsstring>
        <name>sequence</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Sequence number of outbound audio. This is incremented once per frame sent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="519" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a33a511bbc164e265641cbf1b8d1ad18a" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t dpp::discord_voice_client::receive_sequence</definition>
        <argsstring></argsstring>
        <name>receive_sequence</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Last received sequence from gateway. </para>
        </briefdescription>
        <detaileddescription>
<para>Needed for heartbeat and resume payload. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="526" column="9" bodyfile="include/dpp/discordvoiceclient.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1accaef35c6259256403921302747be7b7" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_voice_client::timestamp</definition>
        <argsstring></argsstring>
        <name>timestamp</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Timestamp value used in outbound audio. Each packet has the timestamp value which is incremented to match how many frames are sent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="533" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ab2778a8b5a45b7067ff9f8cbdf629d43" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_voice_client::packet_nonce</definition>
        <argsstring></argsstring>
        <name>packet_nonce</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Each packet should have a nonce, a 32-bit incremental integer value appended to payload. </para>
        </briefdescription>
        <detaileddescription>
<para>We should keep track of this value and increment it for each packet sent.</para>
<para>Current initial value is hardcoded to 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="544" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a6a9412b209fb4b40a0842fad31997b2d" prot="private" static="no" mutable="no">
        <type>std::chrono::high_resolution_clock::time_point</type>
        <definition>std::chrono::high_resolution_clock::time_point dpp::discord_voice_client::last_timestamp</definition>
        <argsstring></argsstring>
        <name>last_timestamp</name>
        <briefdescription>
<para>Last sent packet high-resolution timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="549" column="48" bodyfile="include/dpp/discordvoiceclient.h" bodystart="549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ad5b391badaa5a55ed2f0ebff043e93c2" prot="private" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds dpp::discord_voice_client::last_sleep_remainder</definition>
        <argsstring></argsstring>
        <name>last_sleep_remainder</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Fraction of the sleep that was not executed after the last audio packet was sent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="554" column="26" bodyfile="include/dpp/discordvoiceclient.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ab161d873ad8d72027d799f72d7adcd8a" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; uint32_t, <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::unordered_map&lt;uint32_t, snowflake&gt; dpp::discord_voice_client::ssrc_map</definition>
        <argsstring></argsstring>
        <name>ssrc_map</name>
        <briefdescription>
<para>Maps receiving ssrc to user id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="559" column="20" bodyfile="include/dpp/discordvoiceclient.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ad7f590f55089547625a67aa6ef15a2a3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::sending</definition>
        <argsstring></argsstring>
        <name>sending</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>This is set to true if we have started sending audio. When this moves from false to true, this causes the client to send the &apos;talking&apos; notification to the websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="566" column="6" bodyfile="include/dpp/discordvoiceclient.h" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a2d072b4db0ec647bc5d9c9be99926781" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_voice_client::tracks</definition>
        <argsstring></argsstring>
        <name>tracks</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Number of track markers in the buffer. For example if there are two track markers in the buffer there are 3 tracks. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Special case:</bold></para>
<para>If the buffer is empty, there are zero tracks in the buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="577" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a4b8067cc147c6acc59c88c36c3d2120b" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::discord_voice_client::track_meta</definition>
        <argsstring></argsstring>
        <name>track_meta</name>
        <briefdescription>
<para>Meta data associated with each track. Arbitrary string that the user can set via dpp::discord_voice_client::add_marker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="584" column="13" bodyfile="include/dpp/discordvoiceclient.h" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ad3f32f985611d9b7fb753b7ca0446f21" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::discord_voice_client::encode_buffer[65536]</definition>
        <argsstring>[65536]</argsstring>
        <name>encode_buffer</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Encoding buffer for opus repacketizer and encode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="589" column="9" bodyfile="include/dpp/discordvoiceclient.h" bodystart="589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a44ab87f96a17a48463358b24a1518c95" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1ae4d631bf36ecccb5fcf937c964a49a0a" kindref="member">dave_version_t</ref></type>
        <definition>dave_version_t dpp::discord_voice_client::dave_version</definition>
        <argsstring></argsstring>
        <name>dave_version</name>
        <briefdescription>
<para>DAVE - Discord Audio Visual Encryption Used for E2EE encryption. dave_protocol_none is the default right now. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>DAVE E2EE is an EXPERIMENTAL feature! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="597" column="16" bodyfile="include/dpp/discordvoiceclient.h" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a898d7b9e2144f2ee595b0c96a47b77da" prot="private" static="no" mutable="no">
        <type><ref refid="classdpp_1_1address__t" kindref="compound">address_t</ref></type>
        <definition>address_t dpp::discord_voice_client::destination</definition>
        <argsstring></argsstring>
        <name>destination</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Destination address for where packets go on the UDP socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="603" column="11" bodyfile="include/dpp/discordvoiceclient.h" bodystart="603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ad7c45bde49a5f411a2516564ae5b87b2" prot="private" static="no" mutable="no">
        <type><ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref></type>
        <definition>dpp::socket_events dpp::discord_voice_client::udp_events</definition>
        <argsstring></argsstring>
        <name>udp_events</name>
        <briefdescription>
<para>Events for UDP Socket IO. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="703" column="20" bodyfile="include/dpp/discordvoiceclient.h" bodystart="703" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a23cac9565c94195b8050df206d29d6b2" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> *</type>
        <definition>class dpp::cluster* dpp::discord_voice_client::creator</definition>
        <argsstring></argsstring>
        <name>creator</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Owning cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="710" column="20" bodyfile="include/dpp/discordvoiceclient.h" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a495139ab5289f6f7860177cf121ba2cb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::terminating</definition>
        <argsstring></argsstring>
        <name>terminating</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>True when the thread is shutting down. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="715" column="6" bodyfile="include/dpp/discordvoiceclient.h" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a69388fa61302df65a43777bf472e8a92" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float dpp::discord_voice_client::end_gain</definition>
        <argsstring></argsstring>
        <name>end_gain</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The gain value for the end of the current voice iteration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="720" column="7" bodyfile="include/dpp/discordvoiceclient.h" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ab39e60b88eecc2a4a5173d1786f418bd" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float dpp::discord_voice_client::current_gain</definition>
        <argsstring></argsstring>
        <name>current_gain</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The gain value for the current voice iteration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="725" column="7" bodyfile="include/dpp/discordvoiceclient.h" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a5877d601964f10d987a288aae85574b3" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float dpp::discord_voice_client::increment</definition>
        <argsstring></argsstring>
        <name>increment</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>The amount to increment each successive sample for, for the current voice iteration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="730" column="7" bodyfile="include/dpp/discordvoiceclient.h" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a20ea071ce2429f0eaad5fff783fc7281" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_voice_client::heartbeat_interval</definition>
        <argsstring></argsstring>
        <name>heartbeat_interval</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Heartbeat interval for sending heartbeat keepalive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="735" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a4517befd07e1179155ffafa8ba69b73f" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::discord_voice_client::last_heartbeat</definition>
        <argsstring></argsstring>
        <name>last_heartbeat</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Last voice channel websocket heartbeat. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="740" column="8" bodyfile="include/dpp/discordvoiceclient.h" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1afe7ab5918062b643245db8247f4cb70c" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::discord_voice_client::token</definition>
        <argsstring></argsstring>
        <name>token</name>
        <briefdescription>
<para>Discord voice session token. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="745" column="13" bodyfile="include/dpp/discordvoiceclient.h" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a8f011c857ff968e44a8e5ddf818a9160" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::discord_voice_client::sessionid</definition>
        <argsstring></argsstring>
        <name>sessionid</name>
        <briefdescription>
<para>Discord voice session id. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="750" column="13" bodyfile="include/dpp/discordvoiceclient.h" bodystart="750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ac1d99be8bb3a89a43e5f5b368fe63f7d" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::discord_voice_client::server_id</definition>
        <argsstring></argsstring>
        <name>server_id</name>
        <briefdescription>
<para>Server ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="755" column="11" bodyfile="include/dpp/discordvoiceclient.h" bodystart="755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1ae177808f7232ce1b5bbea5a0f8ce2d82" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1moving__averager" kindref="compound">moving_averager</ref></type>
        <definition>moving_averager dpp::discord_voice_client::moving_average</definition>
        <argsstring></argsstring>
        <name>moving_average</name>
        <briefdescription>
<para>Moving averager. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="760" column="17" bodyfile="include/dpp/discordvoiceclient.h" bodystart="760" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a4b8de633c5944659288af217e309b2f0" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::discord_voice_client::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>Channel ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="765" column="11" bodyfile="include/dpp/discordvoiceclient.h" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1aeb92c5a0a80eb5f0e4d4e987ec11432d" prot="public" static="no" mutable="no">
        <type>enum <ref refid="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34" kindref="member">dpp::discord_voice_client::send_audio_type_t</ref></type>
        <definition>enum dpp::discord_voice_client::send_audio_type_t dpp::discord_voice_client::send_audio_type</definition>
        <argsstring></argsstring>
        <name>send_audio_type</name>
        <initializer>=



	<ref refid="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34ae2b3cfe5518ced394ad9db0bbfa18483" kindref="member">satype_recorded_audio</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="808" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1discord__voice__client_1a931db7e49b13e5c8abbebb204fa62ed2" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::discord_voice_client::iteration_interval</definition>
        <argsstring></argsstring>
        <name>iteration_interval</name>
        <initializer>{500}</initializer>
        <briefdescription>
<para>The time (in milliseconds) between each interval when parsing audio. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>You should only change this if you know what you&apos;re doing. It is set to 500ms by default. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="871" column="10" bodyfile="include/dpp/discordvoiceclient.h" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aaba3255abd8ec8e94d1781771cfc9acb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::keepalive</definition>
        <argsstring></argsstring>
        <name>keepalive</name>
        <briefdescription>
<para>True if we are keeping the connection alive after it has finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="280" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a3ae20842849f8c2f0174902dc70d7e97" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::ssl_connection::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
<para>Owning cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="285" column="15" bodyfile="include/dpp/sslconnection.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aa8cfa2e6c511022b67dbd97cc57f0731" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::private_key_file</definition>
        <argsstring></argsstring>
        <name>private_key_file</name>
        <briefdescription>
<para>Private key PEM file path for inbound SSL connections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="290" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad7feee672079e07699e25f7250021c66" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::public_key_file</definition>
        <argsstring></argsstring>
        <name>public_key_file</name>
        <briefdescription>
<para>Public key PEM file path for inbound SSL connections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="295" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a95f3285fac343283212749ba109ae28a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::cleanup</definition>
        <argsstring>()</argsstring>
        <name>cleanup</name>
        <briefdescription>
<para>Clean up resources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="241" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a3af067458ec0133cb293e6d1e748295c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dpp::discord_voice_client::udp_send</definition>
        <argsstring>(const char *data, size_t length)</argsstring>
        <name>udp_send</name>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Send data to UDP socket immediately. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of data to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int bytes sent. Will return -1 if we cannot send </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="613" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a90fbdd9deb1142bea3aedad0369c62e8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dpp::discord_voice_client::udp_recv</definition>
        <argsstring>(char *data, size_t max_length)</argsstring>
        <name>udp_recv</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <briefdescription>
<para>Receive data from UDP socket immediately. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data to receive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_length</parametername>
</parameternamelist>
<parameterdescription>
<para>size of data receiving buffer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int bytes received. -1 if there is an error (e.g. EAGAIN) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="623" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a88eb8bcc0d54ce5d600a9c2a1e690e01" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::write_ready</definition>
        <argsstring>()</argsstring>
        <name>write_ready</name>
        <briefdescription>
<para>Called by socketengine when the socket is ready for writing, at this point we pick the head item off the buffer and send it. So long as it doesn&apos;t error completely, we pop it off the head of the queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="631" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1ac285267f8471e7954b70ecba3f130a3f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::read_ready</definition>
        <argsstring>()</argsstring>
        <name>read_ready</name>
        <briefdescription>
<para>Called by socketengine when there is data to be read. At this point we insert that data into the input queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1voice__exception" kindref="compound">dpp::voice_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if voice support is not compiled into D++ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="639" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a27ebd515b66d51d5416b2472ae132715" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::send</definition>
        <argsstring>(const char *packet, size_t len, uint64_t duration, bool send_now=false)</argsstring>
        <name>send</name>
        <param>
          <type>const char *</type>
          <declname>packet</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>duration</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>send_now</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Send data to the UDP socket, using the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packet</parametername>
</parameternamelist>
<parameterdescription>
<para>packet data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>duration of opus packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>send_now</parametername>
</parameternamelist>
<parameterdescription>
<para>send this packet right away without buffering. Do NOT set send_now to true outside write_ready. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="650" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a406383b8c18a931d4c496e0d7a81cf43" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::queue_message</definition>
        <argsstring>(const std::string &amp;j, bool to_front=false)</argsstring>
        <name>queue_message</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>to_front</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Queue a message to be sent via the websocket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON data of the message to be sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_front</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to true, will place the message at the front of the queue not the back (this is for urgent messages such as heartbeat, presence, so they can take precedence over chunk requests etc) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="660" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a87b60251b68583d9307a4f72d3ce3249" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::clear_queue</definition>
        <argsstring>()</argsstring>
        <name>clear_queue</name>
        <briefdescription>
<para>Clear the outbound message queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="666" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1ac0be468508d5b5d2afedee7b242fd23a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::discord_voice_client::get_queue_size</definition>
        <argsstring>()</argsstring>
        <name>get_queue_size</name>
        <briefdescription>
<para>Get the size of the outbound message queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the queue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="673" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1aca97df078a5782b1ebd96287f4b2a0c8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::discord_voice_client::encode</definition>
        <argsstring>(uint8_t *input, size_t inDataSize, uint8_t *output, size_t &amp;outDataSize)</argsstring>
        <name>encode</name>
        <param>
          <type>uint8_t *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>inDataSize</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>outDataSize</declname>
        </param>
        <briefdescription>
<para>Encode a byte buffer using opus codec. Multiple opus frames (2880 bytes each) will be encoded into one packet for sending. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data as raw bytes of PCM data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inDataSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Output data as an opus encoded packet </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outDataSize</parametername>
</parameternamelist>
<parameterdescription>
<para>Output data length, should be at least equal to the input size. Will be adjusted on return to the actual compressed data size. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t The compressed data size that was encoded. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1voice__exception" kindref="compound">dpp::voice_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If data length to encode is invalid or voice support not compiled into D++ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="687" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1aba1326f21394c3aa1e566510b1cbf51f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::update_ratchets</definition>
        <argsstring>(bool force=false)</argsstring>
        <name>update_ratchets</name>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates DAVE MLS ratchets for users in the VC <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>True to force updating of ratchets regardless of state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="693" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a37aafdced7aeae45699e1ce7f1c34e83" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::setup</definition>
        <argsstring>()</argsstring>
        <name>setup</name>
        <briefdescription>
<para>Called in constructor and on reconnection of websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="698" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1af5e73016b4f404a690a224827561b01f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dpp::discord_voice_client::voice_courier_loop</definition>
        <argsstring>(discord_voice_client &amp;, courier_shared_state_t &amp;)</argsstring>
        <name>voice_courier_loop</name>
        <param>
          <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        </param>
        <param>
          <type>courier_shared_state_t &amp;</type>
        </param>
        <briefdescription>
<para>The run loop of the voice courier thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="425" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a1790b206609d45aa1e124c701a4407f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::set_user_gain</definition>
        <argsstring>(snowflake user_id, float factor)</argsstring>
        <name>set_user_gain</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>float</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
<para>Sets the gain for the specified user. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to the User Volume slider, controls the listening volume per user. Uses native Opus gain control, so clients don&apos;t have to perform extra audio processing.</para>
<para>The gain setting will affect the both individual and combined voice audio.</para>
<para>The gain value can also be set even before the user connects to the voice channel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the user where the gain is to be controlled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Nonnegative factor to scale the amplitude by, where 1.f reverts to the default volume. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="827" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a6a4111094ce256554beac3523b660822" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::discord_voice_client::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const override</argsstring>
        <name>log</name>
        <reimplements refid="classdpp_1_1ssl__connection_1af7e21fef92907780581d04c8f98bf9b6">log</reimplements>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message to whatever log the user is using. The logged message is passed up the chain to the on_log event in user code which can then do whatever it wants to do with it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level from <ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The log message to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="836" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a57a629da5df4c97d727705a03d849fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::discord_voice_client::one_second_timer</definition>
        <argsstring>() override</argsstring>
        <name>one_second_timer</name>
        <reimplements refid="classdpp_1_1websocket__client_1ae56e2b577298a170ba9af5bff0d9a732">one_second_timer</reimplements>
        <briefdescription>
<para>Fires every second from the underlying socket I/O loop, used for sending heartbeats. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the socket needs to disconnect </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="842" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1aee5fcfe947f581ecce2c9096871f88a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::is_ready</definition>
        <argsstring>()</argsstring>
        <name>is_ready</name>
        <briefdescription>
<para>voice client is ready to stream audio. The voice client is considered ready if it has a secret key. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ready to stream audio </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="850" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a1062401920a3462500f2c642138095c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::is_connected</definition>
        <argsstring>()</argsstring>
        <name>is_connected</name>
        <briefdescription>
<para>Returns true if the voice client is connected to the websocket. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if connected </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="857" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a017e7c98b75000d0bdc76cc16b31c093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref></type>
        <definition>dpp::utility::uptime dpp::discord_voice_client::get_uptime</definition>
        <argsstring>()</argsstring>
        <name>get_uptime</name>
        <briefdescription>
<para>Returns the connection time of the voice client. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref> Detail of how long the voice client has been connected for </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="864" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a631da143d224aed3051ccc649fd248c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::discord_voice_client::discord_voice_client</definition>
        <argsstring>(dpp::cluster *_cluster, snowflake _channel_id, snowflake _server_id, const std::string &amp;_token, const std::string &amp;_session_id, const std::string &amp;_host, bool enable_dave=false)</argsstring>
        <name>discord_voice_client</name>
        <param>
          <type><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> *</type>
          <declname>_cluster</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>_channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>_server_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_token</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_session_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_host</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_dave</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor takes shard id, max shards and token. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>The cluster which owns this voice connection, for related logging, REST requests etc </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel id to identify the voice connection as </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_server_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The server id (guild id) to identify the voice connection as </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_token</parametername>
</parameternamelist>
<parameterdescription>
<para>The voice session token to use for identifying to the websocket </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_session_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The voice session id to identify with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_host</parametername>
</parameternamelist>
<parameterdescription>
<para>The voice server hostname to connect to (hostname:port format) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable_dave</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable DAVE E2EE </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1voice__exception" kindref="compound">dpp::voice_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Opus failed to initialise, or D++ is not compiled with voice support </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>DAVE E2EE is an EXPERIMENTAL feature! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="884" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a9b06226881ba97a22d142c8fe4f5cbe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::discord_voice_client::~discord_voice_client</definition>
        <argsstring>() override</argsstring>
        <name>~discord_voice_client</name>
        <briefdescription>
<para>Destroy the discord voice client object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="889" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1abffb083b1554a05ab41fcf1c7fa49489" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::discord_voice_client::handle_frame</definition>
        <argsstring>(const std::string &amp;buffer, ws_opcode opcode) override</argsstring>
        <name>handle_frame</name>
        <reimplements refid="classdpp_1_1websocket__client_1a44ecfaa8d4bf45ef4fe85633f486e7d7">handle_frame</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
          <declname>opcode</declname>
        </param>
        <briefdescription>
<para>Handle JSON from the websocket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The entire buffer content from the websocket client </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame type, e.g. OP_TEXT, OP_BINARY </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if a frame has been handled </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If there was an error processing the frame, or connection to UDP socket failed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="898" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a100af5cd816264910d5910d838189226" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::discord_voice_client::error</definition>
        <argsstring>(uint32_t errorcode) override</argsstring>
        <name>error</name>
        <reimplements refid="classdpp_1_1websocket__client_1abd1b3d59beb6a505e81e2bf3374e2532">error</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>errorcode</declname>
        </param>
        <briefdescription>
<para>Handle a websocket error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errorcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error returned from the websocket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="904" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a418f98812e850eb963e4b3a2a4dc0c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
<para>Start and monitor websocket I/O. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="909" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a6d52a32631231f3120ba9e5ebbe61a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::send_audio_raw</definition>
        <argsstring>(uint16_t *audio_data, const size_t length)</argsstring>
        <name>send_audio_raw</name>
        <param>
          <type>uint16_t *</type>
          <declname>audio_data</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Send raw audio to the voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para>You should send an audio packet of <computeroutput>send_audio_raw_max_length</computeroutput> (11520) bytes. Note that this function can be costly as it has to opus encode the PCM audio on the fly, and also encrypt it with openssl.</para>
<para><simplesect kind="note"><para>Because this function encrypts and encodes packets before pushing them onto the output queue, if you have a complete stream ready to send and know its length it is advisable to call this method multiple times to enqueue the entire stream audio so that it is all encoded at once (unless you have set use_opus to false). <bold>Constantly calling this from <ref refid="classdpp_1_1cluster_1a4b702b26b73692e0aab0743f4ed07ef9" kindref="member">dpp::cluster::on_voice_buffer_send</ref> can, and will, eat a TON of cpu!</bold></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>audio_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw PCM audio data. Channels are interleaved, with each channel&apos;s amplitude being a 16 bit value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para><bold>The audio data needs to be 48000Hz signed 16 bit audio, otherwise, the audio will come through incorrectly!</bold></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the audio data. The length should be a multiple of 4 (2x 16 bit stereo channels) with a maximum length of <computeroutput>send_audio_raw_max_length</computeroutput>, which is a complete opus frame at highest quality.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Generally when you&apos;re streaming and you know there will be more packet to come you should always provide packet data with length of <computeroutput>send_audio_raw_max_length</computeroutput>. Silence packet will be appended if length is less than <computeroutput>send_audio_raw_max_length</computeroutput> as discord expects to receive such specific packet size. This can cause gaps in your stream resulting in distorted audio if you have more packet to send later on.</para>
<para><simplesect kind="return"><para><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref>&amp; Reference to self</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1voice__exception" kindref="compound">dpp::voice_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If data length is invalid or voice support not compiled into D++ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="948" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a2770c71637347c4c2b5d50f73b18fd62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::send_audio_opus</definition>
        <argsstring>(const uint8_t *opus_packet, const size_t length, uint64_t duration, bool send_now=false)</argsstring>
        <name>send_audio_opus</name>
        <param>
          <type>const uint8_t *</type>
          <declname>opus_packet</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>duration</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>send_now</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Send opus packets to the voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Some containers such as .ogg may contain OPUS encoded data already. In this case, we don&apos;t need to encode the frames using opus here. We can bypass the codec, only applying openssl to the stream.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opus_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>Opus packets. Discord expects opus frames to be encoded at 48000Hz</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the audio data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Generally duration is 2.5, 5, 10, 20, 40 or 60 if the timescale is 1000000 (1ms)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>send_now</parametername>
</parameternamelist>
<parameterdescription>
<para>Send this packet right away without buffering, this will skip duration calculation for the packet being sent and only safe to be set to true in write_ready.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref>&amp; Reference to self</para>
</simplesect>
<simplesect kind="note"><para>It is your responsibility to ensure that packets of data sent to send_audio are correctly repacketized for streaming, e.g. that audio frames are not too large or contain an incorrect format. Discord will still expect the same frequency and bit width of audio and the same signedness.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1voice__exception" kindref="compound">dpp::voice_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If data length is invalid or voice support not compiled into D++ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="980" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a84f153d97e620419b82a73b54ceb223e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::send_audio_opus</definition>
        <argsstring>(const uint8_t *opus_packet, const size_t length)</argsstring>
        <name>send_audio_opus</name>
        <param>
          <type>const uint8_t *</type>
          <declname>opus_packet</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Send opus packets to the voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Some containers such as .ogg may contain OPUS encoded data already. In this case, we don&apos;t need to encode the frames using opus here. We can bypass the codec, only applying opens to the stream.</para>
<para>Duration is calculated internally</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opus_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>Opus packets. Discord expects opus frames to be encoded at 48000Hz</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the audio data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref>&amp; Reference to self</para>
</simplesect>
<simplesect kind="note"><para>It is your responsibility to ensure that packets of data sent to send_audio are correctly repacketized for streaming, e.g. that audio frames are not too large or contain an incorrect format. Discord will still expect the same frequency and bit width of audio and the same signedness.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1voice__exception" kindref="compound">dpp::voice_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If data length is invalid or voice support not compiled into D++ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1007" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1ac6d1422113278ad6049486d07ca06ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::send_silence</definition>
        <argsstring>(const uint64_t duration)</argsstring>
        <name>send_silence</name>
        <param>
          <type>const uint64_t</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>Send silence to the voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>How long to send silence for. With the standard timescale this is in milliseconds. Allowed values are 2.5, 5, 10, 20, 40 or 60 milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref>&amp; Reference to self </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1voice__exception" kindref="compound">dpp::voice_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if voice support is not compiled into D++ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1018" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1abcc3a1b2934325268553f910b6a03103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::send_stop_frames</definition>
        <argsstring>(bool send_now=false)</argsstring>
        <name>send_stop_frames</name>
        <param>
          <type>bool</type>
          <declname>send_now</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Send stop frames to the voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>send_now</parametername>
</parameternamelist>
<parameterdescription>
<para>send this packet right away without buffering. Do NOT set send_now to true outside write_ready. Also make sure you&apos;re not locking stream_mutex if you don&apos;t set send_now to true.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref>&amp; Reference to self </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1voice__exception" kindref="compound">dpp::voice_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if voice support is not compiled into D++ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1031" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a6404396de8a2641fcb3890658ce0e054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::set_send_audio_type</definition>
        <argsstring>(send_audio_type_t type)</argsstring>
        <name>set_send_audio_type</name>
        <param>
          <type><ref refid="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34" kindref="member">send_audio_type_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Sets the audio type that will be sent with send_audio_* methods. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34" kindref="member">send_audio_type_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1038" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a067cdfaf8a84c2bdf09febe974eb4730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::set_timescale</definition>
        <argsstring>(uint64_t new_timescale)</argsstring>
        <name>set_timescale</name>
        <param>
          <type>uint64_t</type>
          <declname>new_timescale</declname>
        </param>
        <briefdescription>
<para>Set the timescale in nanoseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_timescale</parametername>
</parameternamelist>
<parameterdescription>
<para>Timescale to set. This defaults to 1000000, which means 1 millisecond. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref>&amp; Reference to self </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1voice__exception" kindref="compound">dpp::voice_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If data length is invalid or voice support not compiled into D++ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1048" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a45085f49408bdeae9cd05dbf59d39972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::discord_voice_client::get_timescale</definition>
        <argsstring>()</argsstring>
        <name>get_timescale</name>
        <briefdescription>
<para>Get the current timescale, this will default to 1000000 which means 1 millisecond. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t timescale in nanoseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1056" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1ae5456ed35a1a964a607e2abc8bd59691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::speak</definition>
        <argsstring>()</argsstring>
        <name>speak</name>
        <briefdescription>
<para>Mark the voice connection as &apos;speaking&apos;. This sends a JSON message to the voice websocket which tells discord that the user is speaking. The library automatically calls this for you whenever you send audio. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref>&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1066" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a9cccd4ae3b80ed56dd8cf29236f9a530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::pause_audio</definition>
        <argsstring>(bool pause)</argsstring>
        <name>pause_audio</name>
        <param>
          <type>bool</type>
          <declname>pause</declname>
        </param>
        <briefdescription>
<para>Pause sending of audio. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pause</parametername>
</parameternamelist>
<parameterdescription>
<para>True to pause, false to resume </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1074" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a0bf262c6102ffdae95f999b79462a443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::stop_audio</definition>
        <argsstring>()</argsstring>
        <name>stop_audio</name>
        <briefdescription>
<para>Immediately stop all audio. Clears the packet queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1081" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1aaf0e21e85fb4a1deccb8e925ec02e268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::set_iteration_interval</definition>
        <argsstring>(uint16_t interval)</argsstring>
        <name>set_iteration_interval</name>
        <param>
          <type>uint16_t</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
<para>Change the iteration interval time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interval</parametername>
</parameternamelist>
<parameterdescription>
<para>The time (in milliseconds) between each interval when parsing audio.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1090" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a524400b5c1ea99c01c932993f3a3b7b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t dpp::discord_voice_client::get_iteration_interval</definition>
        <argsstring>()</argsstring>
        <name>get_iteration_interval</name>
        <briefdescription>
<para>Get the iteration interval time (in milliseconds). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iteration_interval </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1097" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a1a98e05342f5c6b8de0f9324758f3fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::is_playing</definition>
        <argsstring>()</argsstring>
        <name>is_playing</name>
        <briefdescription>
<para>Returns true if we are playing audio. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if audio is playing </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1104" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a15ba91026079da2100714c12b7ade88e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float dpp::discord_voice_client::get_secs_remaining</definition>
        <argsstring>()</argsstring>
        <name>get_secs_remaining</name>
        <briefdescription>
<para>Get the number of seconds remaining of the audio output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float number of seconds remaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1112" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a4e75f5d97ca1691dde43ed8b0b8ca196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t dpp::discord_voice_client::get_tracks_remaining</definition>
        <argsstring>()</argsstring>
        <name>get_tracks_remaining</name>
        <briefdescription>
<para>Get the number of tracks remaining in the output buffer. This is calculated by the number of track markers plus one. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Number of tracks in the buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1122" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a15ec0940d0a963dbb5e58d2eb895bcc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref></type>
        <definition>dpp::utility::uptime dpp::discord_voice_client::get_remaining</definition>
        <argsstring>()</argsstring>
        <name>get_remaining</name>
        <briefdescription>
<para>Get the time remaining to send the audio output buffer in hours:minutes:seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref> length of buffer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1130" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1afe1408c1ad305aebedc7e99ba2128aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::insert_marker</definition>
        <argsstring>(const std::string &amp;metadata=&quot;&quot;)</argsstring>
        <name>insert_marker</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>metadata</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Insert a track marker into the audio output buffer. A track marker is an arbitrary flag in the buffer contents that indicates the end of some block of audio of significance to the sender. This may be a song from a streaming site, or some voice audio/speech, a sound effect, or whatever you choose. You can later skip to the next marker using the <ref refid="classdpp_1_1discord__voice__client_1a6c45a33336db010eedf8853af16b94c8" kindref="member">dpp::discord_voice_client::skip_to_next_marker</ref> function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>Arbitrary information related to this track </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1148" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a6c45a33336db010eedf8853af16b94c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> &amp;</type>
        <definition>discord_voice_client &amp; dpp::discord_voice_client::skip_to_next_marker</definition>
        <argsstring>()</argsstring>
        <name>skip_to_next_marker</name>
        <briefdescription>
<para>Skip tp the next track marker, previously inserted by using the <ref refid="classdpp_1_1discord__voice__client_1afe1408c1ad305aebedc7e99ba2128aa8" kindref="member">dpp::discord_voice_client::insert_marker</ref> function. If there are no markers in the output buffer, then this skips to the end of the buffer and is equivalent to the <ref refid="classdpp_1_1discord__voice__client_1a0bf262c6102ffdae95f999b79462a443" kindref="member">dpp::discord_voice_client::stop_audio</ref> function. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>It is possible to use this function while the output stream is paused. </para>
</simplesect>
<simplesect kind="return"><para>reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1163" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a69727c9ff92f6e86f4ee51260de3d111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt;</type>
        <definition>const std::vector&lt; std::string &gt; dpp::discord_voice_client::get_marker_metadata</definition>
        <argsstring>()</argsstring>
        <name>get_marker_metadata</name>
        <briefdescription>
<para>Get the metadata string associated with each inserted marker. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const std::vector&lt;std::string&gt;&amp; list of metadata strings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1170" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1aef426df9775031fed6c6f50554573a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::is_paused</definition>
        <argsstring>()</argsstring>
        <name>is_paused</name>
        <briefdescription>
<para>Returns true if the audio is paused. You can unpause with <ref refid="classdpp_1_1discord__voice__client_1a9cccd4ae3b80ed56dd8cf29236f9a530" kindref="member">dpp::discord_voice_client::pause_audio</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if paused </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1179" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1ae8e844ebb991eeb2d63771f6c5ea4938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::discord_voice_client::discover_ip</definition>
        <argsstring>()</argsstring>
        <name>discover_ip</name>
        <briefdescription>
<para>Discord external IP detection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string Your external IP address </para>
</simplesect>
<simplesect kind="note"><para>This is a blocking operation that waits for a single packet from Discord&apos;s voice servers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1187" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1ad6aa98f7ce2b197cbe8b338c901edc83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::is_end_to_end_encrypted</definition>
        <argsstring>() const</argsstring>
        <name>is_end_to_end_encrypted</name>
        <briefdescription>
<para>Returns true if end-to-end encryption is enabled for the active voice call (Discord Audio Visual Encryption, a.k.a. DAVE). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if end-to-end encrypted </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1196" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a2d31c2395a9ec508cbff305c9e28c1b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::discord_voice_client::get_privacy_code</definition>
        <argsstring>() const</argsstring>
        <name>get_privacy_code</name>
        <briefdescription>
<para>Returns the privacy code for the end to end encryption scheme (&quot;DAVE&quot;). if end-to-end encryption is not active, or is not yet established, this will return an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A sequence of six five-digit integers which can be matched against the Discord client, in the privacy tab for the properties of the voice call. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1208" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a92ec2cba8cee44cbd3e0fa9c2a87ed66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::get_user_privacy_code</definition>
        <argsstring>(const dpp::snowflake user, privacy_code_callback_t callback) const</argsstring>
        <name>get_user_privacy_code</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref></type>
          <declname>user</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1ae225fa7236536ef5a433821171982dbf" kindref="member">privacy_code_callback_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Returns the privacy code for a given user by id, if they are in the voice call, and enc-to-end encryption is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to fetch the privacy code for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback to call with the privacy code when the creation of the code is complete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This call spawns a thread, as getting a user&apos;s privacy code is a CPU-intensive and memory-intensive operation which internally uses scrypt. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1222" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1af7c2f1be7861b8d8d2400a456044fd9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::ready_for_transition</definition>
        <argsstring>(const std::string &amp;data)</argsstring>
        <name>ready_for_transition</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Notify gateway ready for a DAVE transition. </para>
        </briefdescription>
        <detaileddescription>
<para>Fires Voice Ready event when appropriate.</para>
<para><ulink url="https://daveprotocol.com/#commit-handling">https://daveprotocol.com/#commit-handling</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Websocket frame data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1233" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1ae7b192cad8f1c6a215999ffb2faa4f26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::recover_from_invalid_commit_welcome</definition>
        <argsstring>()</argsstring>
        <name>recover_from_invalid_commit_welcome</name>
        <briefdescription>
<para>Reset dave session, send voice_client_dave_mls_invalid_commit_welcome payload with current transition Id and our new key package to gateway. </para>
        </briefdescription>
        <detaileddescription>
<para><ulink url="https://daveprotocol.com/#recovery-from-invalid-commit-or-welcome">https://daveprotocol.com/#recovery-from-invalid-commit-or-welcome</ulink> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1241" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a9369b02d9e0f4c3e5c0c5b36fcf87550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::discord_voice_client::execute_pending_upgrade_downgrade</definition>
        <argsstring>()</argsstring>
        <name>execute_pending_upgrade_downgrade</name>
        <briefdescription>
<para>Execute pending protocol upgrade/downgrade to/from dave. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if did an upgrade/downgrade </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1247" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1afbdaf2aecb41c9aab776bc1ef05c631a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::reinit_dave_mls_group</definition>
        <argsstring>()</argsstring>
        <name>reinit_dave_mls_group</name>
        <briefdescription>
<para>Reset dave session and prepare initial session group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1252" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1ab5723044d2865b2bea5cfc9011636f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::process_mls_group_rosters</definition>
        <argsstring>(const std::map&lt; uint64_t, std::vector&lt; uint8_t &gt; &gt; &amp;rmap)</argsstring>
        <name>process_mls_group_rosters</name>
        <param>
          <type>const std::map&lt; uint64_t, std::vector&lt; uint8_t &gt; &gt; &amp;</type>
          <declname>rmap</declname>
        </param>
        <briefdescription>
<para>Process roster map from commit/welcome. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Roster map </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1258" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1discord__voice__client_1a355589d4bf9d94117f2ddeed94503c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::discord_voice_client::on_disconnect</definition>
        <argsstring>() override</argsstring>
        <name>on_disconnect</name>
        <reimplements refid="classdpp_1_1websocket__client_1afecbc8710086fb321d3253ff49d8c685">on_disconnect</reimplements>
        <briefdescription>
<para>Called on websocket disconnection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordvoiceclient.h" line="1263" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a1a28fcb2647f4e1203c4aa1b842a2bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::write</definition>
        <argsstring>(const std::string_view data, ws_opcode _opcode=OP_AUTO)</argsstring>
        <name>write</name>
        <param>
          <type>const std::string_view</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
          <declname>_opcode</declname>
          <defval><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1ca3b445e535f31d7de2d862b4c44020e99" kindref="member">OP_AUTO</ref></defval>
        </param>
        <briefdescription>
<para>Write to websocket. Encapsulates data in frames if the status is CONNECTED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The opcode of the data to send, either binary or text. The default is to use the socket&apos;s opcode as set in the constructor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="205" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ae4b1e98d3e535a13fd912cdb00fc4c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::websocket_client::handle_buffer</definition>
        <argsstring>(std::string &amp;buffer) override</argsstring>
        <name>handle_buffer</name>
        <reimplements refid="classdpp_1_1ssl__connection_1a321015d761b174db3f4ffb2551bb2f99">handle_buffer</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Processes incoming frames from the SSL socket input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents. Can modify this value removing the head elements when processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="211" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ab872768661dc89d54f0381b0fff5b674" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::close</definition>
        <argsstring>() override</argsstring>
        <name>close</name>
        <reimplements refid="classdpp_1_1ssl__connection_1ab0e1c646dc2d36679ca2ef8b1e3fd3de">close</reimplements>
        <briefdescription>
<para>Close websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="216" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a2613fa8b73b1e7960c62bfe8cdef1dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::websocket_client::send_close_packet</definition>
        <argsstring>()</argsstring>
        <name>send_close_packet</name>
        <briefdescription>
<para>Send OP_CLOSE error code 1000 to the other side of the connection. This indicates graceful close. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This informs Discord to invalidate the session, you cannot resume if you send this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="244" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a3f8164696a6ffedcf9db89b7b4a2ea6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::enable_raw_tracing</definition>
        <argsstring>()</argsstring>
        <name>enable_raw_tracing</name>
        <briefdescription>
<para>For low-level debugging, calling this function will enable low level I/O logging for this connection to the logger. This can be very loud, and output a lot of data, so only enable it selectively where you need it. </para>
        </briefdescription>
        <detaileddescription>
<para>Generally, you won&apos;t need this, it is a library development utility. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="249" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ac69282a18c63bd1ddfaa87ba83410979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_bytes_out</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_out</name>
        <briefdescription>
<para>Get the bytes out objectGet total bytes sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes sent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="255" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a28c4296db4b541d99478c6db493f4b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_bytes_in</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_in</name>
        <briefdescription>
<para>Get total bytes received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="261" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a3cc296231589356506a103ad8c7eee74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_unique_id</definition>
        <argsstring>() const</argsstring>
        <name>get_unique_id</name>
        <briefdescription>
<para>Every request made has a unique ID. This increments for every request, starting at 1. You can use this for statistics, or to associate requests and replies in external event loops. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Unique ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="269" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ab2f2c18aff43ac8dfbfa58bc5dc71fa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::get_cipher</definition>
        <argsstring>()</argsstring>
        <name>get_cipher</name>
        <briefdescription>
<para>Get SSL cipher name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string ssl cipher name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="275" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::read_loop</definition>
        <argsstring>()</argsstring>
        <name>read_loop</name>
        <briefdescription>
<para>Set up non blocking I/O and configure on_read, on_write and on_error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::exception</parametername>
</parameternamelist>
<parameterdescription>
<para>Any std::exception (or derivative) thrown from <ref refid="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" kindref="member">read_loop()</ref> indicates setup failed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="325" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ae0fe670d8829bcfe600856a4c4adee00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::socket_write</definition>
        <argsstring>(const std::string_view data)</argsstring>
        <name>socket_write</name>
        <param>
          <type>const std::string_view</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write to the output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The data may not be written immediately and may be written at a later time to the socket. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="345" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1acdd1152134b624d18a9e82162e64bafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::complete_handshake</definition>
        <argsstring>(const struct socket_events *ev)</argsstring>
        <name>complete_handshake</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">socket_events</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Called while SSL handshake is in progress. If the handshake completes, the state of the socket is progressed to an established state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events for the socket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="365" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a8c50238080a887b09473c82bff8de817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_read</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;ev)</argsstring>
        <name>on_read</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Called when the TCP socket has data to read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="372" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a07c9f5c2dfff5ef27db1e148589e2e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_write</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;e)</argsstring>
        <name>on_write</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Called when the TCP socket can be written to without blocking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="379" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a8732ae4599f38f41d27de3f4c1c7cae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_error</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;, int error_code)</argsstring>
        <name>on_error</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
<para>Called when there is an error on the TCP socket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="386" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1a0d8399d578f3dc811f3ef5a663a2064b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::websocket_client::timed_out</definition>
        <argsstring></argsstring>
        <name>timed_out</name>
        <briefdescription>
<para>If true the connection timed out while waiting, when waiting for SSL negotiation, TCP <ref refid="classdpp_1_1websocket__client_1abce54f634a3b43f4b9b5bac5d1e99702" kindref="member">connect()</ref>, or HTTP. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="170" column="6" bodyfile="include/dpp/wsclient.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1aed68bb754ba3745b6fbb895d16f96809" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::websocket_client::timeout</definition>
        <argsstring></argsstring>
        <name>timeout</name>
        <briefdescription>
<para>Time at which the connection should be abandoned, if we are still connecting or negotiating with a HTTP server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="176" column="8" bodyfile="include/dpp/wsclient.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a4a8b48487e16cefed1f12821f64fa5e8" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
<para>Input buffer received from socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="128" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a80a568dbb2049f4727c0efdde185699e" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::obuffer</definition>
        <argsstring></argsstring>
        <name>obuffer</name>
        <briefdescription>
<para>Output buffer for sending to socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="133" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1abd9c3cf6150d3c7e2badd12829437207" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
        <definition>dpp::socket dpp::ssl_connection::sfd</definition>
        <argsstring></argsstring>
        <name>sfd</name>
        <briefdescription>
<para>Raw file descriptor of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="138" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a61cccaa18278dabe8eae3eafbf8dd1e7" prot="protected" static="no" mutable="no">
        <type>openssl_connection *</type>
        <definition>openssl_connection* dpp::ssl_connection::ssl</definition>
        <argsstring></argsstring>
        <name>ssl</name>
        <briefdescription>
<para>Openssl opaque contexts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="143" column="20" bodyfile="include/dpp/sslconnection.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a0e0c14fe8f51c54ea280509c8c0e5140" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::cipher</definition>
        <argsstring></argsstring>
        <name>cipher</name>
        <briefdescription>
<para>SSL cipher in use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="148" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a9494e0dd128b5415a96d6ff9d24789aa" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_connection::last_tick</definition>
        <argsstring></argsstring>
        <name>last_tick</name>
        <briefdescription>
<para>For timers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="153" column="8" bodyfile="include/dpp/sslconnection.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad694f10e342b640f5fa6e88119c86a17" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_connection::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
<para>Start time of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="158" column="8" bodyfile="include/dpp/sslconnection.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a0d85356b40ea02323cc161af4f5467fc" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::ssl_connection::connect_retries</definition>
        <argsstring></argsstring>
        <name>connect_retries</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>How many times we retried <ref refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca" kindref="member">connect()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="163" column="9" bodyfile="include/dpp/sslconnection.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aedf42057136f2fae90424a18daddce51" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::hostname</definition>
        <argsstring></argsstring>
        <name>hostname</name>
        <briefdescription>
<para>Hostname connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="168" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad9fccc5b66b4a5713b54d8ed1ab9c743" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::bytes_out</definition>
        <argsstring></argsstring>
        <name>bytes_out</name>
        <briefdescription>
<para>Bytes out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="178" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a8715f4363a7c5ef7ddc5439d5ff2394a" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::bytes_in</definition>
        <argsstring></argsstring>
        <name>bytes_in</name>
        <briefdescription>
<para>Bytes in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="183" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1addf00646298eba9176a675bba7269f27" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::plaintext</definition>
        <argsstring></argsstring>
        <name>plaintext</name>
        <briefdescription>
<para>True for a plain text connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="188" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1acf9eb0208d63e142a421f7f778b3a939" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::connected</definition>
        <argsstring></argsstring>
        <name>connected</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if connection is completed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="193" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a69e9248f431daf428683b1152c05b1a6" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::tcp_connect_done</definition>
        <argsstring></argsstring>
        <name>tcp_connect_done</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if tcp <ref refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca" kindref="member">connect()</ref> succeeded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="198" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a216b85ccf220d2aa66e9a4397dcdf4a3" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a8b9ab0b8cf29978147a7df3947cd8f30" kindref="member">timer</ref></type>
        <definition>timer dpp::ssl_connection::timer_handle</definition>
        <argsstring></argsstring>
        <name>timer_handle</name>
        <briefdescription>
<para>Timer handle for one second timer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="203" column="7" bodyfile="include/dpp/sslconnection.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aa7a9277f5c258712b00e91b9cd062095" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::unique_id</definition>
        <argsstring></argsstring>
        <name>unique_id</name>
        <briefdescription>
<para>Unique ID of socket used as a nonce You can use this to identify requests vs reply if you want. D++ itself only sets this, and does not use it in any logic. It starts at 1 and increments for each request made. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="212" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a62161bc05909fc1d67f3a59c5fbf6e79" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::raw_trace</definition>
        <argsstring></argsstring>
        <name>raw_trace</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Set this to true to log all IO to debug for this connection. This is an internal developer facility. Do not enable it unless you need to, as it will be very noisy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="230" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1websocket__client_1abce54f634a3b43f4b9b5bac5d1e99702" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::connect</definition>
        <argsstring>() override</argsstring>
        <name>connect</name>
        <reimplements refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca">connect</reimplements>
        <briefdescription>
<para>Connect to websocket server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="158" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a2d64dce5afa6a2e3a125b915316d7f6a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1af3b7f3e861707f45beefa9449de70519" kindref="member">ws_state</ref></type>
        <definition>ws_state dpp::websocket_client::get_state</definition>
        <argsstring>() const</argsstring>
        <name>get_state</name>
        <briefdescription>
<para>Get websocket state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>websocket state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="164" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a74d9da0f1f0c5feb46ed0995bd7d2e05" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::do_raw_trace</definition>
        <argsstring>(const std::string &amp;message) const</argsstring>
        <name>do_raw_trace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>If raw_trace is set to true, log a debug message for this connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>debug message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="236" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a4bdff78b127e920033d0d9f8fb58d456" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::ssl_connection::on_buffer_drained</definition>
        <argsstring>()</argsstring>
        <name>on_buffer_drained</name>
        <reimplementedby refid="classdpp_1_1http__server__request_1a89070e1f8e6757223883f647a45d7813">on_buffer_drained</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="238" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a discord voice connection. Each <ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> connects to one voice channel and derives from a websocket client. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::ssl_connection</label>
        <link refid="classdpp_1_1ssl__connection"/>
      </node>
      <node id="2">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>bool</label>
      </node>
      <node id="24">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="15">
        <label>double</label>
      </node>
      <node id="23">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="24" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="4" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>socketengine</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>current_gain</edgelabel>
          <edgelabel>end_gain</edgelabel>
          <edgelabel>increment</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>sessionid</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>server_id</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>moving_average</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>send_audio_type</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>iteration_interval</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="17">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="18" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>dpp::moving_averager</label>
        <link refid="structdpp_1_1moving__averager"/>
        <childnode refid="31" relation="usage">
          <edgelabel>values</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>collectionCount</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="10" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::ssl_connection</label>
        <link refid="classdpp_1_1ssl__connection"/>
        <childnode refid="4" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
          <edgelabel>private_key_file</edgelabel>
          <edgelabel>public_key_file</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_tick</edgelabel>
          <edgelabel>start</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>connect_retries</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
          <edgelabel>unique_id</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>connected</edgelabel>
          <edgelabel>keepalive</edgelabel>
          <edgelabel>plaintext</edgelabel>
          <edgelabel>raw_trace</edgelabel>
          <edgelabel>tcp_connect_done</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>timer_handle</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="10" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>timed_out</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>send_audio_type_t</label>
      </node>
      <node id="28">
        <label>event_router_t&lt;</label>
      </node>
      <node id="29">
        <label>float</label>
      </node>
      <node id="6">
        <label>int</label>
      </node>
      <node id="19">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="20" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>openssl_connection *</label>
      </node>
      <node id="12">
        <label>size_t</label>
      </node>
      <node id="26">
        <label>atomic_bool</label>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="31">
        <label>deque&lt;</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="8">
        <label>time_t</label>
      </node>
      <node id="22">
        <label>uint16_t</label>
      </node>
      <node id="14">
        <label>uint32_t</label>
      </node>
      <node id="10">
        <label>uint64_t</label>
      </node>
      <node id="9">
        <label>uint8_t</label>
      </node>
      <node id="25">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/discordvoiceclient.h" line="236" column="1" bodyfile="include/dpp/discordvoiceclient.h" bodystart="237" bodyend="1264"/>
    <listofallmembers>
      <member refid="classdpp_1_1ssl__connection_1a4a8b48487e16cefed1f12821f64fa5e8" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>buffer</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8715f4363a7c5ef7ddc5439d5ff2394a" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>bytes_in</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad9fccc5b66b4a5713b54d8ed1ab9c743" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>bytes_out</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a4b8de633c5944659288af217e309b2f0" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>channel_id</name></member>
      <member refid="classdpp_1_1ssl__connection_1a0e0c14fe8f51c54ea280509c8c0e5140" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>cipher</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a95f3285fac343283212749ba109ae28a" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>cleanup</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a87b60251b68583d9307a4f72d3ce3249" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>clear_queue</name></member>
      <member refid="classdpp_1_1websocket__client_1ab872768661dc89d54f0381b0fff5b674" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>close</name></member>
      <member refid="classdpp_1_1ssl__connection_1acdd1152134b624d18a9e82162e64bafe" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>complete_handshake</name></member>
      <member refid="classdpp_1_1websocket__client_1abce54f634a3b43f4b9b5bac5d1e99702" prot="protected" virt="virtual"><scope>dpp::discord_voice_client</scope><name>connect</name></member>
      <member refid="classdpp_1_1ssl__connection_1a0d85356b40ea02323cc161af4f5467fc" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>connect_retries</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a5df040856f3fd775e81d99224c0a2218" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>connect_time</name></member>
      <member refid="classdpp_1_1ssl__connection_1acf9eb0208d63e142a421f7f778b3a939" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>connected</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a23cac9565c94195b8050df206d29d6b2" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>creator</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ab39e60b88eecc2a4a5173d1786f418bd" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>current_gain</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a47a1915dab8d243f5bc1c52610be06f2" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>dave_mls_pending_remove_list</name></member>
      <member refid="classdpp_1_1discord__voice__client_1aa425931577d917c18113f15463eaf458" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>dave_mls_user_list</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a44ab87f96a17a48463358b24a1518c95" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>dave_version</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a898d7b9e2144f2ee595b0c96a47b77da" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>destination</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a631da143d224aed3051ccc649fd248c0" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>discord_voice_client</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ae8e844ebb991eeb2d63771f6c5ea4938" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>discover_ip</name></member>
      <member refid="classdpp_1_1ssl__connection_1a74d9da0f1f0c5feb46ed0995bd7d2e05" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>do_raw_trace</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3f8164696a6ffedcf9db89b7b4a2ea6d" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>enable_raw_tracing</name></member>
      <member refid="classdpp_1_1discord__voice__client_1aca97df078a5782b1ebd96287f4b2a0c8" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>encode</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ad3f32f985611d9b7fb753b7ca0446f21" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>encode_buffer</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a98dc4764408e7bbf5a2eafff24391f9a" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>encoder</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a69388fa61302df65a43777bf472e8a92" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>end_gain</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a100af5cd816264910d5910d838189226" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>error</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a9369b02d9e0f4c3e5c0c5b36fcf87550" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>execute_pending_upgrade_downgrade</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a0dfd6ef262902a36dd897baf96e63847" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>external_ip</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ab35d726d6130295f1948cb5fbeace3b3" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>fd</name></member>
      <member refid="classdpp_1_1ssl__connection_1a28c4296db4b541d99478c6db493f4b03" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_bytes_in</name></member>
      <member refid="classdpp_1_1ssl__connection_1ac69282a18c63bd1ddfaa87ba83410979" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_bytes_out</name></member>
      <member refid="classdpp_1_1ssl__connection_1ab2f2c18aff43ac8dfbfa58bc5dc71fa1" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_cipher</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a524400b5c1ea99c01c932993f3a3b7b8" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_iteration_interval</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a69727c9ff92f6e86f4ee51260de3d111" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_marker_metadata</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a2d31c2395a9ec508cbff305c9e28c1b7" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_privacy_code</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ac0be468508d5b5d2afedee7b242fd23a" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_queue_size</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a15ec0940d0a963dbb5e58d2eb895bcc6" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_remaining</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a15ba91026079da2100714c12b7ade88e" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_secs_remaining</name></member>
      <member refid="classdpp_1_1websocket__client_1a2d64dce5afa6a2e3a125b915316d7f6a" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_state</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a45085f49408bdeae9cd05dbf59d39972" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_timescale</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a4e75f5d97ca1691dde43ed8b0b8ca196" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_tracks_remaining</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3cc296231589356506a103ad8c7eee74" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_unique_id</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a017e7c98b75000d0bdc76cc16b31c093" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_uptime</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a92ec2cba8cee44cbd3e0fa9c2a87ed66" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>get_user_privacy_code</name></member>
      <member refid="classdpp_1_1websocket__client_1ae4b1e98d3e535a13fd912cdb00fc4c05" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>handle_buffer</name></member>
      <member refid="classdpp_1_1discord__voice__client_1abffb083b1554a05ab41fcf1c7fa49489" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>handle_frame</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ae0f777580b2e2db9db05525db8b67d94" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>has_secret_key</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a20ea071ce2429f0eaad5fff783fc7281" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>heartbeat_interval</name></member>
      <member refid="classdpp_1_1ssl__connection_1aedf42057136f2fae90424a18daddce51" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>hostname</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a5877d601964f10d987a288aae85574b3" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>increment</name></member>
      <member refid="classdpp_1_1discord__voice__client_1afe1408c1ad305aebedc7e99ba2128aa8" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>insert_marker</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6bf70617fbf6c0409e964e8465a2f484" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>ip</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a1062401920a3462500f2c642138095c0" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>is_connected</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ad6aa98f7ce2b197cbe8b338c901edc83" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>is_end_to_end_encrypted</name></member>
      <member refid="classdpp_1_1discord__voice__client_1aef426df9775031fed6c6f50554573a0c" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>is_paused</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a1a98e05342f5c6b8de0f9324758f3fd6" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>is_playing</name></member>
      <member refid="classdpp_1_1discord__voice__client_1aee5fcfe947f581ecce2c9096871f88a2" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>is_ready</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a931db7e49b13e5c8abbebb204fa62ed2" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>iteration_interval</name></member>
      <member refid="classdpp_1_1ssl__connection_1aaba3255abd8ec8e94d1781771cfc9acb" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>keepalive</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a4517befd07e1179155ffafa8ba69b73f" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>last_heartbeat</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a935814dbd158a739e2b04f3d506af930" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>last_loop_time</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ad5b391badaa5a55ed2f0ebff043e93c2" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>last_sleep_remainder</name></member>
      <member refid="classdpp_1_1ssl__connection_1a9494e0dd128b5415a96d6ff9d24789aa" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>last_tick</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6a9412b209fb4b40a0842fad31997b2d" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>last_timestamp</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6a4111094ce256554beac3523b660822" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>log</name></member>
      <member refid="classdpp_1_1discord__voice__client_1aa88ea27bc7f59500eb44486a782c5f49" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>message_queue</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ac496a2c65b1fad84efe2e0b05f247e61" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>mixer</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a8175929e6857660d26b39f5b9393e83d" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>mls_state</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a1ff3c6c8fe3650e5be8ddd268dcea6f6" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>modes</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ae177808f7232ce1b5bbea5a0f8ce2d82" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>moving_average</name></member>
      <member refid="classdpp_1_1ssl__connection_1a80a568dbb2049f4727c0efdde185699e" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>obuffer</name></member>
      <member refid="classdpp_1_1ssl__connection_1a4bdff78b127e920033d0d9f8fb58d456" prot="protected" virt="virtual"><scope>dpp::discord_voice_client</scope><name>on_buffer_drained</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a355589d4bf9d94117f2ddeed94503c58" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>on_disconnect</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8732ae4599f38f41d27de3f4c1c7cae6" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>on_error</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8c50238080a887b09473c82bff8de817" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>on_read</name></member>
      <member refid="classdpp_1_1ssl__connection_1a07c9f5c2dfff5ef27db1e148589e2e26" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>on_write</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a57a629da5df4c97d727705a03d849fbb" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>one_second_timer</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6439e7757480772486fe0d9397f580a2" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>outbuf</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3ae20842849f8c2f0174902dc70d7e97" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>owner</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ab2778a8b5a45b7067ff9f8cbdf629d43" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>packet_nonce</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a9cccd4ae3b80ed56dd8cf29236f9a530" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>pause_audio</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a99fb90437d53de82d76cff97c4faad54" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>paused</name></member>
      <member refid="classdpp_1_1ssl__connection_1addf00646298eba9176a675bba7269f27" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>plaintext</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a0224045bd2740a12de343c9f4125ab4b" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>port</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa8cfa2e6c511022b67dbd97cc57f0731" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>private_key_file</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ab5723044d2865b2bea5cfc9011636f59" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>process_mls_group_rosters</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad7feee672079e07699e25f7250021c66" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>public_key_file</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a406383b8c18a931d4c496e0d7a81cf43" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>queue_message</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a959c6452e0ea0cea3855c48100a4dcf3" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>queue_mutex</name></member>
      <member refid="classdpp_1_1ssl__connection_1a62161bc05909fc1d67f3a59c5fbf6e79" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>raw_trace</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>read_loop</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ac285267f8471e7954b70ecba3f130a3f" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>read_ready</name></member>
      <member refid="classdpp_1_1discord__voice__client_1af7c2f1be7861b8d8d2400a456044fd9a" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>ready_for_transition</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a33a511bbc164e265641cbf1b8d1ad18a" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>receive_sequence</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ae7b192cad8f1c6a215999ffb2faa4f26" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>recover_from_invalid_commit_welcome</name></member>
      <member refid="classdpp_1_1discord__voice__client_1afbdaf2aecb41c9aab776bc1ef05c631a" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>reinit_dave_mls_group</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a7a494f997253706683168470ab695802" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>repacketizer</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a35a16d67874752977e6a4ff2bd7325e3" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>rtp_seq_t</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a438b95ded97da933b2abcd13892a007d" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>rtp_timestamp_t</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a418f98812e850eb963e4b3a2a4dc0c74" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>run</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34a4506440a2c61f352bba696bf9e806219" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>satype_live_audio</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34a1d950a0e94c2adf54d55d9ddf1332b4a" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>satype_overlap_audio</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34ae2b3cfe5518ced394ad9db0bbfa18483" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>satype_recorded_audio</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a917ab0a295efb4324fe706c2cb9d6853" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>secret_key</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a27ebd515b66d51d5416b2472ae132715" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>send</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a2770c71637347c4c2b5d50f73b18fd62" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>send_audio_opus</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a84f153d97e620419b82a73b54ceb223e" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>send_audio_opus</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6d52a32631231f3120ba9e5ebbe61a7a" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>send_audio_raw</name></member>
      <member refid="classdpp_1_1discord__voice__client_1aeb92c5a0a80eb5f0e4d4e987ec11432d" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>send_audio_type</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6eb4a952b8451906316fcdb746c2bd34" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>send_audio_type_t</name></member>
      <member refid="classdpp_1_1websocket__client_1a2613fa8b73b1e7960c62bfe8cdef1dd7" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>send_close_packet</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ac6d1422113278ad6049486d07ca06ae4" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>send_silence</name></member>
      <member refid="classdpp_1_1discord__voice__client_1abcc3a1b2934325268553f910b6a03103" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>send_stop_frames</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ad7f590f55089547625a67aa6ef15a2a3" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>sending</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6009c0a046d090b47dcb3a2d97cc96ad" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>sent_stop_frames</name></member>
      <member refid="classdpp_1_1discord__voice__client_1aecd8c23811fac92dda3980af6dafacf4" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>sequence</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ac1d99be8bb3a89a43e5f5b368fe63f7d" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>server_id</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a8f011c857ff968e44a8e5ddf818a9160" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>sessionid</name></member>
      <member refid="classdpp_1_1discord__voice__client_1aaf0e21e85fb4a1deccb8e925ec02e268" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>set_iteration_interval</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6404396de8a2641fcb3890658ce0e054" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>set_send_audio_type</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a067cdfaf8a84c2bdf09febe974eb4730" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>set_timescale</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a1790b206609d45aa1e124c701a4407f3" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>set_user_gain</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a37aafdced7aeae45699e1ce7f1c34e83" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>setup</name></member>
      <member refid="classdpp_1_1ssl__connection_1abd9c3cf6150d3c7e2badd12829437207" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>sfd</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a13e2ca2b646c348597e239d3ab72f67b" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>silence_packet</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6c45a33336db010eedf8853af16b94c8" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>skip_to_next_marker</name></member>
      <member refid="classdpp_1_1ssl__connection_1ae0fe670d8829bcfe600856a4c4adee00" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>socket_write</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ae5456ed35a1a964a607e2abc8bd59691" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>speak</name></member>
      <member refid="classdpp_1_1ssl__connection_1a61cccaa18278dabe8eae3eafbf8dd1e7" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>ssl</name></member>
      <member refid="classdpp_1_1ssl__connection_1a77bd0f626125dfef52cfe7fe40216772" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>ssl_connection</name></member>
      <member refid="classdpp_1_1ssl__connection_1ab9d2b0349eb22555403c692500a287bb" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>ssl_connection</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a6d51bd69dc867e99e062aef622e9083a" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>ssrc</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ab161d873ad8d72027d799f72d7adcd8a" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>ssrc_map</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad694f10e342b640f5fa6e88119c86a17" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>start</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a0bf262c6102ffdae95f999b79462a443" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>stop_audio</name></member>
      <member refid="classdpp_1_1discord__voice__client_1afe4e67fad90702358e32370a0aa4b0aa" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>stream_mutex</name></member>
      <member refid="classdpp_1_1ssl__connection_1a69e9248f431daf428683b1152c05b1a6" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>tcp_connect_done</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a495139ab5289f6f7860177cf121ba2cb" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>terminating</name></member>
      <member refid="classdpp_1_1websocket__client_1a0d8399d578f3dc811f3ef5a663a2064b" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>timed_out</name></member>
      <member refid="classdpp_1_1websocket__client_1aed68bb754ba3745b6fbb895d16f96809" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>timeout</name></member>
      <member refid="classdpp_1_1ssl__connection_1a216b85ccf220d2aa66e9a4397dcdf4a3" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>timer_handle</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a5315fb8492343dc48142f77cc2d28100" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>times_looped</name></member>
      <member refid="classdpp_1_1discord__voice__client_1aa7026b375459775b76d5cec4206a9bde" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>timescale</name></member>
      <member refid="classdpp_1_1discord__voice__client_1accaef35c6259256403921302747be7b7" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>timestamp</name></member>
      <member refid="classdpp_1_1discord__voice__client_1afe7ab5918062b643245db8247f4cb70c" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>token</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a4b8067cc147c6acc59c88c36c3d2120b" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>track_meta</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a2d072b4db0ec647bc5d9c9be99926781" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>tracks</name></member>
      <member refid="classdpp_1_1discord__voice__client_1ad7c45bde49a5f411a2516564ae5b87b2" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>udp_events</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a90fbdd9deb1142bea3aedad0369c62e8" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>udp_recv</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a3af067458ec0133cb293e6d1e748295c" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>udp_send</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa7a9277f5c258712b00e91b9cd062095" prot="protected" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>unique_id</name></member>
      <member refid="classdpp_1_1discord__voice__client_1aba1326f21394c3aa1e566510b1cbf51f" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>update_ratchets</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a29a53aaa7f907d61d8bf9cee05ce2160" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>voice_courier</name></member>
      <member refid="classdpp_1_1discord__voice__client_1af5e73016b4f404a690a224827561b01f" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>voice_courier_loop</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a25c7eb5700b095d16791b905d7dfa173" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>voice_courier_shared_state</name></member>
      <member refid="classdpp_1_1websocket__client_1a40b00c90da14a301522a756f8e93490d" prot="public" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>websocket_client</name></member>
      <member refid="classdpp_1_1websocket__client_1a1a28fcb2647f4e1203c4aa1b842a2bc9" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>write</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a88eb8bcc0d54ce5d600a9c2a1e690e01" prot="private" virt="non-virtual"><scope>dpp::discord_voice_client</scope><name>write_ready</name></member>
      <member refid="classdpp_1_1discord__voice__client_1a9b06226881ba97a22d142c8fe4f5cbe9" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>~discord_voice_client</name></member>
      <member refid="classdpp_1_1ssl__connection_1a23c94174be8ca86f9d4e30931bd4ff12" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>~ssl_connection</name></member>
      <member refid="classdpp_1_1websocket__client_1a32f422f3a5a7a1aeb35a273be5c66d17" prot="public" virt="virtual"><scope>dpp::discord_voice_client</scope><name>~websocket_client</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
