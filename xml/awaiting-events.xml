<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="awaiting-events" kind="page">
    <compoundname>awaiting-events</compoundname>
    <title>Waiting for events</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><para><simplesect kind="warning"><para>D++ Coroutines are a very new feature and are currently only supported by D++ on g++ 11, clang/LLVM 14, and MSVC 19.37 or above. Additionally, D++ must be built with the CMake option DPP_CORO, and your program must both define the macro DPP_CORO and use C++20 or above. The feature is experimental and may have bugs or even crashes, please report any to <ulink url="https://github.com/brainboxdotcc/DPP/issues">GitHub Issues</ulink> or to our <ulink url="https://discord.gg/dpp">Discord Server</ulink>. </para>
</simplesect>
</para>
</para>
<para>D++ makes it possible to await events: simple use <computeroutput>co_await</computeroutput> on any of the event routers, such as <ref refid="classdpp_1_1cluster_1a1a632b3c2c8d3ff3a47372ffa770acf5" kindref="member">on_message_create</ref>, and your coroutine will be suspended until the next event fired by this event router. You can also <computeroutput>co_await</computeroutput> the return of an event router&apos;s <ref refid="classdpp_1_1event__router__t_1a16c2527f66c8b74e5c0678ace4fa549e" kindref="member">when()</ref> method while passing it a predicate function object, it will only resume your coroutine when the predicate returns true. Be aware that your coroutine is attached to the event router only when you call <computeroutput>co_await</computeroutput> and not before, and will be detached as it is resumed.</para>
<para><simplesect kind="note"><para>When the event router resumes your coroutine, it will give you <bold>a reference to the event object</bold>. This will likely mean it will be destroyed after your next co_await, make sure to save it in a local variable if you need it for longer.</para>
</simplesect>
<programlisting filename="coro_awaiting_events.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;dpp/dpp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref><sp/>bot{</highlight><highlight class="stringliteral">&quot;token&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.<ref refid="classdpp_1_1cluster_1ab840686c7cd2e15f4a66ab64f62e106b" kindref="member">on_log</ref>(<ref refid="namespacedpp_1_1utility_1a8c2cc04bb80ffd287b376d5977899277" kindref="member">dpp::utility::cout_logger</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_slashcommand([](<ref refid="structdpp_1_1slashcommand__t" kindref="compound">dpp::slashcommand_t</ref><sp/>event)<sp/>-&gt;<sp/><ref refid="structdpp_1_1job" kindref="compound">dpp::job</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.<ref refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" kindref="member">command</ref>.<ref refid="classdpp_1_1interaction_1aabbb8d58d708128098516ed443d5c140" kindref="member">get_command_name</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>message<sp/>and<sp/>add<sp/>a<sp/>button<sp/>with<sp/>its<sp/>custom<sp/>ID<sp/>set<sp/>to<sp/>the<sp/>command<sp/>interaction&apos;s<sp/>ID<sp/>so<sp/>we<sp/>can<sp/>identify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dpp::message<sp/>m{</highlight><highlight class="stringliteral">&quot;Test&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">{event.command.id.str()};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedpp_1_1unicode__emoji_1a24ac871c89f4e1779cfeda23077faeac" kindref="member">m</ref>.add_component(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref>{}.<ref refid="classdpp_1_1component_1a3707437be16cc7dfd5edcf321f8e842d" kindref="member">add_component</ref>(<ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref>{}.<ref refid="classdpp_1_1component_1a281e39d6b8c65b1fd301d195a835e703" kindref="member">set_type</ref>(<ref refid="namespacedpp_1afce43206033521b990e3a72bb87481b7a98228836af5d0c180cfc05eb1f0bfde9" kindref="member">dpp::cot_button</ref>).<ref refid="classdpp_1_1component_1a23955055e9d77383fca2a5738ae3a30f" kindref="member">set_label</ref>(</highlight><highlight class="stringliteral">&quot;Click<sp/>me!&quot;</highlight><highlight class="normal">).<ref refid="classdpp_1_1component_1a1bf3798669b015711df5d2621ff92d73" kindref="member">set_id</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">co_await</highlight><highlight class="normal"><sp/>event.<ref refid="structdpp_1_1interaction__create__t_1aef38626cd24d2212b00ab866509b4d59" kindref="member">co_reply</ref>(m);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdpp_1_1button__click__t" kindref="compound">dpp::button_click_t</ref><sp/>click_event<sp/>=<sp/></highlight><highlight class="keyword">co_await</highlight><highlight class="normal"><sp/>event.<ref refid="structdpp_1_1event__dispatch__t_1a9ef98cebb9c0a5ab75a4362d1b40fb71" kindref="member">from</ref>-&gt;<ref refid="classdpp_1_1discord__client_1afed78d2e1b09e006ede8b4690895a866" kindref="member">creator</ref>-&gt;<ref refid="classdpp_1_1cluster_1af9409347218d270da0aeb22b0a27c38d" kindref="member">on_button_click</ref>.when(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note!!<sp/>Due<sp/>to<sp/>a<sp/>bug<sp/>in<sp/>g++11<sp/>and<sp/>g++12,<sp/>id<sp/>must<sp/>be<sp/>captured<sp/>as<sp/>a<sp/>reference<sp/>here<sp/>or<sp/>the<sp/>compiler<sp/>will<sp/>destroy<sp/>it<sp/>twice.<sp/>This<sp/>is<sp/>fixed<sp/>in<sp/>g++13</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">]<sp/>(<ref refid="structdpp_1_1button__click__t" kindref="compound">dpp::button_click_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>b.custom_id<sp/>==<sp/>id;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acknowledge<sp/>the<sp/>click<sp/>and<sp/>edit<sp/>the<sp/>original<sp/>response,<sp/>removing<sp/>the<sp/>button</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>click_event.reply();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event.<ref refid="structdpp_1_1interaction__create__t_1a10553ebb8d10ba58595f825e0a89eb1b" kindref="member">edit_original_response</ref>(<ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref>{</highlight><highlight class="stringliteral">&quot;You<sp/>clicked<sp/>the<sp/>button!&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_ready([&amp;bot](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1ready__t" kindref="compound">dpp::ready_t</ref><sp/>&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dpp::run_once&lt;struct<sp/>register_bot_commands&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref><sp/>command{</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>awaiting<sp/>for<sp/>an<sp/>event&quot;</highlight><highlight class="normal">,<sp/>bot.me.<ref refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" kindref="member">id</ref>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bot.global_command_create(command);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.start(<ref refid="namespacedpp_1af447e04d0490cd4a9de085e4a758faa4a155f7db65696b4c09b5fcc41787e4726" kindref="member">dpp::st_wait</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Note that there is a problem with that! If the user never clicks your button, or if the message gets deleted, your coroutine will be stuck waiting... And waiting... Forever until your bot shuts down, occupying a space in memory. This is where the <ref refid="expiring-buttons" kindref="compound">next example</ref> comes into play as a solution, with a button that expires with time.</para>
<para><image type="html" name="waiting_coroutine.jpg"></image>
 </para>
    </detaileddescription>
    <location file="docpages/example_programs/using_coroutines/awaiting_events.md"/>
  </compounddef>
</doxygen>
