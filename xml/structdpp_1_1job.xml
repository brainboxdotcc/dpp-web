<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1job" kind="struct" language="C++" prot="public">
    <compoundname>dpp::job</compoundname>
    <includes local="no">job.h</includes>
    <briefdescription>
<para>Extremely light coroutine object designed to send off a coroutine to execute on its own. It can be attached to an event router using <ref refid="classdpp_1_1event__router__t_1a576e1cf507ebe0347bd112f1a2bcfb7e" kindref="member">dpp::event_router_t::co_attach</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>This object stores no state and is the recommended way to use coroutines if you do not need to co_await the result.</para>
<para><simplesect kind="warning"><para>- This feature is EXPERIMENTAL. The API may change at any time and there may be bugs. Please report any to <ulink url="https://github.com/brainboxdotcc/DPP/issues">GitHub issues</ulink> or to the <ulink url="https://discord.gg/dpp">D++ Discord server</ulink>. </para>
</simplesect>
<simplesect kind="warning"><para>- It cannot be co_awaited, which means the second it co_awaits something, the program jumps back to the calling function, which continues executing. At this point, if the function returns, every object declared in the function including its parameters are destroyed, which causes dangling references. This is exactly the same problem as references in lambdas : <ulink url="https://dpp.dev/lambdas-and-locals.html">https://dpp.dev/lambdas-and-locals.html</ulink>. For this reason, <computeroutput>co_await</computeroutput> will error if any parameters are passed by reference. If you must pass a reference, pass it as a pointer or with std::ref, but you must fully understand the reason behind this warning, and what to avoid. If you prefer a safer type, use <computeroutput>coroutine</computeroutput> for synchronous execution, or <computeroutput>task</computeroutput> for parallel tasks, and co_await them. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="include/dpp/coro/job.h" line="45" column="1" bodyfile="include/dpp/coro/job.h" bodystart="45" bodyend="45"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
