<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1sticker" kind="struct" language="C++" prot="public">
    <compoundname>dpp::sticker</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; sticker &gt;</basecompoundref>
    <includes local="no">message.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdpp_1_1sticker_1ad8a0bad300dba6e39e1bfc71b69b1db8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; sticker &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; sticker &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="889" column="6" bodyfile="include/dpp/message.h" bodystart="917" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1sticker_1a88dc531bebffaf77068457ea360ac939" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::sticker::pack_id</definition>
        <argsstring></argsstring>
        <name>pack_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: for standard stickers, id of the pack the sticker is from </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="934" column="10" bodyfile="include/dpp/message.h" bodystart="934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1a6e76be43a608182d73ef15b4618afe7b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sticker::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The name of the sticker </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="936" column="12" bodyfile="include/dpp/message.h" bodystart="936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1a82f59ad29bbfdad53ed45177e1b77c96" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sticker::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>description of the sticker (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="938" column="13" bodyfile="include/dpp/message.h" bodystart="938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1af0b92651f3d428ec8db4858133e826cd" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sticker::tags</definition>
        <argsstring></argsstring>
        <name>tags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>for guild stickers, the Discord name of a unicode emoji representing the sticker&apos;s expression. for standard stickers, a comma-separated list of related expressions. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="942" column="13" bodyfile="include/dpp/message.h" bodystart="942" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1af01f4dd7249de7c69f0a08e5b0e27459" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sticker::asset</definition>
        <argsstring></argsstring>
        <name>asset</name>
        <briefdescription>
<para>Asset ID. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000037"><xreftitle>Deprecated</xreftitle><xrefdescription><para>now an empty string but still sent by discord. While discord still send this empty string value we will still have a field here in the library. </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="949" column="13" bodyfile="include/dpp/message.h" bodystart="949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1a5d3b3f07c3a3ff4e9dc89887ee881d8c" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a1e48af4f3b8fd3f07ea0c2c55de99bff" kindref="member">sticker_type</ref></type>
        <definition>sticker_type dpp::sticker::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of sticker </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="951" column="13" bodyfile="include/dpp/message.h" bodystart="951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1ad7972e12390ac0eea0027794e0c0fca6" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1ae2ee458707682eabe7d539c9a13beac2" kindref="member">sticker_format</ref></type>
        <definition>sticker_format dpp::sticker::format_type</definition>
        <argsstring></argsstring>
        <name>format_type</name>
        <briefdescription>
<para>type of sticker format </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="953" column="15" bodyfile="include/dpp/message.h" bodystart="953" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1a2c42ec44209ccf454785b796250caa7f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::sticker::available</definition>
        <argsstring></argsstring>
        <name>available</name>
        <briefdescription>
<para>Optional: whether this guild sticker can be used, may be false due to loss of Server Boosts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="955" column="5" bodyfile="include/dpp/message.h" bodystart="955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1af85380855738ab7cbbbd2cafa3414d7a" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::sticker::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>Optional: id of the guild that owns this sticker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="957" column="10" bodyfile="include/dpp/message.h" bodystart="957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1a7df72f041cfe63a855e05557a1e3285d" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref></type>
        <definition>user dpp::sticker::sticker_user</definition>
        <argsstring></argsstring>
        <name>sticker_user</name>
        <briefdescription>
<para>Optional: the user that uploaded the guild sticker. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="959" column="5" bodyfile="include/dpp/message.h" bodystart="959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1a621d5047225fb02a39523d74ce7e9130" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::sticker::sort_value</definition>
        <argsstring></argsstring>
        <name>sort_value</name>
        <briefdescription>
<para>Optional: the standard sticker&apos;s sort order within its pack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="961" column="8" bodyfile="include/dpp/message.h" bodystart="961" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1a9cfcb27f7aab9dde80e30cc80aef23a4" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sticker::filename</definition>
        <argsstring></argsstring>
        <name>filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Name of file to upload (when adding or editing a sticker) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="963" column="12" bodyfile="include/dpp/message.h" bodystart="963" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker_1aa6b5cd3ecbb5ee8ba11b6869eddb2203" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sticker::filecontent</definition>
        <argsstring></argsstring>
        <name>filecontent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>File content to upload (raw binary) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="965" column="12" bodyfile="include/dpp/message.h" bodystart="965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structdpp_1_1sticker_1a545e190bb391640dcc7492bf3b374006" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
        <definition>sticker &amp; dpp::sticker::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="923" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1sticker_1a9466413e7313eddf34e228320a33bd58" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>virtual json dpp::sticker::to_json_impl</definition>
        <argsstring>(bool with_id=true) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build JSON from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the ID is to be set in the JSON structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON of the invite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="929" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1sticker_1a0d0f399bc06d635cab0fc0cab9603b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::sticker::sticker</definition>
        <argsstring>()</argsstring>
        <name>sticker</name>
        <briefdescription>
<para>Construct a new sticker object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="970" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1sticker_1abc2bd8f112ccdff020bef2a3df98f8cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::sticker::~sticker</definition>
        <argsstring>()=default</argsstring>
        <name>~sticker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="972" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1sticker_1a2ec71424b884f2128b65198aebfc3de1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::sticker::get_url</definition>
        <argsstring>() const</argsstring>
        <name>get_url</name>
        <briefdescription>
<para>Get the sticker url. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string The sticker url or an empty string, if the id is empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="979" column="13"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1sticker_1a3b3c4734bbc30064627f5dd036ca26f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
        <definition>sticker &amp; dpp::sticker::set_filename</definition>
        <argsstring>(const std::string &amp;fn)</argsstring>
        <name>set_filename</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Set the filename. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>filename </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="987" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1sticker_1ad8ab299b9bb4e5165acadda87f703a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
        <definition>sticker &amp; dpp::sticker::set_file_content</definition>
        <argsstring>(const std::string &amp;fc)</argsstring>
        <name>set_file_content</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fc</declname>
        </param>
        <briefdescription>
<para>Set the file content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>raw file content contained in std::string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="995" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
        <definition>sticker  &amp; dpp::json_interface&lt; sticker  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="43" column="3" bodyfile="include/dpp/json_interface.h" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; sticker  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="55" column="6" bodyfile="include/dpp/json_interface.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; sticker  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="67" column="13" bodyfile="include/dpp/json_interface.h" bodystart="67" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents stickers received in messages. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::sticker</label>
        <link refid="structdpp_1_1sticker"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; sticker &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; sticker &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>bool</label>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::sticker</label>
        <link refid="structdpp_1_1sticker"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>pack_id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>asset</edgelabel>
          <edgelabel>description</edgelabel>
          <edgelabel>filecontent</edgelabel>
          <edgelabel>filename</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>tags</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>format_type</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>available</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>sticker_user</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>sort_value</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="4" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; sticker &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; sticker &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>sticker_format</label>
      </node>
      <node id="9">
        <label>sticker_type</label>
      </node>
      <node id="16">
        <label>uint16_t</label>
      </node>
      <node id="15">
        <label>uint32_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="17">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/message.h" line="915" column="1" bodyfile="include/dpp/message.h" bodystart="915" bodyend="997"/>
    <listofallmembers>
      <member refid="structdpp_1_1sticker_1af01f4dd7249de7c69f0a08e5b0e27459" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>asset</name></member>
      <member refid="structdpp_1_1sticker_1a2c42ec44209ccf454785b796250caa7f" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>available</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>build_json</name></member>
      <member refid="structdpp_1_1sticker_1a82f59ad29bbfdad53ed45177e1b77c96" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>description</name></member>
      <member refid="structdpp_1_1sticker_1aa6b5cd3ecbb5ee8ba11b6869eddb2203" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>filecontent</name></member>
      <member refid="structdpp_1_1sticker_1a9cfcb27f7aab9dde80e30cc80aef23a4" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>filename</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1sticker_1a545e190bb391640dcc7492bf3b374006" prot="protected" virt="non-virtual"><scope>dpp::sticker</scope><name>fill_from_json_impl</name></member>
      <member refid="structdpp_1_1sticker_1ad7972e12390ac0eea0027794e0c0fca6" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>format_type</name></member>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>get_creation_time</name></member>
      <member refid="structdpp_1_1sticker_1a2ec71424b884f2128b65198aebfc3de1" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>get_url</name></member>
      <member refid="structdpp_1_1sticker_1af85380855738ab7cbbbd2cafa3414d7a" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>id</name></member>
      <member refid="structdpp_1_1sticker_1ad8a0bad300dba6e39e1bfc71b69b1db8" prot="protected" virt="non-virtual"><scope>dpp::sticker</scope><name>json_interface&lt; sticker &gt;</name></member>
      <member refid="classdpp_1_1managed_1a49ce0d7fdbeab770ec46be27771c2285" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1aa3ee436836ab0e2bf4f842c2c2bc3b52" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a198b514f7e6a2b26734fd2dad85f481d" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1ac7a876ad1764b89f0568a1f1bc6bf640" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>managed</name></member>
      <member refid="structdpp_1_1sticker_1a6e76be43a608182d73ef15b4618afe7b" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>name</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1a48b542729f1352f93f1c60950986517f" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a4a4be34febb174eaee3c0964d0bf1e21" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>operator==</name></member>
      <member refid="structdpp_1_1sticker_1a88dc531bebffaf77068457ea360ac939" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>pack_id</name></member>
      <member refid="structdpp_1_1sticker_1ad8ab299b9bb4e5165acadda87f703a13" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>set_file_content</name></member>
      <member refid="structdpp_1_1sticker_1a3b3c4734bbc30064627f5dd036ca26f6" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>set_filename</name></member>
      <member refid="structdpp_1_1sticker_1a621d5047225fb02a39523d74ce7e9130" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>sort_value</name></member>
      <member refid="structdpp_1_1sticker_1a0d0f399bc06d635cab0fc0cab9603b6f" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>sticker</name></member>
      <member refid="structdpp_1_1sticker_1a7df72f041cfe63a855e05557a1e3285d" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>sticker_user</name></member>
      <member refid="structdpp_1_1sticker_1af0b92651f3d428ec8db4858133e826cd" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>tags</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>to_json</name></member>
      <member refid="structdpp_1_1sticker_1a9466413e7313eddf34e228320a33bd58" prot="protected" virt="virtual"><scope>dpp::sticker</scope><name>to_json_impl</name></member>
      <member refid="structdpp_1_1sticker_1a5d3b3f07c3a3ff4e9dc89887ee881d8c" prot="public" virt="non-virtual"><scope>dpp::sticker</scope><name>type</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::sticker</scope><name>~managed</name></member>
      <member refid="structdpp_1_1sticker_1abc2bd8f112ccdff020bef2a3df98f8cf" prot="public" virt="virtual"><scope>dpp::sticker</scope><name>~sticker</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
