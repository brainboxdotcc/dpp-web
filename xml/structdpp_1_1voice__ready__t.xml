<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdpp_1_1voice__ready__t" kind="struct" prot="public">
    <compoundname>dpp::voice_ready_t</compoundname>
    <basecompoundref refid="structdpp_1_1event__dispatch__t" prot="public" virt="non-virtual">dpp::event_dispatch_t</basecompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1voice__ready__t_1a337e1cfce8608d18283913dd94a1cdba" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref> *</type>
        <definition>class discord_voice_client* dpp::voice_ready_t::voice_client</definition>
        <argsstring></argsstring>
        <name>voice_client</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="860" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1voice__ready__t_1a176e7a9e1db9780c0dbf9a801d86794e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::voice_ready_t::voice_channel_id</definition>
        <argsstring></argsstring>
        <name>voice_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="861" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw event text </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="40" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::event_dispatch_t::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shard the event came from </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="43" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1voice__ready__t_1afe0122cb6850df07ca84ba3592181490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voice_ready_t::voice_ready_t</definition>
        <argsstring>(class discord_client *client, const std::string &amp;raw)</argsstring>
        <name>voice_ready_t</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on WILL ALWAYS be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event text as JSON </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="859" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="150" bodyend="150"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>voice user talking </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="15018">
        <label>dpp::voice_ready_t</label>
        <link refid="structdpp_1_1voice__ready__t"/>
        <childnode refid="15019" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15019">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="15099">
        <label>function&lt; void(const dpp::guild_integrations_update_t &amp;event)&gt;</label>
      </node>
      <node id="15037">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="15036" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="15029" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="15038" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="15040" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="15043" relation="usage">
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>numshards</edgelabel>
          <edgelabel>intents</edgelabel>
        </childnode>
        <childnode refid="15022" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="15046" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
      </node>
      <node id="15033">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="15034" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="15035" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="15063">
        <label>function&lt; void(const dpp::stage_instance_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15078">
        <label>function&lt; void(const dpp::message_create_t &amp;event)&gt;</label>
      </node>
      <node id="15064">
        <label>function&lt; void(const dpp::thread_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="15111">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="15028" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="15112" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="15022" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>session_id</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
      </node>
      <node id="15104">
        <label>function&lt; void(const dpp::voice_buffer_send_t &amp;event)&gt;</label>
      </node>
      <node id="15091">
        <label>function&lt; void(const dpp::user_update_t &amp;event)&gt;</label>
      </node>
      <node id="15040">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="15041" relation="public-inheritance">
        </childnode>
        <childnode refid="15042" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="15043" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="15044" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="15022" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="15045" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="15049">
        <label>function&lt; void(const dpp::thread_members_update_t &amp;event)&gt;</label>
      </node>
      <node id="15093">
        <label>function&lt; void(const dpp::invite_create_t &amp;event)&gt;</label>
      </node>
      <node id="15065">
        <label>function&lt; void(const dpp::guild_create_t &amp;event)&gt;</label>
      </node>
      <node id="15095">
        <label>function&lt; void(const dpp::guild_emojis_update_t &amp;event)&gt;</label>
      </node>
      <node id="15105">
        <label>function&lt; void(const dpp::guild_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="15031">
        <label>function&lt; int()&gt;</label>
      </node>
      <node id="15020">
        <label>dpp::voice_ready_t</label>
        <link refid="structdpp_1_1voice__ready__t"/>
        <childnode refid="15021" relation="public-inheritance">
        </childnode>
        <childnode refid="15028" relation="usage">
          <edgelabel>voice_channel_id</edgelabel>
        </childnode>
        <childnode refid="15112" relation="usage">
          <edgelabel>voice_client</edgelabel>
        </childnode>
      </node>
      <node id="15046">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="15047" relation="usage">
          <edgelabel>guild_role_create</edgelabel>
        </childnode>
        <childnode refid="15048" relation="usage">
          <edgelabel>voice_state_update</edgelabel>
        </childnode>
        <childnode refid="15049" relation="usage">
          <edgelabel>thread_members_update</edgelabel>
        </childnode>
        <childnode refid="15050" relation="usage">
          <edgelabel>channel_delete</edgelabel>
        </childnode>
        <childnode refid="15051" relation="usage">
          <edgelabel>thread_delete</edgelabel>
        </childnode>
        <childnode refid="15052" relation="usage">
          <edgelabel>integration_update</edgelabel>
        </childnode>
        <childnode refid="15053" relation="usage">
          <edgelabel>message_reaction_remove_emoji</edgelabel>
        </childnode>
        <childnode refid="15054" relation="usage">
          <edgelabel>resumed</edgelabel>
        </childnode>
        <childnode refid="15055" relation="usage">
          <edgelabel>presence_update</edgelabel>
        </childnode>
        <childnode refid="15056" relation="usage">
          <edgelabel>message_delete_bulk</edgelabel>
        </childnode>
        <childnode refid="15057" relation="usage">
          <edgelabel>voice_ready</edgelabel>
        </childnode>
        <childnode refid="15058" relation="usage">
          <edgelabel>guild_ban_remove</edgelabel>
        </childnode>
        <childnode refid="15059" relation="usage">
          <edgelabel>guild_role_delete</edgelabel>
        </childnode>
        <childnode refid="15060" relation="usage">
          <edgelabel>channel_update</edgelabel>
        </childnode>
        <childnode refid="15061" relation="usage">
          <edgelabel>stickers_update</edgelabel>
        </childnode>
        <childnode refid="15062" relation="usage">
          <edgelabel>guild_members_chunk</edgelabel>
        </childnode>
        <childnode refid="15063" relation="usage">
          <edgelabel>stage_instance_delete</edgelabel>
        </childnode>
        <childnode refid="15064" relation="usage">
          <edgelabel>thread_member_update</edgelabel>
        </childnode>
        <childnode refid="15065" relation="usage">
          <edgelabel>guild_create</edgelabel>
        </childnode>
        <childnode refid="15066" relation="usage">
          <edgelabel>message_reaction_remove</edgelabel>
        </childnode>
        <childnode refid="15067" relation="usage">
          <edgelabel>select_click</edgelabel>
        </childnode>
        <childnode refid="15068" relation="usage">
          <edgelabel>interaction_create</edgelabel>
        </childnode>
        <childnode refid="15069" relation="usage">
          <edgelabel>guild_join_request_delete</edgelabel>
        </childnode>
        <childnode refid="15070" relation="usage">
          <edgelabel>guild_member_add</edgelabel>
        </childnode>
        <childnode refid="15071" relation="usage">
          <edgelabel>voice_user_talking</edgelabel>
        </childnode>
        <childnode refid="15072" relation="usage">
          <edgelabel>thread_create</edgelabel>
        </childnode>
        <childnode refid="15073" relation="usage">
          <edgelabel>application_command_create</edgelabel>
        </childnode>
        <childnode refid="15074" relation="usage">
          <edgelabel>button_click</edgelabel>
        </childnode>
        <childnode refid="15075" relation="usage">
          <edgelabel>guild_update</edgelabel>
        </childnode>
        <childnode refid="15076" relation="usage">
          <edgelabel>message_reaction_remove_all</edgelabel>
        </childnode>
        <childnode refid="15077" relation="usage">
          <edgelabel>voice_receive</edgelabel>
        </childnode>
        <childnode refid="15078" relation="usage">
          <edgelabel>message_create</edgelabel>
        </childnode>
        <childnode refid="15079" relation="usage">
          <edgelabel>webhooks_update</edgelabel>
        </childnode>
        <childnode refid="15080" relation="usage">
          <edgelabel>message_reaction_add</edgelabel>
        </childnode>
        <childnode refid="15081" relation="usage">
          <edgelabel>message_delete</edgelabel>
        </childnode>
        <childnode refid="15082" relation="usage">
          <edgelabel>voice_track_marker</edgelabel>
        </childnode>
        <childnode refid="15083" relation="usage">
          <edgelabel>thread_list_sync</edgelabel>
        </childnode>
        <childnode refid="15084" relation="usage">
          <edgelabel>integration_delete</edgelabel>
        </childnode>
        <childnode refid="15085" relation="usage">
          <edgelabel>guild_ban_add</edgelabel>
        </childnode>
        <childnode refid="15086" relation="usage">
          <edgelabel>channel_pins_update</edgelabel>
        </childnode>
        <childnode refid="15087" relation="usage">
          <edgelabel>typing_start</edgelabel>
        </childnode>
        <childnode refid="15088" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="15089" relation="usage">
          <edgelabel>thread_update</edgelabel>
        </childnode>
        <childnode refid="15090" relation="usage">
          <edgelabel>integration_create</edgelabel>
        </childnode>
        <childnode refid="15091" relation="usage">
          <edgelabel>user_update</edgelabel>
        </childnode>
        <childnode refid="15092" relation="usage">
          <edgelabel>message_update</edgelabel>
        </childnode>
        <childnode refid="15093" relation="usage">
          <edgelabel>invite_create</edgelabel>
        </childnode>
        <childnode refid="15094" relation="usage">
          <edgelabel>invite_delete</edgelabel>
        </childnode>
        <childnode refid="15095" relation="usage">
          <edgelabel>guild_emojis_update</edgelabel>
        </childnode>
        <childnode refid="15096" relation="usage">
          <edgelabel>guild_delete</edgelabel>
        </childnode>
        <childnode refid="15097" relation="usage">
          <edgelabel>application_command_delete</edgelabel>
        </childnode>
        <childnode refid="15098" relation="usage">
          <edgelabel>application_command_update</edgelabel>
        </childnode>
        <childnode refid="15099" relation="usage">
          <edgelabel>guild_integrations_update</edgelabel>
        </childnode>
        <childnode refid="15100" relation="usage">
          <edgelabel>voice_server_update</edgelabel>
        </childnode>
        <childnode refid="15101" relation="usage">
          <edgelabel>guild_role_update</edgelabel>
        </childnode>
        <childnode refid="15102" relation="usage">
          <edgelabel>channel_create</edgelabel>
        </childnode>
        <childnode refid="15103" relation="usage">
          <edgelabel>stage_instance_create</edgelabel>
        </childnode>
        <childnode refid="15104" relation="usage">
          <edgelabel>voice_buffer_send</edgelabel>
        </childnode>
        <childnode refid="15105" relation="usage">
          <edgelabel>guild_member_update</edgelabel>
        </childnode>
        <childnode refid="15106" relation="usage">
          <edgelabel>guild_member_remove</edgelabel>
        </childnode>
        <childnode refid="15107" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
      </node>
      <node id="15053">
        <label>function&lt; void(const dpp::message_reaction_remove_emoji_t &amp;event)&gt;</label>
      </node>
      <node id="15060">
        <label>function&lt; void(const dpp::channel_update_t &amp;event)&gt;</label>
      </node>
      <node id="15102">
        <label>function&lt; void(const dpp::channel_create_t &amp;event)&gt;</label>
      </node>
      <node id="15028">
        <label>uint64_t</label>
      </node>
      <node id="15097">
        <label>function&lt; void(const dpp::application_command_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15094">
        <label>function&lt; void(const dpp::invite_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15080">
        <label>function&lt; void(const dpp::message_reaction_add_t &amp;event)&gt;</label>
      </node>
      <node id="15074">
        <label>function&lt; void(const dpp::button_click_t &amp;event)&gt;</label>
      </node>
      <node id="15062">
        <label>function&lt; void(const dpp::guild_members_chunk_t &amp;event)&gt;</label>
      </node>
      <node id="15051">
        <label>function&lt; void(const dpp::thread_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15070">
        <label>function&lt; void(const dpp::guild_member_add_t &amp;event)&gt;</label>
      </node>
      <node id="15087">
        <label>function&lt; void(const dpp::typing_start_t &amp;event)&gt;</label>
      </node>
      <node id="15084">
        <label>function&lt; void(const dpp::integration_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15107">
        <label>function&lt; void(const dpp::log_t &amp;event)&gt;</label>
      </node>
      <node id="15042">
        <label>uint16_t</label>
      </node>
      <node id="15072">
        <label>function&lt; void(const dpp::thread_create_t &amp;event)&gt;</label>
      </node>
      <node id="15029">
        <label>time_t</label>
      </node>
      <node id="15023">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="15106">
        <label>function&lt; void(const dpp::guild_member_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15083">
        <label>function&lt; void(const dpp::thread_list_sync_t &amp;event)&gt;</label>
      </node>
      <node id="15112">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="15025" relation="public-inheritance">
        </childnode>
        <childnode refid="15028" relation="usage">
          <edgelabel>server_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="15029" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="15037" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="15043" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="15022" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="15032" relation="usage">
          <edgelabel>terminating</edgelabel>
          <edgelabel>sodium_initialised</edgelabel>
        </childnode>
        <childnode refid="15109" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
      </node>
      <node id="15045">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="15028" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="15082">
        <label>function&lt; void(const dpp::voice_track_marker_t &amp;event)&gt;</label>
      </node>
      <node id="15071">
        <label>function&lt; void(const dpp::voice_user_talking_t &amp;event)&gt;</label>
      </node>
      <node id="15036">
        <label>double</label>
      </node>
      <node id="15026">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="15027" relation="usage">
          <edgelabel>custom_writeable_ready</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
        </childnode>
        <childnode refid="15028" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="15029" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="15030" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="15031" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="15032" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="15022" relation="usage">
          <edgelabel>port</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>buffer</edgelabel>
        </childnode>
        <childnode refid="15033" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="15081">
        <label>function&lt; void(const dpp::message_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15103">
        <label>function&lt; void(const dpp::stage_instance_create_t &amp;event)&gt;</label>
      </node>
      <node id="15043">
        <label>uint32_t</label>
      </node>
      <node id="15101">
        <label>function&lt; void(const dpp::guild_role_update_t &amp;event)&gt;</label>
      </node>
      <node id="15021">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="15022" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="15024" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
      </node>
      <node id="15044">
        <label>uint8_t</label>
      </node>
      <node id="15086">
        <label>function&lt; void(const dpp::channel_pins_update_t &amp;event)&gt;</label>
      </node>
      <node id="15039">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="15025">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="15026" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15038">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="15039" relation="usage">
          <edgelabel>role_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="15055">
        <label>function&lt; void(const dpp::presence_update_t &amp;event)&gt;</label>
      </node>
      <node id="15067">
        <label>function&lt; void(const dpp::select_click_t &amp;event)&gt;</label>
      </node>
      <node id="15052">
        <label>function&lt; void(const dpp::integration_update_t &amp;event)&gt;</label>
      </node>
      <node id="15075">
        <label>function&lt; void(const dpp::guild_update_t &amp;event)&gt;</label>
      </node>
      <node id="15077">
        <label>function&lt; void(const dpp::voice_receive_t &amp;event)&gt;</label>
      </node>
      <node id="15110">
        <label>std::unordered_map&lt; snowflake, dpp::voiceconn * &gt;</label>
        <childnode refid="15028" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="15111" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="15027">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="15069">
        <label>function&lt; void(const dpp::guild_join_request_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15024">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="15025" relation="public-inheritance">
        </childnode>
        <childnode refid="15036" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="15028" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="15029" relation="usage">
          <edgelabel>last_heartbeat_ack</edgelabel>
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="15037" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="15108" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="15043" relation="usage">
          <edgelabel>reconnects</edgelabel>
          <edgelabel>shard_id</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="15032" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="15022" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="15109" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="15110" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="15076">
        <label>function&lt; void(const dpp::message_reaction_remove_all_t &amp;event)&gt;</label>
      </node>
      <node id="15034">
        <label>SSL *</label>
      </node>
      <node id="15041">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="15028" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="15089">
        <label>function&lt; void(const dpp::thread_update_t &amp;event)&gt;</label>
      </node>
      <node id="15090">
        <label>function&lt; void(const dpp::integration_create_t &amp;event)&gt;</label>
      </node>
      <node id="15098">
        <label>function&lt; void(const dpp::application_command_update_t &amp;event)&gt;</label>
      </node>
      <node id="15035">
        <label>SSL_CTX *</label>
      </node>
      <node id="15085">
        <label>function&lt; void(const dpp::guild_ban_add_t &amp;event)&gt;</label>
      </node>
      <node id="15108">
        <label>mutex</label>
      </node>
      <node id="15096">
        <label>function&lt; void(const dpp::guild_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15054">
        <label>function&lt; void(const dpp::resumed_t &amp;event)&gt;</label>
      </node>
      <node id="15073">
        <label>function&lt; void(const dpp::application_command_create_t &amp;event)&gt;</label>
      </node>
      <node id="15079">
        <label>function&lt; void(const dpp::webhooks_update_t &amp;event)&gt;</label>
      </node>
      <node id="15092">
        <label>function&lt; void(const dpp::message_update_t &amp;event)&gt;</label>
      </node>
      <node id="15032">
        <label>bool</label>
      </node>
      <node id="15030">
        <label>SOCKET</label>
      </node>
      <node id="15068">
        <label>function&lt; void(const dpp::interaction_create_t &amp;event)&gt;</label>
      </node>
      <node id="15100">
        <label>function&lt; void(const dpp::voice_server_update_t &amp;event)&gt;</label>
      </node>
      <node id="15058">
        <label>function&lt; void(const dpp::guild_ban_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15050">
        <label>function&lt; void(const dpp::channel_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15047">
        <label>function&lt; void(const dpp::guild_role_create_t &amp;event)&gt;</label>
      </node>
      <node id="15066">
        <label>function&lt; void(const dpp::message_reaction_remove_t &amp;event)&gt;</label>
      </node>
      <node id="15088">
        <label>function&lt; void(const dpp::ready_t &amp;event)&gt;</label>
      </node>
      <node id="15048">
        <label>function&lt; void(const dpp::voice_state_update_t &amp;event)&gt;</label>
      </node>
      <node id="15061">
        <label>function&lt; void(const dpp::guild_stickers_update_t &amp;event)&gt;</label>
      </node>
      <node id="15057">
        <label>function&lt; void(const dpp::voice_ready_t &amp;event)&gt;</label>
      </node>
      <node id="15109">
        <label>native_handle_type</label>
      </node>
      <node id="15059">
        <label>function&lt; void(const dpp::guild_role_delete_t &amp;event)&gt;</label>
      </node>
      <node id="15022">
        <label>std::string</label>
        <childnode refid="15023" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15056">
        <label>function&lt; void(const dpp::message_delete_bulk_t &amp;event)&gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/dispatcher.h" line="852" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="852" bodyend="862"/>
    <listofallmembers>
      <member refid="structdpp_1_1event__dispatch__t_1a4ac4d287ca94f2389cf68e2534d9e1b0" prot="public" virt="non-virtual"><scope>dpp::voice_ready_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" virt="non-virtual"><scope>dpp::voice_ready_t</scope><name>from</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" virt="non-virtual"><scope>dpp::voice_ready_t</scope><name>raw_event</name></member>
      <member refid="structdpp_1_1voice__ready__t_1a176e7a9e1db9780c0dbf9a801d86794e" prot="public" virt="non-virtual"><scope>dpp::voice_ready_t</scope><name>voice_channel_id</name></member>
      <member refid="structdpp_1_1voice__ready__t_1a337e1cfce8608d18283913dd94a1cdba" prot="public" virt="non-virtual"><scope>dpp::voice_ready_t</scope><name>voice_client</name></member>
      <member refid="structdpp_1_1voice__ready__t_1afe0122cb6850df07ca84ba3592181490" prot="public" virt="non-virtual"><scope>dpp::voice_ready_t</scope><name>voice_ready_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
