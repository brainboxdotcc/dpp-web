<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1sku" kind="class" language="C++" prot="public">
    <compoundname>dpp::sku</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; sku &gt;</basecompoundref>
    <includes local="no">sku.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1sku_1ae140077631a8e1359f59373b40ef376d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; sku &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; sku &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="classdpp_1_1sku" kindref="compound">sku</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="174" column="28" bodyfile="include/dpp/sku.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1sku_1a6ecafe985aa6ca330911f096acb4785a" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::sku::application_id</definition>
        <argsstring></argsstring>
        <name>application_id</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>ID of the parent application. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="107" column="11" bodyfile="include/dpp/sku.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1sku_1a4cb8096993ee8a385d21e4bc785b5cdb" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::sku::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Flags bitmap from <ref refid="namespacedpp_1a8976e5ec3bb1e3550f315a6472fa45d1" kindref="member">dpp::sku_flags</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="122" column="10" bodyfile="include/dpp/sku.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1sku_1a9f0209da072e1b806c01e60b69bda4e4" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sku::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Customer-facing name of your premium offering. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="112" column="13" bodyfile="include/dpp/sku.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1sku_1a3cc60dac8aacaa304701e24dacf3d9e4" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sku::slug</definition>
        <argsstring></argsstring>
        <name>slug</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>System-generated URL slug based on the SKU&apos;s name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="117" column="13" bodyfile="include/dpp/sku.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1sku_1a7753ef8d043704fa9adb51db76ca51cc" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a6ee29b216d20d308c19e3568e49b6a63" kindref="member">sku_type</ref></type>
        <definition>sku_type dpp::sku::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <initializer>{sku_type::SUBSCRIPTION}</initializer>
        <briefdescription>
<para>The type of SKU. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="102" column="10" bodyfile="include/dpp/sku.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1sku_1a9f2fb17e6ce16045a29a260c95158d50" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1sku" kindref="compound">sku</ref> &amp;</type>
        <definition>sku &amp; dpp::sku::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="88" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1sku_1a96140e521bca5d3bf00efde88861a872" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>json dpp::sku::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build json for this SKU object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>include the ID in the json </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>json JSON object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="96" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1sku_1a4c57152dab86d5e82354f84a4aa4b4dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::sku::sku</definition>
        <argsstring>()=default</argsstring>
        <name>sku</name>
        <briefdescription>
<para>Construct a new SKU object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1sku_1aef33b5712ee821e1fbb32eb744f900cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::sku::sku</definition>
        <argsstring>(const snowflake id, const sku_type type, const snowflake application_id, const std::string name, const std::string slug, const uint16_t flags)</argsstring>
        <name>sku</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a6ee29b216d20d308c19e3568e49b6a63" kindref="member">sku_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>slug</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Construct a new SKU object with all data required. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the SKU. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of SKU (sku_type). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the parent application. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Customer-facing name of your premium offering. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slug</parametername>
</parameternamelist>
<parameterdescription>
<para>System-generated URL slug based on the SKU&apos;s name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags bitmap from <ref refid="namespacedpp_1a8976e5ec3bb1e3550f315a6472fa45d1" kindref="member">dpp::sku_flags</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; sku  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1sku" kindref="compound">sku</ref> &amp;</type>
        <definition>sku  &amp; dpp::json_interface&lt; sku  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1sku_1ab0727af9a3ff813df3cccc034b198156" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a6ee29b216d20d308c19e3568e49b6a63" kindref="member">sku_type</ref></type>
        <definition>sku_type dpp::sku::get_type</definition>
        <argsstring>() const</argsstring>
        <name>get_type</name>
        <briefdescription>
<para>Get the type of SKU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>sku_type SKU type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="147" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1sku_1ac9a773417b6b00183ef2afa2727babb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::sku::is_available</definition>
        <argsstring>() const</argsstring>
        <name>is_available</name>
        <briefdescription>
<para>Is the SKU available for purchase? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the SKU can be purchased. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="154" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1sku_1a97986b7c5d8ba2750e462f2e7c184f41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::sku::is_guild_subscription</definition>
        <argsstring>() const</argsstring>
        <name>is_guild_subscription</name>
        <briefdescription>
<para>Is the SKU a guild subscription? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the SKU is a guild subscription. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="161" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1sku_1addbbf3d08da568fa8680647e6761bccb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::sku::is_user_subscription</definition>
        <argsstring>() const</argsstring>
        <name>is_user_subscription</name>
        <briefdescription>
<para>Is the SKU a user subscription? </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the SKU is a user subscription </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sku.h" line="168" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; sku  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A definition of a discord SKU. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::sku</label>
        <link refid="classdpp_1_1sku"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; sku &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; sku &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::sku</label>
        <link refid="classdpp_1_1sku"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>application_id</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>slug</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; sku &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; sku &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>sku_type</label>
      </node>
      <node id="9">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="8">
        <label>std::string</label>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>uint16_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/sku.h" line="80" column="1" bodyfile="include/dpp/sku.h" bodystart="80" bodyend="169"/>
    <listofallmembers>
      <member refid="classdpp_1_1sku_1a6ecafe985aa6ca330911f096acb4785a" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>application_id</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>build_json</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1sku_1a9f2fb17e6ce16045a29a260c95158d50" prot="protected" virt="non-virtual"><scope>dpp::sku</scope><name>fill_from_json_impl</name></member>
      <member refid="classdpp_1_1sku_1a4cb8096993ee8a385d21e4bc785b5cdb" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>flags</name></member>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1sku_1ab0727af9a3ff813df3cccc034b198156" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>get_type</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>id</name></member>
      <member refid="classdpp_1_1sku_1ac9a773417b6b00183ef2afa2727babb9" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>is_available</name></member>
      <member refid="classdpp_1_1sku_1a97986b7c5d8ba2750e462f2e7c184f41" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>is_guild_subscription</name></member>
      <member refid="classdpp_1_1sku_1addbbf3d08da568fa8680647e6761bccb" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>is_user_subscription</name></member>
      <member refid="classdpp_1_1sku_1ae140077631a8e1359f59373b40ef376d" prot="protected" virt="non-virtual"><scope>dpp::sku</scope><name>json_interface&lt; sku &gt;</name></member>
      <member refid="classdpp_1_1managed_1a49ce0d7fdbeab770ec46be27771c2285" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1aa3ee436836ab0e2bf4f842c2c2bc3b52" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a198b514f7e6a2b26734fd2dad85f481d" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1ac7a876ad1764b89f0568a1f1bc6bf640" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>managed</name></member>
      <member refid="classdpp_1_1sku_1a9f0209da072e1b806c01e60b69bda4e4" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>name</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1a48b542729f1352f93f1c60950986517f" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a4a4be34febb174eaee3c0964d0bf1e21" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>operator==</name></member>
      <member refid="classdpp_1_1sku_1a4c57152dab86d5e82354f84a4aa4b4dc" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>sku</name></member>
      <member refid="classdpp_1_1sku_1aef33b5712ee821e1fbb32eb744f900cd" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>sku</name></member>
      <member refid="classdpp_1_1sku_1a3cc60dac8aacaa304701e24dacf3d9e4" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>slug</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>to_json</name></member>
      <member refid="classdpp_1_1sku_1a96140e521bca5d3bf00efde88861a872" prot="protected" virt="non-virtual"><scope>dpp::sku</scope><name>to_json_impl</name></member>
      <member refid="classdpp_1_1sku_1a7753ef8d043704fa9adb51db76ca51cc" prot="public" virt="non-virtual"><scope>dpp::sku</scope><name>type</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::sku</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
