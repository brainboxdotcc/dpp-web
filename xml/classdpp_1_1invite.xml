<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1invite" kind="class" language="C++" prot="public">
    <compoundname>dpp::invite</compoundname>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; invite &gt;</basecompoundref>
    <includes local="no">invite.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1invite_1a26f76de18e3f4d24574d49ec96163170" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::invite::code</definition>
        <argsstring></argsstring>
        <name>code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invite code </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="51" column="13" bodyfile="include/dpp/invite.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a58eb1d4ad8f76fa8f21f00ab7b2e0253" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::invite::expires_at</definition>
        <argsstring></argsstring>
        <name>expires_at</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Readonly expiration timestamp of this invite or 0 if the invite doesn&apos;t expire <simplesect kind="note"><para>Only returned from <ref refid="classdpp_1_1cluster_1a6dbddcf4f753ced02d8ec693dcaf583c" kindref="member">cluster::invite_get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="55" column="8" bodyfile="include/dpp/invite.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a3adbf1eb0e895b46bee120a1d4c24ab0" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::invite::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild ID this invite is for </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="58" column="11" bodyfile="include/dpp/invite.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1af28d5be957fad9b504a3b926c8d2f42e" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref></type>
        <definition>guild dpp::invite::destination_guild</definition>
        <argsstring></argsstring>
        <name>destination_guild</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The partial guild this invite is for. Only filled in retrieved invites </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="61" column="7" bodyfile="include/dpp/invite.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1aedc01d96281305a15b3d23a994927a5c" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::invite::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Channel ID this invite is for </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="64" column="11" bodyfile="include/dpp/invite.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1ab5a3f567aed0644f3252a88511006fa3" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref></type>
        <definition>channel dpp::invite::destination_channel</definition>
        <argsstring></argsstring>
        <name>destination_channel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The partial channel this invite is for. Only filled in retrieved invites </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="67" column="9" bodyfile="include/dpp/invite.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a6142074754432a855a7e37d731a52f88" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::invite::inviter_id</definition>
        <argsstring></argsstring>
        <name>inviter_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User ID who created this invite <xrefsect id="deprecated_1_deprecated000036"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the <computeroutput>inviter</computeroutput> field instead </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="71" column="11" bodyfile="include/dpp/invite.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1ac1894b3222c890276ae410832a2426dd" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref></type>
        <definition>user dpp::invite::inviter</definition>
        <argsstring></argsstring>
        <name>inviter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User who created this invite </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="74" column="6" bodyfile="include/dpp/invite.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1ad9a3073a99b276032dce0e850b21a955" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::invite::target_user_id</definition>
        <argsstring></argsstring>
        <name>target_user_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The user ID whose stream to display for this voice channel stream invite </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="77" column="11" bodyfile="include/dpp/invite.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a32f6cbfefeba83e7e6b5e8b2093bdf43" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a7744393c99f4267d89195749406eed3b" kindref="member">invite_target_t</ref></type>
        <definition>invite_target_t dpp::invite::target_type</definition>
        <argsstring></argsstring>
        <name>target_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Target type for this voice channel invite </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="80" column="17" bodyfile="include/dpp/invite.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a76dac8c741c2315e6be8733d12856b43" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::invite::approximate_presence_count</definition>
        <argsstring></argsstring>
        <name>approximate_presence_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximate number of online users <simplesect kind="note"><para>Only returned from <ref refid="classdpp_1_1cluster_1a6dbddcf4f753ced02d8ec693dcaf583c" kindref="member">cluster::invite_get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="84" column="10" bodyfile="include/dpp/invite.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a1eeea3785ede65e9a93640352674a6c3" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::invite::approximate_member_count</definition>
        <argsstring></argsstring>
        <name>approximate_member_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximate number of total users online and offline <simplesect kind="note"><para>Only returned from <ref refid="classdpp_1_1cluster_1a6dbddcf4f753ced02d8ec693dcaf583c" kindref="member">cluster::invite_get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="88" column="10" bodyfile="include/dpp/invite.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1af48b1a919db49531f09a01f8e8115f64" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::invite::max_age</definition>
        <argsstring></argsstring>
        <name>max_age</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duration (in seconds) after which the invite expires, or 0 for no expiration. Must be between 0 and 604800 (7 days). Defaults to 86400 (1 day) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="91" column="10" bodyfile="include/dpp/invite.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a52eec4facac2e63d9f46d783d763f066" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::invite::max_uses</definition>
        <argsstring></argsstring>
        <name>max_uses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of uses, or 0 for unlimited. Must be between 0 and 100. Defaults to 0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="94" column="9" bodyfile="include/dpp/invite.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a3cbbaea6f39490617d8e6b2e452a4db5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::invite::temporary</definition>
        <argsstring></argsstring>
        <name>temporary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this invite only grants temporary membership </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="97" column="6" bodyfile="include/dpp/invite.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a4d933ea3a2dc9a442ff711c63339bb1d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::invite::unique</definition>
        <argsstring></argsstring>
        <name>unique</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if this invite should not replace or &quot;attach to&quot; similar invites </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="100" column="6" bodyfile="include/dpp/invite.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a256cb8ecb38af03dcdfb7befe4b4f286" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::invite::uses</definition>
        <argsstring></argsstring>
        <name>uses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>How many times this invite has been used </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="103" column="10" bodyfile="include/dpp/invite.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1a95bda6b60159f20163f6953806e06d08" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref></type>
        <definition>stage_instance dpp::invite::stage</definition>
        <argsstring></argsstring>
        <name>stage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stage instance data if there is a public stage instance in the stage channel this invite is for <xrefsect id="deprecated_1_deprecated000037"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Deprecated </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="107" column="16" bodyfile="include/dpp/invite.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1invite_1ad079d418c2ad52e5d1e980c3e3fc66a5" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::invite::created_at</definition>
        <argsstring></argsstring>
        <name>created_at</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Timestamp at which the invite was created </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="110" column="8" bodyfile="include/dpp/invite.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1invite_1ad3c1ed34b2256dcbf2dce82436071f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::invite::invite</definition>
        <argsstring>()</argsstring>
        <name>invite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1invite_1a9342a04153b6a12d19f726b351acdb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::invite::~invite</definition>
        <argsstring>()=default</argsstring>
        <name>~invite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="118" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1invite_1a5b326e237960271455ea965b6cd46207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
        <definition>invite &amp; dpp::invite::set_max_age</definition>
        <argsstring>(const uint32_t max_age_)</argsstring>
        <name>set_max_age</name>
        <param>
          <type>const uint32_t</type>
          <declname>max_age_</declname>
        </param>
        <briefdescription>
<para>Set the max age after which the invite expires. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_age_</parametername>
</parameternamelist>
<parameterdescription>
<para>The duration in seconds, or 0 for no expiration. Must be between 0 and 604800 (7 days) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite&amp; reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="126" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1invite_1a3d4a72f89fdb7aa8c4719ff951d6a410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
        <definition>invite &amp; dpp::invite::set_max_uses</definition>
        <argsstring>(const uint8_t max_uses_)</argsstring>
        <name>set_max_uses</name>
        <param>
          <type>const uint8_t</type>
          <declname>max_uses_</declname>
        </param>
        <briefdescription>
<para>Set the maximum number of uses for this invite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_uses_</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of uses, or 0 for unlimited. Must be between 0 and 100 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite&amp; reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="134" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1invite_1a207f972e251808bc43ba532a5dd5260e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
        <definition>invite &amp; dpp::invite::set_target_user_id</definition>
        <argsstring>(const snowflake user_id)</argsstring>
        <name>set_target_user_id</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Set the target user id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The user ID whose stream to display for this voice channel stream invite </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite&amp; reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="142" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1invite_1a158f07d5fc6eaaeebabb7d7bb22b0998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
        <definition>invite &amp; dpp::invite::set_target_type</definition>
        <argsstring>(const invite_target_t type)</argsstring>
        <name>set_target_type</name>
        <param>
          <type>const <ref refid="namespacedpp_1a7744393c99f4267d89195749406eed3b" kindref="member">invite_target_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Set the target type for this voice channel invite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>invite_target_t Target type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite&amp; reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="150" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1invite_1a8d9e3fe14122f887bbeaac1b91144d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
        <definition>invite &amp; dpp::invite::set_temporary</definition>
        <argsstring>(const bool is_temporary)</argsstring>
        <name>set_temporary</name>
        <param>
          <type>const bool</type>
          <declname>is_temporary</declname>
        </param>
        <briefdescription>
<para>Set temporary property of this invite object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_temporary</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether this invite only grants temporary membership </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite&amp; reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="158" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1invite_1a68fa8536cb120384c8a336370c31c1c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
        <definition>invite &amp; dpp::invite::set_unique</definition>
        <argsstring>(const bool is_unique)</argsstring>
        <name>set_unique</name>
        <param>
          <type>const bool</type>
          <declname>is_unique</declname>
        </param>
        <briefdescription>
<para>Set unique property of this invite object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_unique</parametername>
</parameternamelist>
<parameterdescription>
<para>True if this invite should not replace or &quot;attach to&quot; similar invites </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite&amp; reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="166" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1invite_1a1b2060938ed618edb951114537269c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
        <definition>invite &amp; dpp::invite::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="172" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1invite_1a7f841f76c96636c0cc0d51ff256d6500" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string dpp::invite::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <reimplements refid="structdpp_1_1json__interface_1a287c22f692ee3d25b6f9b320ff35baa1">build_json</reimplements>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build JSON from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Include ID in JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON text of the invite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/invite.h" line="178" column="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an invite to a discord guild or channel. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::invite</label>
        <link refid="classdpp_1_1invite"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; invite &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; invite &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="19">
        <label>K</label>
      </node>
      <node id="20">
        <label>T</label>
      </node>
      <node id="36">
        <label>auto_archive_duration_t</label>
      </node>
      <node id="41">
        <label>bool</label>
      </node>
      <node id="37">
        <label>default_forum_sort_order_t</label>
      </node>
      <node id="26">
        <label>default_message_notification_t</label>
      </node>
      <node id="32">
        <label>dpp::channel</label>
        <link refid="classdpp_1_1channel"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>rtc_region</edgelabel>
          <edgelabel>topic</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>available_tags</edgelabel>
          <edgelabel>permission_overwrites</edgelabel>
          <edgelabel>recipients</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>default_reaction</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>icon</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>last_message_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>parent_id</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>last_pin_timestamp</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>bitrate</edgelabel>
          <edgelabel>default_thread_rate_limit_per_user</edgelabel>
          <edgelabel>flags</edgelabel>
          <edgelabel>position</edgelabel>
          <edgelabel>rate_limit_per_user</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>default_auto_archive_duration</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>default_sort_order</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>user_limit</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>vanity_url_code</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>channels</edgelabel>
          <edgelabel>emojis</edgelabel>
          <edgelabel>roles</edgelabel>
          <edgelabel>threads</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>voice_members</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>members</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>welcome_screen</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>banner</edgelabel>
          <edgelabel>discovery_splash</edgelabel>
          <edgelabel>icon</edgelabel>
          <edgelabel>splash</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>afk_channel_id</edgelabel>
          <edgelabel>application_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>public_updates_channel_id</edgelabel>
          <edgelabel>rules_channel_id</edgelabel>
          <edgelabel>safety_alerts_channel_id</edgelabel>
          <edgelabel>system_channel_id</edgelabel>
          <edgelabel>widget_channel_id</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>max_members</edgelabel>
          <edgelabel>max_presences</edgelabel>
          <edgelabel>member_count</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>flags_extra</edgelabel>
          <edgelabel>premium_subscription_count</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>afk_timeout</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>max_video_channel_users</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>default_message_notifications</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>premium_tier</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>verification_level</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>explicit_content_filter</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>mfa_level</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>nsfw_level</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="4" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::invite</label>
        <link refid="classdpp_1_1invite"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>code</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>created_at</edgelabel>
          <edgelabel>expires_at</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>inviter_id</edgelabel>
          <edgelabel>target_user_id</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>destination_guild</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>destination_channel</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>inviter</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>target_type</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>approximate_member_count</edgelabel>
          <edgelabel>approximate_presence_count</edgelabel>
          <edgelabel>max_age</edgelabel>
          <edgelabel>uses</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>max_uses</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>temporary</edgelabel>
          <edgelabel>unique</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>stage</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="10">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="7" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>dpp::permission</label>
        <link refid="classdpp_1_1permission"/>
        <childnode refid="8" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="8" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>dpp::stage_instance</label>
        <link refid="structdpp_1_1stage__instance"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="43" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>topic</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>privacy_level</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>discoverable_disabled</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="8" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>dpp::welcome_screen</label>
        <link refid="structdpp_1_1welcome__screen"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>welcome_channels</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>guild_afk_timeout_t</label>
      </node>
      <node id="29">
        <label>guild_explicit_content_t</label>
      </node>
      <node id="31">
        <label>guild_nsfw_level_t</label>
      </node>
      <node id="27">
        <label>guild_premium_tier_t</label>
      </node>
      <node id="40">
        <label>invite_target_t</label>
      </node>
      <node id="33">
        <label>dpp::json_interface&lt; channel &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; channel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>dpp::json_interface&lt; guild &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; guild &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; invite &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; invite &gt;</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>dpp::json_interface&lt; stage_instance &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; stage_instance &gt;</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>dpp::json_interface&lt; welcome_screen &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; welcome_screen &gt;</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>mfa_level_t</label>
      </node>
      <node id="44">
        <label>stage_privacy_level</label>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="13">
        <label>map&lt;</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>std::unordered_map&lt; K, T &gt;</label>
        <childnode refid="19" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>variant&lt;</label>
      </node>
      <node id="12">
        <label>vector&lt;</label>
      </node>
      <node id="6">
        <label>time_t</label>
      </node>
      <node id="17">
        <label>uint16_t</label>
      </node>
      <node id="23">
        <label>uint32_t</label>
      </node>
      <node id="8">
        <label>uint64_t</label>
      </node>
      <node id="25">
        <label>uint8_t</label>
      </node>
      <node id="14">
        <label>std::unordered_map&lt; snowflake, guild_member &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="18" relation="template-instance">
          <edgelabel>&lt; snowflake, guild_member &gt;</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>verification_level_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/invite.h" line="47" column="1" bodyfile="include/dpp/invite.h" bodystart="47" bodyend="180"/>
    <listofallmembers>
      <member refid="classdpp_1_1invite_1a1eeea3785ede65e9a93640352674a6c3" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>approximate_member_count</name></member>
      <member refid="classdpp_1_1invite_1a76dac8c741c2315e6be8733d12856b43" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>approximate_presence_count</name></member>
      <member refid="classdpp_1_1invite_1a7f841f76c96636c0cc0d51ff256d6500" prot="public" virt="virtual"><scope>dpp::invite</scope><name>build_json</name></member>
      <member refid="classdpp_1_1invite_1aedc01d96281305a15b3d23a994927a5c" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>channel_id</name></member>
      <member refid="classdpp_1_1invite_1a26f76de18e3f4d24574d49ec96163170" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>code</name></member>
      <member refid="classdpp_1_1invite_1ad079d418c2ad52e5d1e980c3e3fc66a5" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>created_at</name></member>
      <member refid="classdpp_1_1invite_1ab5a3f567aed0644f3252a88511006fa3" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>destination_channel</name></member>
      <member refid="classdpp_1_1invite_1af28d5be957fad9b504a3b926c8d2f42e" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>destination_guild</name></member>
      <member refid="classdpp_1_1invite_1a58eb1d4ad8f76fa8f21f00ab7b2e0253" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>expires_at</name></member>
      <member refid="classdpp_1_1invite_1a1b2060938ed618edb951114537269c14" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1invite_1a3adbf1eb0e895b46bee120a1d4c24ab0" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1invite_1ad3c1ed34b2256dcbf2dce82436071f8b" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>invite</name></member>
      <member refid="classdpp_1_1invite_1ac1894b3222c890276ae410832a2426dd" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>inviter</name></member>
      <member refid="classdpp_1_1invite_1a6142074754432a855a7e37d731a52f88" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>inviter_id</name></member>
      <member refid="classdpp_1_1invite_1af48b1a919db49531f09a01f8e8115f64" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>max_age</name></member>
      <member refid="classdpp_1_1invite_1a52eec4facac2e63d9f46d783d763f066" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>max_uses</name></member>
      <member refid="classdpp_1_1invite_1a5b326e237960271455ea965b6cd46207" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>set_max_age</name></member>
      <member refid="classdpp_1_1invite_1a3d4a72f89fdb7aa8c4719ff951d6a410" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>set_max_uses</name></member>
      <member refid="classdpp_1_1invite_1a158f07d5fc6eaaeebabb7d7bb22b0998" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>set_target_type</name></member>
      <member refid="classdpp_1_1invite_1a207f972e251808bc43ba532a5dd5260e" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>set_target_user_id</name></member>
      <member refid="classdpp_1_1invite_1a8d9e3fe14122f887bbeaac1b91144d8d" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>set_temporary</name></member>
      <member refid="classdpp_1_1invite_1a68fa8536cb120384c8a336370c31c1c3" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>set_unique</name></member>
      <member refid="classdpp_1_1invite_1a95bda6b60159f20163f6953806e06d08" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>stage</name></member>
      <member refid="classdpp_1_1invite_1a32f6cbfefeba83e7e6b5e8b2093bdf43" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>target_type</name></member>
      <member refid="classdpp_1_1invite_1ad9a3073a99b276032dce0e850b21a955" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>target_user_id</name></member>
      <member refid="classdpp_1_1invite_1a3cbbaea6f39490617d8e6b2e452a4db5" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>temporary</name></member>
      <member refid="classdpp_1_1invite_1a4d933ea3a2dc9a442ff711c63339bb1d" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>unique</name></member>
      <member refid="classdpp_1_1invite_1a256cb8ecb38af03dcdfb7befe4b4f286" prot="public" virt="non-virtual"><scope>dpp::invite</scope><name>uses</name></member>
      <member refid="classdpp_1_1invite_1a9342a04153b6a12d19f726b351acdb55" prot="public" virt="virtual"><scope>dpp::invite</scope><name>~invite</name></member>
      <member refid="structdpp_1_1json__interface_1a8fea07be649b8bb166c28c5a7daccf53" prot="protected" virt="non-virtual"><scope>dpp::invite</scope><name>~json_interface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
