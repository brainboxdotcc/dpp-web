<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base" kind="class" language="C++" prot="public">
    <compoundname>dpp::detail::coroutine::coroutine_base</compoundname>
    <derivedcompoundref refid="classdpp_1_1coroutine" prot="private" virt="non-virtual">dpp::coroutine&lt; R &gt;</derivedcompoundref>
    <includes local="no">coroutine.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a3103504fe8b2834f40d0cbbfe0fde3f7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct promise_t&lt; R &gt;</definition>
        <argsstring></argsstring>
        <name>promise_t&lt; R &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1detail_1_1coroutine_1_1promise__t" kindref="compound">promise_t</ref>&lt; R &gt;</type>
        </param>
        <briefdescription>
<para>Promise has friend access for the constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="586" column="2" bodyfile="include/dpp/coro/coroutine.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1affcd44a3307517d7917953bd0b07572a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1_1detail_1_1coroutine_1a8277dc2e5b05c0232a9237b4a5894e0f" kindref="member">detail::coroutine::handle_t</ref>&lt; R &gt;</type>
        <definition>detail::coroutine::handle_t&lt;R&gt; dpp::detail::coroutine::coroutine_base&lt; R &gt;::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Coroutine handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="75" column="29" bodyfile="include/dpp/coro/coroutine.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a9cf8c4c67e42cb777f60cfce009bb69b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::coroutine::coroutine_base&lt; R &gt;::coroutine_base</definition>
        <argsstring>(detail::coroutine::handle_t&lt; R &gt; h)</argsstring>
        <name>coroutine_base</name>
        <param>
          <type><ref refid="namespacedpp_1_1detail_1_1coroutine_1a8277dc2e5b05c0232a9237b4a5894e0f" kindref="member">detail::coroutine::handle_t</ref>&lt; R &gt;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Construct from a handle. Internal use only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="81" column="1" bodyfile="include/dpp/coro/coroutine.h" bodystart="81" bodyend="81"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a7b809bb98acbd57f5244cca0943b5337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::coroutine::coroutine_base&lt; R &gt;::coroutine_base</definition>
        <argsstring>()=default</argsstring>
        <name>coroutine_base</name>
        <briefdescription>
<para>Default constructor, creates an empty coroutine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a9a669e87406429979c9a9f0ec9cc8473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::coroutine::coroutine_base&lt; R &gt;::coroutine_base</definition>
        <argsstring>(const coroutine_base &amp;)=delete</argsstring>
        <name>coroutine_base</name>
        <param>
          <type>const <ref refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base" kindref="compound">coroutine_base</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1ac2ae81dcaaa9d49a99da3453309c27b8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::coroutine::coroutine_base&lt; R &gt;::coroutine_base</definition>
        <argsstring>(coroutine_base &amp;&amp;other) noexcept</argsstring>
        <name>coroutine_base</name>
        <param>
          <type><ref refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base" kindref="compound">coroutine_base</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor, grabs another coroutine&apos;s handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Coroutine to move the handle from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="99" column="1" bodyfile="include/dpp/coro/coroutine.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a42fb5c28483f3dcda3c20ae0165ede59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::detail::coroutine::coroutine_base&lt; R &gt;::~coroutine_base</definition>
        <argsstring>()</argsstring>
        <name>~coroutine_base</name>
        <briefdescription>
<para>Destructor, destroys the handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="104" column="1" bodyfile="include/dpp/coro/coroutine.h" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1abbbceead5c7acc87f6063d23f1de9890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base" kindref="compound">coroutine_base</ref> &amp;</type>
        <definition>coroutine_base &amp; dpp::detail::coroutine::coroutine_base&lt; R &gt;::operator=</definition>
        <argsstring>(const coroutine_base &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base" kindref="compound">coroutine_base</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy assignment is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="113" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a8e50838f63daaec08e3a3802298cfe66" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base" kindref="compound">coroutine_base</ref> &amp;</type>
        <definition>coroutine_base &amp; dpp::detail::coroutine::coroutine_base&lt; R &gt;::operator=</definition>
        <argsstring>(coroutine_base &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base" kindref="compound">coroutine_base</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment, grabs another coroutine&apos;s handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Coroutine to move the handle from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="120" column="16" bodyfile="include/dpp/coro/coroutine.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1af6a97480cc28d55b45d907aeb59d6f5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::detail::coroutine::coroutine_base&lt; R &gt;::await_ready</definition>
        <argsstring>() const</argsstring>
        <name>await_ready</name>
        <briefdescription>
<para>First function called by the standard library when the coroutine is co_await-ed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Do not call this manually, use the co_await keyword instead. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_operation_exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if the coroutine is empty or finished. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool Whether the coroutine is done </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="132" column="7" bodyfile="include/dpp/coro/coroutine.h" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a1314d8f58cc87fc5f9995b9a79e4316f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacedpp_1_1detail_1_1coroutine_1a8277dc2e5b05c0232a9237b4a5894e0f" kindref="member">handle_t</ref>&lt; R &gt;</type>
        <definition>handle_t&lt; R &gt; dpp::detail::coroutine::coroutine_base&lt; R &gt;::await_suspend</definition>
        <argsstring>(detail::std_coroutine::coroutine_handle&lt; T &gt; caller) noexcept</argsstring>
        <name>await_suspend</name>
        <param>
          <type>detail::std_coroutine::coroutine_handle&lt; T &gt;</type>
          <declname>caller</declname>
        </param>
        <briefdescription>
<para>Second function called by the standard library when the coroutine is co_await-ed. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the calling coroutine in the promise to resume when this coroutine suspends.</para>
<para><simplesect kind="remark"><para>Do not call this manually, use the co_await keyword instead. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caller</parametername>
</parameternamelist>
<parameterdescription>
<para>The calling coroutine, now suspended </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="148" column="11" bodyfile="include/dpp/coro/coroutine.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1ac47d7d7b605e9a20f1f0f5a7b59701d7" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dpp::detail::coroutine::coroutine_base&lt; R &gt;::await_resume</definition>
        <argsstring>() &amp;</argsstring>
        <name>await_resume</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is resumed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Do not call this manually, use the co_await keyword instead. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Throws</parametername>
</parameternamelist>
<parameterdescription>
<para>any exception thrown or uncaught by the coroutine </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>R The result of the coroutine. It is given to the caller as a result to <computeroutput>co_await</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="160" column="10" bodyfile="include/dpp/coro/coroutine.h" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a4176f65261061d42db916a5263e4c9c5" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dpp::detail::coroutine::coroutine_base&lt; R &gt;::await_resume</definition>
        <argsstring>() const &amp;</argsstring>
        <name>await_resume</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is resumed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Do not call this manually, use the co_await keyword instead. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Throws</parametername>
</parameternamelist>
<parameterdescription>
<para>any exception thrown or uncaught by the coroutine </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>R The result of the coroutine. It is given to the caller as a result to <computeroutput>co_await</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="171" column="11" bodyfile="include/dpp/coro/coroutine.h" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1afeaea1a4f7219b8a1797dc9705aa27ef" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dpp::detail::coroutine::coroutine_base&lt; R &gt;::await_resume</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>await_resume</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is resumed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Do not call this manually, use the co_await keyword instead. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Throws</parametername>
</parameternamelist>
<parameterdescription>
<para>any exception thrown or uncaught by the coroutine </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>R The result of the coroutine. It is given to the caller as a result to <computeroutput>co_await</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="182" column="11" bodyfile="include/dpp/coro/coroutine.h" bodystart="182" bodyend="184"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class of dpp::coroutine&lt;R&gt;. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>This class should not be used directly by a user, use dpp::coroutine&lt;R&gt; instead. </para>
</simplesect>
<simplesect kind="note"><para>This class contains all the functions used internally by co_await. It is intentionally opaque and a private base of dpp::coroutine&lt;R&gt; so a user cannot call await_suspend and await_resume directly. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::coroutine&lt; R &gt;</label>
        <link refid="classdpp_1_1coroutine"/>
        <childnode refid="1" relation="private-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::detail::coroutine::coroutine_base&lt; R &gt;</label>
        <link refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>handle_t&lt;</label>
      </node>
      <node id="1">
        <label>dpp::detail::coroutine::coroutine_base&lt; R &gt;</label>
        <link refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base"/>
        <childnode refid="2" relation="usage">
          <edgelabel>handle</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro/coroutine.h" line="65" column="1" bodyfile="include/dpp/coro/coroutine.h" bodystart="65" bodyend="185"/>
    <listofallmembers>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1af6a97480cc28d55b45d907aeb59d6f5b" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>await_ready</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1ac47d7d7b605e9a20f1f0f5a7b59701d7" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>await_resume</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a4176f65261061d42db916a5263e4c9c5" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>await_resume</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1afeaea1a4f7219b8a1797dc9705aa27ef" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>await_resume</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a1314d8f58cc87fc5f9995b9a79e4316f" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>await_suspend</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a9cf8c4c67e42cb777f60cfce009bb69b" prot="private" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>coroutine_base</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a7b809bb98acbd57f5244cca0943b5337" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>coroutine_base</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a9a669e87406429979c9a9f0ec9cc8473" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>coroutine_base</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1ac2ae81dcaaa9d49a99da3453309c27b8" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>coroutine_base</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1affcd44a3307517d7917953bd0b07572a" prot="protected" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>handle</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1abbbceead5c7acc87f6063d23f1de9890" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>operator=</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a8e50838f63daaec08e3a3802298cfe66" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>operator=</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a3103504fe8b2834f40d0cbbfe0fde3f7" prot="protected" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>promise_t&lt; R &gt;</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine_1_1coroutine__base_1a42fb5c28483f3dcda3c20ae0165ede59" prot="public" virt="non-virtual"><scope>dpp::detail::coroutine::coroutine_base</scope><name>~coroutine_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
