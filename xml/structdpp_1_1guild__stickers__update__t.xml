<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdpp_1_1guild__stickers__update__t" kind="struct" prot="public">
    <compoundname>dpp::guild_stickers_update_t</compoundname>
    <basecompoundref refid="structdpp_1_1event__dispatch__t" prot="public" virt="non-virtual">dpp::event_dispatch_t</basecompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1guild__stickers__update__t_1a9d9983215c40ff057b9c62248d3a715d" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> *</type>
        <definition>guild* dpp::guild_stickers_update_t::updating_guild</definition>
        <argsstring></argsstring>
        <name>updating_guild</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deleted guild </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="265" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1guild__stickers__update__t_1ab79bd932dcd8a9b8280276e2f228784f" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &gt;</type>
        <definition>std::vector&lt;sticker&gt; dpp::guild_stickers_update_t::stickers</definition>
        <argsstring></argsstring>
        <name>stickers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="266" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw event text </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="40" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::event_dispatch_t::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shard the event came from </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="43" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1guild__stickers__update__t_1aefdc969a94cdbb6d91c7123bd820d8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::guild_stickers_update_t::guild_stickers_update_t</definition>
        <argsstring>(class discord_client *client, const std::string &amp;raw)</argsstring>
        <name>guild_stickers_update_t</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event text as JSON </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="263" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="153" bodyend="153"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Update guild stickers. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="11216">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
      <node id="11215">
        <label>dpp::guild_stickers_update_t</label>
        <link refid="structdpp_1_1guild__stickers__update__t"/>
        <childnode refid="11216" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11296">
        <label>function&lt; void(const dpp::guild_integrations_update_t &amp;event)&gt;</label>
      </node>
      <node id="11234">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="11233" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="11226" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="11235" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="11237" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="11240" relation="usage">
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>numshards</edgelabel>
          <edgelabel>intents</edgelabel>
        </childnode>
        <childnode refid="11219" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="11243" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
      </node>
      <node id="11230">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="11231" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="11232" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="11260">
        <label>function&lt; void(const dpp::stage_instance_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11275">
        <label>function&lt; void(const dpp::message_create_t &amp;event)&gt;</label>
      </node>
      <node id="11261">
        <label>function&lt; void(const dpp::thread_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="11308">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="11225" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="11309" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="11219" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>session_id</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
      </node>
      <node id="11311">
        <label>std::unordered_map&lt; snowflake, guild_member &gt;</label>
        <childnode refid="11225" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="11312" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="11301">
        <label>function&lt; void(const dpp::voice_buffer_send_t &amp;event)&gt;</label>
      </node>
      <node id="11288">
        <label>function&lt; void(const dpp::user_update_t &amp;event)&gt;</label>
      </node>
      <node id="11237">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="11238" relation="public-inheritance">
        </childnode>
        <childnode refid="11239" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="11240" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="11241" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="11219" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="11242" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="11246">
        <label>function&lt; void(const dpp::thread_members_update_t &amp;event)&gt;</label>
      </node>
      <node id="11290">
        <label>function&lt; void(const dpp::invite_create_t &amp;event)&gt;</label>
      </node>
      <node id="11262">
        <label>function&lt; void(const dpp::guild_create_t &amp;event)&gt;</label>
      </node>
      <node id="11292">
        <label>function&lt; void(const dpp::guild_emojis_update_t &amp;event)&gt;</label>
      </node>
      <node id="11314">
        <label>region</label>
      </node>
      <node id="11302">
        <label>function&lt; void(const dpp::guild_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="11228">
        <label>function&lt; int()&gt;</label>
      </node>
      <node id="11316">
        <label>dpp::voicestate</label>
        <link refid="classdpp_1_1voicestate"/>
        <childnode refid="11225" relation="usage">
          <edgelabel>user_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="11241" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="11219" relation="usage">
          <edgelabel>session_id</edgelabel>
        </childnode>
        <childnode refid="11221" relation="usage">
          <edgelabel>shard</edgelabel>
        </childnode>
      </node>
      <node id="11243">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="11244" relation="usage">
          <edgelabel>guild_role_create</edgelabel>
        </childnode>
        <childnode refid="11245" relation="usage">
          <edgelabel>voice_state_update</edgelabel>
        </childnode>
        <childnode refid="11246" relation="usage">
          <edgelabel>thread_members_update</edgelabel>
        </childnode>
        <childnode refid="11247" relation="usage">
          <edgelabel>channel_delete</edgelabel>
        </childnode>
        <childnode refid="11248" relation="usage">
          <edgelabel>thread_delete</edgelabel>
        </childnode>
        <childnode refid="11249" relation="usage">
          <edgelabel>integration_update</edgelabel>
        </childnode>
        <childnode refid="11250" relation="usage">
          <edgelabel>message_reaction_remove_emoji</edgelabel>
        </childnode>
        <childnode refid="11251" relation="usage">
          <edgelabel>resumed</edgelabel>
        </childnode>
        <childnode refid="11252" relation="usage">
          <edgelabel>presence_update</edgelabel>
        </childnode>
        <childnode refid="11253" relation="usage">
          <edgelabel>message_delete_bulk</edgelabel>
        </childnode>
        <childnode refid="11254" relation="usage">
          <edgelabel>voice_ready</edgelabel>
        </childnode>
        <childnode refid="11255" relation="usage">
          <edgelabel>guild_ban_remove</edgelabel>
        </childnode>
        <childnode refid="11256" relation="usage">
          <edgelabel>guild_role_delete</edgelabel>
        </childnode>
        <childnode refid="11257" relation="usage">
          <edgelabel>channel_update</edgelabel>
        </childnode>
        <childnode refid="11258" relation="usage">
          <edgelabel>stickers_update</edgelabel>
        </childnode>
        <childnode refid="11259" relation="usage">
          <edgelabel>guild_members_chunk</edgelabel>
        </childnode>
        <childnode refid="11260" relation="usage">
          <edgelabel>stage_instance_delete</edgelabel>
        </childnode>
        <childnode refid="11261" relation="usage">
          <edgelabel>thread_member_update</edgelabel>
        </childnode>
        <childnode refid="11262" relation="usage">
          <edgelabel>guild_create</edgelabel>
        </childnode>
        <childnode refid="11263" relation="usage">
          <edgelabel>message_reaction_remove</edgelabel>
        </childnode>
        <childnode refid="11264" relation="usage">
          <edgelabel>select_click</edgelabel>
        </childnode>
        <childnode refid="11265" relation="usage">
          <edgelabel>interaction_create</edgelabel>
        </childnode>
        <childnode refid="11266" relation="usage">
          <edgelabel>guild_join_request_delete</edgelabel>
        </childnode>
        <childnode refid="11267" relation="usage">
          <edgelabel>guild_member_add</edgelabel>
        </childnode>
        <childnode refid="11268" relation="usage">
          <edgelabel>voice_user_talking</edgelabel>
        </childnode>
        <childnode refid="11269" relation="usage">
          <edgelabel>thread_create</edgelabel>
        </childnode>
        <childnode refid="11270" relation="usage">
          <edgelabel>application_command_create</edgelabel>
        </childnode>
        <childnode refid="11271" relation="usage">
          <edgelabel>button_click</edgelabel>
        </childnode>
        <childnode refid="11272" relation="usage">
          <edgelabel>guild_update</edgelabel>
        </childnode>
        <childnode refid="11273" relation="usage">
          <edgelabel>message_reaction_remove_all</edgelabel>
        </childnode>
        <childnode refid="11274" relation="usage">
          <edgelabel>voice_receive</edgelabel>
        </childnode>
        <childnode refid="11275" relation="usage">
          <edgelabel>message_create</edgelabel>
        </childnode>
        <childnode refid="11276" relation="usage">
          <edgelabel>webhooks_update</edgelabel>
        </childnode>
        <childnode refid="11277" relation="usage">
          <edgelabel>message_reaction_add</edgelabel>
        </childnode>
        <childnode refid="11278" relation="usage">
          <edgelabel>message_delete</edgelabel>
        </childnode>
        <childnode refid="11279" relation="usage">
          <edgelabel>voice_track_marker</edgelabel>
        </childnode>
        <childnode refid="11280" relation="usage">
          <edgelabel>thread_list_sync</edgelabel>
        </childnode>
        <childnode refid="11281" relation="usage">
          <edgelabel>integration_delete</edgelabel>
        </childnode>
        <childnode refid="11282" relation="usage">
          <edgelabel>guild_ban_add</edgelabel>
        </childnode>
        <childnode refid="11283" relation="usage">
          <edgelabel>channel_pins_update</edgelabel>
        </childnode>
        <childnode refid="11284" relation="usage">
          <edgelabel>typing_start</edgelabel>
        </childnode>
        <childnode refid="11285" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="11286" relation="usage">
          <edgelabel>thread_update</edgelabel>
        </childnode>
        <childnode refid="11287" relation="usage">
          <edgelabel>integration_create</edgelabel>
        </childnode>
        <childnode refid="11288" relation="usage">
          <edgelabel>user_update</edgelabel>
        </childnode>
        <childnode refid="11289" relation="usage">
          <edgelabel>message_update</edgelabel>
        </childnode>
        <childnode refid="11290" relation="usage">
          <edgelabel>invite_create</edgelabel>
        </childnode>
        <childnode refid="11291" relation="usage">
          <edgelabel>invite_delete</edgelabel>
        </childnode>
        <childnode refid="11292" relation="usage">
          <edgelabel>guild_emojis_update</edgelabel>
        </childnode>
        <childnode refid="11293" relation="usage">
          <edgelabel>guild_delete</edgelabel>
        </childnode>
        <childnode refid="11294" relation="usage">
          <edgelabel>application_command_delete</edgelabel>
        </childnode>
        <childnode refid="11295" relation="usage">
          <edgelabel>application_command_update</edgelabel>
        </childnode>
        <childnode refid="11296" relation="usage">
          <edgelabel>guild_integrations_update</edgelabel>
        </childnode>
        <childnode refid="11297" relation="usage">
          <edgelabel>voice_server_update</edgelabel>
        </childnode>
        <childnode refid="11298" relation="usage">
          <edgelabel>guild_role_update</edgelabel>
        </childnode>
        <childnode refid="11299" relation="usage">
          <edgelabel>channel_create</edgelabel>
        </childnode>
        <childnode refid="11300" relation="usage">
          <edgelabel>stage_instance_create</edgelabel>
        </childnode>
        <childnode refid="11301" relation="usage">
          <edgelabel>voice_buffer_send</edgelabel>
        </childnode>
        <childnode refid="11302" relation="usage">
          <edgelabel>guild_member_update</edgelabel>
        </childnode>
        <childnode refid="11303" relation="usage">
          <edgelabel>guild_member_remove</edgelabel>
        </childnode>
        <childnode refid="11304" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
      </node>
      <node id="11312">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="11226" relation="usage">
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="11225" relation="usage">
          <edgelabel>user_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
        </childnode>
        <childnode refid="11241" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="11219" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="11313" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
      </node>
      <node id="11250">
        <label>function&lt; void(const dpp::message_reaction_remove_emoji_t &amp;event)&gt;</label>
      </node>
      <node id="11257">
        <label>function&lt; void(const dpp::channel_update_t &amp;event)&gt;</label>
      </node>
      <node id="11299">
        <label>function&lt; void(const dpp::channel_create_t &amp;event)&gt;</label>
      </node>
      <node id="11225">
        <label>uint64_t</label>
      </node>
      <node id="11294">
        <label>function&lt; void(const dpp::application_command_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11318">
        <label>dpp::sticker</label>
        <link refid="structdpp_1_1sticker"/>
        <childnode refid="11319" relation="usage">
          <edgelabel>format_type</edgelabel>
        </childnode>
        <childnode refid="11225" relation="usage">
          <edgelabel>pack_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="11237" relation="usage">
          <edgelabel>sticker_user</edgelabel>
        </childnode>
        <childnode refid="11241" relation="usage">
          <edgelabel>sort_value</edgelabel>
        </childnode>
        <childnode refid="11229" relation="usage">
          <edgelabel>available</edgelabel>
        </childnode>
        <childnode refid="11219" relation="usage">
          <edgelabel>filecontent</edgelabel>
          <edgelabel>asset</edgelabel>
          <edgelabel>tags</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>filename</edgelabel>
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="11320" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="11291">
        <label>function&lt; void(const dpp::invite_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11277">
        <label>function&lt; void(const dpp::message_reaction_add_t &amp;event)&gt;</label>
      </node>
      <node id="11317">
        <label>std::vector&lt; dpp::sticker &gt;</label>
        <childnode refid="11318" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="11271">
        <label>function&lt; void(const dpp::button_click_t &amp;event)&gt;</label>
      </node>
      <node id="11259">
        <label>function&lt; void(const dpp::guild_members_chunk_t &amp;event)&gt;</label>
      </node>
      <node id="11248">
        <label>function&lt; void(const dpp::thread_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11267">
        <label>function&lt; void(const dpp::guild_member_add_t &amp;event)&gt;</label>
      </node>
      <node id="11284">
        <label>function&lt; void(const dpp::typing_start_t &amp;event)&gt;</label>
      </node>
      <node id="11281">
        <label>function&lt; void(const dpp::integration_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11304">
        <label>function&lt; void(const dpp::log_t &amp;event)&gt;</label>
      </node>
      <node id="11239">
        <label>uint16_t</label>
      </node>
      <node id="11269">
        <label>function&lt; void(const dpp::thread_create_t &amp;event)&gt;</label>
      </node>
      <node id="11226">
        <label>time_t</label>
      </node>
      <node id="11220">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="11303">
        <label>function&lt; void(const dpp::guild_member_remove_t &amp;event)&gt;</label>
      </node>
      <node id="11280">
        <label>function&lt; void(const dpp::thread_list_sync_t &amp;event)&gt;</label>
      </node>
      <node id="11309">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="11222" relation="public-inheritance">
        </childnode>
        <childnode refid="11225" relation="usage">
          <edgelabel>server_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="11226" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="11234" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="11240" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="11219" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="11229" relation="usage">
          <edgelabel>terminating</edgelabel>
          <edgelabel>sodium_initialised</edgelabel>
        </childnode>
        <childnode refid="11306" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
      </node>
      <node id="11242">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="11225" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="11279">
        <label>function&lt; void(const dpp::voice_track_marker_t &amp;event)&gt;</label>
      </node>
      <node id="11268">
        <label>function&lt; void(const dpp::voice_user_talking_t &amp;event)&gt;</label>
      </node>
      <node id="11233">
        <label>double</label>
      </node>
      <node id="11223">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="11224" relation="usage">
          <edgelabel>custom_writeable_ready</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
        </childnode>
        <childnode refid="11225" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="11226" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="11227" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="11228" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="11229" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="11219" relation="usage">
          <edgelabel>port</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>buffer</edgelabel>
        </childnode>
        <childnode refid="11230" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="11278">
        <label>function&lt; void(const dpp::message_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11300">
        <label>function&lt; void(const dpp::stage_instance_create_t &amp;event)&gt;</label>
      </node>
      <node id="11240">
        <label>uint32_t</label>
      </node>
      <node id="11319">
        <label>sticker_format</label>
      </node>
      <node id="11298">
        <label>function&lt; void(const dpp::guild_role_update_t &amp;event)&gt;</label>
      </node>
      <node id="11218">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="11219" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="11221" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
      </node>
      <node id="11241">
        <label>uint8_t</label>
      </node>
      <node id="11283">
        <label>function&lt; void(const dpp::channel_pins_update_t &amp;event)&gt;</label>
      </node>
      <node id="11315">
        <label>std::map&lt; snowflake, dpp::voicestate &gt;</label>
        <childnode refid="11225" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="11316" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="11236">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="11222">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="11223" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11235">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="11236" relation="usage">
          <edgelabel>role_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="11252">
        <label>function&lt; void(const dpp::presence_update_t &amp;event)&gt;</label>
      </node>
      <node id="11264">
        <label>function&lt; void(const dpp::select_click_t &amp;event)&gt;</label>
      </node>
      <node id="11249">
        <label>function&lt; void(const dpp::integration_update_t &amp;event)&gt;</label>
      </node>
      <node id="11272">
        <label>function&lt; void(const dpp::guild_update_t &amp;event)&gt;</label>
      </node>
      <node id="11274">
        <label>function&lt; void(const dpp::voice_receive_t &amp;event)&gt;</label>
      </node>
      <node id="11307">
        <label>std::unordered_map&lt; snowflake, dpp::voiceconn * &gt;</label>
        <childnode refid="11225" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="11308" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="11224">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="11266">
        <label>function&lt; void(const dpp::guild_join_request_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11221">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="11222" relation="public-inheritance">
        </childnode>
        <childnode refid="11233" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="11225" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="11226" relation="usage">
          <edgelabel>last_heartbeat_ack</edgelabel>
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="11234" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="11305" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="11240" relation="usage">
          <edgelabel>reconnects</edgelabel>
          <edgelabel>shard_id</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="11229" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="11219" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="11306" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="11307" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="11273">
        <label>function&lt; void(const dpp::message_reaction_remove_all_t &amp;event)&gt;</label>
      </node>
      <node id="11320">
        <label>sticker_type</label>
      </node>
      <node id="11231">
        <label>SSL *</label>
      </node>
      <node id="11217">
        <label>dpp::guild_stickers_update_t</label>
        <link refid="structdpp_1_1guild__stickers__update__t"/>
        <childnode refid="11218" relation="public-inheritance">
        </childnode>
        <childnode refid="11310" relation="usage">
          <edgelabel>updating_guild</edgelabel>
        </childnode>
        <childnode refid="11317" relation="usage">
          <edgelabel>stickers</edgelabel>
        </childnode>
      </node>
      <node id="11238">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="11225" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="11286">
        <label>function&lt; void(const dpp::thread_update_t &amp;event)&gt;</label>
      </node>
      <node id="11287">
        <label>function&lt; void(const dpp::integration_create_t &amp;event)&gt;</label>
      </node>
      <node id="11295">
        <label>function&lt; void(const dpp::application_command_update_t &amp;event)&gt;</label>
      </node>
      <node id="11232">
        <label>SSL_CTX *</label>
      </node>
      <node id="11282">
        <label>function&lt; void(const dpp::guild_ban_add_t &amp;event)&gt;</label>
      </node>
      <node id="11305">
        <label>mutex</label>
      </node>
      <node id="11293">
        <label>function&lt; void(const dpp::guild_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11251">
        <label>function&lt; void(const dpp::resumed_t &amp;event)&gt;</label>
      </node>
      <node id="11270">
        <label>function&lt; void(const dpp::application_command_create_t &amp;event)&gt;</label>
      </node>
      <node id="11276">
        <label>function&lt; void(const dpp::webhooks_update_t &amp;event)&gt;</label>
      </node>
      <node id="11289">
        <label>function&lt; void(const dpp::message_update_t &amp;event)&gt;</label>
      </node>
      <node id="11229">
        <label>bool</label>
      </node>
      <node id="11227">
        <label>SOCKET</label>
      </node>
      <node id="11310">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="11238" relation="public-inheritance">
        </childnode>
        <childnode refid="11225" relation="usage">
          <edgelabel>rules_channel_id</edgelabel>
          <edgelabel>system_channel_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>widget_channel_id</edgelabel>
          <edgelabel>public_updates_channel_id</edgelabel>
          <edgelabel>afk_channel_id</edgelabel>
          <edgelabel>application_id</edgelabel>
        </childnode>
        <childnode refid="11311" relation="usage">
          <edgelabel>members</edgelabel>
        </childnode>
        <childnode refid="11314" relation="usage">
          <edgelabel>voice_region</edgelabel>
        </childnode>
        <childnode refid="11239" relation="usage">
          <edgelabel>shard_id</edgelabel>
          <edgelabel>max_video_channel_users</edgelabel>
          <edgelabel>premium_subscription_count</edgelabel>
        </childnode>
        <childnode refid="11240" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>member_count</edgelabel>
        </childnode>
        <childnode refid="11241" relation="usage">
          <edgelabel>default_message_notifications</edgelabel>
          <edgelabel>explicit_content_filter</edgelabel>
          <edgelabel>verification_level</edgelabel>
          <edgelabel>mfa_level</edgelabel>
          <edgelabel>afk_timeout</edgelabel>
          <edgelabel>premium_tier</edgelabel>
        </childnode>
        <childnode refid="11219" relation="usage">
          <edgelabel>vanity_url_code</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="11315" relation="usage">
          <edgelabel>voice_members</edgelabel>
        </childnode>
        <childnode refid="11313" relation="usage">
          <edgelabel>roles</edgelabel>
          <edgelabel>threads</edgelabel>
          <edgelabel>emojis</edgelabel>
          <edgelabel>channels</edgelabel>
        </childnode>
        <childnode refid="11242" relation="usage">
          <edgelabel>splash</edgelabel>
          <edgelabel>icon</edgelabel>
          <edgelabel>banner</edgelabel>
          <edgelabel>discovery_splash</edgelabel>
        </childnode>
      </node>
      <node id="11265">
        <label>function&lt; void(const dpp::interaction_create_t &amp;event)&gt;</label>
      </node>
      <node id="11297">
        <label>function&lt; void(const dpp::voice_server_update_t &amp;event)&gt;</label>
      </node>
      <node id="11255">
        <label>function&lt; void(const dpp::guild_ban_remove_t &amp;event)&gt;</label>
      </node>
      <node id="11247">
        <label>function&lt; void(const dpp::channel_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11244">
        <label>function&lt; void(const dpp::guild_role_create_t &amp;event)&gt;</label>
      </node>
      <node id="11263">
        <label>function&lt; void(const dpp::message_reaction_remove_t &amp;event)&gt;</label>
      </node>
      <node id="11285">
        <label>function&lt; void(const dpp::ready_t &amp;event)&gt;</label>
      </node>
      <node id="11245">
        <label>function&lt; void(const dpp::voice_state_update_t &amp;event)&gt;</label>
      </node>
      <node id="11258">
        <label>function&lt; void(const dpp::guild_stickers_update_t &amp;event)&gt;</label>
      </node>
      <node id="11254">
        <label>function&lt; void(const dpp::voice_ready_t &amp;event)&gt;</label>
      </node>
      <node id="11313">
        <label>std::vector&lt; snowflake &gt;</label>
        <childnode refid="11225" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="11306">
        <label>native_handle_type</label>
      </node>
      <node id="11256">
        <label>function&lt; void(const dpp::guild_role_delete_t &amp;event)&gt;</label>
      </node>
      <node id="11219">
        <label>std::string</label>
        <childnode refid="11220" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11253">
        <label>function&lt; void(const dpp::message_delete_bulk_t &amp;event)&gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/dispatcher.h" line="258" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="258" bodyend="267"/>
    <listofallmembers>
      <member refid="structdpp_1_1event__dispatch__t_1a4ac4d287ca94f2389cf68e2534d9e1b0" prot="public" virt="non-virtual"><scope>dpp::guild_stickers_update_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" virt="non-virtual"><scope>dpp::guild_stickers_update_t</scope><name>from</name></member>
      <member refid="structdpp_1_1guild__stickers__update__t_1aefdc969a94cdbb6d91c7123bd820d8ff" prot="public" virt="non-virtual"><scope>dpp::guild_stickers_update_t</scope><name>guild_stickers_update_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" virt="non-virtual"><scope>dpp::guild_stickers_update_t</scope><name>raw_event</name></member>
      <member refid="structdpp_1_1guild__stickers__update__t_1ab79bd932dcd8a9b8280276e2f228784f" prot="public" virt="non-virtual"><scope>dpp::guild_stickers_update_t</scope><name>stickers</name></member>
      <member refid="structdpp_1_1guild__stickers__update__t_1a9d9983215c40ff057b9c62248d3a715d" prot="public" virt="non-virtual"><scope>dpp::guild_stickers_update_t</scope><name>updating_guild</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
