<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="using-coroutines" kind="page">
    <compoundname>using-coroutines</compoundname>
    <title>Using Coroutines</title>
    <innerpage refid="coro-introduction">Introduction to coroutines</innerpage>
    <innerpage refid="coro-simple-commands">Making simple commands</innerpage>
    <innerpage refid="awaiting-events">Waiting for events</innerpage>
    <innerpage refid="expiring-buttons">Making expiring buttons with when_any</innerpage>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><para><simplesect kind="warning"><para>D++ Coroutines are currently only supported by D++ on g++ 13, clang/LLVM 14, and MSVC 19.37 or above. Additionally, your program has to support C++20. </para>
</simplesect>
</para>
</para>
<para>One of the most anticipated features of C++20 is the addition of coroutines: in short, they are functions that can be paused while waiting for data and resumed when that data is ready. They make asynchronous programs much easier to write, but they do come with additional dangers and subtleties.</para>
<para><itemizedlist>
<listitem><para><ref refid="coro-introduction" kindref="compound">Introduction to coroutines</ref></para>
</listitem><listitem><para><ref refid="coro-simple-commands" kindref="compound">Making simple commands</ref></para>
</listitem><listitem><para><ref refid="awaiting-events" kindref="compound">Waiting for events</ref></para>
</listitem><listitem><para><ref refid="expiring-buttons" kindref="compound">Making expiring buttons with when_any</ref></para>
</listitem></itemizedlist>
</para>
<para>Coroutines require you to use C++20. You can do this by adding<itemizedlist>
<listitem><para><computeroutput>-std=c++20</computeroutput> in your build command (before specifying files) if building manually, or,</para>
</listitem><listitem><para>if using CMake, by adding <computeroutput>target_compile_features(my_program PUBLIC cxx_std_20)</computeroutput> in your <computeroutput>CMakeLists.txt</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>If you don&apos;t want to use Coroutines, You can either add<itemizedlist>
<listitem><para><computeroutput>-DDPP_NO_CORO</computeroutput> in your build command, or, if using CMake,</para>
</listitem><listitem><para><computeroutput>target_compile_definitions(my_program PUBLIC DPP_NO_CORO)</computeroutput>.</para>
</listitem><listitem><para>Additionally, you can build D++ without Coroutines with the same above. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="docpages/example_programs/using_coroutines.md"/>
  </compounddef>
</doxygen>
