<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdpp_1_1stage__instance__delete__t" kind="struct" prot="public">
    <compoundname>dpp::stage_instance_delete_t</compoundname>
    <basecompoundref refid="structdpp_1_1event__dispatch__t" prot="public" virt="non-virtual">dpp::event_dispatch_t</basecompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1stage__instance__delete__t_1ac9b9b8d50d30ec1c70bcafc596830fb9" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::stage_instance_delete_t::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>stage instance id </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="107" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1stage__instance__delete__t_1a8ff28d0bbd8dba9dd589ee946c533856" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::stage_instance_delete_t::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>Channel ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="111" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1stage__instance__delete__t_1a3ea1829ddff52ddf684d989fb932e00e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::stage_instance_delete_t::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>Guild ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="115" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1stage__instance__delete__t_1a06af17bcc80db57d6941d52d3338a820" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::stage_instance_delete_t::privacy_level</definition>
        <argsstring></argsstring>
        <name>privacy_level</name>
        <briefdescription>
<para>Privacy level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="119" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1stage__instance__delete__t_1a686464b6183804c70137ea9f66812c55" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::stage_instance_delete_t::topic</definition>
        <argsstring></argsstring>
        <name>topic</name>
        <briefdescription>
<para>Stage Topic. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="123" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw event text </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="40" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::event_dispatch_t::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shard the event came from </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="43" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1stage__instance__delete__t_1ad9815ab643039f8346df3c6bb97ddc20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::stage_instance_delete_t::stage_instance_delete_t</definition>
        <argsstring>(class discord_client *client, const std::string &amp;raw)</argsstring>
        <name>stage_instance_delete_t</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on. CAN BE NULL for log events originating from the cluster object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event text as JSON </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/dispatcher.h" line="103" column="1" bodyfile="/home/brain/D++/src/dpp/dispatcher.cpp" bodystart="95" bodyend="95"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Delete stage instance. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="14070">
        <label>dpp::stage_instance_delete_t</label>
        <link refid="structdpp_1_1stage__instance__delete__t"/>
        <childnode refid="14071" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14071">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="14151">
        <label>function&lt; void(const dpp::guild_integrations_update_t &amp;event)&gt;</label>
      </node>
      <node id="14089">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="14088" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="14081" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="14090" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="14092" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="14095" relation="usage">
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>numshards</edgelabel>
          <edgelabel>intents</edgelabel>
        </childnode>
        <childnode refid="14074" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="14098" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
      </node>
      <node id="14085">
        <label>dpp::opensslcontext</label>
        <link refid="classdpp_1_1opensslcontext"/>
        <childnode refid="14086" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="14087" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
      </node>
      <node id="14115">
        <label>function&lt; void(const dpp::stage_instance_delete_t &amp;event)&gt;</label>
      </node>
      <node id="14130">
        <label>function&lt; void(const dpp::message_create_t &amp;event)&gt;</label>
      </node>
      <node id="14116">
        <label>function&lt; void(const dpp::thread_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="14163">
        <label>dpp::voiceconn</label>
        <link refid="classdpp_1_1voiceconn"/>
        <childnode refid="14080" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="14164" relation="usage">
          <edgelabel>voiceclient</edgelabel>
        </childnode>
        <childnode refid="14074" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>session_id</edgelabel>
          <edgelabel>websocket_hostname</edgelabel>
        </childnode>
      </node>
      <node id="14156">
        <label>function&lt; void(const dpp::voice_buffer_send_t &amp;event)&gt;</label>
      </node>
      <node id="14143">
        <label>function&lt; void(const dpp::user_update_t &amp;event)&gt;</label>
      </node>
      <node id="14092">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="14093" relation="public-inheritance">
        </childnode>
        <childnode refid="14094" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="14095" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="14096" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="14074" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="14097" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="14101">
        <label>function&lt; void(const dpp::thread_members_update_t &amp;event)&gt;</label>
      </node>
      <node id="14145">
        <label>function&lt; void(const dpp::invite_create_t &amp;event)&gt;</label>
      </node>
      <node id="14117">
        <label>function&lt; void(const dpp::guild_create_t &amp;event)&gt;</label>
      </node>
      <node id="14147">
        <label>function&lt; void(const dpp::guild_emojis_update_t &amp;event)&gt;</label>
      </node>
      <node id="14157">
        <label>function&lt; void(const dpp::guild_member_update_t &amp;event)&gt;</label>
      </node>
      <node id="14083">
        <label>function&lt; int()&gt;</label>
      </node>
      <node id="14098">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="14099" relation="usage">
          <edgelabel>guild_role_create</edgelabel>
        </childnode>
        <childnode refid="14100" relation="usage">
          <edgelabel>voice_state_update</edgelabel>
        </childnode>
        <childnode refid="14101" relation="usage">
          <edgelabel>thread_members_update</edgelabel>
        </childnode>
        <childnode refid="14102" relation="usage">
          <edgelabel>channel_delete</edgelabel>
        </childnode>
        <childnode refid="14103" relation="usage">
          <edgelabel>thread_delete</edgelabel>
        </childnode>
        <childnode refid="14104" relation="usage">
          <edgelabel>integration_update</edgelabel>
        </childnode>
        <childnode refid="14105" relation="usage">
          <edgelabel>message_reaction_remove_emoji</edgelabel>
        </childnode>
        <childnode refid="14106" relation="usage">
          <edgelabel>resumed</edgelabel>
        </childnode>
        <childnode refid="14107" relation="usage">
          <edgelabel>presence_update</edgelabel>
        </childnode>
        <childnode refid="14108" relation="usage">
          <edgelabel>message_delete_bulk</edgelabel>
        </childnode>
        <childnode refid="14109" relation="usage">
          <edgelabel>voice_ready</edgelabel>
        </childnode>
        <childnode refid="14110" relation="usage">
          <edgelabel>guild_ban_remove</edgelabel>
        </childnode>
        <childnode refid="14111" relation="usage">
          <edgelabel>guild_role_delete</edgelabel>
        </childnode>
        <childnode refid="14112" relation="usage">
          <edgelabel>channel_update</edgelabel>
        </childnode>
        <childnode refid="14113" relation="usage">
          <edgelabel>stickers_update</edgelabel>
        </childnode>
        <childnode refid="14114" relation="usage">
          <edgelabel>guild_members_chunk</edgelabel>
        </childnode>
        <childnode refid="14115" relation="usage">
          <edgelabel>stage_instance_delete</edgelabel>
        </childnode>
        <childnode refid="14116" relation="usage">
          <edgelabel>thread_member_update</edgelabel>
        </childnode>
        <childnode refid="14117" relation="usage">
          <edgelabel>guild_create</edgelabel>
        </childnode>
        <childnode refid="14118" relation="usage">
          <edgelabel>message_reaction_remove</edgelabel>
        </childnode>
        <childnode refid="14119" relation="usage">
          <edgelabel>select_click</edgelabel>
        </childnode>
        <childnode refid="14120" relation="usage">
          <edgelabel>interaction_create</edgelabel>
        </childnode>
        <childnode refid="14121" relation="usage">
          <edgelabel>guild_join_request_delete</edgelabel>
        </childnode>
        <childnode refid="14122" relation="usage">
          <edgelabel>guild_member_add</edgelabel>
        </childnode>
        <childnode refid="14123" relation="usage">
          <edgelabel>voice_user_talking</edgelabel>
        </childnode>
        <childnode refid="14124" relation="usage">
          <edgelabel>thread_create</edgelabel>
        </childnode>
        <childnode refid="14125" relation="usage">
          <edgelabel>application_command_create</edgelabel>
        </childnode>
        <childnode refid="14126" relation="usage">
          <edgelabel>button_click</edgelabel>
        </childnode>
        <childnode refid="14127" relation="usage">
          <edgelabel>guild_update</edgelabel>
        </childnode>
        <childnode refid="14128" relation="usage">
          <edgelabel>message_reaction_remove_all</edgelabel>
        </childnode>
        <childnode refid="14129" relation="usage">
          <edgelabel>voice_receive</edgelabel>
        </childnode>
        <childnode refid="14130" relation="usage">
          <edgelabel>message_create</edgelabel>
        </childnode>
        <childnode refid="14131" relation="usage">
          <edgelabel>webhooks_update</edgelabel>
        </childnode>
        <childnode refid="14132" relation="usage">
          <edgelabel>message_reaction_add</edgelabel>
        </childnode>
        <childnode refid="14133" relation="usage">
          <edgelabel>message_delete</edgelabel>
        </childnode>
        <childnode refid="14134" relation="usage">
          <edgelabel>voice_track_marker</edgelabel>
        </childnode>
        <childnode refid="14135" relation="usage">
          <edgelabel>thread_list_sync</edgelabel>
        </childnode>
        <childnode refid="14136" relation="usage">
          <edgelabel>integration_delete</edgelabel>
        </childnode>
        <childnode refid="14137" relation="usage">
          <edgelabel>guild_ban_add</edgelabel>
        </childnode>
        <childnode refid="14138" relation="usage">
          <edgelabel>channel_pins_update</edgelabel>
        </childnode>
        <childnode refid="14139" relation="usage">
          <edgelabel>typing_start</edgelabel>
        </childnode>
        <childnode refid="14140" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="14141" relation="usage">
          <edgelabel>thread_update</edgelabel>
        </childnode>
        <childnode refid="14142" relation="usage">
          <edgelabel>integration_create</edgelabel>
        </childnode>
        <childnode refid="14143" relation="usage">
          <edgelabel>user_update</edgelabel>
        </childnode>
        <childnode refid="14144" relation="usage">
          <edgelabel>message_update</edgelabel>
        </childnode>
        <childnode refid="14145" relation="usage">
          <edgelabel>invite_create</edgelabel>
        </childnode>
        <childnode refid="14146" relation="usage">
          <edgelabel>invite_delete</edgelabel>
        </childnode>
        <childnode refid="14147" relation="usage">
          <edgelabel>guild_emojis_update</edgelabel>
        </childnode>
        <childnode refid="14148" relation="usage">
          <edgelabel>guild_delete</edgelabel>
        </childnode>
        <childnode refid="14149" relation="usage">
          <edgelabel>application_command_delete</edgelabel>
        </childnode>
        <childnode refid="14150" relation="usage">
          <edgelabel>application_command_update</edgelabel>
        </childnode>
        <childnode refid="14151" relation="usage">
          <edgelabel>guild_integrations_update</edgelabel>
        </childnode>
        <childnode refid="14152" relation="usage">
          <edgelabel>voice_server_update</edgelabel>
        </childnode>
        <childnode refid="14153" relation="usage">
          <edgelabel>guild_role_update</edgelabel>
        </childnode>
        <childnode refid="14154" relation="usage">
          <edgelabel>channel_create</edgelabel>
        </childnode>
        <childnode refid="14155" relation="usage">
          <edgelabel>stage_instance_create</edgelabel>
        </childnode>
        <childnode refid="14156" relation="usage">
          <edgelabel>voice_buffer_send</edgelabel>
        </childnode>
        <childnode refid="14157" relation="usage">
          <edgelabel>guild_member_update</edgelabel>
        </childnode>
        <childnode refid="14158" relation="usage">
          <edgelabel>guild_member_remove</edgelabel>
        </childnode>
        <childnode refid="14159" relation="usage">
          <edgelabel>log</edgelabel>
        </childnode>
      </node>
      <node id="14105">
        <label>function&lt; void(const dpp::message_reaction_remove_emoji_t &amp;event)&gt;</label>
      </node>
      <node id="14112">
        <label>function&lt; void(const dpp::channel_update_t &amp;event)&gt;</label>
      </node>
      <node id="14154">
        <label>function&lt; void(const dpp::channel_create_t &amp;event)&gt;</label>
      </node>
      <node id="14080">
        <label>uint64_t</label>
      </node>
      <node id="14149">
        <label>function&lt; void(const dpp::application_command_delete_t &amp;event)&gt;</label>
      </node>
      <node id="14146">
        <label>function&lt; void(const dpp::invite_delete_t &amp;event)&gt;</label>
      </node>
      <node id="14132">
        <label>function&lt; void(const dpp::message_reaction_add_t &amp;event)&gt;</label>
      </node>
      <node id="14126">
        <label>function&lt; void(const dpp::button_click_t &amp;event)&gt;</label>
      </node>
      <node id="14114">
        <label>function&lt; void(const dpp::guild_members_chunk_t &amp;event)&gt;</label>
      </node>
      <node id="14103">
        <label>function&lt; void(const dpp::thread_delete_t &amp;event)&gt;</label>
      </node>
      <node id="14122">
        <label>function&lt; void(const dpp::guild_member_add_t &amp;event)&gt;</label>
      </node>
      <node id="14139">
        <label>function&lt; void(const dpp::typing_start_t &amp;event)&gt;</label>
      </node>
      <node id="14136">
        <label>function&lt; void(const dpp::integration_delete_t &amp;event)&gt;</label>
      </node>
      <node id="14072">
        <label>dpp::stage_instance_delete_t</label>
        <link refid="structdpp_1_1stage__instance__delete__t"/>
        <childnode refid="14073" relation="public-inheritance">
        </childnode>
        <childnode refid="14080" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="14074" relation="usage">
          <edgelabel>topic</edgelabel>
        </childnode>
        <childnode refid="14096" relation="usage">
          <edgelabel>privacy_level</edgelabel>
        </childnode>
      </node>
      <node id="14159">
        <label>function&lt; void(const dpp::log_t &amp;event)&gt;</label>
      </node>
      <node id="14094">
        <label>uint16_t</label>
      </node>
      <node id="14124">
        <label>function&lt; void(const dpp::thread_create_t &amp;event)&gt;</label>
      </node>
      <node id="14081">
        <label>time_t</label>
      </node>
      <node id="14075">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="14158">
        <label>function&lt; void(const dpp::guild_member_remove_t &amp;event)&gt;</label>
      </node>
      <node id="14135">
        <label>function&lt; void(const dpp::thread_list_sync_t &amp;event)&gt;</label>
      </node>
      <node id="14164">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="14077" relation="public-inheritance">
        </childnode>
        <childnode refid="14080" relation="usage">
          <edgelabel>server_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="14081" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="14089" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="14095" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="14074" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="14084" relation="usage">
          <edgelabel>terminating</edgelabel>
          <edgelabel>sodium_initialised</edgelabel>
        </childnode>
        <childnode refid="14161" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
      </node>
      <node id="14097">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="14080" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="14134">
        <label>function&lt; void(const dpp::voice_track_marker_t &amp;event)&gt;</label>
      </node>
      <node id="14123">
        <label>function&lt; void(const dpp::voice_user_talking_t &amp;event)&gt;</label>
      </node>
      <node id="14088">
        <label>double</label>
      </node>
      <node id="14078">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="14079" relation="usage">
          <edgelabel>custom_writeable_ready</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
        </childnode>
        <childnode refid="14080" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="14081" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="14082" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="14083" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="14084" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="14074" relation="usage">
          <edgelabel>port</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>buffer</edgelabel>
        </childnode>
        <childnode refid="14085" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
      </node>
      <node id="14133">
        <label>function&lt; void(const dpp::message_delete_t &amp;event)&gt;</label>
      </node>
      <node id="14155">
        <label>function&lt; void(const dpp::stage_instance_create_t &amp;event)&gt;</label>
      </node>
      <node id="14095">
        <label>uint32_t</label>
      </node>
      <node id="14153">
        <label>function&lt; void(const dpp::guild_role_update_t &amp;event)&gt;</label>
      </node>
      <node id="14073">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="14074" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="14076" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
      </node>
      <node id="14096">
        <label>uint8_t</label>
      </node>
      <node id="14138">
        <label>function&lt; void(const dpp::channel_pins_update_t &amp;event)&gt;</label>
      </node>
      <node id="14091">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="14077">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="14078" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14090">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="14091" relation="usage">
          <edgelabel>role_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="14107">
        <label>function&lt; void(const dpp::presence_update_t &amp;event)&gt;</label>
      </node>
      <node id="14119">
        <label>function&lt; void(const dpp::select_click_t &amp;event)&gt;</label>
      </node>
      <node id="14104">
        <label>function&lt; void(const dpp::integration_update_t &amp;event)&gt;</label>
      </node>
      <node id="14127">
        <label>function&lt; void(const dpp::guild_update_t &amp;event)&gt;</label>
      </node>
      <node id="14129">
        <label>function&lt; void(const dpp::voice_receive_t &amp;event)&gt;</label>
      </node>
      <node id="14162">
        <label>std::unordered_map&lt; snowflake, dpp::voiceconn * &gt;</label>
        <childnode refid="14080" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="14163" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="14079">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="14121">
        <label>function&lt; void(const dpp::guild_join_request_delete_t &amp;event)&gt;</label>
      </node>
      <node id="14076">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="14077" relation="public-inheritance">
        </childnode>
        <childnode refid="14088" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="14080" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="14081" relation="usage">
          <edgelabel>last_heartbeat_ack</edgelabel>
          <edgelabel>last_heartbeat</edgelabel>
        </childnode>
        <childnode refid="14089" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="14160" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="14095" relation="usage">
          <edgelabel>reconnects</edgelabel>
          <edgelabel>shard_id</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>heartbeat_interval</edgelabel>
        </childnode>
        <childnode refid="14084" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="14074" relation="usage">
          <edgelabel>token</edgelabel>
          <edgelabel>sessionid</edgelabel>
        </childnode>
        <childnode refid="14161" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="14162" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="14128">
        <label>function&lt; void(const dpp::message_reaction_remove_all_t &amp;event)&gt;</label>
      </node>
      <node id="14086">
        <label>SSL *</label>
      </node>
      <node id="14093">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="14080" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="14141">
        <label>function&lt; void(const dpp::thread_update_t &amp;event)&gt;</label>
      </node>
      <node id="14142">
        <label>function&lt; void(const dpp::integration_create_t &amp;event)&gt;</label>
      </node>
      <node id="14150">
        <label>function&lt; void(const dpp::application_command_update_t &amp;event)&gt;</label>
      </node>
      <node id="14087">
        <label>SSL_CTX *</label>
      </node>
      <node id="14137">
        <label>function&lt; void(const dpp::guild_ban_add_t &amp;event)&gt;</label>
      </node>
      <node id="14160">
        <label>mutex</label>
      </node>
      <node id="14148">
        <label>function&lt; void(const dpp::guild_delete_t &amp;event)&gt;</label>
      </node>
      <node id="14106">
        <label>function&lt; void(const dpp::resumed_t &amp;event)&gt;</label>
      </node>
      <node id="14125">
        <label>function&lt; void(const dpp::application_command_create_t &amp;event)&gt;</label>
      </node>
      <node id="14131">
        <label>function&lt; void(const dpp::webhooks_update_t &amp;event)&gt;</label>
      </node>
      <node id="14144">
        <label>function&lt; void(const dpp::message_update_t &amp;event)&gt;</label>
      </node>
      <node id="14084">
        <label>bool</label>
      </node>
      <node id="14082">
        <label>SOCKET</label>
      </node>
      <node id="14120">
        <label>function&lt; void(const dpp::interaction_create_t &amp;event)&gt;</label>
      </node>
      <node id="14152">
        <label>function&lt; void(const dpp::voice_server_update_t &amp;event)&gt;</label>
      </node>
      <node id="14110">
        <label>function&lt; void(const dpp::guild_ban_remove_t &amp;event)&gt;</label>
      </node>
      <node id="14102">
        <label>function&lt; void(const dpp::channel_delete_t &amp;event)&gt;</label>
      </node>
      <node id="14099">
        <label>function&lt; void(const dpp::guild_role_create_t &amp;event)&gt;</label>
      </node>
      <node id="14118">
        <label>function&lt; void(const dpp::message_reaction_remove_t &amp;event)&gt;</label>
      </node>
      <node id="14140">
        <label>function&lt; void(const dpp::ready_t &amp;event)&gt;</label>
      </node>
      <node id="14100">
        <label>function&lt; void(const dpp::voice_state_update_t &amp;event)&gt;</label>
      </node>
      <node id="14113">
        <label>function&lt; void(const dpp::guild_stickers_update_t &amp;event)&gt;</label>
      </node>
      <node id="14109">
        <label>function&lt; void(const dpp::voice_ready_t &amp;event)&gt;</label>
      </node>
      <node id="14161">
        <label>native_handle_type</label>
      </node>
      <node id="14111">
        <label>function&lt; void(const dpp::guild_role_delete_t &amp;event)&gt;</label>
      </node>
      <node id="14074">
        <label>std::string</label>
        <childnode refid="14075" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14108">
        <label>function&lt; void(const dpp::message_delete_bulk_t &amp;event)&gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/dispatcher.h" line="97" column="1" bodyfile="/home/brain/D++/include/dpp/dispatcher.h" bodystart="97" bodyend="124"/>
    <listofallmembers>
      <member refid="structdpp_1_1stage__instance__delete__t_1a8ff28d0bbd8dba9dd589ee946c533856" prot="public" virt="non-virtual"><scope>dpp::stage_instance_delete_t</scope><name>channel_id</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a4ac4d287ca94f2389cf68e2534d9e1b0" prot="public" virt="non-virtual"><scope>dpp::stage_instance_delete_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a357873be4dd30eef7928ae5f7c13e7db" prot="public" virt="non-virtual"><scope>dpp::stage_instance_delete_t</scope><name>from</name></member>
      <member refid="structdpp_1_1stage__instance__delete__t_1a3ea1829ddff52ddf684d989fb932e00e" prot="public" virt="non-virtual"><scope>dpp::stage_instance_delete_t</scope><name>guild_id</name></member>
      <member refid="structdpp_1_1stage__instance__delete__t_1ac9b9b8d50d30ec1c70bcafc596830fb9" prot="public" virt="non-virtual"><scope>dpp::stage_instance_delete_t</scope><name>id</name></member>
      <member refid="structdpp_1_1stage__instance__delete__t_1a06af17bcc80db57d6941d52d3338a820" prot="public" virt="non-virtual"><scope>dpp::stage_instance_delete_t</scope><name>privacy_level</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" virt="non-virtual"><scope>dpp::stage_instance_delete_t</scope><name>raw_event</name></member>
      <member refid="structdpp_1_1stage__instance__delete__t_1ad9815ab643039f8346df3c6bb97ddc20" prot="public" virt="non-virtual"><scope>dpp::stage_instance_delete_t</scope><name>stage_instance_delete_t</name></member>
      <member refid="structdpp_1_1stage__instance__delete__t_1a686464b6183804c70137ea9f66812c55" prot="public" virt="non-virtual"><scope>dpp::stage_instance_delete_t</scope><name>topic</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
