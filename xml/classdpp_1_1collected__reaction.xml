<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1collected__reaction" kind="class" language="C++" prot="public">
    <compoundname>dpp::collected_reaction</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">dpp.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1collected__reaction_1a6908fe33df12129a9e5b8127235ed000" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref></type>
        <definition>user dpp::collected_reaction::react_user</definition>
        <argsstring></argsstring>
        <name>react_user</name>
        <briefdescription>
<para>Reacting user. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dpp.h" line="82" column="6" bodyfile="include/dpp/dpp.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1collected__reaction_1a2543d5790ddbe39b3329e196e32b3e38" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> *</type>
        <definition>guild* dpp::collected_reaction::react_guild</definition>
        <argsstring></argsstring>
        <name>react_guild</name>
        <briefdescription>
<para>Reacting guild. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dpp.h" line="84" column="7" bodyfile="include/dpp/dpp.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1collected__reaction_1a2e67dbfa2101a02a57c03cc8cfd5170a" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref></type>
        <definition>guild_member dpp::collected_reaction::react_member</definition>
        <argsstring></argsstring>
        <name>react_member</name>
        <briefdescription>
<para>Reacting guild member. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dpp.h" line="86" column="14" bodyfile="include/dpp/dpp.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1collected__reaction_1ac920db9b2df7abae4ea577fa32dd496d" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> *</type>
        <definition>channel* dpp::collected_reaction::react_channel</definition>
        <argsstring></argsstring>
        <name>react_channel</name>
        <briefdescription>
<para>Reacting channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dpp.h" line="88" column="9" bodyfile="include/dpp/dpp.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1collected__reaction_1ab8412dec9261cea0a20cc58c21a087ca" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref></type>
        <definition>emoji dpp::collected_reaction::react_emoji</definition>
        <argsstring></argsstring>
        <name>react_emoji</name>
        <briefdescription>
<para>Reacted emoji. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dpp.h" line="90" column="7" bodyfile="include/dpp/dpp.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="38" column="11" bodyfile="include/dpp/managed.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8" bodyfile="src/dpp/discordevents.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="64" column="6" bodyfile="src/dpp/managed.cpp" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="73" column="6" bodyfile="src/dpp/managed.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a reaction. Can be filled for use in a collector. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::collected_reaction</label>
        <link refid="classdpp_1_1collected__reaction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21">
        <label>K</label>
      </node>
      <node id="22">
        <label>T</label>
      </node>
      <node id="28">
        <label>dpp::channel</label>
        <link refid="classdpp_1_1channel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="29" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>rtc_region</edgelabel>
          <edgelabel>topic</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>permission_overwrites</edgelabel>
          <edgelabel>recipients</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>banner</edgelabel>
          <edgelabel>icon</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>last_message_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>parent_id</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>last_pin_timestamp</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>bitrate</edgelabel>
          <edgelabel>position</edgelabel>
          <edgelabel>rate_limit_per_user</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>user_limit</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::collected_reaction</label>
        <link refid="classdpp_1_1collected__reaction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>react_user</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>react_guild</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>react_member</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>react_channel</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>react_emoji</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>dpp::emoji</label>
        <link refid="classdpp_1_1emoji"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>image_data</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>vanity_url_code</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>channels</edgelabel>
          <edgelabel>emojis</edgelabel>
          <edgelabel>roles</edgelabel>
          <edgelabel>threads</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>voice_members</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>members</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>welcome_screen</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>banner</edgelabel>
          <edgelabel>discovery_splash</edgelabel>
          <edgelabel>icon</edgelabel>
          <edgelabel>splash</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>afk_channel_id</edgelabel>
          <edgelabel>application_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>public_updates_channel_id</edgelabel>
          <edgelabel>rules_channel_id</edgelabel>
          <edgelabel>system_channel_id</edgelabel>
          <edgelabel>widget_channel_id</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>max_members</edgelabel>
          <edgelabel>max_presences</edgelabel>
          <edgelabel>member_count</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>max_video_channel_users</edgelabel>
          <edgelabel>premium_subscription_count</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>afk_timeout</edgelabel>
          <edgelabel>default_message_notifications</edgelabel>
          <edgelabel>flags_extra</edgelabel>
          <edgelabel>premium_tier</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>verification_level</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>explicit_content_filter</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>mfa_level</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>nsfw_level</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="7" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>dpp::permission</label>
        <link refid="classdpp_1_1permission"/>
        <childnode refid="3" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="3" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>dpp::welcome_screen_t</label>
        <link refid="structdpp_1_1welcome__screen__t"/>
        <childnode refid="7" relation="usage">
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>welcome_channels</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>guild_explicit_content_t</label>
      </node>
      <node id="27">
        <label>guild_nsfw_level_t</label>
      </node>
      <node id="29">
        <label>dpp::json_interface&lt; channel &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; channel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>dpp::json_interface&lt; emoji &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; emoji &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>dpp::json_interface&lt; guild &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; guild &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>mfa_level_t</label>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="16">
        <label>map&lt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>std::unordered_map&lt; K, T &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>vector&lt;</label>
      </node>
      <node id="19">
        <label>time_t</label>
      </node>
      <node id="11">
        <label>uint16_t</label>
      </node>
      <node id="10">
        <label>uint32_t</label>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
      <node id="12">
        <label>uint8_t</label>
      </node>
      <node id="17">
        <label>std::unordered_map&lt; snowflake, guild_member &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="20" relation="template-instance">
          <edgelabel>&lt; snowflake, guild_member &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>verification_level_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dpp.h" line="79" column="1" bodyfile="include/dpp/dpp.h" bodystart="79" bodyend="91"/>
    <listofallmembers>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::collected_reaction</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::collected_reaction</scope><name>id</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::collected_reaction</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" virt="non-virtual"><scope>dpp::collected_reaction</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" virt="non-virtual"><scope>dpp::collected_reaction</scope><name>operator==</name></member>
      <member refid="classdpp_1_1collected__reaction_1ac920db9b2df7abae4ea577fa32dd496d" prot="public" virt="non-virtual"><scope>dpp::collected_reaction</scope><name>react_channel</name></member>
      <member refid="classdpp_1_1collected__reaction_1ab8412dec9261cea0a20cc58c21a087ca" prot="public" virt="non-virtual"><scope>dpp::collected_reaction</scope><name>react_emoji</name></member>
      <member refid="classdpp_1_1collected__reaction_1a2543d5790ddbe39b3329e196e32b3e38" prot="public" virt="non-virtual"><scope>dpp::collected_reaction</scope><name>react_guild</name></member>
      <member refid="classdpp_1_1collected__reaction_1a2e67dbfa2101a02a57c03cc8cfd5170a" prot="public" virt="non-virtual"><scope>dpp::collected_reaction</scope><name>react_member</name></member>
      <member refid="classdpp_1_1collected__reaction_1a6908fe33df12129a9e5b8127235ed000" prot="public" virt="non-virtual"><scope>dpp::collected_reaction</scope><name>react_user</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::collected_reaction</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
