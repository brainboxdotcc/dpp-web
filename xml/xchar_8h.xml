<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="xchar_8h" kind="file" language="C++">
    <compoundname>xchar.h</compoundname>
    <includes local="no">cwchar</includes>
    <includes local="no">tuple</includes>
    <includes local="yes">format.h</includes>
    <includedby refid="locale_8h" local="yes">locale.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>xchar.h</label>
        <link refid="xchar_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cwchar</label>
      </node>
      <node id="4">
        <label>format.h</label>
      </node>
      <node id="3">
        <label>tuple</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>locale.h</label>
      </node>
      <node id="1">
        <label>xchar.h</label>
        <link refid="xchar_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structis__char_3_01wchar__t_01_4" prot="public">is_char&lt; wchar_t &gt;</innerclass>
    <innerclass refid="structis__char_3_01detail_1_1char8__type_01_4" prot="public">is_char&lt; detail::char8_type &gt;</innerclass>
    <innerclass refid="structis__char_3_01char16__t_01_4" prot="public">is_char&lt; char16_t &gt;</innerclass>
    <innerclass refid="structis__char_3_01char32__t_01_4" prot="public">is_char&lt; char32_t &gt;</innerclass>
    <innernamespace refid="namespacedetail">detail</innernamespace>
    <innernamespace refid="namespaceliterals" inline="yes">literals</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="xchar_8h_1a5164ea4aed26e7700ce4a006d1d32475" prot="public" static="no">
        <type>basic_string_view&lt; wchar_t &gt;</type>
        <definition>using wstring_view =  basic_string_view&lt;wchar_t&gt;</definition>
        <argsstring></argsstring>
        <name>wstring_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="24" column="1" bodyfile="include/dpp/fmt/xchar.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="xchar_8h_1a9a60587ace165efab2fc40bddf69c89c" prot="public" static="no">
        <type>basic_format_parse_context&lt; wchar_t &gt;</type>
        <definition>using wformat_parse_context =  basic_format_parse_context&lt;wchar_t&gt;</definition>
        <argsstring></argsstring>
        <name>wformat_parse_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="25" column="1" bodyfile="include/dpp/fmt/xchar.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="xchar_8h_1afaf716eff630583a20315ab7e4f0f8d0" prot="public" static="no">
        <type>buffer_context&lt; wchar_t &gt;</type>
        <definition>using wformat_context =  buffer_context&lt;wchar_t&gt;</definition>
        <argsstring></argsstring>
        <name>wformat_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="26" column="1" bodyfile="include/dpp/fmt/xchar.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="xchar_8h_1afff8faaf423d40e312921ee1506eaf5b" prot="public" static="no">
        <type>basic_format_args&lt; wformat_context &gt;</type>
        <definition>using wformat_args =  basic_format_args&lt;wformat_context&gt;</definition>
        <argsstring></argsstring>
        <name>wformat_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="27" column="1" bodyfile="include/dpp/fmt/xchar.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="xchar_8h_1a982966c062384d8ef0f4c909007df461" prot="public" static="no">
        <type>basic_memory_buffer&lt; wchar_t &gt;</type>
        <definition>using wmemory_buffer =  basic_memory_buffer&lt;wchar_t&gt;</definition>
        <argsstring></argsstring>
        <name>wmemory_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="28" column="1" bodyfile="include/dpp/fmt/xchar.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="xchar_8h_1a69c1b057042c87184f2220c79696ef73" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>basic_format_string&lt; wchar_t, type_identity_t&lt; Args &gt;... &gt;</type>
        <definition>using wformat_string =  basic_format_string&lt;wchar_t, type_identity_t&lt;Args&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>wformat_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="35" column="1" bodyfile="include/dpp/fmt/xchar.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="xchar_8h_1a74dfff9e39ca0520c9a05ac604ef4d40" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr format_arg_store&lt; wformat_context, Args... &gt;</type>
        <definition>constexpr format_arg_store&lt; wformat_context, Args... &gt; make_wformat_args</definition>
        <argsstring>(const Args &amp;... args)</argsstring>
        <name>make_wformat_args</name>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="44" column="28" bodyfile="include/dpp/fmt/xchar.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1ac1a29bcda6ac18660c9ccacd9716e92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename It</type>
          </param>
          <param>
            <type>typename Sentinel</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto join</definition>
        <argsstring>(It begin, Sentinel end, wstring_view sep) -&gt; join_view&lt; It, Sentinel, wchar_t &gt;</argsstring>
        <name>join</name>
        <param>
          <type>It</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Sentinel</type>
          <declname>end</declname>
        </param>
        <param>
          <type>wstring_view</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="63" column="6" bodyfile="include/dpp/fmt/xchar.h" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1a635bfc73d1b7bd10fbf3677f5169d442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto join</definition>
        <argsstring>(Range &amp;&amp;range, wstring_view sep) -&gt; join_view&lt; detail::iterator_t&lt; Range &gt;, detail::sentinel_t&lt; Range &gt;, wchar_t &gt;</argsstring>
        <name>join</name>
        <param>
          <type>Range &amp;&amp;</type>
          <declname>range</declname>
        </param>
        <param>
          <type>wstring_view</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="69" column="6" bodyfile="include/dpp/fmt/xchar.h" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1ac406c8a329fe121e1ade978bd96e31c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto join</definition>
        <argsstring>(std::initializer_list&lt; T &gt; list, wstring_view sep) -&gt; join_view&lt; const T *, const T *, wchar_t &gt;</argsstring>
        <name>join</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>wstring_view</type>
          <declname>sep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="76" column="6" bodyfile="include/dpp/fmt/xchar.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1a3751e89ff91d5a87a08f5347ee3d86e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(!std::is_same&lt; Char, char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vformat</definition>
        <argsstring>(basic_string_view&lt; Char &gt; format_str, basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt; &gt; &gt; args) -&gt; std::basic_string&lt; Char &gt;</argsstring>
        <name>vformat</name>
        <param>
          <type>basic_string_view&lt; Char &gt;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt; &gt; &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="82" column="6" bodyfile="include/dpp/fmt/xchar.h" bodystart="82" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1aa0c91f73305f75572aa73b2386063aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>FMT_ENABLE_IF(!std::is_same&lt; Char, char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto format</definition>
        <argsstring>(const S &amp;format_str, Args &amp;&amp;... args) -&gt; std::basic_string&lt; Char &gt;</argsstring>
        <name>format</name>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="94" column="6" bodyfile="include/dpp/fmt/xchar.h" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1a240b345af98fec48e13a5e2bc4e9e167" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Locale</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_locale&lt; Locale &gt;::value &amp;&amp; <ref refid="namespacedetail_1a3b3b86611e0c88278feb2098fce10b23" kindref="member">detail::is_exotic_char</ref>&lt; Char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vformat</definition>
        <argsstring>(const Locale &amp;loc, const S &amp;format_str, basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt; &gt; &gt; args) -&gt; std::basic_string&lt; Char &gt;</argsstring>
        <name>vformat</name>
        <param>
          <type>const Locale &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt; &gt; &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="102" column="13" bodyfile="include/dpp/fmt/xchar.h" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1adbec664fb40387a823078cb103b965f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Locale</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_locale&lt; Locale &gt;::value &amp;&amp; <ref refid="namespacedetail_1a3b3b86611e0c88278feb2098fce10b23" kindref="member">detail::is_exotic_char</ref>&lt; Char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto format</definition>
        <argsstring>(const Locale &amp;loc, const S &amp;format_str, Args &amp;&amp;... args) -&gt; std::basic_string&lt; Char &gt;</argsstring>
        <name>format</name>
        <param>
          <type>const Locale &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="113" column="13" bodyfile="include/dpp/fmt/xchar.h" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1a19f71a2d7b94c5a07df699367c11e2e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_output_iterator&lt; OutputIt, Char &gt;::value &amp;&amp; <ref refid="namespacedetail_1a3b3b86611e0c88278feb2098fce10b23" kindref="member">detail::is_exotic_char</ref>&lt; Char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vformat_to</definition>
        <argsstring>(OutputIt out, const S &amp;format_str, basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt; &gt; &gt; args) -&gt; OutputIt</argsstring>
        <name>vformat_to</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt; &gt; &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="122" column="6" bodyfile="include/dpp/fmt/xchar.h" bodystart="122" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1a4ba756b447388cbd97a3f5b4954d7db6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_output_iterator&lt; OutputIt, Char &gt;::value &amp;&amp; <ref refid="namespacedetail_1a3b3b86611e0c88278feb2098fce10b23" kindref="member">detail::is_exotic_char</ref>&lt; Char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto format_to</definition>
        <argsstring>(OutputIt out, const S &amp;fmt, Args &amp;&amp;... args) -&gt; OutputIt</argsstring>
        <name>format_to</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="134" column="13" bodyfile="include/dpp/fmt/xchar.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1aa1623c8829582784b239fb528bce4baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>SIZE</declname>
            <defname>SIZE</defname>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_string&lt; S &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>FMT_DEPRECATED auto</type>
        <definition>FMT_DEPRECATED auto format_to</definition>
        <argsstring>(basic_memory_buffer&lt; Char, SIZE, Allocator &gt; &amp;buf, const S &amp;format_str, Args &amp;&amp;... args) -&gt; typename buffer_context&lt; Char &gt;::iterator</argsstring>
        <name>format_to</name>
        <param>
          <type>basic_memory_buffer&lt; Char, SIZE, Allocator &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="141" column="21" bodyfile="include/dpp/fmt/xchar.h" bodystart="141" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1a2a53a17dd7100353ee30cac0d963cea6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Locale</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_output_iterator&lt; OutputIt, Char &gt;::value &amp;&amp; detail::is_locale&lt; Locale &gt;::value &amp;&amp; <ref refid="namespacedetail_1a3b3b86611e0c88278feb2098fce10b23" kindref="member">detail::is_exotic_char</ref>&lt; Char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vformat_to</definition>
        <argsstring>(OutputIt out, const Locale &amp;loc, const S &amp;format_str, basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt; &gt; &gt; args) -&gt; OutputIt</argsstring>
        <name>vformat_to</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const Locale &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt; &gt; &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="154" column="13" bodyfile="include/dpp/fmt/xchar.h" bodystart="154" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1aa9e365a3e5b162f895f237d4c192efbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename Locale</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>bool</type>
            <declname>enable</declname>
            <defname>enable</defname>
            <defval>detail::is_output_iterator&lt;OutputIt, Char&gt;::value&amp;&amp; detail::is_locale&lt;Locale&gt;::value&amp;&amp; <ref refid="namespacedetail_1a3b3b86611e0c88278feb2098fce10b23" kindref="member">detail::is_exotic_char</ref>&lt;Char&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto format_to</definition>
        <argsstring>(OutputIt out, const Locale &amp;loc, const S &amp;format_str, Args &amp;&amp;... args) -&gt; typename std::enable_if&lt; enable, OutputIt &gt;::type</argsstring>
        <name>format_to</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const Locale &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="167" column="13" bodyfile="include/dpp/fmt/xchar.h" bodystart="167" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1a753360f8867ef81f0cf30f93c099c7b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_output_iterator&lt; OutputIt, Char &gt;::value &amp;&amp; <ref refid="namespacedetail_1a3b3b86611e0c88278feb2098fce10b23" kindref="member">detail::is_exotic_char</ref>&lt; Char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vformat_to_n</definition>
        <argsstring>(OutputIt out, size_t n, basic_string_view&lt; Char &gt; format_str, basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt; &gt; &gt; args) -&gt; format_to_n_result&lt; OutputIt &gt;</argsstring>
        <name>vformat_to_n</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>basic_string_view&lt; Char &gt;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>basic_format_args&lt; buffer_context&lt; type_identity_t&lt; Char &gt; &gt; &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="177" column="13" bodyfile="include/dpp/fmt/xchar.h" bodystart="177" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1a89f4e184a1615a83f0d2245c67b89c9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_output_iterator&lt; OutputIt, Char &gt;::value &amp;&amp; <ref refid="namespacedetail_1a3b3b86611e0c88278feb2098fce10b23" kindref="member">detail::is_exotic_char</ref>&lt; Char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto format_to_n</definition>
        <argsstring>(OutputIt out, size_t n, const S &amp;fmt, const Args &amp;... args) -&gt; format_to_n_result&lt; OutputIt &gt;</argsstring>
        <name>format_to_n</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="191" column="13" bodyfile="include/dpp/fmt/xchar.h" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1abda05238e2731b3b871cdddf304bed4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
          <param>
            <type>FMT_ENABLE_IF(<ref refid="namespacedetail_1a3b3b86611e0c88278feb2098fce10b23" kindref="member">detail::is_exotic_char</ref>&lt; Char &gt;::value)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto formatted_size</definition>
        <argsstring>(const S &amp;fmt, Args &amp;&amp;... args) -&gt; size_t</argsstring>
        <name>formatted_size</name>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="199" column="13" bodyfile="include/dpp/fmt/xchar.h" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1ad59e14d924bf2fe1d17939ad9d8b8d4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vprint</definition>
        <argsstring>(std::FILE *f, wstring_view fmt, wformat_args args)</argsstring>
        <name>vprint</name>
        <param>
          <type>std::FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>wstring_view</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>wformat_args</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="206" column="13" bodyfile="include/dpp/fmt/xchar.h" bodystart="206" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1ab357e28df4fee8293636aaf7a1662508" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vprint</definition>
        <argsstring>(wstring_view fmt, wformat_args args)</argsstring>
        <name>vprint</name>
        <param>
          <type>wstring_view</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>wformat_args</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="214" column="13" bodyfile="include/dpp/fmt/xchar.h" bodystart="214" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1aca7a32e4363230ba92ebd2e429b1e1b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(std::FILE *f, wformat_string&lt; T... &gt; fmt, T &amp;&amp;... args)</argsstring>
        <name>print</name>
        <param>
          <type>std::FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>wformat_string&lt; T... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="219" column="6" bodyfile="include/dpp/fmt/xchar.h" bodystart="219" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1a8ad2704d2db1ea1b9663084d6fb51e0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void print</definition>
        <argsstring>(wformat_string&lt; T... &gt; fmt, T &amp;&amp;... args)</argsstring>
        <name>print</name>
        <param>
          <type>wformat_string&lt; T... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="223" column="18" bodyfile="include/dpp/fmt/xchar.h" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="xchar_8h_1ac097a9b8ef6c373be32b7ce1bf329d0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto to_wstring</definition>
        <argsstring>(const T &amp;value) -&gt; std::wstring</argsstring>
        <name>to_wstring</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts <emphasis>value</emphasis> to <computeroutput>std::wstring</computeroutput> using the default format for type <emphasis>T</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/fmt/xchar.h" line="230" column="25" bodyfile="include/dpp/fmt/xchar.h" bodystart="230" bodyend="232"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/dpp/fmt/xchar.h"/>
  </compounddef>
</doxygen>
