<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1detail_1_1job__promise" kind="struct" language="C++" prot="public">
    <compoundname>dpp::detail::job_promise</compoundname>
    <includes local="no">job.h</includes>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>Args</declname>
        <defname>Args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1detail_1_1job__promise_1a756bf9d4ffbd294c2c97a2b3c1f200b2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std_coroutine::suspend_never</type>
        <definition>std_coroutine::suspend_never dpp::detail::job_promise&lt; Args &gt;::final_suspend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>final_suspend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/job.h" line="83" column="30" bodyfile="include/dpp/coro/job.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1job__promise_1a7c352c75773b64512f5f396ce77ad66d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std_coroutine::suspend_never</type>
        <definition>std_coroutine::suspend_never dpp::detail::job_promise&lt; Args &gt;::initial_suspend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>initial_suspend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/job.h" line="92" column="30" bodyfile="include/dpp/coro/job.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1job__promise_1ac8e5f6447d9598dd9c0ba3eb8b2c8810" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1job" kindref="compound">dpp::job</ref></type>
        <definition>dpp::job dpp::detail::job_promise&lt; Args &gt;::get_return_object</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_return_object</name>
        <briefdescription>
<para>Function called to get the job object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>job </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/job.h" line="101" column="10" bodyfile="include/dpp/coro/job.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1job__promise_1aa81f12cad733254432860b448440fd5d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::job_promise&lt; Args &gt;::unhandled_exception</definition>
        <argsstring>() const</argsstring>
        <name>unhandled_exception</name>
        <briefdescription>
<para>Function called when an exception is thrown and not caught. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Immediately</parametername>
</parameternamelist>
<parameterdescription>
<para>rethrows the exception to the caller / resumer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/job.h" line="110" column="6" bodyfile="include/dpp/coro/job.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1job__promise_1a074e4cf022b0722cb25f0f5a57514427" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::detail::job_promise&lt; Args &gt;::return_void</definition>
        <argsstring>() const noexcept</argsstring>
        <name>return_void</name>
        <briefdescription>
<para>Function called when the job returns. Does nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/job.h" line="117" column="6" bodyfile="include/dpp/coro/job.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1detail_1_1job__promise_1aa4a8809d9fd13c9c30204783a5929e61" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T dpp::detail::job_promise&lt; Args &gt;::await_transform</definition>
        <argsstring>(T &amp;&amp;expr) const noexcept</argsstring>
        <name>await_transform</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><computeroutput>job</computeroutput> is extremely efficient as a coroutine but this comes with drawbacks : It cannot be co_awaited, which means the second it co_awaits something, the program jumps back to the calling function, which continues executing. At this point, if the function returns, every object declared in the function including its parameters are destroyed, which causes dangling references. This is exactly the same problem as references in lambdas : <ulink url="https://dpp.dev/lambdas-and-locals.html">https://dpp.dev/lambdas-and-locals.html</ulink>.</para>
<para>If you must pass a reference, pass it as a pointer or with std::ref, but you must fully understand the reason behind this warning, and what to avoid. If you prefer a safer type, use <computeroutput>coroutine</computeroutput> for synchronous execution, or <computeroutput>task</computeroutput> for parallel tasks, and co_await them.</para>
        </inbodydescription>
        <location file="include/dpp/coro/job.h" line="120" column="3" bodyfile="include/dpp/coro/job.h" bodystart="120" bodyend="133"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Coroutine promise type for a job. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/dpp/coro/job.h" line="66" column="1" bodyfile="include/dpp/coro/job.h" bodystart="66" bodyend="134"/>
    <listofallmembers>
      <member refid="structdpp_1_1detail_1_1job__promise_1aa4a8809d9fd13c9c30204783a5929e61" prot="public" virt="non-virtual"><scope>dpp::detail::job_promise</scope><name>await_transform</name></member>
      <member refid="structdpp_1_1detail_1_1job__promise_1a756bf9d4ffbd294c2c97a2b3c1f200b2" prot="public" virt="non-virtual"><scope>dpp::detail::job_promise</scope><name>final_suspend</name></member>
      <member refid="structdpp_1_1detail_1_1job__promise_1ac8e5f6447d9598dd9c0ba3eb8b2c8810" prot="public" virt="non-virtual"><scope>dpp::detail::job_promise</scope><name>get_return_object</name></member>
      <member refid="structdpp_1_1detail_1_1job__promise_1a7c352c75773b64512f5f396ce77ad66d" prot="public" virt="non-virtual"><scope>dpp::detail::job_promise</scope><name>initial_suspend</name></member>
      <member refid="structdpp_1_1detail_1_1job__promise_1a074e4cf022b0722cb25f0f5a57514427" prot="public" virt="non-virtual"><scope>dpp::detail::job_promise</scope><name>return_void</name></member>
      <member refid="structdpp_1_1detail_1_1job__promise_1aa81f12cad733254432860b448440fd5d" prot="public" virt="non-virtual"><scope>dpp::detail::job_promise</scope><name>unhandled_exception</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
