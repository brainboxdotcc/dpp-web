<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1moveable__promise" kind="class" language="C++" prot="public">
    <compoundname>dpp::moveable_promise</compoundname>
    <includes local="no">awaitable.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1moveable__promise_1a23aa76cf762a39f3006a1bfe2d2067e2" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classdpp_1_1basic__promise" kindref="compound">basic_promise</ref>&lt; T &gt; &gt;</type>
        <definition>std::unique_ptr&lt;basic_promise&lt;T&gt; &gt; dpp::moveable_promise&lt; T &gt;::shared_state</definition>
        <argsstring></argsstring>
        <name>shared_state</name>
        <initializer>= std::make_unique&lt;<ref refid="classdpp_1_1basic__promise" kindref="compound">basic_promise</ref>&lt;T&gt;&gt;()</initializer>
        <briefdescription>
<para>Shared state, wrapped in a unique_ptr to allow move without disturbing an awaitable&apos;s promise pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="585" column="17" bodyfile="include/dpp/coro/awaitable.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1moveable__promise_1a2797eb86e36556a42d16e544bbebbd8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Notify</declname>
            <defname>Notify</defname>
            <defval>true</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dpp::moveable_promise&lt; T &gt;::emplace_value</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace_value</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
    <requiresclause>(std::constructible_from&lt;T, Args...&gt;)    </requiresclause>
        <briefdescription>
<para>Construct the result in place by forwarding the arguments, and by default resume any awaiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Notify</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to resume any awaiter or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the promise is not empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="593" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="593" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1moveable__promise_1a4f5338a987325c6d49bc17bcb23dae6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Notify</declname>
            <defname>Notify</defname>
            <defval>true</defval>
          </param>
          <param>
            <type>typename U</type>
            <defval>T</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dpp::moveable_promise&lt; T &gt;::set_value</definition>
        <argsstring>(U &amp;&amp;v)</argsstring>
        <name>set_value</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>v</declname>
        </param>
    <requiresclause>(std::convertible_to&lt;U&amp;&amp;, T&gt;)    </requiresclause>
        <briefdescription>
<para>Construct the result by forwarding reference, and resume any awaiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Notify</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to resume any awaiter or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the promise is not empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="601" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="601" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1moveable__promise_1a8d36fc2c3ae52ab8922a01df7be72451" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Notify</declname>
            <defname>Notify</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dpp::moveable_promise&lt; T &gt;::set_value</definition>
        <argsstring>()</argsstring>
        <name>set_value</name>
    <requiresclause>(std::is_void_v&lt;T&gt;)    </requiresclause>
        <briefdescription>
<para>Construct a void result, and resume any awaiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Notify</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to resume any awaiter or not. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the promise is not empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="609" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="609" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1moveable__promise_1ad5792560d88ecc4c4cc7f68a12124dd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>Notify</declname>
            <defname>Notify</defname>
            <defval>true</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dpp::moveable_promise&lt; T &gt;::set_exception</definition>
        <argsstring>(std::exception_ptr ptr)</argsstring>
        <name>set_exception</name>
        <param>
          <type>std::exception_ptr</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="617" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="617" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1moveable__promise_1a89f291d78a63dfacc1f2d9becba25254" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::moveable_promise&lt; T &gt;::notify_awaiter</definition>
        <argsstring>()</argsstring>
        <name>notify_awaiter</name>
        <briefdescription>
<para>Notify a currently awaiting coroutine that the result is ready. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This may resume the coroutine on the current thread. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>?</parametername>
</parameternamelist>
<parameterdescription>
<para>Any exception thrown by the coroutine if resumed will propagate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="624" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="624" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1moveable__promise_1abbf0a0ba61932e3be518fe0001e42ce1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1awaitable" kindref="compound">awaitable</ref>&lt; T &gt;</type>
        <definition>awaitable&lt; T &gt; dpp::moveable_promise&lt; T &gt;::get_awaitable</definition>
        <argsstring>()</argsstring>
        <name>get_awaitable</name>
        <briefdescription>
<para>Get an awaitable object for this promise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if get_awaitable has already been called on this object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>awaitable&lt;T&gt; An object that can be co_await-ed to retrieve the value of this promise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="631" column="11" bodyfile="include/dpp/coro/awaitable.h" bodystart="631" bodyend="633"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic promise class, represents the owning potion of an asynchronous value. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is roughly equivalent to std::promise, with the crucial distinction that the promise <emphasis>IS</emphasis> the shared state. As such, the promise needs to be kept alive for the entire time a value can be retrieved.</para>
<para>The difference between <ref refid="classdpp_1_1basic__promise" kindref="compound">basic_promise</ref> and this object is that this one is moveable as it wraps an underlying <ref refid="classdpp_1_1basic__promise" kindref="compound">basic_promise</ref> in a std::unique_ptr.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1awaitable" kindref="compound">awaitable</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="include/dpp/coro/awaitable.h" line="581" column="1" bodyfile="include/dpp/coro/awaitable.h" bodystart="581" bodyend="634"/>
    <listofallmembers>
      <member refid="classdpp_1_1moveable__promise_1a2797eb86e36556a42d16e544bbebbd8a" prot="public" virt="non-virtual"><scope>dpp::moveable_promise</scope><name>emplace_value</name></member>
      <member refid="classdpp_1_1moveable__promise_1abbf0a0ba61932e3be518fe0001e42ce1" prot="public" virt="non-virtual"><scope>dpp::moveable_promise</scope><name>get_awaitable</name></member>
      <member refid="classdpp_1_1moveable__promise_1a89f291d78a63dfacc1f2d9becba25254" prot="public" virt="non-virtual"><scope>dpp::moveable_promise</scope><name>notify_awaiter</name></member>
      <member refid="classdpp_1_1moveable__promise_1ad5792560d88ecc4c4cc7f68a12124dd4" prot="public" virt="non-virtual"><scope>dpp::moveable_promise</scope><name>set_exception</name></member>
      <member refid="classdpp_1_1moveable__promise_1a4f5338a987325c6d49bc17bcb23dae6f" prot="public" virt="non-virtual"><scope>dpp::moveable_promise</scope><name>set_value</name></member>
      <member refid="classdpp_1_1moveable__promise_1a8d36fc2c3ae52ab8922a01df7be72451" prot="public" virt="non-virtual"><scope>dpp::moveable_promise</scope><name>set_value</name></member>
      <member refid="classdpp_1_1moveable__promise_1a23aa76cf762a39f3006a1bfe2d2067e2" prot="private" virt="non-virtual"><scope>dpp::moveable_promise</scope><name>shared_state</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
