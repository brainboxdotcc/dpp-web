<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1dtemplate" kind="class" language="C++" prot="public">
    <compoundname>dpp::dtemplate</compoundname>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; dtemplate &gt;</basecompoundref>
    <includes local="no">dtemplate.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1afd09c5cd9ada37b0b3dc4f8c4570d25e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::dtemplate::code</definition>
        <argsstring></argsstring>
        <name>code</name>
        <briefdescription>
<para>Template code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="38" column="13" bodyfile="include/dpp/dtemplate.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1ae8a2dbdf16476136623a112a76119b97" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::dtemplate::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Template name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="42" column="13" bodyfile="include/dpp/dtemplate.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a3b48f9a642e8bcca21c75679c50ce413" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::dtemplate::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>Template description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="46" column="13" bodyfile="include/dpp/dtemplate.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a0086e48d5206046a581b1deb9105668c" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::dtemplate::usage_count</definition>
        <argsstring></argsstring>
        <name>usage_count</name>
        <briefdescription>
<para>Usage counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="50" column="10" bodyfile="include/dpp/dtemplate.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a88f8fea4271892bcf825fda8fbe3dba8" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::dtemplate::creator_id</definition>
        <argsstring></argsstring>
        <name>creator_id</name>
        <briefdescription>
<para>User ID of creator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="54" column="11" bodyfile="include/dpp/dtemplate.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a756fa7c16105d1ec41154b8ea8151ab6" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::dtemplate::created_at</definition>
        <argsstring></argsstring>
        <name>created_at</name>
        <briefdescription>
<para>Creation date/time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="59" column="8" bodyfile="include/dpp/dtemplate.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a2470428709c07fd34b0654f3d0cacf15" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::dtemplate::updated_at</definition>
        <argsstring></argsstring>
        <name>updated_at</name>
        <briefdescription>
<para>Last update date/time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="63" column="8" bodyfile="include/dpp/dtemplate.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a4ec6536f11f56d2cb001dc76e9bd9ceb" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::dtemplate::source_guild_id</definition>
        <argsstring></argsstring>
        <name>source_guild_id</name>
        <briefdescription>
<para>Guild id the template is created from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="67" column="11" bodyfile="include/dpp/dtemplate.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a457edbe0f739d80640807571875cdc5a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::dtemplate::is_dirty</definition>
        <argsstring></argsstring>
        <name>is_dirty</name>
        <briefdescription>
<para>True if needs synchronising. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="71" column="6" bodyfile="include/dpp/dtemplate.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1dtemplate_1a2dbcc0cbb9b829f95f93bf59ed416812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::dtemplate::dtemplate</definition>
        <argsstring>()</argsstring>
        <name>dtemplate</name>
        <briefdescription>
<para>Construct a new dtemplate object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="76" column="1" bodyfile="src/dpp/dtemplate.cpp" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1dtemplate_1a1ae48c050ffc66f77f857f939cc66487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::dtemplate::~dtemplate</definition>
        <argsstring>()</argsstring>
        <name>~dtemplate</name>
        <briefdescription>
<para>Destroy the dtemplate object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1dtemplate_1abf354676c51ce89863c7e75493df2005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1dtemplate" kindref="compound">dtemplate</ref> &amp;</type>
        <definition>dtemplate &amp; dpp::dtemplate::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="87" column="12" bodyfile="src/dpp/dtemplate.cpp" bodystart="36" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1dtemplate_1ac60d38ff1b7d39663be298e95b888f82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string dpp::dtemplate::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <reimplements refid="structdpp_1_1json__interface_1a287c22f692ee3d25b6f9b320ff35baa1">build_json</reimplements>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build the JSON for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Add ID to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string JSON content </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="95" column="21" bodyfile="src/dpp/dtemplate.cpp" bodystart="49" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a2c9a2c965fd68714e9f8d163d4ea8d91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1dtemplate" kindref="compound">dtemplate</ref> &amp;</type>
        <definition>dtemplate  &amp; dpp::json_interface&lt; dtemplate  &gt;::parse_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>parse_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="42" column="3" bodyfile="include/dpp/json_interface.h" bodystart="42" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a guild template. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::dtemplate</label>
        <link refid="classdpp_1_1dtemplate"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; dtemplate &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>bool</label>
      </node>
      <node id="1">
        <label>dpp::dtemplate</label>
        <link refid="classdpp_1_1dtemplate"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>code</edgelabel>
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>usage_count</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>creator_id</edgelabel>
          <edgelabel>source_guild_id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>created_at</edgelabel>
          <edgelabel>updated_at</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>is_dirty</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; dtemplate &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>time_t</label>
      </node>
      <node id="5">
        <label>uint32_t</label>
      </node>
      <node id="6">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dtemplate.h" line="33" column="1" bodyfile="include/dpp/dtemplate.h" bodystart="33" bodyend="97"/>
    <listofallmembers>
      <member refid="classdpp_1_1dtemplate_1ac60d38ff1b7d39663be298e95b888f82" prot="public" virt="virtual"><scope>dpp::dtemplate</scope><name>build_json</name></member>
      <member refid="classdpp_1_1dtemplate_1afd09c5cd9ada37b0b3dc4f8c4570d25e" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>code</name></member>
      <member refid="classdpp_1_1dtemplate_1a756fa7c16105d1ec41154b8ea8151ab6" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>created_at</name></member>
      <member refid="classdpp_1_1dtemplate_1a88f8fea4271892bcf825fda8fbe3dba8" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>creator_id</name></member>
      <member refid="classdpp_1_1dtemplate_1a3b48f9a642e8bcca21c75679c50ce413" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>description</name></member>
      <member refid="classdpp_1_1dtemplate_1a2dbcc0cbb9b829f95f93bf59ed416812" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>dtemplate</name></member>
      <member refid="classdpp_1_1dtemplate_1abf354676c51ce89863c7e75493df2005" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1dtemplate_1a457edbe0f739d80640807571875cdc5a" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>is_dirty</name></member>
      <member refid="classdpp_1_1dtemplate_1ae8a2dbdf16476136623a112a76119b97" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>name</name></member>
      <member refid="structdpp_1_1json__interface_1a2c9a2c965fd68714e9f8d163d4ea8d91" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>parse_from_json</name></member>
      <member refid="classdpp_1_1dtemplate_1a4ec6536f11f56d2cb001dc76e9bd9ceb" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>source_guild_id</name></member>
      <member refid="classdpp_1_1dtemplate_1a2470428709c07fd34b0654f3d0cacf15" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>updated_at</name></member>
      <member refid="classdpp_1_1dtemplate_1a0086e48d5206046a581b1deb9105668c" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>usage_count</name></member>
      <member refid="classdpp_1_1dtemplate_1a1ae48c050ffc66f77f857f939cc66487" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>~dtemplate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
