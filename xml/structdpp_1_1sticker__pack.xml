<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="structdpp_1_1sticker__pack" kind="struct" prot="public">
    <compoundname>dpp::sticker_pack</compoundname>
    <includes local="no">message.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a8414c1af82caf629ac2ac8a567e1ec77" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::sticker_pack::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>id of the sticker pack </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="687" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a0eda149feeaa0abeba5842f4d8c18e46" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &gt;</type>
        <definition>std::map&lt;snowflake, sticker&gt; dpp::sticker_pack::stickers</definition>
        <argsstring></argsstring>
        <name>stickers</name>
        <briefdescription>
<para>the stickers in the pack </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="689" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a399c740b550ec216511437962f9e9b2c" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sticker_pack::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>name of the sticker pack </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="691" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1ac9ee077be2df50175a2e9b9c99ec35d3" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::sticker_pack::sku_id</definition>
        <argsstring></argsstring>
        <name>sku_id</name>
        <briefdescription>
<para>id of the pack&apos;s SKU </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="693" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a49377b72f118dc19514f165d344a83d7" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::sticker_pack::cover_sticker_id</definition>
        <argsstring></argsstring>
        <name>cover_sticker_id</name>
        <briefdescription>
<para>Optional: id of a sticker in the pack which is shown as the pack&apos;s icon. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="695" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a27f09153a66b2a3390b9b8b66a700f28" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sticker_pack::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>description of the sticker pack </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="697" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a1f2430ab0a0bebabe48954017ef4a003" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::sticker_pack::banner_asset_id</definition>
        <argsstring></argsstring>
        <name>banner_asset_id</name>
        <briefdescription>
<para>id of the sticker pack&apos;s banner image </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="699" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="699" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1sticker__pack_1ae50d2073e56542513b89e5a55a6e7a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::sticker_pack::sticker_pack</definition>
        <argsstring>()</argsstring>
        <name>sticker_pack</name>
        <briefdescription>
<para>Construct a new sticker pack object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="704" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="955" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1sticker__pack_1a98955bba3833a65bfb0af6c580d32f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1sticker__pack" kindref="compound">sticker_pack</ref> &amp;</type>
        <definition>sticker_pack &amp; dpp::sticker_pack::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="710" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="958" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1sticker__pack_1a0af477ffa0b0abf4f66c11892b622042" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::sticker_pack::build_json</definition>
        <argsstring>(bool with_id=true) const </argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build JSON from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the ID is to be set in the JSON structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON text of the invite </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/brain/D++/include/dpp/message.h" line="716" column="1" bodyfile="/home/brain/D++/src/dpp/message.cpp" bodystart="974" bodyend="995"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="14185">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="14186" relation="public-inheritance">
        </childnode>
        <childnode refid="14187" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="14188" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="14189" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
        <childnode refid="14190" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="14192" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="14181">
        <label>uint64_t</label>
      </node>
      <node id="14183">
        <label>dpp::sticker</label>
        <link refid="structdpp_1_1sticker"/>
        <childnode refid="14184" relation="usage">
          <edgelabel>format_type</edgelabel>
        </childnode>
        <childnode refid="14181" relation="usage">
          <edgelabel>pack_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="14185" relation="usage">
          <edgelabel>sticker_user</edgelabel>
        </childnode>
        <childnode refid="14189" relation="usage">
          <edgelabel>sort_value</edgelabel>
        </childnode>
        <childnode refid="14193" relation="usage">
          <edgelabel>available</edgelabel>
        </childnode>
        <childnode refid="14190" relation="usage">
          <edgelabel>filecontent</edgelabel>
          <edgelabel>asset</edgelabel>
          <edgelabel>tags</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>filename</edgelabel>
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="14194" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="14187">
        <label>uint16_t</label>
      </node>
      <node id="14191">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="14192">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="14181" relation="usage">
          <edgelabel>second</edgelabel>
          <edgelabel>first</edgelabel>
        </childnode>
      </node>
      <node id="14188">
        <label>uint32_t</label>
      </node>
      <node id="14184">
        <label>sticker_format</label>
      </node>
      <node id="14189">
        <label>uint8_t</label>
      </node>
      <node id="14180">
        <label>dpp::sticker_pack</label>
        <link refid="structdpp_1_1sticker__pack"/>
        <childnode refid="14181" relation="usage">
          <edgelabel>cover_sticker_id</edgelabel>
          <edgelabel>banner_asset_id</edgelabel>
          <edgelabel>id</edgelabel>
          <edgelabel>sku_id</edgelabel>
        </childnode>
        <childnode refid="14182" relation="usage">
          <edgelabel>stickers</edgelabel>
        </childnode>
        <childnode refid="14190" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>description</edgelabel>
        </childnode>
      </node>
      <node id="14194">
        <label>sticker_type</label>
      </node>
      <node id="14186">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="14181" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="14193">
        <label>bool</label>
      </node>
      <node id="14182">
        <label>std::map&lt; snowflake, dpp::sticker &gt;</label>
        <childnode refid="14181" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="14183" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="14190">
        <label>std::string</label>
        <childnode refid="14191" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/brain/D++/include/dpp/message.h" line="685" column="1" bodyfile="/home/brain/D++/include/dpp/message.h" bodystart="685" bodyend="718"/>
    <listofallmembers>
      <member refid="structdpp_1_1sticker__pack_1a1f2430ab0a0bebabe48954017ef4a003" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>banner_asset_id</name></member>
      <member refid="structdpp_1_1sticker__pack_1a0af477ffa0b0abf4f66c11892b622042" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>build_json</name></member>
      <member refid="structdpp_1_1sticker__pack_1a49377b72f118dc19514f165d344a83d7" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>cover_sticker_id</name></member>
      <member refid="structdpp_1_1sticker__pack_1a27f09153a66b2a3390b9b8b66a700f28" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>description</name></member>
      <member refid="structdpp_1_1sticker__pack_1a98955bba3833a65bfb0af6c580d32f59" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1sticker__pack_1a8414c1af82caf629ac2ac8a567e1ec77" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>id</name></member>
      <member refid="structdpp_1_1sticker__pack_1a399c740b550ec216511437962f9e9b2c" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>name</name></member>
      <member refid="structdpp_1_1sticker__pack_1ac9ee077be2df50175a2e9b9c99ec35d3" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>sku_id</name></member>
      <member refid="structdpp_1_1sticker__pack_1ae50d2073e56542513b89e5a55a6e7a23" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>sticker_pack</name></member>
      <member refid="structdpp_1_1sticker__pack_1a0eda149feeaa0abeba5842f4d8c18e46" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>stickers</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
