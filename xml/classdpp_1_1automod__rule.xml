<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1automod__rule" kind="class" language="C++" prot="public">
    <compoundname>dpp::automod_rule</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; automod_rule &gt;</basecompoundref>
    <includes local="no">automod.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1automod__rule_1a9a9e010cb737f2d79f8984d6e1deb773" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; automod_rule &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; automod_rule &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="307" column="9" bodyfile="include/dpp/automod.h" bodystart="315" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1afe49d0d9c4cefa8d807fd411834799c6" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>the id of this rule </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="336" column="17" bodyfile="include/dpp/automod.h" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1afc3b9ebf454ad7cce5169d3b343da869" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>the guild which this rule belongs to </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="341" column="17" bodyfile="include/dpp/automod.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1ad61d0d9890e78c5151031f5775a13472" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::automod_rule::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>the rule name </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="346" column="17" bodyfile="include/dpp/automod.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1ad61bdd0d9d360d6fb6d32318f00ea9d6" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::automod_rule::creator_id</definition>
        <argsstring></argsstring>
        <name>creator_id</name>
        <briefdescription>
<para>The user which first created this rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="351" column="17" bodyfile="include/dpp/automod.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1a48453f7108212b762a37280640079ae4" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a397e69e257d7cb9733f1449317e27d90" kindref="member">automod_event_type</ref></type>
        <definition>automod_event_type dpp::automod_rule::event_type</definition>
        <argsstring></argsstring>
        <name>event_type</name>
        <briefdescription>
<para>The rule event type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="356" column="19" bodyfile="include/dpp/automod.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1a63b4e5f3a00d26c67914afdf051a5ab4" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a6c4401c19cd7e8b05ba2c066f1fdddb6" kindref="member">automod_trigger_type</ref></type>
        <definition>automod_trigger_type dpp::automod_rule::trigger_type</definition>
        <argsstring></argsstring>
        <name>trigger_type</name>
        <briefdescription>
<para>The rule trigger type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="361" column="21" bodyfile="include/dpp/automod.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1acf9135df9cc73ccda7a6193fff22ec6c" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1automod__metadata" kindref="compound">automod_metadata</ref></type>
        <definition>automod_metadata dpp::automod_rule::trigger_metadata</definition>
        <argsstring></argsstring>
        <name>trigger_metadata</name>
        <briefdescription>
<para>The rule trigger metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="366" column="17" bodyfile="include/dpp/automod.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1acd2e73187515f0c9a88b089dab76fd03" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1automod__action" kindref="compound">automod_action</ref> &gt;</type>
        <definition>std::vector&lt;automod_action&gt; dpp::automod_rule::actions</definition>
        <argsstring></argsstring>
        <name>actions</name>
        <briefdescription>
<para>the actions which will execute when the rule is triggered </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="371" column="13" bodyfile="include/dpp/automod.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1aae82de68bf8f59c6dd1a64aa29a874d5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::automod_rule::enabled</definition>
        <argsstring></argsstring>
        <name>enabled</name>
        <briefdescription>
<para>Whether the rule is enabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="376" column="5" bodyfile="include/dpp/automod.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1a5f1eedc34c9a8d99202508fd161b1777" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::automod_rule::exempt_roles</definition>
        <argsstring></argsstring>
        <name>exempt_roles</name>
        <briefdescription>
<para>the role ids that should not be affected by the rule (Maximum of 20) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="381" column="12" bodyfile="include/dpp/automod.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1automod__rule_1a53d470a64f437aeb038c5e122fccded5" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::automod_rule::exempt_channels</definition>
        <argsstring></argsstring>
        <name>exempt_channels</name>
        <briefdescription>
<para>the channel ids that should not be affected by the rule (Maximum of 50) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="386" column="12" bodyfile="include/dpp/automod.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1automod__rule_1a369f8d658d8cea4065a13d4f9bf7a517" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> &amp;</type>
        <definition>automod_rule &amp; dpp::automod_rule::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill object properties from JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON to fill from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref>&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="323" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1automod__rule_1af6c126fa4b42446dd64d40f3175bc4f0" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>virtual json dpp::automod_rule::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build a json string for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>json JSON object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="330" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1automod__rule_1a10845bc9238341fd681979b158d8d875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::automod_rule::automod_rule</definition>
        <argsstring>()</argsstring>
        <name>automod_rule</name>
        <briefdescription>
<para>Construct a new automod rule object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1automod__rule_1a8dac36f14022bfe0b7652f31d82fe64a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::automod_rule::~automod_rule</definition>
        <argsstring>()</argsstring>
        <name>~automod_rule</name>
        <briefdescription>
<para>Destroy the automod rule object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="396" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> &amp;</type>
        <definition>automod_rule  &amp; dpp::json_interface&lt; automod_rule  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="43" column="3" bodyfile="include/dpp/json_interface.h" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; automod_rule  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="55" column="6" bodyfile="include/dpp/json_interface.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; automod_rule  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="67" column="13" bodyfile="include/dpp/json_interface.h" bodystart="67" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an automod rule. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::automod_rule</label>
        <link refid="classdpp_1_1automod__rule"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; automod_rule &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; automod_rule &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>automod_event_type</label>
      </node>
      <node id="10">
        <label>automod_trigger_type</label>
      </node>
      <node id="15">
        <label>bool</label>
      </node>
      <node id="11">
        <label>dpp::automod_metadata</label>
        <link refid="structdpp_1_1automod__metadata"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>allow_list</edgelabel>
          <edgelabel>keywords</edgelabel>
          <edgelabel>presets</edgelabel>
          <edgelabel>regex_patterns</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mention_total_limit</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>mention_raid_protection_enabled</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::automod_rule</label>
        <link refid="classdpp_1_1automod__rule"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>creator_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>event_type</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>trigger_type</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>trigger_metadata</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>actions</edgelabel>
          <edgelabel>exempt_channels</edgelabel>
          <edgelabel>exempt_roles</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>enabled</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::json_interface&lt; automod_metadata &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; automod_metadata &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; automod_rule &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; automod_rule &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>vector&lt;</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="14">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/automod.h" line="313" column="1" bodyfile="include/dpp/automod.h" bodystart="313" bodyend="397"/>
    <listofallmembers>
      <member refid="classdpp_1_1automod__rule_1acd2e73187515f0c9a88b089dab76fd03" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>actions</name></member>
      <member refid="classdpp_1_1automod__rule_1a10845bc9238341fd681979b158d8d875" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>automod_rule</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>build_json</name></member>
      <member refid="classdpp_1_1automod__rule_1ad61bdd0d9d360d6fb6d32318f00ea9d6" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>creator_id</name></member>
      <member refid="classdpp_1_1automod__rule_1aae82de68bf8f59c6dd1a64aa29a874d5" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>enabled</name></member>
      <member refid="classdpp_1_1automod__rule_1a48453f7108212b762a37280640079ae4" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>event_type</name></member>
      <member refid="classdpp_1_1automod__rule_1a53d470a64f437aeb038c5e122fccded5" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>exempt_channels</name></member>
      <member refid="classdpp_1_1automod__rule_1a5f1eedc34c9a8d99202508fd161b1777" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>exempt_roles</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1automod__rule_1a369f8d658d8cea4065a13d4f9bf7a517" prot="protected" virt="non-virtual"><scope>dpp::automod_rule</scope><name>fill_from_json_impl</name></member>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1automod__rule_1afc3b9ebf454ad7cce5169d3b343da869" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1automod__rule_1afe49d0d9c4cefa8d807fd411834799c6" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>id</name></member>
      <member refid="classdpp_1_1automod__rule_1a9a9e010cb737f2d79f8984d6e1deb773" prot="protected" virt="non-virtual"><scope>dpp::automod_rule</scope><name>json_interface&lt; automod_rule &gt;</name></member>
      <member refid="classdpp_1_1managed_1a49ce0d7fdbeab770ec46be27771c2285" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1aa3ee436836ab0e2bf4f842c2c2bc3b52" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a198b514f7e6a2b26734fd2dad85f481d" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1ac7a876ad1764b89f0568a1f1bc6bf640" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>managed</name></member>
      <member refid="classdpp_1_1automod__rule_1ad61d0d9890e78c5151031f5775a13472" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>name</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1a48b542729f1352f93f1c60950986517f" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a4a4be34febb174eaee3c0964d0bf1e21" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>operator==</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>to_json</name></member>
      <member refid="classdpp_1_1automod__rule_1af6c126fa4b42446dd64d40f3175bc4f0" prot="protected" virt="virtual"><scope>dpp::automod_rule</scope><name>to_json_impl</name></member>
      <member refid="classdpp_1_1automod__rule_1acf9135df9cc73ccda7a6193fff22ec6c" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>trigger_metadata</name></member>
      <member refid="classdpp_1_1automod__rule_1a63b4e5f3a00d26c67914afdf051a5ab4" prot="public" virt="non-virtual"><scope>dpp::automod_rule</scope><name>trigger_type</name></member>
      <member refid="classdpp_1_1automod__rule_1a8dac36f14022bfe0b7652f31d82fe64a" prot="public" virt="virtual"><scope>dpp::automod_rule</scope><name>~automod_rule</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::automod_rule</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
