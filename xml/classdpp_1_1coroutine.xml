<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1coroutine" kind="class" language="C++" prot="public">
    <compoundname>dpp::coroutine</compoundname>
    <basecompoundref refid="classdpp_1_1basic__awaitable" prot="public" virt="non-virtual">dpp::basic_awaitable&lt; coroutine&lt; R &gt; &gt;</basecompoundref>
    <includes local="no">coro/coroutine.h</includes>
    <innerclass refid="structdpp_1_1coroutine_1_1awaiter" prot="private">dpp::coroutine::awaiter</innerclass>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classdpp_1_1coroutine_1a339932c88b7dbc063a4d3e242f94ebf7" prot="public" static="no">
        <type>R</type>
        <definition>using dpp::coroutine&lt; R &gt;::result_type =  R</definition>
        <argsstring></argsstring>
        <name>result_type</name>
        <briefdescription>
<para>The type of the result produced by this coroutine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="146" column="1" bodyfile="include/dpp/coro/coroutine.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1coroutine_1a6332dc7b57ab9c9781150134408542c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct detail::coroutine::promise_t&lt; R &gt;</definition>
        <argsstring></argsstring>
        <name>detail::coroutine::promise_t&lt; R &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1detail_1_1coroutine_1_1promise__t" kindref="compound">detail::coroutine::promise_t</ref>&lt; R &gt;</type>
        </param>
        <briefdescription>
<para>Promise has friend access for the constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="394" column="2" bodyfile="include/dpp/coro/coroutine.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1coroutine_1a493a98107454fa508e1352cbe560f242" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1_1detail_1_1coroutine_1a8277dc2e5b05c0232a9237b4a5894e0f" kindref="member">detail::coroutine::handle_t</ref>&lt; R &gt;</type>
        <definition>detail::coroutine::handle_t&lt;R&gt; dpp::coroutine&lt; R &gt;::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Coroutine handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="82" column="29" bodyfile="include/dpp/coro/coroutine.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1coroutine_1abd4161b24ae7c233975957fbdea2bd9f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::coroutine&lt; R &gt;::coroutine</definition>
        <argsstring>(detail::coroutine::handle_t&lt; R &gt; h)</argsstring>
        <name>coroutine</name>
        <param>
          <type><ref refid="namespacedpp_1_1detail_1_1coroutine_1a8277dc2e5b05c0232a9237b4a5894e0f" kindref="member">detail::coroutine::handle_t</ref>&lt; R &gt;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>Construct from a handle. Internal use only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="87" column="1" bodyfile="include/dpp/coro/coroutine.h" bodystart="87" bodyend="87"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1coroutine_1a6397dcd37c8813502852d8e97bc469c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::coroutine&lt; R &gt;::coroutine</definition>
        <argsstring>()=default</argsstring>
        <name>coroutine</name>
        <briefdescription>
<para>Default constructor, creates an empty coroutine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a422280a0dbaa7fe2723eadc4727807cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::coroutine&lt; R &gt;::coroutine</definition>
        <argsstring>(const coroutine &amp;)=delete</argsstring>
        <name>coroutine</name>
        <param>
          <type>const <ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a8a9da3db03fd3fd7b1b4c249c2aa460b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::coroutine&lt; R &gt;::coroutine</definition>
        <argsstring>(coroutine &amp;&amp;other) noexcept</argsstring>
        <name>coroutine</name>
        <param>
          <type><ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor, grabs another coroutine&apos;s handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Coroutine to move the handle from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="163" column="1" bodyfile="include/dpp/coro/coroutine.h" bodystart="163" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1adf481c05529dcd905fa2c53ed4944002" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::coroutine&lt; R &gt;::~coroutine</definition>
        <argsstring>()</argsstring>
        <name>~coroutine</name>
        <briefdescription>
<para>Destructor, destroys the handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="168" column="1" bodyfile="include/dpp/coro/coroutine.h" bodystart="168" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a20dfc8dee1ad0b747e100f81ca5af25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;</type>
        <definition>coroutine &amp; dpp::coroutine&lt; R &gt;::operator=</definition>
        <argsstring>(const coroutine &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy assignment is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="177" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a4f05b00fa8cdea3cbc13b4e2c21c5839" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;</type>
        <definition>coroutine &amp; dpp::coroutine&lt; R &gt;::operator=</definition>
        <argsstring>(coroutine &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment, grabs another coroutine&apos;s handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Coroutine to move the handle from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="184" column="11" bodyfile="include/dpp/coro/coroutine.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a7a2bbc55a5c0a7c3dffa4ea400e8ac9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::coroutine&lt; R &gt;::operator co_await</definition>
        <argsstring>()</argsstring>
        <name>operator co_await</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="189" column="7" bodyfile="include/dpp/coro/coroutine.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1basic__awaitable_1ae532f5a8ec60af0b49e7c02780f36f0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::basic_awaitable&lt; coroutine&lt; R &gt;  &gt;::sync_wait</definition>
        <argsstring>()</argsstring>
        <name>sync_wait</name>
        <briefdescription>
<para>Blocks this thread and waits for the awaitable to finish. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This will BLOCK THE THREAD. It is likely you want to use co_await instead. </para>
</simplesect>
<simplesect kind="return"><para>If T is void, returns a boolean for which true means the awaitable completed, false means it timed out. </para>
</simplesect>
<simplesect kind="return"><para>If T is non-void, returns a std::optional&lt;T&gt; for which an absence of value means timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="155" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1basic__awaitable_1a44c9ff53eb87f550aaba04ab7d92c183" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::basic_awaitable&lt; coroutine&lt; R &gt;  &gt;::sync_wait_for</definition>
        <argsstring>(const std::chrono::duration&lt; Rep, Period &gt; &amp;duration)</argsstring>
        <name>sync_wait_for</name>
        <param>
          <type>const std::chrono::duration&lt; Rep, Period &gt; &amp;</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>Blocks this thread and waits for the awaitable to finish. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This will BLOCK THE THREAD. It is likely you want to use co_await instead. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum duration to wait for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If T is void, returns a boolean for which true means the awaitable completed, false means it timed out. </para>
</simplesect>
<simplesect kind="return"><para>If T is non-void, returns a std::optional&lt;T&gt; for which an absence of value means timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="172" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="172" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1basic__awaitable_1a39fe143781a89b19052b6e4d35d30ffe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::basic_awaitable&lt; coroutine&lt; R &gt;  &gt;::sync_wait_until</definition>
        <argsstring>(const std::chrono::time_point&lt; Clock, Duration &gt; &amp;time)</argsstring>
        <name>sync_wait_until</name>
        <param>
          <type>const std::chrono::time_point&lt; Clock, Duration &gt; &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Blocks this thread and waits for the awaitable to finish. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>This will BLOCK THE THREAD. It is likely you want to use co_await instead. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time point to wait for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If T is void, returns a boolean for which true means the awaitable completed, false means it timed out. </para>
</simplesect>
<simplesect kind="return"><para>If T is non-void, returns a std::optional&lt;T&gt; for which an absence of value means timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="189" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="189" bodyend="195"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1basic__awaitable_1ad920651cfc75f83e7977a8dcd6f32a85" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::basic_awaitable&lt; coroutine&lt; R &gt;  &gt;::sync_wait_impl</definition>
        <argsstring>(auto &amp;&amp;do_wait)</argsstring>
        <name>sync_wait_impl</name>
        <param>
          <type>auto &amp;&amp;</type>
          <declname>do_wait</declname>
        </param>
        <briefdescription>
<para>Implementation for sync_wait. This is code used by sync_wait, sync_wait_for, sync_wait_until. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Timed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the wait function times out or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>do_wait</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to do the actual wait on the cv </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If T is void, returns a boolean for which true means the awaitable completed, false means it timed out. </para>
</simplesect>
<simplesect kind="return"><para>If T is non-void, returns a std::optional&lt;T&gt; for which an absence of value means timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/awaitable.h" line="120" column="6" bodyfile="include/dpp/coro/awaitable.h" bodystart="120" bodyend="145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base type for a coroutine, starts on co_await. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>- This feature is EXPERIMENTAL. The API may change at any time and there may be bugs. Please report any to <ulink url="https://github.com/brainboxdotcc/DPP/issues">GitHub Issues</ulink> or to our <ulink url="https://discord.gg/dpp">Discord Server</ulink>. </para>
</simplesect>
<simplesect kind="warning"><para>- Using co_await on this object more than once is undefined behavior. </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>Return type of the coroutine. Can be void, or a complete object that supports move construction and move assignment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::basic_awaitable&lt; coroutine&lt; R &gt; &gt;</label>
        <link refid="classdpp_1_1basic__awaitable"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; coroutine&lt; R &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::basic_awaitable&lt; Derived &gt;</label>
        <link refid="classdpp_1_1basic__awaitable"/>
      </node>
      <node id="1">
        <label>dpp::coroutine&lt; R &gt;</label>
        <link refid="classdpp_1_1coroutine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dpp::basic_awaitable&lt; coroutine&lt; R &gt; &gt;</label>
        <link refid="classdpp_1_1basic__awaitable"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; coroutine&lt; R &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::basic_awaitable&lt; Derived &gt;</label>
        <link refid="classdpp_1_1basic__awaitable"/>
      </node>
      <node id="1">
        <label>dpp::coroutine&lt; R &gt;</label>
        <link refid="classdpp_1_1coroutine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro/coroutine.h" line="64" column="1" bodyfile="include/dpp/coro/coroutine.h" bodystart="73" bodyend="192"/>
    <listofallmembers>
      <member refid="classdpp_1_1coroutine_1abd4161b24ae7c233975957fbdea2bd9f" prot="private" virt="non-virtual"><scope>dpp::coroutine</scope><name>coroutine</name></member>
      <member refid="classdpp_1_1coroutine_1a6397dcd37c8813502852d8e97bc469c5" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>coroutine</name></member>
      <member refid="classdpp_1_1coroutine_1a422280a0dbaa7fe2723eadc4727807cb" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>coroutine</name></member>
      <member refid="classdpp_1_1coroutine_1a8a9da3db03fd3fd7b1b4c249c2aa460b" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>coroutine</name></member>
      <member refid="classdpp_1_1coroutine_1a6332dc7b57ab9c9781150134408542c7" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>detail::coroutine::promise_t&lt; R &gt;</name></member>
      <member refid="classdpp_1_1coroutine_1a493a98107454fa508e1352cbe560f242" prot="private" virt="non-virtual"><scope>dpp::coroutine</scope><name>handle</name></member>
      <member refid="classdpp_1_1coroutine_1a7a2bbc55a5c0a7c3dffa4ea400e8ac9a" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>operator co_await</name></member>
      <member refid="classdpp_1_1coroutine_1a20dfc8dee1ad0b747e100f81ca5af25f" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>operator=</name></member>
      <member refid="classdpp_1_1coroutine_1a4f05b00fa8cdea3cbc13b4e2c21c5839" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>operator=</name></member>
      <member refid="classdpp_1_1coroutine_1a339932c88b7dbc063a4d3e242f94ebf7" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>result_type</name></member>
      <member refid="classdpp_1_1basic__awaitable_1ae532f5a8ec60af0b49e7c02780f36f0d" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>sync_wait</name></member>
      <member refid="classdpp_1_1basic__awaitable_1a44c9ff53eb87f550aaba04ab7d92c183" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>sync_wait_for</name></member>
      <member refid="classdpp_1_1basic__awaitable_1ad920651cfc75f83e7977a8dcd6f32a85" prot="protected" virt="non-virtual"><scope>dpp::coroutine</scope><name>sync_wait_impl</name></member>
      <member refid="classdpp_1_1basic__awaitable_1a39fe143781a89b19052b6e4d35d30ffe" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>sync_wait_until</name></member>
      <member refid="classdpp_1_1coroutine_1adf481c05529dcd905fa2c53ed4944002" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>~coroutine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
