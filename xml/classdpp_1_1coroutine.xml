<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1coroutine" kind="class" language="C++" prot="public">
    <compoundname>dpp::coroutine</compoundname>
    <basecompoundref refid="classdpp_1_1detail_1_1coroutine__base" prot="private" virt="non-virtual">dpp::detail::coroutine_base&lt; R &gt;</basecompoundref>
    <includes local="no">coroutine.h</includes>
    <templateparamlist>
      <param>
        <type>typename R</type>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1coroutine_1a2965bbab21ad6c08322d0e57e7e9e786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class detail::coroutine_base&lt; R &gt;</definition>
        <argsstring></argsstring>
        <name>detail::coroutine_base&lt; R &gt;</name>
        <param>
          <type><ref refid="classdpp_1_1detail_1_1coroutine__base" kindref="compound">detail::coroutine_base</ref>&lt; R &gt;</type>
        </param>
        <briefdescription>
<para>Internal use only base class containing common logic between coroutine&lt;R&gt; and coroutine&lt;void&gt;. It also serves to prevent await_suspend and await_resume from being used directly. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>For internal use only, do not use. </para>
</simplesect>
<simplesect kind="see"><para>operator co_await() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="168" column="10" bodyfile="include/dpp/coro/coroutine.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1coroutine_1a6afb50535e6c94d717ff081fd665df1b" prot="private" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>R &amp;</type>
        <definition>R &amp; dpp::coroutine&lt; R &gt;::await_resume_impl</definition>
        <argsstring>() &amp;</argsstring>
        <name>await_resume_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="192" column="3" bodyfile="include/dpp/coro/coroutine.h" bodystart="192" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a5ddd1b98ebd479fd6c1d341d91a3a782" prot="private" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>const R &amp;</type>
        <definition>const R &amp; dpp::coroutine&lt; R &gt;::await_resume_impl</definition>
        <argsstring>() const &amp;</argsstring>
        <name>await_resume_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="199" column="9" bodyfile="include/dpp/coro/coroutine.h" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a5c43634f95661b8796e7172f730e6e23" prot="private" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>R &amp;&amp;</type>
        <definition>R &amp;&amp; dpp::coroutine&lt; R &gt;::await_resume_impl</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>await_resume_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="206" column="3" bodyfile="include/dpp/coro/coroutine.h" bodystart="206" bodyend="211"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1coroutine_1a6397dcd37c8813502852d8e97bc469c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::coroutine&lt; R &gt;::coroutine</definition>
        <argsstring>()=default</argsstring>
        <name>coroutine</name>
        <briefdescription>
<para>Default constructor, creates an empty coroutine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a422280a0dbaa7fe2723eadc4727807cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::coroutine&lt; R &gt;::coroutine</definition>
        <argsstring>(const coroutine &amp;)=delete</argsstring>
        <name>coroutine</name>
        <param>
          <type>const <ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a8a9da3db03fd3fd7b1b4c249c2aa460b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::coroutine&lt; R &gt;::coroutine</definition>
        <argsstring>(coroutine &amp;&amp;other) noexcept</argsstring>
        <name>coroutine</name>
        <param>
          <type><ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor, grabs another coroutine&apos;s handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Coroutine to move the handle from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1adf481c05529dcd905fa2c53ed4944002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::coroutine&lt; R &gt;::~coroutine</definition>
        <argsstring>()</argsstring>
        <name>~coroutine</name>
        <briefdescription>
<para>Destructor, destroys the handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a20dfc8dee1ad0b747e100f81ca5af25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;</type>
        <definition>coroutine &amp; dpp::coroutine&lt; R &gt;::operator=</definition>
        <argsstring>(const coroutine &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy assignment is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="240" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a4f05b00fa8cdea3cbc13b4e2c21c5839" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;</type>
        <definition>coroutine &amp; dpp::coroutine&lt; R &gt;::operator=</definition>
        <argsstring>(coroutine &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdpp_1_1coroutine" kindref="compound">coroutine</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment, grabs another coroutine&apos;s handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Coroutine to move the handle from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="247" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a2705611051964471b75afc0aa8959946" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::coroutine&lt; R &gt;::await_ready</definition>
        <argsstring>() const</argsstring>
        <name>await_ready</name>
        <briefdescription>
<para>First function called by the standard library when the coroutine is co_await-ed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Do not call this manually, use the co_await keyword instead. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_operation_exception</parametername>
</parameternamelist>
<parameterdescription>
<para>if the coroutine is empty or finished. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool Whether the coroutine is done </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="256" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a76ad676623921b883e2641da57e83670" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>auto &amp;</type>
        <definition>auto &amp; dpp::coroutine&lt; R &gt;::operator co_await</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>operator co_await</name>
        <briefdescription>
<para>Suspend the caller until the coroutine completes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>On</parametername>
</parameternamelist>
<parameterdescription>
<para>resumption, any exception thrown by the coroutine is propagated to the caller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>R&amp; On resumption, this expression evaluates to the result object of type R, as a reference. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="269" column="6" bodyfile="include/dpp/coro/coroutine.h" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1ad69f7a9508e8ac7564b5f9a76d71d194" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>const auto &amp;</type>
        <definition>const auto &amp; dpp::coroutine&lt; R &gt;::operator co_await</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>operator co_await</name>
        <briefdescription>
<para>Suspend the caller until the coroutine completes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>On</parametername>
</parameternamelist>
<parameterdescription>
<para>resumption, any exception thrown by the coroutine is propagated to the caller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const R&amp; On resumption, this expression evaluates to the result object of type R, as a const reference. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="279" column="12" bodyfile="include/dpp/coro/coroutine.h" bodystart="279" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1coroutine_1a356327c8ffafa446a2d5781f74ad7c42" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type>auto &amp;&amp;</type>
        <definition>auto &amp;&amp; dpp::coroutine&lt; R &gt;::operator co_await</definition>
        <argsstring>() &amp;&amp;noexcept</argsstring>
        <name>operator co_await</name>
        <briefdescription>
<para>Suspend the caller until the coroutine completes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>On</parametername>
</parameternamelist>
<parameterdescription>
<para>resumption, any exception thrown by the coroutine is propagated to the caller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>R&amp;&amp; On resumption, this expression evaluates to the result object of type R, as an rvalue reference. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro/coroutine.h" line="289" column="6" bodyfile="include/dpp/coro/coroutine.h" bodystart="289" bodyend="291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base type for a coroutine, starts on co_await. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>- This feature is EXPERIMENTAL. The API may change at any time and there may be bugs. Please report any to <ulink url="https://github.com/brainboxdotcc/DPP/issues">GitHub issues</ulink> or to the <ulink url="https://discord.gg/dpp">D++ Discord server</ulink>. </para>
</simplesect>
<simplesect kind="warning"><para>- Using co_await on this object more than once is undefined behavior. </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>Return type of the coroutine. Can be void, or a complete object that supports move construction and move assignment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::coroutine&lt; R &gt;</label>
        <link refid="classdpp_1_1coroutine"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::detail::coroutine_base&lt; R &gt;</label>
        <link refid="classdpp_1_1detail_1_1coroutine__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>coroutine_handle&lt;</label>
      </node>
      <node id="1">
        <label>dpp::coroutine&lt; R &gt;</label>
        <link refid="classdpp_1_1coroutine"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::detail::coroutine_base&lt; R &gt;</label>
        <link refid="classdpp_1_1detail_1_1coroutine__base"/>
        <childnode refid="3" relation="usage">
          <edgelabel>handle</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/dpp/coro/coroutine.h" line="183" column="1" bodyfile="include/dpp/coro/coroutine.h" bodystart="183" bodyend="292"/>
    <listofallmembers>
      <member refid="classdpp_1_1coroutine_1a2705611051964471b75afc0aa8959946" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>await_ready</name></member>
      <member refid="classdpp_1_1coroutine_1a6afb50535e6c94d717ff081fd665df1b" prot="private" virt="non-virtual"><scope>dpp::coroutine</scope><name>await_resume_impl</name></member>
      <member refid="classdpp_1_1coroutine_1a5ddd1b98ebd479fd6c1d341d91a3a782" prot="private" virt="non-virtual"><scope>dpp::coroutine</scope><name>await_resume_impl</name></member>
      <member refid="classdpp_1_1coroutine_1a5c43634f95661b8796e7172f730e6e23" prot="private" virt="non-virtual"><scope>dpp::coroutine</scope><name>await_resume_impl</name></member>
      <member refid="classdpp_1_1coroutine_1a6397dcd37c8813502852d8e97bc469c5" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>coroutine</name></member>
      <member refid="classdpp_1_1coroutine_1a422280a0dbaa7fe2723eadc4727807cb" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>coroutine</name></member>
      <member refid="classdpp_1_1coroutine_1a8a9da3db03fd3fd7b1b4c249c2aa460b" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>coroutine</name></member>
      <member refid="classdpp_1_1coroutine_1a2965bbab21ad6c08322d0e57e7e9e786" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>detail::coroutine_base&lt; R &gt;</name></member>
      <member refid="classdpp_1_1coroutine_1a76ad676623921b883e2641da57e83670" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>operator co_await</name></member>
      <member refid="classdpp_1_1coroutine_1ad69f7a9508e8ac7564b5f9a76d71d194" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>operator co_await</name></member>
      <member refid="classdpp_1_1coroutine_1a356327c8ffafa446a2d5781f74ad7c42" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>operator co_await</name></member>
      <member refid="classdpp_1_1coroutine_1a20dfc8dee1ad0b747e100f81ca5af25f" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>operator=</name></member>
      <member refid="classdpp_1_1coroutine_1a4f05b00fa8cdea3cbc13b4e2c21c5839" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>operator=</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine__base_1ae5a8d8d2c63913a9f6848ac233e88da8" prot="private" virt="non-virtual" ambiguityscope="dpp::detail::coroutine_base::"><scope>dpp::coroutine</scope><name>operator=</name></member>
      <member refid="classdpp_1_1detail_1_1coroutine__base_1a24b9ed89689d32687b0dfa29fd3da657" prot="private" virt="non-virtual" ambiguityscope="dpp::detail::coroutine_base::"><scope>dpp::coroutine</scope><name>operator=</name></member>
      <member refid="classdpp_1_1coroutine_1adf481c05529dcd905fa2c53ed4944002" prot="public" virt="non-virtual"><scope>dpp::coroutine</scope><name>~coroutine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
