<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1task" kind="class" language="C++" prot="public">
    <compoundname>dpp::task</compoundname>
    <includes local="no">coro.h</includes>
    <templateparamlist>
      <param>
        <type>typename ReturnType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1task_1aec64427f3f9209ae84d2e743c3aa7d89" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1_1detail_1a5cc8642d79d28ea2cac1825b42685dfa" kindref="member">detail::task_handle</ref>&lt; ReturnType &gt;</type>
        <definition>detail::task_handle&lt;ReturnType&gt; dpp::task&lt; ReturnType &gt;::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <briefdescription>
<para>The coroutine handle of this task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="93" column="21" bodyfile="include/dpp/coro.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1task_1aa66c9f331b5fb399c633fc89de53fb59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct detail::task_promise&lt; ReturnType &gt;</definition>
        <argsstring></argsstring>
        <name>detail::task_promise&lt; ReturnType &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1detail_1_1task__promise" kindref="compound">detail::task_promise</ref>&lt; ReturnType &gt;</type>
        </param>
        <briefdescription>
<para>Promise type of this coroutine. For internal use only, do not use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="93" column="21" bodyfile="include/dpp/coro.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1task_1a56a26004cd1707a1884a7747150aa223" prot="private" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::task&lt; ReturnType &gt;::task</definition>
        <argsstring>(detail::task_handle&lt; ReturnType &gt; handle_)</argsstring>
        <name>task</name>
        <param>
          <type><ref refid="namespacedpp_1_1detail_1a5cc8642d79d28ea2cac1825b42685dfa" kindref="member">detail::task_handle</ref>&lt; ReturnType &gt;</type>
          <declname>handle_</declname>
        </param>
        <briefdescription>
<para>Construct from a coroutine handle. Internal use only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="103" column="10" bodyfile="include/dpp/coro.h" bodystart="103" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1task_1ac2dec3b626f2f0c53e99c369a521e5e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::task&lt; ReturnType &gt;::task</definition>
        <argsstring>()=default</argsstring>
        <name>task</name>
        <briefdescription>
<para>Default constructor, creates a task not bound to a coroutine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1aad974d1b2888b39f925c3c7b6ee1c5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::task&lt; ReturnType &gt;::task</definition>
        <argsstring>(const task &amp;)=delete</argsstring>
        <name>task</name>
        <param>
          <type>const <ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy constructor is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a8c1aebce72b47527077bbc8fe410c109" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::task&lt; ReturnType &gt;::task</definition>
        <argsstring>(task &amp;&amp;other) noexcept</argsstring>
        <name>task</name>
        <param>
          <type><ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor, grabs another task&apos;s coroutine handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to move the handle from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="121" column="1" bodyfile="include/dpp/coro.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a68c90a8b7d8c12866470f07f33db01d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::task&lt; ReturnType &gt;::~task</definition>
        <argsstring>()</argsstring>
        <name>~task</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Destroys the handle if coroutine is done, otherwise detaches it from this thread. In detached mode, the handle will destroy itself at the end of the coroutine. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="130" column="1" bodyfile="include/dpp/coro.h" bodystart="130" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1ac20634212c487779f3e87ee4863095cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;</type>
        <definition>task &amp; dpp::task&lt; ReturnType &gt;::operator=</definition>
        <argsstring>(const task &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Copy assignment is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="158" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1adc98271fd812e2a51a22d13498d7c2ca" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;</type>
        <definition>task &amp; dpp::task&lt; ReturnType &gt;::operator=</definition>
        <argsstring>(task &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment, grabs another task&apos;s coroutine handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to move the handle from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="165" column="6" bodyfile="include/dpp/coro.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a2afca77e73d5d807edb7e7a93903baba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::task&lt; ReturnType &gt;::await_ready</definition>
        <argsstring>()</argsstring>
        <name>await_ready</name>
        <briefdescription>
<para>First function called by the standard library when the task is co_await-ed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Do not call this manually, use the co_await keyword instead. </para>
</simplesect>
<simplesect kind="return"><para>bool Whether not to suspend the caller or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="176" column="6" bodyfile="include/dpp/coro.h" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1ab807be2c4376a5649a30d2b957b4ece9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool dpp::task&lt; ReturnType &gt;::await_suspend</definition>
        <argsstring>(detail::task_handle&lt; T &gt; caller) noexcept</argsstring>
        <name>await_suspend</name>
        <param>
          <type><ref refid="namespacedpp_1_1detail_1a5cc8642d79d28ea2cac1825b42685dfa" kindref="member">detail::task_handle</ref>&lt; T &gt;</type>
          <declname>caller</declname>
        </param>
        <briefdescription>
<para>Second function called by the standard library when the task is co_await-ed, if await_ready returned false. </para>
        </briefdescription>
        <detaileddescription>
<para>Stores the calling coroutine in the promise to resume when this task suspends.</para>
<para><simplesect kind="remark"><para>Do not call this manually, use the co_await keyword instead. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caller</parametername>
</parameternamelist>
<parameterdescription>
<para>The calling coroutine, now suspended </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool Whether to suspend the caller or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="190" column="6" bodyfile="include/dpp/coro.h" bodystart="190" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a6b9a67a1d4a88e7a450b8324eeb06384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ReturnType</type>
        <definition>ReturnType dpp::task&lt; ReturnType &gt;::await_resume</definition>
        <argsstring>()</argsstring>
        <name>await_resume</name>
        <briefdescription>
<para>Function called by the standard library when the coroutine is resumed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Do not call this manually, use the co_await keyword instead. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>Throws</parametername>
</parameternamelist>
<parameterdescription>
<para>any exception thrown or uncaught by the coroutine </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ReturnType The result of the coroutine. It is the value the whole co-await expression evaluates to </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="207" column="12" bodyfile="include/dpp/coro.h" bodystart="413" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a502c9b8f9fe6942b1b30202180e05846" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::task&lt; ReturnType &gt;::done</definition>
        <argsstring>() const noexcept</argsstring>
        <name>done</name>
        <briefdescription>
<para>Function to check if the coroutine has finished its execution entirely. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Whether the coroutine is done. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://en.cppreference.com/w/cpp/coroutine/coroutine_handle/done">https://en.cppreference.com/w/cpp/coroutine/coroutine_handle/done</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="215" column="6" bodyfile="include/dpp/coro.h" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1task_1a0dfb338a4174b0407af9e66a3e7a9007" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1task" kindref="compound">task</ref> &amp;</type>
        <definition>task &amp; dpp::task&lt; ReturnType &gt;::on_exception</definition>
        <argsstring>(std::function&lt; void(std::exception_ptr)&gt; func)</argsstring>
        <name>on_exception</name>
        <param>
          <type>std::function&lt; void(std::exception_ptr)&gt;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Set the exception handling function. Called when an exception is thrown but not caught. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>The exception handler must not throw. If an exception that is not caught is thrown in a detached task, the program will terminate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/coro.h" line="224" column="6" bodyfile="include/dpp/coro.h" bodystart="224" bodyend="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A coroutine task. It can be co_awaited to make nested coroutines. </para>
    </briefdescription>
    <detaileddescription>
<para>Can be used in conjunction with coroutine events via <ref refid="classdpp_1_1event__router__t_1a322bf588a24aeb2e76c1458885fa7704" kindref="member">dpp::event_router_t::co_attach</ref>, or on its own.</para>
<para><simplesect kind="warning"><para>This feature is EXPERIMENTAL. The API may change at any time and there may be bugs. Please report any to <ulink url="https://github.com/brainboxdotcc/DPP/issues">GitHub issues</ulink> or to the <ulink url="https://discord.gg/dpp">D++ Discord server</ulink>. </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ReturnType</parametername>
</parameternamelist>
<parameterdescription>
<para>Return type of the coroutine. Can be void, or a complete object that supports move construction and move assignment. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="include/dpp/coro.h" line="89" column="1" bodyfile="include/dpp/coro.h" bodystart="89" bodyend="230"/>
    <listofallmembers>
      <member refid="classdpp_1_1task_1a2afca77e73d5d807edb7e7a93903baba" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>await_ready</name></member>
      <member refid="classdpp_1_1task_1a6b9a67a1d4a88e7a450b8324eeb06384" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>await_resume</name></member>
      <member refid="classdpp_1_1task_1ab807be2c4376a5649a30d2b957b4ece9" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>await_suspend</name></member>
      <member refid="classdpp_1_1task_1aa66c9f331b5fb399c633fc89de53fb59" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>detail::task_promise&lt; ReturnType &gt;</name></member>
      <member refid="classdpp_1_1task_1a502c9b8f9fe6942b1b30202180e05846" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>done</name></member>
      <member refid="classdpp_1_1task_1aec64427f3f9209ae84d2e743c3aa7d89" prot="private" virt="non-virtual"><scope>dpp::task</scope><name>handle</name></member>
      <member refid="classdpp_1_1task_1a0dfb338a4174b0407af9e66a3e7a9007" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>on_exception</name></member>
      <member refid="classdpp_1_1task_1ac20634212c487779f3e87ee4863095cb" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>operator=</name></member>
      <member refid="classdpp_1_1task_1adc98271fd812e2a51a22d13498d7c2ca" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>operator=</name></member>
      <member refid="classdpp_1_1task_1a56a26004cd1707a1884a7747150aa223" prot="private" virt="non-virtual"><scope>dpp::task</scope><name>task</name></member>
      <member refid="classdpp_1_1task_1ac2dec3b626f2f0c53e99c369a521e5e6" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>task</name></member>
      <member refid="classdpp_1_1task_1aad974d1b2888b39f925c3c7b6ee1c5e0" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>task</name></member>
      <member refid="classdpp_1_1task_1a8c1aebce72b47527077bbc8fe410c109" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>task</name></member>
      <member refid="classdpp_1_1task_1a68c90a8b7d8c12866470f07f33db01d2" prot="public" virt="non-virtual"><scope>dpp::task</scope><name>~task</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
