<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1forum__tag" kind="struct" language="C++" prot="public">
    <compoundname>dpp::forum_tag</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">channel.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1forum__tag_1a8bbde0d80e3da450a6e20373d9a092ca" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::forum_tag::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The name of the tag (0-20 characters) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="201" column="13" bodyfile="include/dpp/channel.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1forum__tag_1a46a1b609377b1443a31df24e18d20cf1" prot="public" static="no" mutable="no">
        <type>std::variant&lt; std::monostate, <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref>, std::string &gt;</type>
        <definition>std::variant&lt;std::monostate, snowflake, std::string&gt; dpp::forum_tag::emoji</definition>
        <argsstring></argsstring>
        <name>emoji</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The emoji of the tag. Contains either nothing, the id of a guild&apos;s custom emoji or the unicode character of the emoji </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="203" column="14" bodyfile="include/dpp/channel.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1forum__tag_1a7972bcf99906645f329540f8e09ccf45" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::forum_tag::moderated</definition>
        <argsstring></argsstring>
        <name>moderated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this tag can only be added to or removed from threads by a member with the <computeroutput>MANAGE_THREADS</computeroutput> permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="205" column="6" bodyfile="include/dpp/channel.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="38" column="11" bodyfile="include/dpp/managed.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1forum__tag_1a8af4e2edccd078821e4f5fb818fd3e4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::forum_tag::forum_tag</definition>
        <argsstring>()</argsstring>
        <name>forum_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1forum__tag_1a10049e89419dc0635955699779d7b530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::forum_tag::forum_tag</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>forum_tag</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the tag. It will be truncated to the maximum length of 20 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1forum__tag_1ace3c79ee8ef6950f21cc172ae161c6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::forum_tag::~forum_tag</definition>
        <argsstring>()</argsstring>
        <name>~forum_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="218" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1forum__tag_1a9ff8f47d0bc94fa3c42bd3557a1f45dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1forum__tag" kindref="compound">forum_tag</ref> &amp;</type>
        <definition>forum_tag &amp; dpp::forum_tag::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Read struct values from a json object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>json to read values from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="225" column="11"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1forum__tag_1a181707a141a20342d7e3d3378fa09fc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::forum_tag::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build json for this <ref refid="structdpp_1_1forum__tag" kindref="compound">forum_tag</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>include the ID in the json </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string JSON string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="233" column="13"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1forum__tag_1a5179430d74c31b0e7366edd4f39036aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1forum__tag" kindref="compound">forum_tag</ref> &amp;</type>
        <definition>forum_tag &amp; dpp::forum_tag::set_name</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>set_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set name of this <ref refid="structdpp_1_1forum__tag" kindref="compound">forum_tag</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self, so these method calls may be chained</para>
</simplesect>
<simplesect kind="note"><para>name will be truncated to 20 chars, if longer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="243" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="64" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="73" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a tag that is able to be applied to a thread in a forum or media channel. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::forum_tag</label>
        <link refid="structdpp_1_1forum__tag"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>bool</label>
      </node>
      <node id="1">
        <label>dpp::forum_tag</label>
        <link refid="structdpp_1_1forum__tag"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>emoji</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>moderated</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>variant&lt;</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/channel.h" line="199" column="1" bodyfile="include/dpp/channel.h" bodystart="199" bodyend="244"/>
    <listofallmembers>
      <member refid="structdpp_1_1forum__tag_1a181707a141a20342d7e3d3378fa09fc8" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>build_json</name></member>
      <member refid="structdpp_1_1forum__tag_1a46a1b609377b1443a31df24e18d20cf1" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>emoji</name></member>
      <member refid="structdpp_1_1forum__tag_1a9ff8f47d0bc94fa3c42bd3557a1f45dc" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1forum__tag_1a8af4e2edccd078821e4f5fb818fd3e4c" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>forum_tag</name></member>
      <member refid="structdpp_1_1forum__tag_1a10049e89419dc0635955699779d7b530" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>forum_tag</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>id</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>managed</name></member>
      <member refid="structdpp_1_1forum__tag_1a7972bcf99906645f329540f8e09ccf45" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>moderated</name></member>
      <member refid="structdpp_1_1forum__tag_1a8bbde0d80e3da450a6e20373d9a092ca" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>name</name></member>
      <member refid="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>operator==</name></member>
      <member refid="structdpp_1_1forum__tag_1a5179430d74c31b0e7366edd4f39036aa" prot="public" virt="non-virtual"><scope>dpp::forum_tag</scope><name>set_name</name></member>
      <member refid="structdpp_1_1forum__tag_1ace3c79ee8ef6950f21cc172ae161c6c5" prot="public" virt="virtual"><scope>dpp::forum_tag</scope><name>~forum_tag</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::forum_tag</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
