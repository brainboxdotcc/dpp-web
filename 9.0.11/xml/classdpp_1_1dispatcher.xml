<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1dispatcher" kind="class" language="C++" prot="public">
    <compoundname>dpp::dispatcher</compoundname>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a54ca4b30187280b511adaad2cb4f3959" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1application__command__create__t" kindref="compound">application_command_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const application_command_create_t&amp; event)&gt; &gt; dpp::dispatcher::application_command_create</definition>
        <argsstring></argsstring>
        <name>application_command_create</name>
        <briefdescription>
<para>Event handler function pointer for guild member remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1428" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a53a114a173b737aac741e8cc352ad86d" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1application__command__delete__t" kindref="compound">application_command_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const application_command_delete_t&amp; event)&gt; &gt; dpp::dispatcher::application_command_delete</definition>
        <argsstring></argsstring>
        <name>application_command_delete</name>
        <briefdescription>
<para>Event handler function pointer for application command delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1420" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a9881abf5cec33bc1e8c6aafb58426d46" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1application__command__update__t" kindref="compound">application_command_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const application_command_update_t&amp; event)&gt; &gt; dpp::dispatcher::application_command_update</definition>
        <argsstring></argsstring>
        <name>application_command_update</name>
        <briefdescription>
<para>Event handler function pointer for application command update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1524" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a02e86a50863e2b088e8f323210e2a46a" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1autocomplete__t" kindref="compound">autocomplete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const autocomplete_t&amp; event)&gt; &gt; dpp::dispatcher::autocomplete</definition>
        <argsstring></argsstring>
        <name>autocomplete</name>
        <briefdescription>
<para>Event handler function pointer for autocomplete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1392" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a4fc75a5f2c0fe0150c99b9fe4e538f36" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1button__click__t" kindref="compound">button_click_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const button_click_t&amp; event)&gt; &gt; dpp::dispatcher::button_click</definition>
        <argsstring></argsstring>
        <name>button_click</name>
        <briefdescription>
<para>Event handler function pointer for button click event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1388" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a5e1e233c7916f877f37f43c01ee03378" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1channel__create__t" kindref="compound">channel_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const channel_create_t&amp; event)&gt; &gt; dpp::dispatcher::channel_create</definition>
        <argsstring></argsstring>
        <name>channel_create</name>
        <briefdescription>
<para>Event handler function pointer for guild channel create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1460" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aa56165293424b32bd5e67ef34ba3cd1d" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1channel__delete__t" kindref="compound">channel_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const channel_delete_t&amp; event)&gt; &gt; dpp::dispatcher::channel_delete</definition>
        <argsstring></argsstring>
        <name>channel_delete</name>
        <briefdescription>
<para>Event handler function pointer for channel delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1404" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1af58e564f14a4ecc7635f4ec89e3db219" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1channel__pins__update__t" kindref="compound">channel_pins_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const channel_pins_update_t&amp; event)&gt; &gt; dpp::dispatcher::channel_pins_update</definition>
        <argsstring></argsstring>
        <name>channel_pins_update</name>
        <briefdescription>
<para>Event handler function pointer for channel pins update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1480" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a10542964e34b031dbf6c29db5e29bb6e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1channel__update__t" kindref="compound">channel_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const channel_update_t&amp; event)&gt; &gt; dpp::dispatcher::channel_update</definition>
        <argsstring></argsstring>
        <name>channel_update</name>
        <briefdescription>
<para>Event handler function pointer for channel update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1408" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a6e7f6523a67c8ca656e05b218e92e9e6" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__ban__add__t" kindref="compound">guild_ban_add_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_ban_add_t&amp; event)&gt; &gt; dpp::dispatcher::guild_ban_add</definition>
        <argsstring></argsstring>
        <name>guild_ban_add</name>
        <briefdescription>
<para>Event handler function pointer for guild ban add event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1544" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1af5e9cb570050530616158ad56faf53f4" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__ban__remove__t" kindref="compound">guild_ban_remove_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_ban_remove_t&amp; event)&gt; &gt; dpp::dispatcher::guild_ban_remove</definition>
        <argsstring></argsstring>
        <name>guild_ban_remove</name>
        <briefdescription>
<para>Event handler function pointer for guild ban remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1548" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a431edf7cb3c15208d24615ea2cb622d3" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__create__t" kindref="compound">guild_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_create_t&amp; event)&gt; &gt; dpp::dispatcher::guild_create</definition>
        <argsstring></argsstring>
        <name>guild_create</name>
        <briefdescription>
<para>Event handler function pointer for guild create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1456" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a0bd4359fcdc111ddd148c9f437d8c2d1" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__delete__t" kindref="compound">guild_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_delete_t&amp; event)&gt; &gt; dpp::dispatcher::guild_delete</definition>
        <argsstring></argsstring>
        <name>guild_delete</name>
        <briefdescription>
<para>Event handler function pointer for guild delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1400" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a302f2fa76113b6f30aafeaed78df3202" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__emojis__update__t" kindref="compound">guild_emojis_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_emojis_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_emojis_update</definition>
        <argsstring></argsstring>
        <name>guild_emojis_update</name>
        <briefdescription>
<para>Event handler function pointer for guild emojis update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1492" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a684e8ea680ab13b5e02faeac59cbac50" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__integrations__update__t" kindref="compound">guild_integrations_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_integrations_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_integrations_update</definition>
        <argsstring></argsstring>
        <name>guild_integrations_update</name>
        <briefdescription>
<para>Event handler function pointer for guild integrations update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1516" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a8e934263d2073b7a194879c9ced688e7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__join__request__delete__t" kindref="compound">guild_join_request_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_join_request_delete_t&amp; event)&gt; &gt; dpp::dispatcher::guild_join_request_delete</definition>
        <argsstring></argsstring>
        <name>guild_join_request_delete</name>
        <briefdescription>
<para>Event handler function pointer for guild join request delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1608" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aee40b48b99cd17e08e9acac8f4de48c6" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__member__add__t" kindref="compound">guild_member_add_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_member_add_t&amp; event)&gt; &gt; dpp::dispatcher::guild_member_add</definition>
        <argsstring></argsstring>
        <name>guild_member_add</name>
        <briefdescription>
<para>Event handler function pointer for guild member add event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1504" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ad5336a88f41283e40c504e226ab275ae" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__member__remove__t" kindref="compound">guild_member_remove_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_member_remove_t&amp; event)&gt; &gt; dpp::dispatcher::guild_member_remove</definition>
        <argsstring></argsstring>
        <name>guild_member_remove</name>
        <briefdescription>
<para>Event handler function pointer for guild member remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1424" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aa9f3bd4b2dfba9473b460f70fb235723" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__member__update__t" kindref="compound">guild_member_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_member_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_member_update</definition>
        <argsstring></argsstring>
        <name>guild_member_update</name>
        <briefdescription>
<para>Event handler function pointer for guild member update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1520" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a9ffe5f68f55891dfba31d419afadfc37" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__members__chunk__t" kindref="compound">guild_members_chunk_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_members_chunk_t&amp; event)&gt; &gt; dpp::dispatcher::guild_members_chunk</definition>
        <argsstring></argsstring>
        <name>guild_members_chunk</name>
        <briefdescription>
<para>Event handler function pointer for guild members chunk event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1448" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a78831897ddd994ed5dd8f3e7644c2fb9" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__role__create__t" kindref="compound">guild_role_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_role_create_t&amp; event)&gt; &gt; dpp::dispatcher::guild_role_create</definition>
        <argsstring></argsstring>
        <name>guild_role_create</name>
        <briefdescription>
<para>Event handler function pointer for guild role create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1436" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a38522914988ad8d2c960dd260e74f2f5" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__role__delete__t" kindref="compound">guild_role_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_role_delete_t&amp; event)&gt; &gt; dpp::dispatcher::guild_role_delete</definition>
        <argsstring></argsstring>
        <name>guild_role_delete</name>
        <briefdescription>
<para>Event handler function pointer for guild role delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1476" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aea4881d3ba77988cad20feb09a34dbd5" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__role__update__t" kindref="compound">guild_role_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_role_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_role_update</definition>
        <argsstring></argsstring>
        <name>guild_role_update</name>
        <briefdescription>
<para>Event handler function pointer for guild role update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1472" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a60947c0324d974dc7ba87b8ba09f2b67" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__update__t" kindref="compound">guild_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_update</definition>
        <argsstring></argsstring>
        <name>guild_update</name>
        <briefdescription>
<para>Event handler function pointer for guild update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1512" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a7d3730d9361eaf416f195ae28ee2802b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1integration__create__t" kindref="compound">integration_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const integration_create_t&amp; event)&gt; &gt; dpp::dispatcher::integration_create</definition>
        <argsstring></argsstring>
        <name>integration_create</name>
        <briefdescription>
<para>Event handler function pointer for integration create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1552" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1552" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aba39451c5138a56c4da47fb2cce8b33b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1integration__delete__t" kindref="compound">integration_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const integration_delete_t&amp; event)&gt; &gt; dpp::dispatcher::integration_delete</definition>
        <argsstring></argsstring>
        <name>integration_delete</name>
        <briefdescription>
<para>Event handler function pointer for integration delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1560" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ad628b7e5e02eca89f870dfbfb9516c23" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1integration__update__t" kindref="compound">integration_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const integration_update_t&amp; event)&gt; &gt; dpp::dispatcher::integration_update</definition>
        <argsstring></argsstring>
        <name>integration_update</name>
        <briefdescription>
<para>Event handler function pointer for integration update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1556" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a13a291ae5e67834d31f433998d6d0c21" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1interaction__create__t" kindref="compound">interaction_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const interaction_create_t&amp; event)&gt; &gt; dpp::dispatcher::interaction_create</definition>
        <argsstring></argsstring>
        <name>interaction_create</name>
        <briefdescription>
<para>Event handler function pointer for interaction create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1384" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ad4ff3b8fd3c0d50add72eb44577259e7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1invite__create__t" kindref="compound">invite_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const invite_create_t&amp; event)&gt; &gt; dpp::dispatcher::invite_create</definition>
        <argsstring></argsstring>
        <name>invite_create</name>
        <briefdescription>
<para>Event handler function pointer for invite create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1528" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a5e80cf8aeb430f5ddf4e089bafa2b81e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1invite__delete__t" kindref="compound">invite_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const invite_delete_t&amp; event)&gt; &gt; dpp::dispatcher::invite_delete</definition>
        <argsstring></argsstring>
        <name>invite_delete</name>
        <briefdescription>
<para>Event handler function pointer for invite delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1508" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ade7ab56cf5c74ffed80fcee69a66c144" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1log__t" kindref="compound">log_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const log_t&amp; event)&gt; &gt; dpp::dispatcher::log</definition>
        <argsstring></argsstring>
        <name>log</name>
        <briefdescription>
<para>Event handler function pointer for log event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1368" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a63c47747c3ead8404777fce6ce96ba51" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1message__create__t" kindref="compound">message_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const message_create_t&amp; event)&gt; &gt; dpp::dispatcher::message_create</definition>
        <argsstring></argsstring>
        <name>message_create</name>
        <briefdescription>
<para>Event handler function pointer for message create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1540" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a4f6e53db3bb341c0adc7da6dca3c8135" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1message__delete__t" kindref="compound">message_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const message_delete_t&amp; event)&gt; &gt; dpp::dispatcher::message_delete</definition>
        <argsstring></argsstring>
        <name>message_delete</name>
        <briefdescription>
<para>Event handler function pointer for message delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1416" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ae212f6c271b543b3df0cc9f932ed818a" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1message__delete__bulk__t" kindref="compound">message_delete_bulk_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const message_delete_bulk_t&amp; event)&gt; &gt; dpp::dispatcher::message_delete_bulk</definition>
        <argsstring></argsstring>
        <name>message_delete_bulk</name>
        <briefdescription>
<para>Event handler function pointer for message delete bulk event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1468" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a363139225ea394eec0beffa30227a8de" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__add__t" kindref="compound">message_reaction_add_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const message_reaction_add_t&amp; event)&gt; &gt; dpp::dispatcher::message_reaction_add</definition>
        <argsstring></argsstring>
        <name>message_reaction_add</name>
        <briefdescription>
<para>Event handler function pointer for message reaction add event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1444" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ac22ed9fa9d2f27991dd131c8caced062" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__t" kindref="compound">message_reaction_remove_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const message_reaction_remove_t&amp; event)&gt; &gt; dpp::dispatcher::message_reaction_remove</definition>
        <argsstring></argsstring>
        <name>message_reaction_remove</name>
        <briefdescription>
<para>Event handler function pointer for message reaction remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1452" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a94285b7725a088b7d793c5d62fd5a7ec" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__all__t" kindref="compound">message_reaction_remove_all_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const message_reaction_remove_all_t&amp; event)&gt; &gt; dpp::dispatcher::message_reaction_remove_all</definition>
        <argsstring></argsstring>
        <name>message_reaction_remove_all</name>
        <briefdescription>
<para>Event handler function pointer for message reaction remove all event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1484" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ac96a3cb22658bb1457f95e7339cc9160" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__emoji__t" kindref="compound">message_reaction_remove_emoji_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const message_reaction_remove_emoji_t&amp; event)&gt; &gt; dpp::dispatcher::message_reaction_remove_emoji</definition>
        <argsstring></argsstring>
        <name>message_reaction_remove_emoji</name>
        <briefdescription>
<para>Event handler function pointer for message reaction remove emoji event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1464" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a92bc1bf874f00ce1ec748288bd8eab7e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1message__update__t" kindref="compound">message_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const message_update_t&amp; event)&gt; &gt; dpp::dispatcher::message_update</definition>
        <argsstring></argsstring>
        <name>message_update</name>
        <briefdescription>
<para>Event handler function pointer for message update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1532" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aec853af28f121c4a1cac2dd83909002b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1presence__update__t" kindref="compound">presence_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const presence_update_t&amp; event)&gt; &gt; dpp::dispatcher::presence_update</definition>
        <argsstring></argsstring>
        <name>presence_update</name>
        <briefdescription>
<para>Event handler function pointer for presence update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1496" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a0b5748873042be38c4f4953430607f30" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1ready__t" kindref="compound">ready_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const ready_t&amp; event)&gt; &gt; dpp::dispatcher::ready</definition>
        <argsstring></argsstring>
        <name>ready</name>
        <briefdescription>
<para>Event handler function pointer for ready event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1412" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aa2488cf18e0fd08cf3d33651a11183d8" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1resumed__t" kindref="compound">resumed_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const resumed_t&amp; event)&gt; &gt; dpp::dispatcher::resumed</definition>
        <argsstring></argsstring>
        <name>resumed</name>
        <briefdescription>
<para>Event handler function pointer for resumed event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1432" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aa5f48a5aec12066f0a97d8a00af5d608" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1select__click__t" kindref="compound">select_click_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const select_click_t&amp; event)&gt; &gt; dpp::dispatcher::select_click</definition>
        <argsstring></argsstring>
        <name>select_click</name>
        <briefdescription>
<para>Event handler function pointer for button click event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1396" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1afe1bf8758e6f8a828fe147ff069d7147" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__create__t" kindref="compound">stage_instance_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const stage_instance_create_t&amp; event)&gt; &gt; dpp::dispatcher::stage_instance_create</definition>
        <argsstring></argsstring>
        <name>stage_instance_create</name>
        <briefdescription>
<para>Event handler function pointer for stage instance create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1612" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a61c6971703992f7746084ed2d9009c6e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__delete__t" kindref="compound">stage_instance_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const stage_instance_delete_t&amp; event)&gt; &gt; dpp::dispatcher::stage_instance_delete</definition>
        <argsstring></argsstring>
        <name>stage_instance_delete</name>
        <briefdescription>
<para>Event handler function pointer for stage instance delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1620" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a0bc080d7eacaaef3c57b592af8848498" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__update__t" kindref="compound">stage_instance_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const stage_instance_update_t&amp; event)&gt; &gt; dpp::dispatcher::stage_instance_update</definition>
        <argsstring></argsstring>
        <name>stage_instance_update</name>
        <briefdescription>
<para>Event handler function pointer for stage instance update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1616" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a586b6e193b89242dd1a24760f7770d1e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1guild__stickers__update__t" kindref="compound">guild_stickers_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const guild_stickers_update_t&amp; event)&gt; &gt; dpp::dispatcher::stickers_update</definition>
        <argsstring></argsstring>
        <name>stickers_update</name>
        <briefdescription>
<para>Event handler function pointer for guild sticker update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1624" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a7dab26986d66bba26fb80c0805c66099" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1thread__create__t" kindref="compound">thread_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const thread_create_t&amp; event)&gt; &gt; dpp::dispatcher::thread_create</definition>
        <argsstring></argsstring>
        <name>thread_create</name>
        <briefdescription>
<para>Event handler function pointer for thread create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1564" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a1588d00ae704ab4b14eff4e596071b78" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1thread__delete__t" kindref="compound">thread_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const thread_delete_t&amp; event)&gt; &gt; dpp::dispatcher::thread_delete</definition>
        <argsstring></argsstring>
        <name>thread_delete</name>
        <briefdescription>
<para>Event handler function pointer for thread delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1572" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ae5e8daa80a5551b77242e05efc434d12" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1thread__list__sync__t" kindref="compound">thread_list_sync_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const thread_list_sync_t&amp; event)&gt; &gt; dpp::dispatcher::thread_list_sync</definition>
        <argsstring></argsstring>
        <name>thread_list_sync</name>
        <briefdescription>
<para>Event handler function pointer for thread list sync event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1576" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1afbb40976e339ba4550e52b86b523ead3" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1thread__member__update__t" kindref="compound">thread_member_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const thread_member_update_t&amp; event)&gt; &gt; dpp::dispatcher::thread_member_update</definition>
        <argsstring></argsstring>
        <name>thread_member_update</name>
        <briefdescription>
<para>Event handler function pointer for thread member update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1580" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a7b01f916693e0b52355fb04f9d4f344b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1thread__members__update__t" kindref="compound">thread_members_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const thread_members_update_t&amp; event)&gt; &gt; dpp::dispatcher::thread_members_update</definition>
        <argsstring></argsstring>
        <name>thread_members_update</name>
        <briefdescription>
<para>Event handler function pointer for thread members update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1584" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aa3423f551510200510748bf6d58b5627" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1thread__update__t" kindref="compound">thread_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const thread_update_t&amp; event)&gt; &gt; dpp::dispatcher::thread_update</definition>
        <argsstring></argsstring>
        <name>thread_update</name>
        <briefdescription>
<para>Event handler function pointer for thread update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1568" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a48c6ce0ecc89d19fa12a49cdb650b478" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1typing__start__t" kindref="compound">typing_start_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const typing_start_t&amp; event)&gt; &gt; dpp::dispatcher::typing_start</definition>
        <argsstring></argsstring>
        <name>typing_start</name>
        <briefdescription>
<para>Event handler function pointer for typing start event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1440" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1afaa94db14876c40ca92069f5982ddf85" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1user__update__t" kindref="compound">user_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const user_update_t&amp; event)&gt; &gt; dpp::dispatcher::user_update</definition>
        <argsstring></argsstring>
        <name>user_update</name>
        <briefdescription>
<para>Event handler function pointer for user update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1536" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ae4445660ea8c3360236a73eef534536e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1voice__buffer__send__t" kindref="compound">voice_buffer_send_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const voice_buffer_send_t&amp; event)&gt; &gt; dpp::dispatcher::voice_buffer_send</definition>
        <argsstring></argsstring>
        <name>voice_buffer_send</name>
        <briefdescription>
<para>Event handler function pointer for voice buffer send event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1588" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a5a750cac0e0b8b8f716e6b0832c4b30c" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1voice__client__disconnect__t" kindref="compound">voice_client_disconnect_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const voice_client_disconnect_t&amp; event)&gt; &gt; dpp::dispatcher::voice_client_disconnect</definition>
        <argsstring></argsstring>
        <name>voice_client_disconnect</name>
        <briefdescription>
<para>Event handler function pointer for voice client disconnect event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1380" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a482e56b7954ad78fac9cc6102ff30953" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1voice__client__speaking__t" kindref="compound">voice_client_speaking_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const voice_client_speaking_t&amp; event)&gt; &gt; dpp::dispatcher::voice_client_speaking</definition>
        <argsstring></argsstring>
        <name>voice_client_speaking</name>
        <briefdescription>
<para>Event handler function pointer for voice client speaking event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1376" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ad7e5ac96504cdb9a5b24f5d03212cda7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1voice__ready__t" kindref="compound">voice_ready_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const voice_ready_t&amp; event)&gt; &gt; dpp::dispatcher::voice_ready</definition>
        <argsstring></argsstring>
        <name>voice_ready</name>
        <briefdescription>
<para>Event handler function pointer for voice ready event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1596" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a3f8ebf93e7a96cffdb1643803ac8c937" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1voice__receive__t" kindref="compound">voice_receive_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const voice_receive_t&amp; event)&gt; &gt; dpp::dispatcher::voice_receive</definition>
        <argsstring></argsstring>
        <name>voice_receive</name>
        <briefdescription>
<para>Event handler function pointer for voice receive event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1600" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a0d30e6d1ec9ae5c1df563bcb30c10f49" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1voice__server__update__t" kindref="compound">voice_server_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const voice_server_update_t&amp; event)&gt; &gt; dpp::dispatcher::voice_server_update</definition>
        <argsstring></argsstring>
        <name>voice_server_update</name>
        <briefdescription>
<para>Event handler function pointer for voice server update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1488" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a5f3048014d04d7c060dd406a6d99386f" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1voice__state__update__t" kindref="compound">voice_state_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const voice_state_update_t&amp; event)&gt; &gt; dpp::dispatcher::voice_state_update</definition>
        <argsstring></argsstring>
        <name>voice_state_update</name>
        <briefdescription>
<para>Event handler function pointer for voice state update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1372" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1acefb25d7e7f54ed1f03ee5eb4250f961" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1voice__track__marker__t" kindref="compound">voice_track_marker_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const voice_track_marker_t&amp; event)&gt; &gt; dpp::dispatcher::voice_track_marker</definition>
        <argsstring></argsstring>
        <name>voice_track_marker</name>
        <briefdescription>
<para>Event handler function pointer for voice track marker event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1604" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a372bcecd0a24b7ff90aace53e0654263" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1voice__user__talking__t" kindref="compound">voice_user_talking_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const voice_user_talking_t&amp; event)&gt; &gt; dpp::dispatcher::voice_user_talking</definition>
        <argsstring></argsstring>
        <name>voice_user_talking</name>
        <briefdescription>
<para>Event handler function pointer for voice user talking event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1592" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a2a465a530e5d996a2410b9c1bea8c86b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::function&lt; void(const <ref refid="structdpp_1_1webhooks__update__t" kindref="compound">webhooks_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::vector&lt;std::function&lt;void(const webhooks_update_t&amp; event)&gt; &gt; dpp::dispatcher::webhooks_update</definition>
        <argsstring></argsstring>
        <name>webhooks_update</name>
        <briefdescription>
<para>Event handler function pointer for webhooks update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1500" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="1500" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The dispatcher class contains a set of std::functions representing hooked events that the user code is interested in. These are modified via the on_eventname style methods in the cluster class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="2" relation="usage">
          <edgelabel>application_command_create</edgelabel>
          <edgelabel>application_command_delete</edgelabel>
          <edgelabel>application_command_update</edgelabel>
          <edgelabel>autocomplete</edgelabel>
          <edgelabel>button_click</edgelabel>
          <edgelabel>channel_create</edgelabel>
          <edgelabel>channel_delete</edgelabel>
          <edgelabel>channel_pins_update</edgelabel>
          <edgelabel>channel_update</edgelabel>
          <edgelabel>guild_ban_add</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>vector&lt;</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dispatcher.h" line="1363" column="1" bodyfile="include/dpp/dispatcher.h" bodystart="1363" bodyend="1625"/>
    <listofallmembers>
      <member refid="classdpp_1_1dispatcher_1a54ca4b30187280b511adaad2cb4f3959" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>application_command_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a53a114a173b737aac741e8cc352ad86d" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>application_command_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a9881abf5cec33bc1e8c6aafb58426d46" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>application_command_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a02e86a50863e2b088e8f323210e2a46a" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>autocomplete</name></member>
      <member refid="classdpp_1_1dispatcher_1a4fc75a5f2c0fe0150c99b9fe4e538f36" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>button_click</name></member>
      <member refid="classdpp_1_1dispatcher_1a5e1e233c7916f877f37f43c01ee03378" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_create</name></member>
      <member refid="classdpp_1_1dispatcher_1aa56165293424b32bd5e67ef34ba3cd1d" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1af58e564f14a4ecc7635f4ec89e3db219" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_pins_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a10542964e34b031dbf6c29db5e29bb6e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a6e7f6523a67c8ca656e05b218e92e9e6" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_ban_add</name></member>
      <member refid="classdpp_1_1dispatcher_1af5e9cb570050530616158ad56faf53f4" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_ban_remove</name></member>
      <member refid="classdpp_1_1dispatcher_1a431edf7cb3c15208d24615ea2cb622d3" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a0bd4359fcdc111ddd148c9f437d8c2d1" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a302f2fa76113b6f30aafeaed78df3202" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_emojis_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a684e8ea680ab13b5e02faeac59cbac50" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_integrations_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a8e934263d2073b7a194879c9ced688e7" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_join_request_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1aee40b48b99cd17e08e9acac8f4de48c6" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_member_add</name></member>
      <member refid="classdpp_1_1dispatcher_1ad5336a88f41283e40c504e226ab275ae" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_member_remove</name></member>
      <member refid="classdpp_1_1dispatcher_1aa9f3bd4b2dfba9473b460f70fb235723" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_member_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a9ffe5f68f55891dfba31d419afadfc37" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_members_chunk</name></member>
      <member refid="classdpp_1_1dispatcher_1a78831897ddd994ed5dd8f3e7644c2fb9" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_role_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a38522914988ad8d2c960dd260e74f2f5" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_role_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1aea4881d3ba77988cad20feb09a34dbd5" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_role_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a60947c0324d974dc7ba87b8ba09f2b67" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a7d3730d9361eaf416f195ae28ee2802b" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>integration_create</name></member>
      <member refid="classdpp_1_1dispatcher_1aba39451c5138a56c4da47fb2cce8b33b" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>integration_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1ad628b7e5e02eca89f870dfbfb9516c23" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>integration_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a13a291ae5e67834d31f433998d6d0c21" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>interaction_create</name></member>
      <member refid="classdpp_1_1dispatcher_1ad4ff3b8fd3c0d50add72eb44577259e7" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>invite_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a5e80cf8aeb430f5ddf4e089bafa2b81e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>invite_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1ade7ab56cf5c74ffed80fcee69a66c144" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>log</name></member>
      <member refid="classdpp_1_1dispatcher_1a63c47747c3ead8404777fce6ce96ba51" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a4f6e53db3bb341c0adc7da6dca3c8135" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1ae212f6c271b543b3df0cc9f932ed818a" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_delete_bulk</name></member>
      <member refid="classdpp_1_1dispatcher_1a363139225ea394eec0beffa30227a8de" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_add</name></member>
      <member refid="classdpp_1_1dispatcher_1ac22ed9fa9d2f27991dd131c8caced062" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_remove</name></member>
      <member refid="classdpp_1_1dispatcher_1a94285b7725a088b7d793c5d62fd5a7ec" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_remove_all</name></member>
      <member refid="classdpp_1_1dispatcher_1ac96a3cb22658bb1457f95e7339cc9160" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_remove_emoji</name></member>
      <member refid="classdpp_1_1dispatcher_1a92bc1bf874f00ce1ec748288bd8eab7e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_update</name></member>
      <member refid="classdpp_1_1dispatcher_1aec853af28f121c4a1cac2dd83909002b" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>presence_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a0b5748873042be38c4f4953430607f30" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>ready</name></member>
      <member refid="classdpp_1_1dispatcher_1aa2488cf18e0fd08cf3d33651a11183d8" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>resumed</name></member>
      <member refid="classdpp_1_1dispatcher_1aa5f48a5aec12066f0a97d8a00af5d608" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>select_click</name></member>
      <member refid="classdpp_1_1dispatcher_1afe1bf8758e6f8a828fe147ff069d7147" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stage_instance_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a61c6971703992f7746084ed2d9009c6e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stage_instance_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a0bc080d7eacaaef3c57b592af8848498" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stage_instance_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a586b6e193b89242dd1a24760f7770d1e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stickers_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a7dab26986d66bba26fb80c0805c66099" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a1588d00ae704ab4b14eff4e596071b78" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1ae5e8daa80a5551b77242e05efc434d12" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_list_sync</name></member>
      <member refid="classdpp_1_1dispatcher_1afbb40976e339ba4550e52b86b523ead3" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_member_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a7b01f916693e0b52355fb04f9d4f344b" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_members_update</name></member>
      <member refid="classdpp_1_1dispatcher_1aa3423f551510200510748bf6d58b5627" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a48c6ce0ecc89d19fa12a49cdb650b478" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>typing_start</name></member>
      <member refid="classdpp_1_1dispatcher_1afaa94db14876c40ca92069f5982ddf85" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>user_update</name></member>
      <member refid="classdpp_1_1dispatcher_1ae4445660ea8c3360236a73eef534536e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_buffer_send</name></member>
      <member refid="classdpp_1_1dispatcher_1a5a750cac0e0b8b8f716e6b0832c4b30c" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_client_disconnect</name></member>
      <member refid="classdpp_1_1dispatcher_1a482e56b7954ad78fac9cc6102ff30953" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_client_speaking</name></member>
      <member refid="classdpp_1_1dispatcher_1ad7e5ac96504cdb9a5b24f5d03212cda7" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_ready</name></member>
      <member refid="classdpp_1_1dispatcher_1a3f8ebf93e7a96cffdb1643803ac8c937" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_receive</name></member>
      <member refid="classdpp_1_1dispatcher_1a0d30e6d1ec9ae5c1df563bcb30c10f49" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_server_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a5f3048014d04d7c060dd406a6d99386f" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_state_update</name></member>
      <member refid="classdpp_1_1dispatcher_1acefb25d7e7f54ed1f03ee5eb4250f961" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_track_marker</name></member>
      <member refid="classdpp_1_1dispatcher_1a372bcecd0a24b7ff90aace53e0654263" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_user_talking</name></member>
      <member refid="classdpp_1_1dispatcher_1a2a465a530e5d996a2410b9c1bea8c86b" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>webhooks_update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
