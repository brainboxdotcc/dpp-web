<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1embed" kind="struct" language="C++" prot="public">
    <compoundname>dpp::embed</compoundname>
    <includes local="no">message.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1embed_1a89364da800ab3c16ad566b3c93b68a54" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::embed::title</definition>
        <argsstring></argsstring>
        <name>title</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: title of embed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="490" column="12" bodyfile="include/dpp/message.h" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a573e0fd77066ee0aa4d9e5d8a0be3823" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::embed::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: type of embed (always &quot;rich&quot; for webhook embeds) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="492" column="12" bodyfile="include/dpp/message.h" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1ac9d64f935df99fc11ac960a29529f37c" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::embed::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: description of embed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="494" column="12" bodyfile="include/dpp/message.h" bodystart="494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1acc50a97a3f286dfd929b2b3683167164" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::embed::url</definition>
        <argsstring></argsstring>
        <name>url</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: url of embed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="496" column="12" bodyfile="include/dpp/message.h" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1ac4579a586750009436c088f509438df1" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::embed::timestamp</definition>
        <argsstring></argsstring>
        <name>timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: timestamp of embed content </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="498" column="7" bodyfile="include/dpp/message.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a882b7b909e6e90b5ac91fbb9d5f84f04" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::embed::color</definition>
        <argsstring></argsstring>
        <name>color</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: color code of the embed </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="500" column="9" bodyfile="include/dpp/message.h" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a431c219b7e195e151c19dfbebc09e13a" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__footer" kindref="compound">embed_footer</ref> &gt;</type>
        <definition>std::optional&lt;embed_footer&gt; dpp::embed::footer</definition>
        <argsstring></argsstring>
        <name>footer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: footer information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="502" column="14" bodyfile="include/dpp/message.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a05181f6e5ad5f6903b3cbcecb8e89ebe" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__image" kindref="compound">embed_image</ref> &gt;</type>
        <definition>std::optional&lt;embed_image&gt; dpp::embed::image</definition>
        <argsstring></argsstring>
        <name>image</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: image information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="504" column="14" bodyfile="include/dpp/message.h" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a60eebf805a4e809d319411c44043d8e2" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__image" kindref="compound">embed_image</ref> &gt;</type>
        <definition>std::optional&lt;embed_image&gt; dpp::embed::thumbnail</definition>
        <argsstring></argsstring>
        <name>thumbnail</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: thumbnail information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="506" column="14" bodyfile="include/dpp/message.h" bodystart="506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1aa8eb54d9c1a20cd2502f0ca79297fa0d" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__image" kindref="compound">embed_image</ref> &gt;</type>
        <definition>std::optional&lt;embed_image&gt; dpp::embed::video</definition>
        <argsstring></argsstring>
        <name>video</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: video information (can&apos;t send these) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="508" column="14" bodyfile="include/dpp/message.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a689c7c16c458de20b1998b532364be0d" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__provider" kindref="compound">embed_provider</ref> &gt;</type>
        <definition>std::optional&lt;embed_provider&gt; dpp::embed::provider</definition>
        <argsstring></argsstring>
        <name>provider</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: provider information (can&apos;t send these) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="510" column="14" bodyfile="include/dpp/message.h" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1abe6263ce0132837017e0aca16c6e299d" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__author" kindref="compound">embed_author</ref> &gt;</type>
        <definition>std::optional&lt;embed_author&gt; dpp::embed::author</definition>
        <argsstring></argsstring>
        <name>author</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: author information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="512" column="14" bodyfile="include/dpp/message.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a51999ed159b5d326b0117604bb8dc4ee" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1embed__field" kindref="compound">embed_field</ref> &gt;</type>
        <definition>std::vector&lt;embed_field&gt; dpp::embed::fields</definition>
        <argsstring></argsstring>
        <name>fields</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: fields information </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="514" column="12" bodyfile="include/dpp/message.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1embed_1a6f60eea0421da23a22032bd317dd9b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::embed::embed</definition>
        <argsstring>()</argsstring>
        <name>embed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="517" column="1" bodyfile="src/dpp/message.cpp" bodystart="262" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a03bbf47ebfcdb5a267fae660232c9577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::embed::embed</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>embed</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor to build embed from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON to read content from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="522" column="1" bodyfile="src/dpp/message.cpp" bodystart="361" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a9d43c2e1648e03cf5aa28825f600391f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::embed::~embed</definition>
        <argsstring>()</argsstring>
        <name>~embed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1abde15c192fcfa8b9418bfea4585e947e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_title</definition>
        <argsstring>(const std::string &amp;text)</argsstring>
        <name>set_title</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed title. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text of the title </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="531" column="7" bodyfile="src/dpp/message.cpp" bodystart="488" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1aab60c0a8678a3c47d0fc47ae04818b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_description</definition>
        <argsstring>(const std::string &amp;text)</argsstring>
        <name>set_description</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed description. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text of the title </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="537" column="7" bodyfile="src/dpp/message.cpp" bodystart="493" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1acfdeb54fd78b9c3b3e969e4d553f373e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_footer</definition>
        <argsstring>(const embed_footer &amp;f)</argsstring>
        <name>set_footer</name>
        <param>
          <type>const <ref refid="structdpp_1_1embed__footer" kindref="compound">embed_footer</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Set the footer of the embed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the footer to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>embed&amp; a reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="545" column="7" bodyfile="src/dpp/message.cpp" bodystart="454" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a3bcc6f23d8d16c347139f624569e61e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_color</definition>
        <argsstring>(uint32_t col)</argsstring>
        <name>set_color</name>
        <param>
          <type>uint32_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed colour. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The colour of the embed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="551" column="7" bodyfile="src/dpp/message.cpp" bodystart="498" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a618ee49a00b10349b039f4a75529005e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_timestamp</definition>
        <argsstring>(time_t tstamp)</argsstring>
        <name>set_timestamp</name>
        <param>
          <type>time_t</type>
          <declname>tstamp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed timestamp. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tstamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp to show in the footer, should be in UTC </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="557" column="7" bodyfile="src/dpp/message.cpp" bodystart="439" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a02bd8a6c9c248b8155d630fb8cd865b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_url</definition>
        <argsstring>(const std::string &amp;url)</argsstring>
        <name>set_url</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed url. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>the url of the embed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="563" column="7" bodyfile="src/dpp/message.cpp" bodystart="504" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1ab9c9deedd331451367aa561e6f9178d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::add_field</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;value, bool is_inline=false)</argsstring>
        <name>add_field</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inline</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an embed field. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the field (max length 1000) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_inline</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to display the field &apos;inline&apos; or on its own line </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="571" column="7" bodyfile="src/dpp/message.cpp" bodystart="422" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a1191592fd154b5cd29aad3b361ec3e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_author</definition>
        <argsstring>(const dpp::embed_author &amp;a)</argsstring>
        <name>set_author</name>
        <param>
          <type>const <ref refid="structdpp_1_1embed__author" kindref="compound">dpp::embed_author</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed author. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The author to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="577" column="7" bodyfile="src/dpp/message.cpp" bodystart="433" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1ad0ec387f616f680cab54378063f36fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_author</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;url, const std::string &amp;icon_url)</argsstring>
        <name>set_author</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>icon_url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed author. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the author </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The url of the author </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon_url</parametername>
</parameternamelist>
<parameterdescription>
<para>The icon URL of the author </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="585" column="7" bodyfile="src/dpp/message.cpp" bodystart="445" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a61d03e13bd14870613ea6b781a9ad0e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_provider</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;url)</argsstring>
        <name>set_provider</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed provider. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The provider name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The provider url </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="592" column="7" bodyfile="src/dpp/message.cpp" bodystart="459" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a4aee84626ea24406ff68caeea1e43b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_image</definition>
        <argsstring>(const std::string &amp;url)</argsstring>
        <name>set_image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed image. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The embed image URL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="598" column="7" bodyfile="src/dpp/message.cpp" bodystart="467" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a74a1f20e719f0bd855a19ea47310e485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_video</definition>
        <argsstring>(const std::string &amp;url)</argsstring>
        <name>set_video</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed video. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The embed video url </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="604" column="7" bodyfile="src/dpp/message.cpp" bodystart="474" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a90ffe75eeb96781a014c249fedbea6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_thumbnail</definition>
        <argsstring>(const std::string &amp;url)</argsstring>
        <name>set_thumbnail</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set embed thumbnail. Returns the embed itself so these method calls may be &quot;chained&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The embed thumbnail url </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="610" column="7" bodyfile="src/dpp/message.cpp" bodystart="481" bodyend="486"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A rich embed for display within a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::embed</label>
        <link refid="structdpp_1_1embed"/>
        <childnode refid="2" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>title</edgelabel>
          <edgelabel>type</edgelabel>
          <edgelabel>url</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>timestamp</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>color</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>author</edgelabel>
          <edgelabel>footer</edgelabel>
          <edgelabel>image</edgelabel>
          <edgelabel>provider</edgelabel>
          <edgelabel>thumbnail</edgelabel>
          <edgelabel>video</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>fields</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="6">
        <label>optional&lt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>vector&lt;</label>
      </node>
      <node id="4">
        <label>time_t</label>
      </node>
      <node id="5">
        <label>uint32_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/message.h" line="488" column="1" bodyfile="include/dpp/message.h" bodystart="488" bodyend="611"/>
    <listofallmembers>
      <member refid="structdpp_1_1embed_1ab9c9deedd331451367aa561e6f9178d0" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>add_field</name></member>
      <member refid="structdpp_1_1embed_1abe6263ce0132837017e0aca16c6e299d" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>author</name></member>
      <member refid="structdpp_1_1embed_1a882b7b909e6e90b5ac91fbb9d5f84f04" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>color</name></member>
      <member refid="structdpp_1_1embed_1ac9d64f935df99fc11ac960a29529f37c" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>description</name></member>
      <member refid="structdpp_1_1embed_1a6f60eea0421da23a22032bd317dd9b10" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>embed</name></member>
      <member refid="structdpp_1_1embed_1a03bbf47ebfcdb5a267fae660232c9577" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>embed</name></member>
      <member refid="structdpp_1_1embed_1a51999ed159b5d326b0117604bb8dc4ee" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>fields</name></member>
      <member refid="structdpp_1_1embed_1a431c219b7e195e151c19dfbebc09e13a" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>footer</name></member>
      <member refid="structdpp_1_1embed_1a05181f6e5ad5f6903b3cbcecb8e89ebe" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>image</name></member>
      <member refid="structdpp_1_1embed_1a689c7c16c458de20b1998b532364be0d" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>provider</name></member>
      <member refid="structdpp_1_1embed_1a1191592fd154b5cd29aad3b361ec3e9e" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_author</name></member>
      <member refid="structdpp_1_1embed_1ad0ec387f616f680cab54378063f36fd3" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_author</name></member>
      <member refid="structdpp_1_1embed_1a3bcc6f23d8d16c347139f624569e61e1" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_color</name></member>
      <member refid="structdpp_1_1embed_1aab60c0a8678a3c47d0fc47ae04818b16" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_description</name></member>
      <member refid="structdpp_1_1embed_1acfdeb54fd78b9c3b3e969e4d553f373e" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_footer</name></member>
      <member refid="structdpp_1_1embed_1a4aee84626ea24406ff68caeea1e43b08" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_image</name></member>
      <member refid="structdpp_1_1embed_1a61d03e13bd14870613ea6b781a9ad0e2" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_provider</name></member>
      <member refid="structdpp_1_1embed_1a90ffe75eeb96781a014c249fedbea6d7" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_thumbnail</name></member>
      <member refid="structdpp_1_1embed_1a618ee49a00b10349b039f4a75529005e" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_timestamp</name></member>
      <member refid="structdpp_1_1embed_1abde15c192fcfa8b9418bfea4585e947e" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_title</name></member>
      <member refid="structdpp_1_1embed_1a02bd8a6c9c248b8155d630fb8cd865b3" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_url</name></member>
      <member refid="structdpp_1_1embed_1a74a1f20e719f0bd855a19ea47310e485" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_video</name></member>
      <member refid="structdpp_1_1embed_1a60eebf805a4e809d319411c44043d8e2" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>thumbnail</name></member>
      <member refid="structdpp_1_1embed_1ac4579a586750009436c088f509438df1" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>timestamp</name></member>
      <member refid="structdpp_1_1embed_1a89364da800ab3c16ad566b3c93b68a54" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>title</name></member>
      <member refid="structdpp_1_1embed_1a573e0fd77066ee0aa4d9e5d8a0be3823" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>type</name></member>
      <member refid="structdpp_1_1embed_1acc50a97a3f286dfd929b2b3683167164" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>url</name></member>
      <member refid="structdpp_1_1embed_1aa8eb54d9c1a20cd2502f0ca79297fa0d" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>video</name></member>
      <member refid="structdpp_1_1embed_1a9d43c2e1648e03cf5aa28825f600391f" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>~embed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
