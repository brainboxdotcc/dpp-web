<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1thread__member" kind="struct" language="C++" prot="public">
    <compoundname>dpp::thread_member</compoundname>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; thread_member &gt;</basecompoundref>
    <includes local="no">thread.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdpp_1_1thread__member_1aeebfb5590fa5759ece20c551bf5b7991" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; thread_member &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; thread_member &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="structdpp_1_1thread__member" kindref="compound">thread_member</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/thread.h" line="214" column="28" bodyfile="include/dpp/thread.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1thread__member_1a840e99fdb640dfa0cda1d853360e1836" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::thread_member::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Any user-thread settings, currently only used for notifications. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/thread.h" line="65" column="10" bodyfile="include/dpp/thread.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1thread__member_1a1b8e07233ef58b4a0b765b0e1e54e000" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::thread_member::joined</definition>
        <argsstring></argsstring>
        <name>joined</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>The time when user last joined the thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/thread.h" line="60" column="8" bodyfile="include/dpp/thread.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1thread__member_1a17dfbcbeb25bdcf2d0d6040ba51df1b0" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::thread_member::thread_id</definition>
        <argsstring></argsstring>
        <name>thread_id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>ID of the thread member is part of. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/thread.h" line="50" column="11" bodyfile="include/dpp/thread.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1thread__member_1a5dbdfa69bced84ca047f45fa329904c5" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::thread_member::user_id</definition>
        <argsstring></argsstring>
        <name>user_id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>ID of the member. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/thread.h" line="55" column="11" bodyfile="include/dpp/thread.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structdpp_1_1thread__member_1abebe2d4e82d515323595cb94f8afca23" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1thread__member" kindref="compound">thread_member</ref> &amp;</type>
        <definition>thread_member &amp; dpp::thread_member::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Read struct values from a json object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>json to read values from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/thread.h" line="44" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; thread_member  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1thread__member" kindref="compound">thread_member</ref> &amp;</type>
        <definition>thread_member  &amp; dpp::json_interface&lt; thread_member  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; thread_member  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>represents membership of a user with a thread </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="1">
        <label>dpp::thread_member</label>
        <link refid="structdpp_1_1thread__member"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; thread_member &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; thread_member &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="4">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="5" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::thread_member</label>
        <link refid="structdpp_1_1thread__member"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>thread_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>joined</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; thread_member &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; thread_member &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>time_t</label>
      </node>
      <node id="7">
        <label>uint32_t</label>
      </node>
      <node id="5">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/thread.h" line="35" column="1" bodyfile="include/dpp/thread.h" bodystart="35" bodyend="66"/>
    <listofallmembers>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::thread_member</scope><name>build_json</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::thread_member</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1thread__member_1abebe2d4e82d515323595cb94f8afca23" prot="protected" virt="non-virtual"><scope>dpp::thread_member</scope><name>fill_from_json_impl</name></member>
      <member refid="structdpp_1_1thread__member_1a840e99fdb640dfa0cda1d853360e1836" prot="public" virt="non-virtual"><scope>dpp::thread_member</scope><name>flags</name></member>
      <member refid="structdpp_1_1thread__member_1a1b8e07233ef58b4a0b765b0e1e54e000" prot="public" virt="non-virtual"><scope>dpp::thread_member</scope><name>joined</name></member>
      <member refid="structdpp_1_1thread__member_1aeebfb5590fa5759ece20c551bf5b7991" prot="protected" virt="non-virtual"><scope>dpp::thread_member</scope><name>json_interface&lt; thread_member &gt;</name></member>
      <member refid="structdpp_1_1thread__member_1a17dfbcbeb25bdcf2d0d6040ba51df1b0" prot="public" virt="non-virtual"><scope>dpp::thread_member</scope><name>thread_id</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::thread_member</scope><name>to_json</name></member>
      <member refid="structdpp_1_1thread__member_1a5dbdfa69bced84ca047f45fa329904c5" prot="public" virt="non-virtual"><scope>dpp::thread_member</scope><name>user_id</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
