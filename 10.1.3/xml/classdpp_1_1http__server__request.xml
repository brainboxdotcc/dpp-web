<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1http__server__request" kind="class" language="C++" prot="public">
    <compoundname>dpp::http_server_request</compoundname>
    <basecompoundref refid="classdpp_1_1ssl__connection" prot="public" virt="non-virtual">dpp::ssl_connection</basecompoundref>
    <includes local="no">http_server_request.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1ab621dec93545862492493b548c968ccf" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a9758c1c5e9637e64e889b672ef62465b" kindref="member">http_server_request_event</ref></type>
        <definition>http_server_request_event dpp::http_server_request::handler</definition>
        <argsstring></argsstring>
        <name>handler</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Handler to handle the inbound request. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="70" column="27" bodyfile="include/dpp/http_server_request.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1a483d170974334d6b1ae2993d6d96e1ef" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::http_server_request::request_body</definition>
        <argsstring></argsstring>
        <name>request_body</name>
        <briefdescription>
<para>The request body, e.g. form data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="50" column="13" bodyfile="include/dpp/http_server_request.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1a17ec5d2d9400b9acfa192a576f7d410d" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a4dbbdf54366910bacd95554ccbc705a2" kindref="member">http_headers</ref></type>
        <definition>http_headers dpp::http_server_request::request_headers</definition>
        <argsstring></argsstring>
        <name>request_headers</name>
        <briefdescription>
<para>Headers from the client. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="55" column="14" bodyfile="include/dpp/http_server_request.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1a21dbc858e2cc12d0834e468649ddf1ff" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::http_server_request::response_body</definition>
        <argsstring></argsstring>
        <name>response_body</name>
        <briefdescription>
<para>Response body. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="75" column="13" bodyfile="include/dpp/http_server_request.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1a2b1e90d97d9d32f6285587b3b53e537d" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a4dbbdf54366910bacd95554ccbc705a2" kindref="member">http_headers</ref></type>
        <definition>http_headers dpp::http_server_request::response_headers</definition>
        <argsstring></argsstring>
        <name>response_headers</name>
        <briefdescription>
<para>Headers for our response. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="65" column="14" bodyfile="include/dpp/http_server_request.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1aec9351973219e9cea8de6cd3e74ba550" prot="private" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::http_server_request::timeout</definition>
        <argsstring></argsstring>
        <name>timeout</name>
        <briefdescription>
<para>Time at which the request should be abandoned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="60" column="8" bodyfile="include/dpp/http_server_request.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a4a8b48487e16cefed1f12821f64fa5e8" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
<para>Input buffer received from socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="128" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a8715f4363a7c5ef7ddc5439d5ff2394a" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::bytes_in</definition>
        <argsstring></argsstring>
        <name>bytes_in</name>
        <briefdescription>
<para>Bytes in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="183" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad9fccc5b66b4a5713b54d8ed1ab9c743" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::bytes_out</definition>
        <argsstring></argsstring>
        <name>bytes_out</name>
        <briefdescription>
<para>Bytes out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="178" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a0e0c14fe8f51c54ea280509c8c0e5140" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::cipher</definition>
        <argsstring></argsstring>
        <name>cipher</name>
        <briefdescription>
<para>SSL cipher in use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="148" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a0d85356b40ea02323cc161af4f5467fc" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::ssl_connection::connect_retries</definition>
        <argsstring></argsstring>
        <name>connect_retries</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>How many times we retried <ref refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca" kindref="member">connect()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="163" column="9" bodyfile="include/dpp/sslconnection.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1acf9eb0208d63e142a421f7f778b3a939" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::connected</definition>
        <argsstring></argsstring>
        <name>connected</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if connection is completed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="193" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aedf42057136f2fae90424a18daddce51" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::hostname</definition>
        <argsstring></argsstring>
        <name>hostname</name>
        <briefdescription>
<para>Hostname connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="168" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a9494e0dd128b5415a96d6ff9d24789aa" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_connection::last_tick</definition>
        <argsstring></argsstring>
        <name>last_tick</name>
        <briefdescription>
<para>For timers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="153" column="8" bodyfile="include/dpp/sslconnection.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a80a568dbb2049f4727c0efdde185699e" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::obuffer</definition>
        <argsstring></argsstring>
        <name>obuffer</name>
        <briefdescription>
<para>Output buffer for sending to socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="133" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1a5407aa8f4e713070c4fd7c145bbb5c09" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::http_server_request::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
<para>Path part of URL for HTTPS connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="87" column="13" bodyfile="include/dpp/http_server_request.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1addf00646298eba9176a675bba7269f27" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::plaintext</definition>
        <argsstring></argsstring>
        <name>plaintext</name>
        <briefdescription>
<para>True for a plain text connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="188" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a39851da532b2f7ee33570e3b1dafd097" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
<para>Port connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="173" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a62161bc05909fc1d67f3a59c5fbf6e79" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::raw_trace</definition>
        <argsstring></argsstring>
        <name>raw_trace</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Set this to true to log all IO to debug for this connection. This is an internal developer facility. Do not enable it unless you need to, as it will be very noisy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="230" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1a722013f3c3816d1a79c08106ce54d78a" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::http_server_request::request_type</definition>
        <argsstring></argsstring>
        <name>request_type</name>
        <briefdescription>
<para>The type of the request, e.g. GET, POST. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="82" column="13" bodyfile="include/dpp/http_server_request.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1abd9c3cf6150d3c7e2badd12829437207" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
        <definition>dpp::socket dpp::ssl_connection::sfd</definition>
        <argsstring></argsstring>
        <name>sfd</name>
        <briefdescription>
<para>Raw file descriptor of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="138" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a61cccaa18278dabe8eae3eafbf8dd1e7" prot="protected" static="no" mutable="no">
        <type>openssl_connection *</type>
        <definition>openssl_connection* dpp::ssl_connection::ssl</definition>
        <argsstring></argsstring>
        <name>ssl</name>
        <briefdescription>
<para>Openssl opaque contexts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="143" column="20" bodyfile="include/dpp/sslconnection.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad694f10e342b640f5fa6e88119c86a17" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_connection::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
<para>Start time of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="158" column="8" bodyfile="include/dpp/sslconnection.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1a505beeadc243ce7be7fd2deb557e5229" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1aaaa159f13811e8d13973c2794e171091" kindref="member">http_state</ref></type>
        <definition>http_state dpp::http_server_request::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
<para>Current connection state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="92" column="12" bodyfile="include/dpp/http_server_request.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1a96b67a3962a47387d3ab04be693afad1" prot="protected" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::http_server_request::status</definition>
        <argsstring></argsstring>
        <name>status</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>HTTP status code for response. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="97" column="10" bodyfile="include/dpp/http_server_request.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a69e9248f431daf428683b1152c05b1a6" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::tcp_connect_done</definition>
        <argsstring></argsstring>
        <name>tcp_connect_done</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if tcp <ref refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca" kindref="member">connect()</ref> succeeded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="198" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a216b85ccf220d2aa66e9a4397dcdf4a3" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a8b9ab0b8cf29978147a7df3947cd8f30" kindref="member">timer</ref></type>
        <definition>timer dpp::ssl_connection::timer_handle</definition>
        <argsstring></argsstring>
        <name>timer_handle</name>
        <briefdescription>
<para>Timer handle for one second timer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="203" column="7" bodyfile="include/dpp/sslconnection.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aa7a9277f5c258712b00e91b9cd062095" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::unique_id</definition>
        <argsstring></argsstring>
        <name>unique_id</name>
        <briefdescription>
<para>Unique ID of socket used as a nonce You can use this to identify requests vs reply if you want. D++ itself only sets this, and does not use it in any logic. It starts at 1 and increments for each request made. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="212" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1a1f90e215a7ee75dc033fe781434280fd" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::http_server_request::content_length</definition>
        <argsstring></argsstring>
        <name>content_length</name>
        <initializer>{ULLONG_MAX}</initializer>
        <briefdescription>
<para>Content length sent by client. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="159" column="10" bodyfile="include/dpp/http_server_request.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aaba3255abd8ec8e94d1781771cfc9acb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::keepalive</definition>
        <argsstring></argsstring>
        <name>keepalive</name>
        <briefdescription>
<para>True if we are keeping the connection alive after it has finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="294" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a3ae20842849f8c2f0174902dc70d7e97" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::ssl_connection::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
<para>Owning cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="299" column="15" bodyfile="include/dpp/sslconnection.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aa8cfa2e6c511022b67dbd97cc57f0731" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::private_key_file</definition>
        <argsstring></argsstring>
        <name>private_key_file</name>
        <briefdescription>
<para>Private key PEM file path for inbound SSL connections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="304" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad7feee672079e07699e25f7250021c66" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::public_key_file</definition>
        <argsstring></argsstring>
        <name>public_key_file</name>
        <briefdescription>
<para>Public key PEM file path for inbound SSL connections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="309" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__server__request_1af0baab2d9dc60dc9f9d1c010cec3d049" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::http_server_request::timed_out</definition>
        <argsstring></argsstring>
        <name>timed_out</name>
        <briefdescription>
<para>If true the response timed out while waiting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="130" column="6" bodyfile="include/dpp/http_server_request.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a148027378fa93a3d650d6e6b28684fad" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::http_server_request::connect</definition>
        <argsstring>() override</argsstring>
        <name>connect</name>
        <reimplements refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca">connect</reimplements>
        <briefdescription>
<para>Start the connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="102" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a74d9da0f1f0c5feb46ed0995bd7d2e05" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::do_raw_trace</definition>
        <argsstring>(const std::string &amp;message) const</argsstring>
        <name>do_raw_trace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>If raw_trace is set to true, log a debug message for this connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>debug message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="236" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a9d9970cd0dc08f94503d346bfbb0ef51" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::http_server_request::generate_error</definition>
        <argsstring>(uint16_t error_code, const std::string &amp;message)</argsstring>
        <name>generate_error</name>
        <param>
          <type>uint16_t</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Reply with an error message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>error code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="124" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1ac0a516b0c87edbed7a5772854e798ca2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::http_server_request::get_max_header_size</definition>
        <argsstring>() const</argsstring>
        <name>get_max_header_size</name>
        <briefdescription>
<para>Maximum size of headers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="117" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1abaeb04ec5dc74da887635db5c010fdbb" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::http_server_request::get_max_post_size</definition>
        <argsstring>() const</argsstring>
        <name>get_max_post_size</name>
        <briefdescription>
<para>Maximum size of POST body. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="112" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a89070e1f8e6757223883f647a45d7813" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::http_server_request::on_buffer_drained</definition>
        <argsstring>() override</argsstring>
        <name>on_buffer_drained</name>
        <reimplements refid="classdpp_1_1ssl__connection_1a4bdff78b127e920033d0d9f8fb58d456">on_buffer_drained</reimplements>
        <briefdescription>
<para>Called when the output buffer is drained to empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="107" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a054f295eb004fb9abbd987969b34f4bb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int dpp::ssl_connection::start_connecting</definition>
        <argsstring>(dpp::socket sockfd, const struct sockaddr *addr, socklen_t addrlen)</argsstring>
        <name>start_connecting</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>sockfd</declname>
        </param>
        <param>
          <type>const struct sockaddr *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>socklen_t</type>
          <declname>addrlen</declname>
        </param>
        <briefdescription>
<para>Start connecting to a TCP socket. This simply calls <ref refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca" kindref="member">connect()</ref> and checks for error return, as the timeout is now handled in the main IO events for the <ref refid="classdpp_1_1ssl__connection" kindref="compound">ssl_connection</ref> class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sockfd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>address to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addrlen</parametername>
</parameternamelist>
<parameterdescription>
<para>address length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int -1 on error, 0 on success just like POSIX <ref refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca" kindref="member">connect()</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1connection__exception" kindref="compound">dpp::connection_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on failure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="252" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1http__server__request_1ad7bef47951bbbed641480b9f13cc9359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::http_server_request::http_server_request</definition>
        <argsstring>(cluster *creator, socket fd, uint16_t port, bool plaintext_downgrade, const std::string &amp;private_key, const std::string &amp;public_key, http_server_request_event handle_request)</argsstring>
        <name>http_server_request</name>
        <param>
          <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>creator</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>plaintext_downgrade</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>private_key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>public_key</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a9758c1c5e9637e64e889b672ef62465b" kindref="member">http_server_request_event</ref></type>
          <declname>handle_request</declname>
        </param>
        <briefdescription>
<para>Construct a new server request object. Server request objects are instantiated for an incoming server connection, as such they already have a file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>creator</parametername>
</parameternamelist>
<parameterdescription>
<para>creating owner </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Port the connection came in on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_downgrade</parametername>
</parameternamelist>
<parameterdescription>
<para>true if plaintext, false if SSL </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>private_key</parametername>
</parameternamelist>
<parameterdescription>
<para>if SSL, the path to the private key PEM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>if SSL, the path to the public key PEM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle_request</parametername>
</parameternamelist>
<parameterdescription>
<para>request handler callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="173" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a98769016320547afcc9d0e9c60902ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::http_server_request::~http_server_request</definition>
        <argsstring>() override</argsstring>
        <name>~http_server_request</name>
        <briefdescription>
<para>Destroy the https client object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="178" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a187b7a0ffb65635d9f56591f400b6308" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::http_server_request::close</definition>
        <argsstring>() override</argsstring>
        <name>close</name>
        <reimplements refid="classdpp_1_1ssl__connection_1ab0e1c646dc2d36679ca2ef8b1e3fd3de">close</reimplements>
        <briefdescription>
<para>Close HTTPS socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="190" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1acdd1152134b624d18a9e82162e64bafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::complete_handshake</definition>
        <argsstring>(const struct socket_events *ev)</argsstring>
        <name>complete_handshake</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">socket_events</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Called while SSL handshake is in progress. If the handshake completes, the state of the socket is progressed to an established state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events for the socket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="379" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a3f8164696a6ffedcf9db89b7b4a2ea6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::enable_raw_tracing</definition>
        <argsstring>()</argsstring>
        <name>enable_raw_tracing</name>
        <briefdescription>
<para>For low-level debugging, calling this function will enable low level I/O logging for this connection to the logger. This can be very loud, and output a lot of data, so only enable it selectively where you need it. </para>
        </briefdescription>
        <detaileddescription>
<para>Generally, you won&apos;t need this, it is a library development utility. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="263" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a28c4296db4b541d99478c6db493f4b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_bytes_in</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_in</name>
        <briefdescription>
<para>Get total bytes received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="275" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ac69282a18c63bd1ddfaa87ba83410979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_bytes_out</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_out</name>
        <briefdescription>
<para>Get the bytes out objectGet total bytes sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes sent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="269" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ab2f2c18aff43ac8dfbfa58bc5dc71fa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::get_cipher</definition>
        <argsstring>()</argsstring>
        <name>get_cipher</name>
        <briefdescription>
<para>Get SSL cipher name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string ssl cipher name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="289" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1afd45991516d12aeee2c72718daf0d790" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string dpp::http_server_request::get_header</definition>
        <argsstring>(const std::string &amp;header_name) const</argsstring>
        <name>get_header</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>header_name</declname>
        </param>
        <briefdescription>
<para>Get a HTTP request header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Header name to find, case insensitive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Header content or empty string if not found. If multiple values have the same header_name, this will return one of them. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1http__server__request_1a459c8c8a1082373887e55d7e87b91d46" kindref="member">get_header_count</ref> to determine if multiple are present </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1http__server__request_1aee6a30ff3c8753b6a6841d2422e970d2" kindref="member">get_header_list</ref> to retrieve all entries of the same header_name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="206" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a459c8c8a1082373887e55d7e87b91d46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::http_server_request::get_header_count</definition>
        <argsstring>(const std::string &amp;header_name) const</argsstring>
        <name>get_header_count</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>header_name</declname>
        </param>
        <briefdescription>
<para>Get the number of headers with the same header name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header_name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of headers with this count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="214" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1aee6a30ff3c8753b6a6841d2422e970d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; std::string &gt;</type>
        <definition>std::list&lt; std::string &gt; dpp::http_server_request::get_header_list</definition>
        <argsstring>(const std::string &amp;header_name) const</argsstring>
        <name>get_header_list</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>header_name</declname>
        </param>
        <briefdescription>
<para>Get a set of HTTP request headers with a common name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header_name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of headers with the same name, or an empty list if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="222" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a3a435a70b9b0d729073c3dec38e8c20e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::multimap&lt; std::string, std::string &gt;</type>
        <definition>std::multimap&lt; std::string, std::string &gt; dpp::http_server_request::get_headers</definition>
        <argsstring>() const</argsstring>
        <name>get_headers</name>
        <briefdescription>
<para>Get all HTTP request headers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>headers as a map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="229" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a4c7c7a69b993eba559959cfae599a6f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::http_server_request::get_request_body</definition>
        <argsstring>() const</argsstring>
        <name>get_request_body</name>
        <briefdescription>
<para>Get current request body. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>request body </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="148" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1aa8eccc3346b34b751869e732975985c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::http_server_request::get_response</definition>
        <argsstring>()</argsstring>
        <name>get_response</name>
        <briefdescription>
<para>Get whole response as a string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="257" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1ab27be4b58d0f3f3834436e1325aabe45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::http_server_request::get_response_body</definition>
        <argsstring>() const</argsstring>
        <name>get_response_body</name>
        <briefdescription>
<para>Get current response body. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>response body </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="142" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1af190f268bfbbef3dd33ce571aea9f724" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1aaaa159f13811e8d13973c2794e171091" kindref="member">http_state</ref></type>
        <definition>http_state dpp::http_server_request::get_state</definition>
        <argsstring>() const</argsstring>
        <name>get_state</name>
        <briefdescription>
<para>Get request state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>request state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="136" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a99eeb4b81c8491fcde911cfd433394aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t dpp::http_server_request::get_status</definition>
        <argsstring>() const</argsstring>
        <name>get_status</name>
        <briefdescription>
<para>Get current status code. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>status code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="154" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a3cc296231589356506a103ad8c7eee74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_unique_id</definition>
        <argsstring>() const</argsstring>
        <name>get_unique_id</name>
        <briefdescription>
<para>Every request made has a unique ID. This increments for every request, starting at 1. You can use this for statistics, or to associate requests and replies in external event loops. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Unique ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="283" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a312827aaa48c1d7726efc9275ebd5cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::http_server_request::handle_buffer</definition>
        <argsstring>(std::string &amp;buffer) override</argsstring>
        <name>handle_buffer</name>
        <reimplements refid="classdpp_1_1ssl__connection_1a321015d761b174db3f4ffb2551bb2f99">handle_buffer</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Processes incoming data from the SSL socket input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents. Can modify this value removing the head elements when processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="185" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1af7e21fef92907780581d04c8f98bf9b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::ssl_connection::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const</argsstring>
        <name>log</name>
        <reimplementedby refid="classdpp_1_1discord__client_1ac8c04aa0b82c13324c8a4fe9dc3f697e">log</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a6a4111094ce256554beac3523b660822">log</reimplementedby>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>severity of log message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="371" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a8732ae4599f38f41d27de3f4c1c7cae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_error</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;, int error_code)</argsstring>
        <name>on_error</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
<para>Called when there is an error on the TCP socket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="400" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a8c50238080a887b09473c82bff8de817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_read</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;ev)</argsstring>
        <name>on_read</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Called when the TCP socket has data to read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="386" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a07c9f5c2dfff5ef27db1e148589e2e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_write</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;e)</argsstring>
        <name>on_write</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Called when the TCP socket can be written to without blocking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="393" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1ac04e231d1e3558a9231d066d54f7a2fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::http_server_request::one_second_timer</definition>
        <argsstring>() override</argsstring>
        <name>one_second_timer</name>
        <reimplements refid="classdpp_1_1ssl__connection_1ada1465dbb409fb3c994f9529fabc3f2b">one_second_timer</reimplements>
        <briefdescription>
<para>Fires every second from the underlying socket I/O loop, used for timeouts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="195" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::read_loop</definition>
        <argsstring>()</argsstring>
        <name>read_loop</name>
        <briefdescription>
<para>Set up non blocking I/O and configure on_read, on_write and on_error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::exception</parametername>
</parameternamelist>
<parameterdescription>
<para>Any std::exception (or derivative) thrown from <ref refid="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" kindref="member">read_loop()</ref> indicates setup failed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="339" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1aaa8949dd0caab303dc3ec3300e865332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1http__server__request" kindref="compound">http_server_request</ref> &amp;</type>
        <definition>http_server_request &amp; dpp::http_server_request::set_response_body</definition>
        <argsstring>(const std::string &amp;new_content)</argsstring>
        <name>set_response_body</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>new_content</declname>
        </param>
        <briefdescription>
<para>Set the response content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_content</parametername>
</parameternamelist>
<parameterdescription>
<para>response content </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="244" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1aac1be92d137abece865a832a5a6a6873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1http__server__request" kindref="compound">http_server_request</ref> &amp;</type>
        <definition>http_server_request &amp; dpp::http_server_request::set_response_header</definition>
        <argsstring>(const std::string &amp;header, const std::string &amp;value)</argsstring>
        <name>set_response_header</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>header</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a response header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header</parametername>
</parameternamelist>
<parameterdescription>
<para>header name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>header value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ref to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="237" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__server__request_1a3d5596e2e6097addc26e3c6047cbd6c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1http__server__request" kindref="compound">http_server_request</ref> &amp;</type>
        <definition>http_server_request &amp; dpp::http_server_request::set_status</definition>
        <argsstring>(uint16_t new_status)</argsstring>
        <name>set_status</name>
        <param>
          <type>uint16_t</type>
          <declname>new_status</declname>
        </param>
        <briefdescription>
<para>Set the response HTTP status, e.g. 200 for OK, 404 for not found, 429 for rate limited etc. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_status</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP status </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/http_server_request.h" line="252" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ae0fe670d8829bcfe600856a4c4adee00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::socket_write</definition>
        <argsstring>(const std::string_view data)</argsstring>
        <name>socket_write</name>
        <param>
          <type>const std::string_view</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write to the output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The data may not be written immediately and may be written at a later time to the socket. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="359" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::http_server_request</label>
        <link refid="classdpp_1_1http__server__request"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::ssl_connection</label>
        <link refid="classdpp_1_1ssl__connection"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="10">
        <label>bool</label>
      </node>
      <node id="23">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="14">
        <label>double</label>
      </node>
      <node id="22">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="23" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="3" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>socketengine</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::http_server_request</label>
        <link refid="classdpp_1_1http__server__request"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>path</edgelabel>
          <edgelabel>request_type</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>status</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>timed_out</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>content_length</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="16">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="17" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="9" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::ssl_connection</label>
        <link refid="classdpp_1_1ssl__connection"/>
        <childnode refid="3" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
          <edgelabel>private_key_file</edgelabel>
          <edgelabel>public_key_file</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>last_tick</edgelabel>
          <edgelabel>start</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>connect_retries</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
          <edgelabel>unique_id</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>connected</edgelabel>
          <edgelabel>keepalive</edgelabel>
          <edgelabel>plaintext</edgelabel>
          <edgelabel>raw_trace</edgelabel>
          <edgelabel>tcp_connect_done</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>timer_handle</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="9" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>event_router_t&lt;</label>
      </node>
      <node id="28">
        <label>http_state</label>
      </node>
      <node id="5">
        <label>int</label>
      </node>
      <node id="18">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="19" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>openssl_connection *</label>
      </node>
      <node id="11">
        <label>size_t</label>
      </node>
      <node id="25">
        <label>atomic_bool</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="7">
        <label>time_t</label>
      </node>
      <node id="21">
        <label>uint16_t</label>
      </node>
      <node id="13">
        <label>uint32_t</label>
      </node>
      <node id="9">
        <label>uint64_t</label>
      </node>
      <node id="8">
        <label>uint8_t</label>
      </node>
      <node id="24">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/http_server_request.h" line="46" column="1" bodyfile="include/dpp/http_server_request.h" bodystart="46" bodyend="258"/>
    <listofallmembers>
      <member refid="classdpp_1_1ssl__connection_1a4a8b48487e16cefed1f12821f64fa5e8" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>buffer</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8715f4363a7c5ef7ddc5439d5ff2394a" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>bytes_in</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad9fccc5b66b4a5713b54d8ed1ab9c743" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>bytes_out</name></member>
      <member refid="classdpp_1_1ssl__connection_1a0e0c14fe8f51c54ea280509c8c0e5140" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>cipher</name></member>
      <member refid="classdpp_1_1http__server__request_1a187b7a0ffb65635d9f56591f400b6308" prot="public" virt="virtual"><scope>dpp::http_server_request</scope><name>close</name></member>
      <member refid="classdpp_1_1ssl__connection_1acdd1152134b624d18a9e82162e64bafe" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>complete_handshake</name></member>
      <member refid="classdpp_1_1http__server__request_1a148027378fa93a3d650d6e6b28684fad" prot="protected" virt="virtual"><scope>dpp::http_server_request</scope><name>connect</name></member>
      <member refid="classdpp_1_1ssl__connection_1a0d85356b40ea02323cc161af4f5467fc" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>connect_retries</name></member>
      <member refid="classdpp_1_1ssl__connection_1acf9eb0208d63e142a421f7f778b3a939" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>connected</name></member>
      <member refid="classdpp_1_1http__server__request_1a1f90e215a7ee75dc033fe781434280fd" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>content_length</name></member>
      <member refid="classdpp_1_1ssl__connection_1a74d9da0f1f0c5feb46ed0995bd7d2e05" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>do_raw_trace</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3f8164696a6ffedcf9db89b7b4a2ea6d" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>enable_raw_tracing</name></member>
      <member refid="classdpp_1_1http__server__request_1a9d9970cd0dc08f94503d346bfbb0ef51" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>generate_error</name></member>
      <member refid="classdpp_1_1ssl__connection_1a28c4296db4b541d99478c6db493f4b03" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_bytes_in</name></member>
      <member refid="classdpp_1_1ssl__connection_1ac69282a18c63bd1ddfaa87ba83410979" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_bytes_out</name></member>
      <member refid="classdpp_1_1ssl__connection_1ab2f2c18aff43ac8dfbfa58bc5dc71fa1" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_cipher</name></member>
      <member refid="classdpp_1_1http__server__request_1afd45991516d12aeee2c72718daf0d790" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_header</name></member>
      <member refid="classdpp_1_1http__server__request_1a459c8c8a1082373887e55d7e87b91d46" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_header_count</name></member>
      <member refid="classdpp_1_1http__server__request_1aee6a30ff3c8753b6a6841d2422e970d2" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_header_list</name></member>
      <member refid="classdpp_1_1http__server__request_1a3a435a70b9b0d729073c3dec38e8c20e" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_headers</name></member>
      <member refid="classdpp_1_1http__server__request_1ac0a516b0c87edbed7a5772854e798ca2" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_max_header_size</name></member>
      <member refid="classdpp_1_1http__server__request_1abaeb04ec5dc74da887635db5c010fdbb" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_max_post_size</name></member>
      <member refid="classdpp_1_1http__server__request_1a4c7c7a69b993eba559959cfae599a6f1" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_request_body</name></member>
      <member refid="classdpp_1_1http__server__request_1aa8eccc3346b34b751869e732975985c5" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_response</name></member>
      <member refid="classdpp_1_1http__server__request_1ab27be4b58d0f3f3834436e1325aabe45" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_response_body</name></member>
      <member refid="classdpp_1_1http__server__request_1af190f268bfbbef3dd33ce571aea9f724" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_state</name></member>
      <member refid="classdpp_1_1http__server__request_1a99eeb4b81c8491fcde911cfd433394aa" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_status</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3cc296231589356506a103ad8c7eee74" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>get_unique_id</name></member>
      <member refid="classdpp_1_1http__server__request_1a312827aaa48c1d7726efc9275ebd5cb6" prot="public" virt="virtual"><scope>dpp::http_server_request</scope><name>handle_buffer</name></member>
      <member refid="classdpp_1_1http__server__request_1ab621dec93545862492493b548c968ccf" prot="private" virt="non-virtual"><scope>dpp::http_server_request</scope><name>handler</name></member>
      <member refid="classdpp_1_1ssl__connection_1aedf42057136f2fae90424a18daddce51" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>hostname</name></member>
      <member refid="classdpp_1_1http__server__request_1ad7bef47951bbbed641480b9f13cc9359" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>http_server_request</name></member>
      <member refid="classdpp_1_1ssl__connection_1aaba3255abd8ec8e94d1781771cfc9acb" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>keepalive</name></member>
      <member refid="classdpp_1_1ssl__connection_1a9494e0dd128b5415a96d6ff9d24789aa" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>last_tick</name></member>
      <member refid="classdpp_1_1ssl__connection_1af7e21fef92907780581d04c8f98bf9b6" prot="public" virt="virtual"><scope>dpp::http_server_request</scope><name>log</name></member>
      <member refid="classdpp_1_1ssl__connection_1a80a568dbb2049f4727c0efdde185699e" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>obuffer</name></member>
      <member refid="classdpp_1_1http__server__request_1a89070e1f8e6757223883f647a45d7813" prot="protected" virt="virtual"><scope>dpp::http_server_request</scope><name>on_buffer_drained</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8732ae4599f38f41d27de3f4c1c7cae6" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>on_error</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8c50238080a887b09473c82bff8de817" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>on_read</name></member>
      <member refid="classdpp_1_1ssl__connection_1a07c9f5c2dfff5ef27db1e148589e2e26" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>on_write</name></member>
      <member refid="classdpp_1_1http__server__request_1ac04e231d1e3558a9231d066d54f7a2fc" prot="public" virt="virtual"><scope>dpp::http_server_request</scope><name>one_second_timer</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3ae20842849f8c2f0174902dc70d7e97" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>owner</name></member>
      <member refid="classdpp_1_1http__server__request_1a5407aa8f4e713070c4fd7c145bbb5c09" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>path</name></member>
      <member refid="classdpp_1_1ssl__connection_1addf00646298eba9176a675bba7269f27" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>plaintext</name></member>
      <member refid="classdpp_1_1ssl__connection_1a39851da532b2f7ee33570e3b1dafd097" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>port</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa8cfa2e6c511022b67dbd97cc57f0731" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>private_key_file</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad7feee672079e07699e25f7250021c66" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>public_key_file</name></member>
      <member refid="classdpp_1_1ssl__connection_1a62161bc05909fc1d67f3a59c5fbf6e79" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>raw_trace</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>read_loop</name></member>
      <member refid="classdpp_1_1http__server__request_1a483d170974334d6b1ae2993d6d96e1ef" prot="private" virt="non-virtual"><scope>dpp::http_server_request</scope><name>request_body</name></member>
      <member refid="classdpp_1_1http__server__request_1a17ec5d2d9400b9acfa192a576f7d410d" prot="private" virt="non-virtual"><scope>dpp::http_server_request</scope><name>request_headers</name></member>
      <member refid="classdpp_1_1http__server__request_1a722013f3c3816d1a79c08106ce54d78a" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>request_type</name></member>
      <member refid="classdpp_1_1http__server__request_1a21dbc858e2cc12d0834e468649ddf1ff" prot="private" virt="non-virtual"><scope>dpp::http_server_request</scope><name>response_body</name></member>
      <member refid="classdpp_1_1http__server__request_1a2b1e90d97d9d32f6285587b3b53e537d" prot="private" virt="non-virtual"><scope>dpp::http_server_request</scope><name>response_headers</name></member>
      <member refid="classdpp_1_1http__server__request_1aaa8949dd0caab303dc3ec3300e865332" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>set_response_body</name></member>
      <member refid="classdpp_1_1http__server__request_1aac1be92d137abece865a832a5a6a6873" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>set_response_header</name></member>
      <member refid="classdpp_1_1http__server__request_1a3d5596e2e6097addc26e3c6047cbd6c2" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>set_status</name></member>
      <member refid="classdpp_1_1ssl__connection_1abd9c3cf6150d3c7e2badd12829437207" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>sfd</name></member>
      <member refid="classdpp_1_1ssl__connection_1ae0fe670d8829bcfe600856a4c4adee00" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>socket_write</name></member>
      <member refid="classdpp_1_1ssl__connection_1a61cccaa18278dabe8eae3eafbf8dd1e7" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>ssl</name></member>
      <member refid="classdpp_1_1ssl__connection_1a77bd0f626125dfef52cfe7fe40216772" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>ssl_connection</name></member>
      <member refid="classdpp_1_1ssl__connection_1ab9d2b0349eb22555403c692500a287bb" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>ssl_connection</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad694f10e342b640f5fa6e88119c86a17" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>start</name></member>
      <member refid="classdpp_1_1ssl__connection_1a054f295eb004fb9abbd987969b34f4bb" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>start_connecting</name></member>
      <member refid="classdpp_1_1http__server__request_1a505beeadc243ce7be7fd2deb557e5229" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>state</name></member>
      <member refid="classdpp_1_1http__server__request_1a96b67a3962a47387d3ab04be693afad1" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>status</name></member>
      <member refid="classdpp_1_1ssl__connection_1a69e9248f431daf428683b1152c05b1a6" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>tcp_connect_done</name></member>
      <member refid="classdpp_1_1http__server__request_1af0baab2d9dc60dc9f9d1c010cec3d049" prot="public" virt="non-virtual"><scope>dpp::http_server_request</scope><name>timed_out</name></member>
      <member refid="classdpp_1_1http__server__request_1aec9351973219e9cea8de6cd3e74ba550" prot="private" virt="non-virtual"><scope>dpp::http_server_request</scope><name>timeout</name></member>
      <member refid="classdpp_1_1ssl__connection_1a216b85ccf220d2aa66e9a4397dcdf4a3" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>timer_handle</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa7a9277f5c258712b00e91b9cd062095" prot="protected" virt="non-virtual"><scope>dpp::http_server_request</scope><name>unique_id</name></member>
      <member refid="classdpp_1_1http__server__request_1a98769016320547afcc9d0e9c60902ff2" prot="public" virt="virtual"><scope>dpp::http_server_request</scope><name>~http_server_request</name></member>
      <member refid="classdpp_1_1ssl__connection_1a23c94174be8ca86f9d4e30931bd4ff12" prot="public" virt="virtual"><scope>dpp::http_server_request</scope><name>~ssl_connection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
