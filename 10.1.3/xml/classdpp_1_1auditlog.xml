<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1auditlog" kind="class" language="C++" prot="public">
    <compoundname>dpp::auditlog</compoundname>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; auditlog &gt;</basecompoundref>
    <includes local="no">auditlog.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1auditlog_1ab9f6928e2b30d10631a1e811809e4678" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; auditlog &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; auditlog &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="classdpp_1_1auditlog" kindref="compound">auditlog</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/auditlog.h" line="452" column="9" bodyfile="include/dpp/auditlog.h" bodystart="460" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1auditlog_1a36c8f45302e0d22cda77279ab2708daa" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1audit__entry" kindref="compound">audit_entry</ref> &gt;</type>
        <definition>std::vector&lt;audit_entry&gt; dpp::auditlog::entries</definition>
        <argsstring></argsstring>
        <name>entries</name>
        <briefdescription>
<para>Audit log entries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/auditlog.h" line="472" column="13" bodyfile="include/dpp/auditlog.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1auditlog_1afe470d7c75faa6dcd28e3d85e7f01ea1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1auditlog" kindref="compound">auditlog</ref> &amp;</type>
        <definition>auditlog &amp; dpp::auditlog::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/auditlog.h" line="466" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1auditlog_1a1846ff8bb9925a207d1465789996020f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::auditlog::auditlog</definition>
        <argsstring>()=default</argsstring>
        <name>auditlog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/auditlog.h" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1auditlog_1a21458fb892ef5e3c02a3a9682a006df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::auditlog::~auditlog</definition>
        <argsstring>()=default</argsstring>
        <name>~auditlog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/auditlog.h" line="478" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; auditlog  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1auditlog" kindref="compound">auditlog</ref> &amp;</type>
        <definition>auditlog  &amp; dpp::json_interface&lt; auditlog  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; auditlog  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The auditlog class represents the audit log entries of a guild. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::auditlog</label>
        <link refid="classdpp_1_1auditlog"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; auditlog &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; auditlog &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::auditlog</label>
        <link refid="classdpp_1_1auditlog"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>entries</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; auditlog &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; auditlog &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>vector&lt;</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/auditlog.h" line="458" column="1" bodyfile="include/dpp/auditlog.h" bodystart="458" bodyend="479"/>
    <listofallmembers>
      <member refid="classdpp_1_1auditlog_1a1846ff8bb9925a207d1465789996020f" prot="public" virt="non-virtual"><scope>dpp::auditlog</scope><name>auditlog</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::auditlog</scope><name>build_json</name></member>
      <member refid="classdpp_1_1auditlog_1a36c8f45302e0d22cda77279ab2708daa" prot="public" virt="non-virtual"><scope>dpp::auditlog</scope><name>entries</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::auditlog</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1auditlog_1afe470d7c75faa6dcd28e3d85e7f01ea1" prot="protected" virt="non-virtual"><scope>dpp::auditlog</scope><name>fill_from_json_impl</name></member>
      <member refid="classdpp_1_1auditlog_1ab9f6928e2b30d10631a1e811809e4678" prot="protected" virt="non-virtual"><scope>dpp::auditlog</scope><name>json_interface&lt; auditlog &gt;</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::auditlog</scope><name>to_json</name></member>
      <member refid="classdpp_1_1auditlog_1a21458fb892ef5e3c02a3a9682a006df0" prot="public" virt="virtual"><scope>dpp::auditlog</scope><name>~auditlog</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
