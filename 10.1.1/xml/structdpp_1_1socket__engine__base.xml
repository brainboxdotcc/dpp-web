<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1socket__engine__base" kind="struct" language="C++" prot="public" abstract="yes">
    <compoundname>dpp::socket_engine_base</compoundname>
    <includes local="no">socketengine.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1socket__engine__base_1ae97986988ae0714fa88f022ef12df16d" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::socket_engine_base::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Owning cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="202" column="15" bodyfile="include/dpp/socketengine.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structdpp_1_1socket__engine__base_1aa34700b8b016170668548faee23aa516" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a528b0d9736647cc49207bbe4c1adee61" kindref="member">socket_container</ref></type>
        <definition>socket_container dpp::socket_engine_base::fds</definition>
        <argsstring></argsstring>
        <name>fds</name>
        <briefdescription>
<para>File descriptors, and their states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="295" column="18" bodyfile="include/dpp/socketengine.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1socket__engine__base_1a73ee6082446d48daedac90228f74eb4d" prot="protected" static="no" mutable="no">
        <type>std::shared_mutex</type>
        <definition>std::shared_mutex dpp::socket_engine_base::fds_mutex</definition>
        <argsstring></argsstring>
        <name>fds_mutex</name>
        <briefdescription>
<para>Mutex for fds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="290" column="19" bodyfile="include/dpp/socketengine.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1socket__engine__base_1aa5678696646a53cf7e713e1580c47db0" prot="protected" static="no" mutable="no">
        <type><ref refid="structdpp_1_1socket__stats" kindref="compound">socket_stats</ref></type>
        <definition>socket_stats dpp::socket_engine_base::stats</definition>
        <argsstring></argsstring>
        <name>stats</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Socket engine statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="300" column="14" bodyfile="include/dpp/socketengine.h" bodystart="300" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1a3177d7e1f55655d1b0256b3c401b8640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::socket_engine_base::socket_engine_base</definition>
        <argsstring>(class cluster *creator)</argsstring>
        <name>socket_engine_base</name>
        <param>
          <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>creator</declname>
        </param>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>creator</parametername>
</parameternamelist>
<parameterdescription>
<para>Owning cluster </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1ab41f58817f27a5a20633e9aa14d5f074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::socket_engine_base::socket_engine_base</definition>
        <argsstring>(const socket_engine_base &amp;)=delete</argsstring>
        <name>socket_engine_base</name>
        <param>
          <type>const <ref refid="structdpp_1_1socket__engine__base" kindref="compound">socket_engine_base</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Non-copyable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1a68b43e48f602124007d21e472466bcdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::socket_engine_base::socket_engine_base</definition>
        <argsstring>(socket_engine_base &amp;&amp;)=delete</argsstring>
        <name>socket_engine_base</name>
        <param>
          <type><ref refid="structdpp_1_1socket__engine__base" kindref="compound">socket_engine_base</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Non-copyable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1a08a48b2da040d807140eb34edc42f653" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::socket_engine_base::~socket_engine_base</definition>
        <argsstring>()=default</argsstring>
        <name>~socket_engine_base</name>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="233" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1af90ba41a8ef7292e81d44c053f28470f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::socket_engine_base::delete_socket</definition>
        <argsstring>(dpp::socket fd)</argsstring>
        <name>delete_socket</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Delete a socket from the socket engine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This will not remove the socket immediately. It will set the WANT_DELETION flag causing it to be removed as soon as is safe to do so (once all events associated with it are completed). </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if socket was queued for deletion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="263" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1a73e1a6b45637f08955137ded7e825155" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1socket__stats" kindref="compound">socket_stats</ref> &amp;</type>
        <definition>const socket_stats &amp; dpp::socket_engine_base::get_stats</definition>
        <argsstring>() const</argsstring>
        <name>get_stats</name>
        <briefdescription>
<para>Get statistics for socket engine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>socket stats </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="283" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1ae71de099e1f484bdd5f0b802d843c193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::socket_engine_base::inplace_modify_fd</definition>
        <argsstring>(dpp::socket fd, uint8_t extra_flags)</argsstring>
        <name>inplace_modify_fd</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>extra_flags</declname>
        </param>
        <briefdescription>
<para>Merge new flags in with the given file descriptor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>extra flags to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="277" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1a0375dc518e4b135713290772cc2f1c2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1socket__engine__base" kindref="compound">socket_engine_base</ref> &amp;</type>
        <definition>socket_engine_base &amp; dpp::socket_engine_base::operator=</definition>
        <argsstring>(const socket_engine_base &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structdpp_1_1socket__engine__base" kindref="compound">socket_engine_base</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Non-movable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="223" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1acee69a3ddd605265a366ebffadf55a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1socket__engine__base" kindref="compound">socket_engine_base</ref> &amp;</type>
        <definition>socket_engine_base &amp; dpp::socket_engine_base::operator=</definition>
        <argsstring>(socket_engine_base &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structdpp_1_1socket__engine__base" kindref="compound">socket_engine_base</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Non-movable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="228" column="20"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1a80ab1706910c0c3297af8502bdf32b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void dpp::socket_engine_base::process_events</definition>
        <argsstring>()=0</argsstring>
        <name>process_events</name>
        <briefdescription>
<para>Should be called repeatedly in a loop. Will run for a maximum of 1 second. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="239" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1abe203593996388688f76782aff3eccf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::socket_engine_base::prune</definition>
        <argsstring>()</argsstring>
        <name>prune</name>
        <briefdescription>
<para>Iterate through the list of sockets and remove any with WANT_DELETION set. This will also call implementation-specific <ref refid="structdpp_1_1socket__engine__base_1a35d1ff396f528ed002127caa8d870157" kindref="member">remove_socket()</ref> on each entry to be removed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="270" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1ad230cedabf8ed9503b0df60e3e6afc89" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::socket_engine_base::register_socket</definition>
        <argsstring>(const socket_events &amp;e)</argsstring>
        <name>register_socket</name>
        <param>
          <type>const <ref refid="structdpp_1_1socket__events" kindref="compound">socket_events</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Register a new socket with the socket engine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if socket was added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="246" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1a7b07f0a5c0727e6eddaa0b10b1ee9f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::socket_engine_base::update_socket</definition>
        <argsstring>(const socket_events &amp;e)</argsstring>
        <name>update_socket</name>
        <param>
          <type>const <ref refid="structdpp_1_1socket__events" kindref="compound">socket_events</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Update an existing socket in the socket engine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if socket was updated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="253" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1a8c1fa27742dd26974355590fe5c5e5c8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1socket__events" kindref="compound">socket_events</ref> *</type>
        <definition>socket_events * dpp::socket_engine_base::get_fd</definition>
        <argsstring>(dpp::socket fd)</argsstring>
        <name>get_fd</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Find a file descriptors socket events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file descriptor or nullptr if doesn&apos;t exist </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="307" column="15"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1socket__engine__base_1a35d1ff396f528ed002127caa8d870157" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::socket_engine_base::remove_socket</definition>
        <argsstring>(dpp::socket fd)</argsstring>
        <name>remove_socket</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Called by the <ref refid="structdpp_1_1socket__engine__base_1abe203593996388688f76782aff3eccf4" kindref="member">prune()</ref> function to remove sockets when safe to do so. This is normally at the end or before an iteration of the event loop. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/socketengine.h" line="314" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This is the base class for socket engines. The actual implementation is OS specific and the correct implementation is detected by CMake. It is then compiled specifically into DPP so only one implementation can exist in the implementation. All implementations should behave identically to the user, abstracting out implementation-specific behaviours (e.g. difference between edge and level triggered event mechanisms etc). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="30">
        <label>K</label>
      </node>
      <node id="28">
        <label>T</label>
      </node>
      <node id="18">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="7">
        <label>double</label>
      </node>
      <node id="17">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="18" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="3" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>socketengine</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="9">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="10" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="11" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::socket_engine_base</label>
        <link refid="structdpp_1_1socket__engine__base"/>
        <childnode refid="2" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>fds_mutex</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>fds</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>stats</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>dpp::socket_stats</label>
        <link refid="structdpp_1_1socket__stats"/>
        <childnode refid="11" relation="usage">
          <edgelabel>active_fds</edgelabel>
          <edgelabel>deletions</edgelabel>
          <edgelabel>errors</edgelabel>
          <edgelabel>iterations</edgelabel>
          <edgelabel>reads</edgelabel>
          <edgelabel>updates</edgelabel>
          <edgelabel>writes</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>engine_type</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="11" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>event_router_t&lt;</label>
      </node>
      <node id="25">
        <label>int</label>
      </node>
      <node id="12">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="13" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>atomic_bool</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="33">
        <label>std::basic_string_view&lt; Char &gt;</label>
      </node>
      <node id="23">
        <label>std::shared_mutex</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>std::string_view</label>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>std::unique_ptr&lt; T &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="29">
        <label>std::unordered_map&lt; K, T &gt;</label>
        <childnode refid="30" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>time_t</label>
      </node>
      <node id="15">
        <label>uint16_t</label>
      </node>
      <node id="6">
        <label>uint32_t</label>
      </node>
      <node id="11">
        <label>uint64_t</label>
      </node>
      <node id="16">
        <label>uint8_t</label>
      </node>
      <node id="26">
        <label>std::unique_ptr&lt; socket_events &gt;</label>
        <childnode refid="27" relation="template-instance">
          <edgelabel>&lt; socket_events &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>std::unordered_map&lt; dpp::socket, std::unique_ptr&lt; socket_events &gt; &gt;</label>
        <childnode refid="25" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="29" relation="template-instance">
          <edgelabel>&lt; dpp::socket, std::unique_ptr&lt; socket_events &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/socketengine.h" line="197" column="1" bodyfile="include/dpp/socketengine.h" bodystart="197" bodyend="315"/>
    <listofallmembers>
      <member refid="structdpp_1_1socket__engine__base_1af90ba41a8ef7292e81d44c053f28470f" prot="public" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>delete_socket</name></member>
      <member refid="structdpp_1_1socket__engine__base_1aa34700b8b016170668548faee23aa516" prot="protected" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>fds</name></member>
      <member refid="structdpp_1_1socket__engine__base_1a73ee6082446d48daedac90228f74eb4d" prot="protected" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>fds_mutex</name></member>
      <member refid="structdpp_1_1socket__engine__base_1a8c1fa27742dd26974355590fe5c5e5c8" prot="protected" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>get_fd</name></member>
      <member refid="structdpp_1_1socket__engine__base_1a73e1a6b45637f08955137ded7e825155" prot="public" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>get_stats</name></member>
      <member refid="structdpp_1_1socket__engine__base_1ae71de099e1f484bdd5f0b802d843c193" prot="public" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>inplace_modify_fd</name></member>
      <member refid="structdpp_1_1socket__engine__base_1a0375dc518e4b135713290772cc2f1c2e" prot="public" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>operator=</name></member>
      <member refid="structdpp_1_1socket__engine__base_1acee69a3ddd605265a366ebffadf55a62" prot="public" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>operator=</name></member>
      <member refid="structdpp_1_1socket__engine__base_1ae97986988ae0714fa88f022ef12df16d" prot="public" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>owner</name></member>
      <member refid="structdpp_1_1socket__engine__base_1a80ab1706910c0c3297af8502bdf32b58" prot="public" virt="pure-virtual"><scope>dpp::socket_engine_base</scope><name>process_events</name></member>
      <member refid="structdpp_1_1socket__engine__base_1abe203593996388688f76782aff3eccf4" prot="public" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>prune</name></member>
      <member refid="structdpp_1_1socket__engine__base_1ad230cedabf8ed9503b0df60e3e6afc89" prot="public" virt="virtual"><scope>dpp::socket_engine_base</scope><name>register_socket</name></member>
      <member refid="structdpp_1_1socket__engine__base_1a35d1ff396f528ed002127caa8d870157" prot="protected" virt="virtual"><scope>dpp::socket_engine_base</scope><name>remove_socket</name></member>
      <member refid="structdpp_1_1socket__engine__base_1a3177d7e1f55655d1b0256b3c401b8640" prot="public" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>socket_engine_base</name></member>
      <member refid="structdpp_1_1socket__engine__base_1ab41f58817f27a5a20633e9aa14d5f074" prot="public" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>socket_engine_base</name></member>
      <member refid="structdpp_1_1socket__engine__base_1a68b43e48f602124007d21e472466bcdc" prot="public" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>socket_engine_base</name></member>
      <member refid="structdpp_1_1socket__engine__base_1aa5678696646a53cf7e713e1580c47db0" prot="protected" virt="non-virtual"><scope>dpp::socket_engine_base</scope><name>stats</name></member>
      <member refid="structdpp_1_1socket__engine__base_1a7b07f0a5c0727e6eddaa0b10b1ee9f33" prot="public" virt="virtual"><scope>dpp::socket_engine_base</scope><name>update_socket</name></member>
      <member refid="structdpp_1_1socket__engine__base_1a08a48b2da040d807140eb34edc42f653" prot="public" virt="virtual"><scope>dpp::socket_engine_base</scope><name>~socket_engine_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
