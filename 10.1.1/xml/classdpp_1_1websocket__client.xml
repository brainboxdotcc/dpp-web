<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1websocket__client" kind="class" language="C++" prot="public">
    <compoundname>dpp::websocket_client</compoundname>
    <basecompoundref refid="classdpp_1_1ssl__connection" prot="public" virt="non-virtual">dpp::ssl_connection</basecompoundref>
    <derivedcompoundref refid="classdpp_1_1discord__client" prot="public" virt="non-virtual">dpp::discord_client</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1discord__voice__client" prot="public" virt="non-virtual">dpp::discord_voice_client</derivedcompoundref>
    <includes local="no">wsclient.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1a6f9b303bbb4a2236fb16e6b7369f3974" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
        <definition>ws_opcode dpp::websocket_client::data_opcode</definition>
        <argsstring></argsstring>
        <name>data_opcode</name>
        <briefdescription>
<para>Data opcode, represents the type of frames we send. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="124" column="11" bodyfile="include/dpp/wsclient.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1a59ab1bbefef3fe35d9217eb7a3716032" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; dpp::websocket_client::http_headers</definition>
        <argsstring></argsstring>
        <name>http_headers</name>
        <briefdescription>
<para>HTTP headers received on connecting/upgrading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="129" column="10" bodyfile="include/dpp/wsclient.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1a81d3d2f7c4ad7ca01777131d8131b294" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::websocket_client::key</definition>
        <argsstring></argsstring>
        <name>key</name>
        <briefdescription>
<para>Connection key used in the HTTP headers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="109" column="13" bodyfile="include/dpp/wsclient.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1ab39bac55d55ee3af9046a5b7957caf1c" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::websocket_client::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
<para>Path part of URL for websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="119" column="13" bodyfile="include/dpp/wsclient.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1ad7337ca3851942c1457b95d71da5f790" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1af3b7f3e861707f45beefa9449de70519" kindref="member">ws_state</ref></type>
        <definition>ws_state dpp::websocket_client::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
<para>Current websocket state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="114" column="10" bodyfile="include/dpp/wsclient.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a4a8b48487e16cefed1f12821f64fa5e8" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
<para>Input buffer received from socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="128" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a8715f4363a7c5ef7ddc5439d5ff2394a" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::bytes_in</definition>
        <argsstring></argsstring>
        <name>bytes_in</name>
        <briefdescription>
<para>Bytes in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="183" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad9fccc5b66b4a5713b54d8ed1ab9c743" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::bytes_out</definition>
        <argsstring></argsstring>
        <name>bytes_out</name>
        <briefdescription>
<para>Bytes out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="178" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a0e0c14fe8f51c54ea280509c8c0e5140" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::cipher</definition>
        <argsstring></argsstring>
        <name>cipher</name>
        <briefdescription>
<para>SSL cipher in use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="148" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a0d85356b40ea02323cc161af4f5467fc" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::ssl_connection::connect_retries</definition>
        <argsstring></argsstring>
        <name>connect_retries</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>How many times we retried <ref refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca" kindref="member">connect()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="163" column="9" bodyfile="include/dpp/sslconnection.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1acf9eb0208d63e142a421f7f778b3a939" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::connected</definition>
        <argsstring></argsstring>
        <name>connected</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if connection is completed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="193" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aedf42057136f2fae90424a18daddce51" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::hostname</definition>
        <argsstring></argsstring>
        <name>hostname</name>
        <briefdescription>
<para>Hostname connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="168" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a9494e0dd128b5415a96d6ff9d24789aa" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_connection::last_tick</definition>
        <argsstring></argsstring>
        <name>last_tick</name>
        <briefdescription>
<para>For timers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="153" column="8" bodyfile="include/dpp/sslconnection.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a80a568dbb2049f4727c0efdde185699e" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::obuffer</definition>
        <argsstring></argsstring>
        <name>obuffer</name>
        <briefdescription>
<para>Output buffer for sending to socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="133" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1addf00646298eba9176a675bba7269f27" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::plaintext</definition>
        <argsstring></argsstring>
        <name>plaintext</name>
        <briefdescription>
<para>True for a plain text connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="188" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a39851da532b2f7ee33570e3b1dafd097" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
<para>Port connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="173" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a62161bc05909fc1d67f3a59c5fbf6e79" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::raw_trace</definition>
        <argsstring></argsstring>
        <name>raw_trace</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Set this to true to log all IO to debug for this connection. This is an internal developer facility. Do not enable it unless you need to, as it will be very noisy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="230" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1abd9c3cf6150d3c7e2badd12829437207" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
        <definition>dpp::socket dpp::ssl_connection::sfd</definition>
        <argsstring></argsstring>
        <name>sfd</name>
        <briefdescription>
<para>Raw file descriptor of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="138" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a61cccaa18278dabe8eae3eafbf8dd1e7" prot="protected" static="no" mutable="no">
        <type>openssl_connection *</type>
        <definition>openssl_connection* dpp::ssl_connection::ssl</definition>
        <argsstring></argsstring>
        <name>ssl</name>
        <briefdescription>
<para>Openssl opaque contexts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="143" column="20" bodyfile="include/dpp/sslconnection.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad694f10e342b640f5fa6e88119c86a17" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_connection::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
<para>Start time of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="158" column="8" bodyfile="include/dpp/sslconnection.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a69e9248f431daf428683b1152c05b1a6" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::tcp_connect_done</definition>
        <argsstring></argsstring>
        <name>tcp_connect_done</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if tcp <ref refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca" kindref="member">connect()</ref> succeeded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="198" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1a0d8399d578f3dc811f3ef5a663a2064b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::websocket_client::timed_out</definition>
        <argsstring></argsstring>
        <name>timed_out</name>
        <briefdescription>
<para>If true the connection timed out while waiting, when waiting for SSL negotiation, TCP <ref refid="classdpp_1_1websocket__client_1abce54f634a3b43f4b9b5bac5d1e99702" kindref="member">connect()</ref>, or HTTP. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="170" column="6" bodyfile="include/dpp/wsclient.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1aed68bb754ba3745b6fbb895d16f96809" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::websocket_client::timeout</definition>
        <argsstring></argsstring>
        <name>timeout</name>
        <briefdescription>
<para>Time at which the connection should be abandoned, if we are still connecting or negotiating with a HTTP server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="176" column="8" bodyfile="include/dpp/wsclient.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a216b85ccf220d2aa66e9a4397dcdf4a3" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a8b9ab0b8cf29978147a7df3947cd8f30" kindref="member">timer</ref></type>
        <definition>timer dpp::ssl_connection::timer_handle</definition>
        <argsstring></argsstring>
        <name>timer_handle</name>
        <briefdescription>
<para>Timer handle for one second timer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="203" column="7" bodyfile="include/dpp/sslconnection.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aa7a9277f5c258712b00e91b9cd062095" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::unique_id</definition>
        <argsstring></argsstring>
        <name>unique_id</name>
        <briefdescription>
<para>Unique ID of socket used as a nonce You can use this to identify requests vs reply if you want. D++ itself only sets this, and does not use it in any logic. It starts at 1 and increments for each request made. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="212" column="10" bodyfile="include/dpp/sslconnection.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1websocket__client_1aed87bf90f63bc8de5a9dd1b02775a24d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::websocket_client::fill_header</definition>
        <argsstring>(unsigned char *outbuf, size_t sendlength, ws_opcode opcode)</argsstring>
        <name>fill_header</name>
        <param>
          <type>unsigned char *</type>
          <declname>outbuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sendlength</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
          <declname>opcode</declname>
        </param>
        <briefdescription>
<para>Fill a header for outbound messages. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The raw frame to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sendlength</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the data to encapsulate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>the ws_opcode to send in the header </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of filled header </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="145" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1aa6b7e6f02dd929717ec09e0be0ed94dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::websocket_client::handle_ping</definition>
        <argsstring>(const std::string &amp;payload)</argsstring>
        <name>handle_ping</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Handle ping requests. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>The ping payload, to be returned as-is for a pong </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="151" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1aa851724333720b7d727526d609ddf0fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::websocket_client::parseheader</definition>
        <argsstring>(std::string &amp;buffer)</argsstring>
        <name>parseheader</name>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Parse headers for a websocket frame from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to operate on. Will modify the string removing completed items from the head of the queue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if a complete header has been received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="136" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1websocket__client_1abce54f634a3b43f4b9b5bac5d1e99702" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::connect</definition>
        <argsstring>() override</argsstring>
        <name>connect</name>
        <reimplements refid="classdpp_1_1ssl__connection_1ab062ff5c67a4a3f8021b212bbd040aca">connect</reimplements>
        <briefdescription>
<para>Connect to websocket server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="158" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a74d9da0f1f0c5feb46ed0995bd7d2e05" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::do_raw_trace</definition>
        <argsstring>(const std::string &amp;message) const</argsstring>
        <name>do_raw_trace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>If raw_trace is set to true, log a debug message for this connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>debug message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="236" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a2d64dce5afa6a2e3a125b915316d7f6a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1af3b7f3e861707f45beefa9449de70519" kindref="member">ws_state</ref></type>
        <definition>ws_state dpp::websocket_client::get_state</definition>
        <argsstring>() const</argsstring>
        <name>get_state</name>
        <briefdescription>
<para>Get websocket state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>websocket state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="164" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a4bdff78b127e920033d0d9f8fb58d456" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::ssl_connection::on_buffer_drained</definition>
        <argsstring>()</argsstring>
        <name>on_buffer_drained</name>
        <reimplementedby refid="classdpp_1_1http__server__request_1a89070e1f8e6757223883f647a45d7813">on_buffer_drained</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="238" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a40b00c90da14a301522a756f8e93490d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::websocket_client::websocket_client</definition>
        <argsstring>(cluster *creator, const std::string &amp;hostname, const std::string &amp;port=&quot;443&quot;, const std::string &amp;urlpath=&quot;&quot;, ws_opcode opcode=OP_BINARY)</argsstring>
        <name>websocket_client</name>
        <param>
          <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>creator</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>port</declname>
          <defval>&quot;443&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>urlpath</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
          <declname>opcode</declname>
          <defval><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1cac6c295924c27154cf564628ebb9677c9" kindref="member">OP_BINARY</ref></defval>
        </param>
        <briefdescription>
<para>Connect to a specific websocket server. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>creator</parametername>
</parameternamelist>
<parameterdescription>
<para>Creating cluster </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>Hostname to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Port to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>urlpath</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL path components of the HTTP request to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoding type to use, either OP_BINARY or OP_TEXT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This just indicates the default for frames sent. Certain sockets, such as voice websockets, may send a combination of OP_TEXT and OP_BINARY frames, whereas shard websockets will only ever send OP_BINARY for ETF and OP_TEXT for JSON. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a32f422f3a5a7a1aeb35a273be5c66d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::websocket_client::~websocket_client</definition>
        <argsstring>()=default</argsstring>
        <name>~websocket_client</name>
        <briefdescription>
<para>Destroy the websocket client object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="197" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ab872768661dc89d54f0381b0fff5b674" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::close</definition>
        <argsstring>() override</argsstring>
        <name>close</name>
        <reimplements refid="classdpp_1_1ssl__connection_1ab0e1c646dc2d36679ca2ef8b1e3fd3de">close</reimplements>
        <briefdescription>
<para>Close websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="216" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1acdd1152134b624d18a9e82162e64bafe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::complete_handshake</definition>
        <argsstring>(const struct socket_events *ev)</argsstring>
        <name>complete_handshake</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">socket_events</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Called while SSL handshake is in progress. If the handshake completes, the state of the socket is progressed to an established state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events for the socket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="365" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a3f8164696a6ffedcf9db89b7b4a2ea6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::enable_raw_tracing</definition>
        <argsstring>()</argsstring>
        <name>enable_raw_tracing</name>
        <briefdescription>
<para>For low-level debugging, calling this function will enable low level I/O logging for this connection to the logger. This can be very loud, and output a lot of data, so only enable it selectively where you need it. </para>
        </briefdescription>
        <detaileddescription>
<para>Generally, you won&apos;t need this, it is a library development utility. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="249" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1abd1b3d59beb6a505e81e2bf3374e2532" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::error</definition>
        <argsstring>(uint32_t errorcode)</argsstring>
        <name>error</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a976f8a37c513560e36bff6047185bc41">error</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a100af5cd816264910d5910d838189226">error</reimplementedby>
        <param>
          <type>uint32_t</type>
          <declname>errorcode</declname>
        </param>
        <briefdescription>
<para>Called upon error frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errorcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code from the websocket server </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="232" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a28c4296db4b541d99478c6db493f4b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_bytes_in</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_in</name>
        <briefdescription>
<para>Get total bytes received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="261" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ac69282a18c63bd1ddfaa87ba83410979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_bytes_out</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_out</name>
        <briefdescription>
<para>Get the bytes out objectGet total bytes sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes sent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="255" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ab2f2c18aff43ac8dfbfa58bc5dc71fa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::get_cipher</definition>
        <argsstring>()</argsstring>
        <name>get_cipher</name>
        <briefdescription>
<para>Get SSL cipher name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string ssl cipher name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="275" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a3cc296231589356506a103ad8c7eee74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_connection::get_unique_id</definition>
        <argsstring>() const</argsstring>
        <name>get_unique_id</name>
        <briefdescription>
<para>Every request made has a unique ID. This increments for every request, starting at 1. You can use this for statistics, or to associate requests and replies in external event loops. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Unique ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="269" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ae4b1e98d3e535a13fd912cdb00fc4c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::websocket_client::handle_buffer</definition>
        <argsstring>(std::string &amp;buffer) override</argsstring>
        <name>handle_buffer</name>
        <reimplements refid="classdpp_1_1ssl__connection_1a321015d761b174db3f4ffb2551bb2f99">handle_buffer</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Processes incoming frames from the SSL socket input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents. Can modify this value removing the head elements when processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="211" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a44ecfaa8d4bf45ef4fe85633f486e7d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::websocket_client::handle_frame</definition>
        <argsstring>(const std::string &amp;buffer, ws_opcode opcode)</argsstring>
        <name>handle_frame</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a8a40a57320d6b5d29a0274df0fb00fd6">handle_frame</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1abffb083b1554a05ab41fcf1c7fa49489">handle_frame</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
          <declname>opcode</declname>
        </param>
        <briefdescription>
<para>Receives raw frame content only without headers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame type, e.g. OP_TEXT, OP_BINARY </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the frame was successfully handled. False if no valid frame is in the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="225" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1af7e21fef92907780581d04c8f98bf9b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::ssl_connection::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const</argsstring>
        <name>log</name>
        <reimplementedby refid="classdpp_1_1discord__client_1ac8c04aa0b82c13324c8a4fe9dc3f697e">log</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a6a4111094ce256554beac3523b660822">log</reimplementedby>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>severity of log message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="357" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1afecbc8710086fb321d3253ff49d8c685" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::on_disconnect</definition>
        <argsstring>()</argsstring>
        <name>on_disconnect</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a08ceb69ad0261a465b6fb647e6bb2e7a">on_disconnect</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a355589d4bf9d94117f2ddeed94503c58">on_disconnect</reimplementedby>
        <briefdescription>
<para>Called on HTTP socket closure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="249" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a8732ae4599f38f41d27de3f4c1c7cae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_error</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;, int error_code)</argsstring>
        <name>on_error</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
<para>Called when there is an error on the TCP socket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="386" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a8c50238080a887b09473c82bff8de817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_read</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;ev)</argsstring>
        <name>on_read</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Called when the TCP socket has data to read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="372" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1a07c9f5c2dfff5ef27db1e148589e2e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::on_write</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;e)</argsstring>
        <name>on_write</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Called when the TCP socket can be written to without blocking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="379" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ae56e2b577298a170ba9af5bff0d9a732" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::one_second_timer</definition>
        <argsstring>() override</argsstring>
        <name>one_second_timer</name>
        <reimplements refid="classdpp_1_1ssl__connection_1ada1465dbb409fb3c994f9529fabc3f2b">one_second_timer</reimplements>
        <reimplementedby refid="classdpp_1_1discord__client_1a22449f499a4b4e952e8de4fd85c45e71">one_second_timer</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a57a629da5df4c97d727705a03d849fbb">one_second_timer</reimplementedby>
        <briefdescription>
<para>Fires every second from the underlying socket I/O loop, used for sending websocket pings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="237" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::read_loop</definition>
        <argsstring>()</argsstring>
        <name>read_loop</name>
        <briefdescription>
<para>Set up non blocking I/O and configure on_read, on_write and on_error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::exception</parametername>
</parameternamelist>
<parameterdescription>
<para>Any std::exception (or derivative) thrown from <ref refid="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" kindref="member">read_loop()</ref> indicates setup failed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="325" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a2613fa8b73b1e7960c62bfe8cdef1dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::websocket_client::send_close_packet</definition>
        <argsstring>()</argsstring>
        <name>send_close_packet</name>
        <briefdescription>
<para>Send OP_CLOSE error code 1000 to the other side of the connection. This indicates graceful close. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This informs Discord to invalidate the session, you cannot resume if you send this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="244" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__connection_1ae0fe670d8829bcfe600856a4c4adee00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_connection::socket_write</definition>
        <argsstring>(const std::string_view data)</argsstring>
        <name>socket_write</name>
        <param>
          <type>const std::string_view</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write to the output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The data may not be written immediately and may be written at a later time to the socket. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="345" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a1a28fcb2647f4e1203c4aa1b842a2bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::write</definition>
        <argsstring>(const std::string_view data, ws_opcode _opcode=OP_AUTO)</argsstring>
        <name>write</name>
        <param>
          <type>const std::string_view</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
          <declname>_opcode</declname>
          <defval><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1ca3b445e535f31d7de2d862b4c44020e99" kindref="member">OP_AUTO</ref></defval>
        </param>
        <briefdescription>
<para>Write to websocket. Encapsulates data in frames if the status is CONNECTED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The opcode of the data to send, either binary or text. The default is to use the socket&apos;s opcode as set in the constructor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="205" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aaba3255abd8ec8e94d1781771cfc9acb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_connection::keepalive</definition>
        <argsstring></argsstring>
        <name>keepalive</name>
        <briefdescription>
<para>True if we are keeping the connection alive after it has finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="280" column="6" bodyfile="include/dpp/sslconnection.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1a3ae20842849f8c2f0174902dc70d7e97" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::ssl_connection::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
<para>Owning cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="285" column="15" bodyfile="include/dpp/sslconnection.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1aa8cfa2e6c511022b67dbd97cc57f0731" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::private_key_file</definition>
        <argsstring></argsstring>
        <name>private_key_file</name>
        <briefdescription>
<para>Private key PEM file path for inbound SSL connections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="290" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__connection_1ad7feee672079e07699e25f7250021c66" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_connection::public_key_file</definition>
        <argsstring></argsstring>
        <name>public_key_file</name>
        <briefdescription>
<para>Public key PEM file path for inbound SSL connections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslconnection.h" line="295" column="13" bodyfile="include/dpp/sslconnection.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a websocket client based on the SSL client. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::ssl_connection</label>
        <link refid="classdpp_1_1ssl__connection"/>
      </node>
      <node id="1">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="10">
        <label>bool</label>
      </node>
      <node id="23">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="14">
        <label>double</label>
      </node>
      <node id="22">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="23" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="3" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>socketengine</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="16">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="17" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="9" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::ssl_connection</label>
        <link refid="classdpp_1_1ssl__connection"/>
        <childnode refid="3" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
          <edgelabel>private_key_file</edgelabel>
          <edgelabel>public_key_file</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>last_tick</edgelabel>
          <edgelabel>start</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>connect_retries</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
          <edgelabel>unique_id</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>connected</edgelabel>
          <edgelabel>keepalive</edgelabel>
          <edgelabel>plaintext</edgelabel>
          <edgelabel>raw_trace</edgelabel>
          <edgelabel>tcp_connect_done</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>timer_handle</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="9" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>timed_out</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>timeout</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>event_router_t&lt;</label>
      </node>
      <node id="5">
        <label>int</label>
      </node>
      <node id="18">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="19" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>openssl_connection *</label>
      </node>
      <node id="11">
        <label>size_t</label>
      </node>
      <node id="25">
        <label>atomic_bool</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="7">
        <label>time_t</label>
      </node>
      <node id="21">
        <label>uint16_t</label>
      </node>
      <node id="13">
        <label>uint32_t</label>
      </node>
      <node id="9">
        <label>uint64_t</label>
      </node>
      <node id="8">
        <label>uint8_t</label>
      </node>
      <node id="24">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/wsclient.h" line="105" column="1" bodyfile="include/dpp/wsclient.h" bodystart="105" bodyend="250"/>
    <listofallmembers>
      <member refid="classdpp_1_1ssl__connection_1a4a8b48487e16cefed1f12821f64fa5e8" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>buffer</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8715f4363a7c5ef7ddc5439d5ff2394a" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>bytes_in</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad9fccc5b66b4a5713b54d8ed1ab9c743" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>bytes_out</name></member>
      <member refid="classdpp_1_1ssl__connection_1a0e0c14fe8f51c54ea280509c8c0e5140" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>cipher</name></member>
      <member refid="classdpp_1_1websocket__client_1ab872768661dc89d54f0381b0fff5b674" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>close</name></member>
      <member refid="classdpp_1_1ssl__connection_1acdd1152134b624d18a9e82162e64bafe" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>complete_handshake</name></member>
      <member refid="classdpp_1_1websocket__client_1abce54f634a3b43f4b9b5bac5d1e99702" prot="protected" virt="virtual"><scope>dpp::websocket_client</scope><name>connect</name></member>
      <member refid="classdpp_1_1ssl__connection_1a0d85356b40ea02323cc161af4f5467fc" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>connect_retries</name></member>
      <member refid="classdpp_1_1ssl__connection_1acf9eb0208d63e142a421f7f778b3a939" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>connected</name></member>
      <member refid="classdpp_1_1websocket__client_1a6f9b303bbb4a2236fb16e6b7369f3974" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>data_opcode</name></member>
      <member refid="classdpp_1_1ssl__connection_1a74d9da0f1f0c5feb46ed0995bd7d2e05" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>do_raw_trace</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3f8164696a6ffedcf9db89b7b4a2ea6d" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>enable_raw_tracing</name></member>
      <member refid="classdpp_1_1websocket__client_1abd1b3d59beb6a505e81e2bf3374e2532" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>error</name></member>
      <member refid="classdpp_1_1websocket__client_1aed87bf90f63bc8de5a9dd1b02775a24d" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>fill_header</name></member>
      <member refid="classdpp_1_1ssl__connection_1a28c4296db4b541d99478c6db493f4b03" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_bytes_in</name></member>
      <member refid="classdpp_1_1ssl__connection_1ac69282a18c63bd1ddfaa87ba83410979" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_bytes_out</name></member>
      <member refid="classdpp_1_1ssl__connection_1ab2f2c18aff43ac8dfbfa58bc5dc71fa1" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_cipher</name></member>
      <member refid="classdpp_1_1websocket__client_1a2d64dce5afa6a2e3a125b915316d7f6a" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_state</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3cc296231589356506a103ad8c7eee74" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_unique_id</name></member>
      <member refid="classdpp_1_1websocket__client_1ae4b1e98d3e535a13fd912cdb00fc4c05" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>handle_buffer</name></member>
      <member refid="classdpp_1_1websocket__client_1a44ecfaa8d4bf45ef4fe85633f486e7d7" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>handle_frame</name></member>
      <member refid="classdpp_1_1websocket__client_1aa6b7e6f02dd929717ec09e0be0ed94dc" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>handle_ping</name></member>
      <member refid="classdpp_1_1ssl__connection_1aedf42057136f2fae90424a18daddce51" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>hostname</name></member>
      <member refid="classdpp_1_1websocket__client_1a59ab1bbefef3fe35d9217eb7a3716032" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>http_headers</name></member>
      <member refid="classdpp_1_1ssl__connection_1aaba3255abd8ec8e94d1781771cfc9acb" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>keepalive</name></member>
      <member refid="classdpp_1_1websocket__client_1a81d3d2f7c4ad7ca01777131d8131b294" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>key</name></member>
      <member refid="classdpp_1_1ssl__connection_1a9494e0dd128b5415a96d6ff9d24789aa" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>last_tick</name></member>
      <member refid="classdpp_1_1ssl__connection_1af7e21fef92907780581d04c8f98bf9b6" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>log</name></member>
      <member refid="classdpp_1_1ssl__connection_1a80a568dbb2049f4727c0efdde185699e" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>obuffer</name></member>
      <member refid="classdpp_1_1ssl__connection_1a4bdff78b127e920033d0d9f8fb58d456" prot="protected" virt="virtual"><scope>dpp::websocket_client</scope><name>on_buffer_drained</name></member>
      <member refid="classdpp_1_1websocket__client_1afecbc8710086fb321d3253ff49d8c685" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>on_disconnect</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8732ae4599f38f41d27de3f4c1c7cae6" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>on_error</name></member>
      <member refid="classdpp_1_1ssl__connection_1a8c50238080a887b09473c82bff8de817" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>on_read</name></member>
      <member refid="classdpp_1_1ssl__connection_1a07c9f5c2dfff5ef27db1e148589e2e26" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>on_write</name></member>
      <member refid="classdpp_1_1websocket__client_1ae56e2b577298a170ba9af5bff0d9a732" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>one_second_timer</name></member>
      <member refid="classdpp_1_1ssl__connection_1a3ae20842849f8c2f0174902dc70d7e97" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>owner</name></member>
      <member refid="classdpp_1_1websocket__client_1aa851724333720b7d727526d609ddf0fc" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>parseheader</name></member>
      <member refid="classdpp_1_1websocket__client_1ab39bac55d55ee3af9046a5b7957caf1c" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>path</name></member>
      <member refid="classdpp_1_1ssl__connection_1addf00646298eba9176a675bba7269f27" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>plaintext</name></member>
      <member refid="classdpp_1_1ssl__connection_1a39851da532b2f7ee33570e3b1dafd097" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>port</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa8cfa2e6c511022b67dbd97cc57f0731" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>private_key_file</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad7feee672079e07699e25f7250021c66" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>public_key_file</name></member>
      <member refid="classdpp_1_1ssl__connection_1a62161bc05909fc1d67f3a59c5fbf6e79" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>raw_trace</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa29f339d46eb0d32ba74c341d25bbcb4" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>read_loop</name></member>
      <member refid="classdpp_1_1websocket__client_1a2613fa8b73b1e7960c62bfe8cdef1dd7" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>send_close_packet</name></member>
      <member refid="classdpp_1_1ssl__connection_1abd9c3cf6150d3c7e2badd12829437207" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>sfd</name></member>
      <member refid="classdpp_1_1ssl__connection_1ae0fe670d8829bcfe600856a4c4adee00" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>socket_write</name></member>
      <member refid="classdpp_1_1ssl__connection_1a61cccaa18278dabe8eae3eafbf8dd1e7" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>ssl</name></member>
      <member refid="classdpp_1_1ssl__connection_1a77bd0f626125dfef52cfe7fe40216772" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>ssl_connection</name></member>
      <member refid="classdpp_1_1ssl__connection_1ab9d2b0349eb22555403c692500a287bb" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>ssl_connection</name></member>
      <member refid="classdpp_1_1ssl__connection_1ad694f10e342b640f5fa6e88119c86a17" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>start</name></member>
      <member refid="classdpp_1_1websocket__client_1ad7337ca3851942c1457b95d71da5f790" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>state</name></member>
      <member refid="classdpp_1_1ssl__connection_1a69e9248f431daf428683b1152c05b1a6" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>tcp_connect_done</name></member>
      <member refid="classdpp_1_1websocket__client_1a0d8399d578f3dc811f3ef5a663a2064b" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>timed_out</name></member>
      <member refid="classdpp_1_1websocket__client_1aed68bb754ba3745b6fbb895d16f96809" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>timeout</name></member>
      <member refid="classdpp_1_1ssl__connection_1a216b85ccf220d2aa66e9a4397dcdf4a3" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>timer_handle</name></member>
      <member refid="classdpp_1_1ssl__connection_1aa7a9277f5c258712b00e91b9cd062095" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>unique_id</name></member>
      <member refid="classdpp_1_1websocket__client_1a40b00c90da14a301522a756f8e93490d" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>websocket_client</name></member>
      <member refid="classdpp_1_1websocket__client_1a1a28fcb2647f4e1203c4aa1b842a2bc9" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>write</name></member>
      <member refid="classdpp_1_1ssl__connection_1a23c94174be8ca86f9d4e30931bd4ff12" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>~ssl_connection</name></member>
      <member refid="classdpp_1_1websocket__client_1a32f422f3a5a7a1aeb35a273be5c66d17" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>~websocket_client</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
