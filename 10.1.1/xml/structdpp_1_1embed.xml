<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1embed" kind="struct" language="C++" prot="public">
    <compoundname>dpp::embed</compoundname>
    <includes local="no">message.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1embed_1a89364da800ab3c16ad566b3c93b68a54" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::embed::title</definition>
        <argsstring></argsstring>
        <name>title</name>
        <briefdescription>
<para>Optional: Title of embed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1084" column="13" bodyfile="include/dpp/message.h" bodystart="1084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a573e0fd77066ee0aa4d9e5d8a0be3823" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::embed::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>Optional: Type of embed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Always &quot;rich&quot; for webhook embeds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1091" column="13" bodyfile="include/dpp/message.h" bodystart="1091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1ac9d64f935df99fc11ac960a29529f37c" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::embed::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>Optional: Description of embed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1096" column="13" bodyfile="include/dpp/message.h" bodystart="1096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1acc50a97a3f286dfd929b2b3683167164" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::embed::url</definition>
        <argsstring></argsstring>
        <name>url</name>
        <briefdescription>
<para>Optional: URL of embed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1101" column="13" bodyfile="include/dpp/message.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1ac4579a586750009436c088f509438df1" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::embed::timestamp</definition>
        <argsstring></argsstring>
        <name>timestamp</name>
        <briefdescription>
<para>Optional: Timestamp of embed content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1106" column="8" bodyfile="include/dpp/message.h" bodystart="1106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1af561b6b706e22ac955aaeaf8aaef34e7" prot="public" static="no" mutable="no">
        <type>std::optional&lt; uint32_t &gt;</type>
        <definition>std::optional&lt;uint32_t&gt; dpp::embed::color</definition>
        <argsstring></argsstring>
        <name>color</name>
        <briefdescription>
<para>Optional: Color code of the embed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1111" column="14" bodyfile="include/dpp/message.h" bodystart="1111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a431c219b7e195e151c19dfbebc09e13a" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__footer" kindref="compound">embed_footer</ref> &gt;</type>
        <definition>std::optional&lt;embed_footer&gt; dpp::embed::footer</definition>
        <argsstring></argsstring>
        <name>footer</name>
        <briefdescription>
<para>Optional: Footer information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1116" column="15" bodyfile="include/dpp/message.h" bodystart="1116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a05181f6e5ad5f6903b3cbcecb8e89ebe" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__image" kindref="compound">embed_image</ref> &gt;</type>
        <definition>std::optional&lt;embed_image&gt; dpp::embed::image</definition>
        <argsstring></argsstring>
        <name>image</name>
        <briefdescription>
<para>Optional: Image information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1121" column="15" bodyfile="include/dpp/message.h" bodystart="1121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a60eebf805a4e809d319411c44043d8e2" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__image" kindref="compound">embed_image</ref> &gt;</type>
        <definition>std::optional&lt;embed_image&gt; dpp::embed::thumbnail</definition>
        <argsstring></argsstring>
        <name>thumbnail</name>
        <briefdescription>
<para>Optional: Thumbnail information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1126" column="15" bodyfile="include/dpp/message.h" bodystart="1126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1aa8eb54d9c1a20cd2502f0ca79297fa0d" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__image" kindref="compound">embed_image</ref> &gt;</type>
        <definition>std::optional&lt;embed_image&gt; dpp::embed::video</definition>
        <argsstring></argsstring>
        <name>video</name>
        <briefdescription>
<para>Optional: Video information. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Can&apos;t send this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1133" column="15" bodyfile="include/dpp/message.h" bodystart="1133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a689c7c16c458de20b1998b532364be0d" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__provider" kindref="compound">embed_provider</ref> &gt;</type>
        <definition>std::optional&lt;embed_provider&gt; dpp::embed::provider</definition>
        <argsstring></argsstring>
        <name>provider</name>
        <briefdescription>
<para>Optional: Provider information. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Can&apos;t send this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1140" column="15" bodyfile="include/dpp/message.h" bodystart="1140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1abe6263ce0132837017e0aca16c6e299d" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1embed__author" kindref="compound">embed_author</ref> &gt;</type>
        <definition>std::optional&lt;embed_author&gt; dpp::embed::author</definition>
        <argsstring></argsstring>
        <name>author</name>
        <briefdescription>
<para>Optional: Author information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1145" column="15" bodyfile="include/dpp/message.h" bodystart="1145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1embed_1a51999ed159b5d326b0117604bb8dc4ee" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1embed__field" kindref="compound">embed_field</ref> &gt;</type>
        <definition>std::vector&lt;embed_field&gt; dpp::embed::fields</definition>
        <argsstring></argsstring>
        <name>fields</name>
        <briefdescription>
<para>Optional: Fields information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1150" column="13" bodyfile="include/dpp/message.h" bodystart="1150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1embed_1a6f60eea0421da23a22032bd317dd9b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::embed::embed</definition>
        <argsstring>()</argsstring>
        <name>embed</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a03bbf47ebfcdb5a267fae660232c9577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::embed::embed</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>embed</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Constructor to build embed from json object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON to read content from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a9d43c2e1648e03cf5aa28825f600391f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::embed::~embed</definition>
        <argsstring>()</argsstring>
        <name>~embed</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a49d390f04d56d65423fe448ddeb4e9e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_title</definition>
        <argsstring>(std::string_view text)</argsstring>
        <name>set_title</name>
        <param>
          <type>std::string_view</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Set embed title. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text of the title. It will be truncated to the maximum length of 256 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1173" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a0c6baa29485142a2d04f8731536a7f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_description</definition>
        <argsstring>(std::string_view text)</argsstring>
        <name>set_description</name>
        <param>
          <type>std::string_view</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Set embed description. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text of the title. It will be truncated to the maximum length of 4096 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1180" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1acfdeb54fd78b9c3b3e969e4d553f373e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_footer</definition>
        <argsstring>(const embed_footer &amp;f)</argsstring>
        <name>set_footer</name>
        <param>
          <type>const <ref refid="structdpp_1_1embed__footer" kindref="compound">embed_footer</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Set the footer of the embed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the footer to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1187" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a95f5ad45ee3741334fe68c0d90d9bae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_footer</definition>
        <argsstring>(std::string_view text, std::string_view icon_url)</argsstring>
        <name>set_footer</name>
        <param>
          <type>std::string_view</type>
          <declname>text</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>icon_url</declname>
        </param>
        <briefdescription>
<para>Set the footer of the embed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>string to set as footer text. It will be truncated to the maximum length of 2048 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon_url</parametername>
</parameternamelist>
<parameterdescription>
<para>an url to set as footer icon url (only supports http(s) and attachments) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1195" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a3bcc6f23d8d16c347139f624569e61e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_color</definition>
        <argsstring>(uint32_t col)</argsstring>
        <name>set_color</name>
        <param>
          <type>uint32_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Set embed colour. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The colour of the embed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1202" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1ab0dc2bfe14746e93ba40ba4b8070c29d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_colour</definition>
        <argsstring>(uint32_t col)</argsstring>
        <name>set_colour</name>
        <param>
          <type>uint32_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Set embed colour. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The colour of the embed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1209" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a618ee49a00b10349b039f4a75529005e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_timestamp</definition>
        <argsstring>(time_t tstamp)</argsstring>
        <name>set_timestamp</name>
        <param>
          <type>time_t</type>
          <declname>tstamp</declname>
        </param>
        <briefdescription>
<para>Set embed timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tstamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp to show in the footer, should be in UTC </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1216" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a8f8460800aa8d0237eeefb96a84e2850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_url</definition>
        <argsstring>(std::string_view url)</argsstring>
        <name>set_url</name>
        <param>
          <type>std::string_view</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Set embed url. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>the url of the embed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1223" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a98adc094802dfc85bacc6666dd753c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::add_field</definition>
        <argsstring>(std::string_view name, std::string_view value, bool is_inline=false)</argsstring>
        <name>add_field</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inline</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add an embed field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the field. It will be truncated to the maximum length of 256 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the field. It will be truncated to the maximum length of 1024 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_inline</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to display the field &apos;inline&apos; or on its own line </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1232" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a1191592fd154b5cd29aad3b361ec3e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_author</definition>
        <argsstring>(const dpp::embed_author &amp;a)</argsstring>
        <name>set_author</name>
        <param>
          <type>const <ref refid="structdpp_1_1embed__author" kindref="compound">dpp::embed_author</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Set embed author. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The author to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1239" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a5a26ead1fad0e85b4fab4a27ee852369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_author</definition>
        <argsstring>(std::string_view name, std::string_view url, std::string_view icon_url)</argsstring>
        <name>set_author</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>url</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>icon_url</declname>
        </param>
        <briefdescription>
<para>Set embed author. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the author. It will be truncated to the maximum length of 256 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The url of the author (only supports http(s)) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon_url</parametername>
</parameternamelist>
<parameterdescription>
<para>The icon URL of the author (only supports http(s) and attachments) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1248" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1aa5f3e715a69b8a25b17213361470b14a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_provider</definition>
        <argsstring>(std::string_view name, std::string_view url)</argsstring>
        <name>set_provider</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Set embed provider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The provider name. It will be truncated to the maximum length of 256 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The provider url </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1256" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a208f2b361a7a780bbc134ac8b606a04b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_image</definition>
        <argsstring>(std::string_view url)</argsstring>
        <name>set_image</name>
        <param>
          <type>std::string_view</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Set embed image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The embed image URL (only supports http(s) and attachments) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1263" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a7fbf338b79bcf836b5abfa40789f7f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_video</definition>
        <argsstring>(std::string_view url)</argsstring>
        <name>set_video</name>
        <param>
          <type>std::string_view</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Set embed video. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The embed video url </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1270" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1embed_1a7ef8e6ccd6517e5167c12e90470d9ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
        <definition>embed &amp; dpp::embed::set_thumbnail</definition>
        <argsstring>(std::string_view url)</argsstring>
        <name>set_thumbnail</name>
        <param>
          <type>std::string_view</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Set embed thumbnail. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>The embed thumbnail url (only supports http(s) and attachments) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self so this method may be &quot;chained&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="1277" column="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A rich embed for display within a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::embed</label>
        <link refid="structdpp_1_1embed"/>
        <childnode refid="2" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>title</edgelabel>
          <edgelabel>type</edgelabel>
          <edgelabel>url</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>timestamp</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>author</edgelabel>
          <edgelabel>color</edgelabel>
          <edgelabel>footer</edgelabel>
          <edgelabel>image</edgelabel>
          <edgelabel>provider</edgelabel>
          <edgelabel>thumbnail</edgelabel>
          <edgelabel>video</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>fields</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>optional&lt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>vector&lt;</label>
      </node>
      <node id="4">
        <label>time_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/message.h" line="1080" column="1" bodyfile="include/dpp/message.h" bodystart="1080" bodyend="1278"/>
    <listofallmembers>
      <member refid="structdpp_1_1embed_1a98adc094802dfc85bacc6666dd753c18" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>add_field</name></member>
      <member refid="structdpp_1_1embed_1abe6263ce0132837017e0aca16c6e299d" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>author</name></member>
      <member refid="structdpp_1_1embed_1af561b6b706e22ac955aaeaf8aaef34e7" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>color</name></member>
      <member refid="structdpp_1_1embed_1ac9d64f935df99fc11ac960a29529f37c" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>description</name></member>
      <member refid="structdpp_1_1embed_1a6f60eea0421da23a22032bd317dd9b10" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>embed</name></member>
      <member refid="structdpp_1_1embed_1a03bbf47ebfcdb5a267fae660232c9577" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>embed</name></member>
      <member refid="structdpp_1_1embed_1a51999ed159b5d326b0117604bb8dc4ee" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>fields</name></member>
      <member refid="structdpp_1_1embed_1a431c219b7e195e151c19dfbebc09e13a" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>footer</name></member>
      <member refid="structdpp_1_1embed_1a05181f6e5ad5f6903b3cbcecb8e89ebe" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>image</name></member>
      <member refid="structdpp_1_1embed_1a689c7c16c458de20b1998b532364be0d" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>provider</name></member>
      <member refid="structdpp_1_1embed_1a1191592fd154b5cd29aad3b361ec3e9e" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_author</name></member>
      <member refid="structdpp_1_1embed_1a5a26ead1fad0e85b4fab4a27ee852369" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_author</name></member>
      <member refid="structdpp_1_1embed_1a3bcc6f23d8d16c347139f624569e61e1" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_color</name></member>
      <member refid="structdpp_1_1embed_1ab0dc2bfe14746e93ba40ba4b8070c29d" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_colour</name></member>
      <member refid="structdpp_1_1embed_1a0c6baa29485142a2d04f8731536a7f57" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_description</name></member>
      <member refid="structdpp_1_1embed_1acfdeb54fd78b9c3b3e969e4d553f373e" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_footer</name></member>
      <member refid="structdpp_1_1embed_1a95f5ad45ee3741334fe68c0d90d9bae0" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_footer</name></member>
      <member refid="structdpp_1_1embed_1a208f2b361a7a780bbc134ac8b606a04b" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_image</name></member>
      <member refid="structdpp_1_1embed_1aa5f3e715a69b8a25b17213361470b14a" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_provider</name></member>
      <member refid="structdpp_1_1embed_1a7ef8e6ccd6517e5167c12e90470d9ca7" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_thumbnail</name></member>
      <member refid="structdpp_1_1embed_1a618ee49a00b10349b039f4a75529005e" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_timestamp</name></member>
      <member refid="structdpp_1_1embed_1a49d390f04d56d65423fe448ddeb4e9e8" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_title</name></member>
      <member refid="structdpp_1_1embed_1a8f8460800aa8d0237eeefb96a84e2850" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_url</name></member>
      <member refid="structdpp_1_1embed_1a7fbf338b79bcf836b5abfa40789f7f52" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>set_video</name></member>
      <member refid="structdpp_1_1embed_1a60eebf805a4e809d319411c44043d8e2" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>thumbnail</name></member>
      <member refid="structdpp_1_1embed_1ac4579a586750009436c088f509438df1" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>timestamp</name></member>
      <member refid="structdpp_1_1embed_1a89364da800ab3c16ad566b3c93b68a54" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>title</name></member>
      <member refid="structdpp_1_1embed_1a573e0fd77066ee0aa4d9e5d8a0be3823" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>type</name></member>
      <member refid="structdpp_1_1embed_1acc50a97a3f286dfd929b2b3683167164" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>url</name></member>
      <member refid="structdpp_1_1embed_1aa8eb54d9c1a20cd2502f0ca79297fa0d" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>video</name></member>
      <member refid="structdpp_1_1embed_1a9d43c2e1648e03cf5aa28825f600391f" prot="public" virt="non-virtual"><scope>dpp::embed</scope><name>~embed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
