<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacedpp_1_1utility" kind="namespace" language="C++">
    <compoundname>dpp::utility</compoundname>
    <innerclass refid="structdpp_1_1utility_1_1iconhash" prot="public">dpp::utility::iconhash</innerclass>
    <innerclass refid="structdpp_1_1utility_1_1uptime" prot="public">dpp::utility::uptime</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7" prot="public" static="no" strong="no">
        <type>uint8_t</type>
        <name>time_format</name>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a380a740f8843af94cd3007d7fdf3ce30" prot="public">
          <name>tf_long_date</name>
          <initializer>=	&apos;D&apos;</initializer>
          <briefdescription>
<para>&quot;20 April 2021&quot; - Long Date </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a7bdb33c94eff8e026e6a864f217e33c5" prot="public">
          <name>tf_long_datetime</name>
          <initializer>=	&apos;F&apos;</initializer>
          <briefdescription>
<para>&quot;Tuesday, 20 April 2021 16:20&quot; - Long Date/Time </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a7bdda189bfc4d124426d2da1dd6b9a50" prot="public">
          <name>tf_relative_time</name>
          <initializer>=	&apos;R&apos;</initializer>
          <briefdescription>
<para>&quot;2 months ago&quot; - Relative Time <linebreak/>
 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a127a01b537d189262d40712fe8f09de7" prot="public">
          <name>tf_long_time</name>
          <initializer>=	&apos;T&apos;</initializer>
          <briefdescription>
<para>&quot;16:20:30&quot; - Long Time </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a94843292417596c6d3de7680efc295bd" prot="public">
          <name>tf_short_date</name>
          <initializer>=	&apos;d&apos;</initializer>
          <briefdescription>
<para>&quot;20/04/2021&quot; - Short Date </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a71dc667709d06a38a90007af294c8f42" prot="public">
          <name>tf_short_datetime</name>
          <initializer>=	&apos;f&apos;</initializer>
          <briefdescription>
<para>&quot;20 April 2021 16:20&quot; - Short Date/Time </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7aa9853ed46be939acd8aa01d0ee889afd" prot="public">
          <name>tf_short_time</name>
          <initializer>=	&apos;t&apos;</initializer>
          <briefdescription>
<para>&quot;16:20&quot; - Short Time </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timestamp formats for <ref refid="namespacedpp_1_1utility_1a177699d063618dd535764c81736a7a58" kindref="member">dpp::utility::timestamp()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>These values are the actual character values specified by the Discord API and should not be changed unless the Discord API changes the specification! They have been sorted into numerical order of their ASCII value to keep C++ happy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="97" column="1" bodyfile="include/dpp/utility.h" bodystart="97" bodyend="112"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacedpp_1_1utility_1a36d13f96f86debc010768d4c812e3fa6" prot="public" static="no">
        <type>std::function&lt; void(const std::string &amp;output)&gt;</type>
        <definition>typedef std::function&lt;void(const std::string&amp; output)&gt; dpp::utility::cmd_result_t</definition>
        <argsstring></argsstring>
        <name>cmd_result_t</name>
        <briefdescription>
<para>Callback for the results of a command executed via <ref refid="namespacedpp_1_1utility_1ac7d516c03d572fe65d01c4ec5e92c6f0" kindref="member">dpp::utility::exec</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="122" column="23" bodyfile="include/dpp/utility.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacedpp_1_1utility_1a4cf040349b0a45ef90863effb892ece6" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string dpp::utility::cdn_host</definition>
        <argsstring></argsstring>
        <name>cdn_host</name>
        <initializer>= &quot;https://cdn.discordapp.com&quot;</initializer>
        <briefdescription>
<para>The base URL for CDN content such as profile pictures and guild icons. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="117" column="19" bodyfile="include/dpp/utility.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedpp_1_1utility_1a2e8cc2ce4c01244c9db877ab526ac9cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::avatar_size</definition>
        <argsstring>(uint32_t size)</argsstring>
        <name>avatar_size</name>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Get the url query parameter for the cdn endpoint. Internally used to build url getters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size to generate url parameter for. Must be any power of two between 16 and 4096 (inclusive) or it&apos;ll return an empty string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string url query parameter e.g. <computeroutput>?size=128</computeroutput>, or an empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="414" column="24" declfile="include/dpp/utility.h" declline="414" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a4be90a8bb2dd9eecf61e934592656c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::bot_invite_url</definition>
        <argsstring>(const snowflake bot_id, const uint64_t permissions=0, const std::vector&lt; std::string &gt; &amp;scopes={&quot;bot&quot;, &quot;applications.commands&quot;})</argsstring>
        <name>bot_invite_url</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>bot_id</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>permissions</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>scopes</declname>
          <defval>{&quot;bot&quot;, &quot;applications.commands&quot;}</defval>
        </param>
        <briefdescription>
<para>Create a bot invite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bot_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Bot ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>Permission bitmask of the bot to invite </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scopes</parametername>
</parameternamelist>
<parameterdescription>
<para>Scopes to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Invite URL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="433" column="24" declfile="include/dpp/utility.h" declline="433" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1af74cf004f32b11f0f804968c64bb3d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::bytes</definition>
        <argsstring>(uint64_t c)</argsstring>
        <name>bytes</name>
        <param>
          <type>uint64_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Convert a byte count to display value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string display value suffixed with M, G, T where necessary </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="262" column="24" declfile="include/dpp/utility.h" declline="262" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1aa45546416b15c5878b38ce6e5da50d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::utility::cdn_endpoint_url</definition>
        <argsstring>(const std::vector&lt; image_type &gt; &amp;allowed_formats, const std::string &amp;path_without_extension, const dpp::image_type format, uint16_t size, bool prefer_animated=false, bool is_animated=false)</argsstring>
        <name>cdn_endpoint_url</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref> &gt; &amp;</type>
          <declname>allowed_formats</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path_without_extension</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">dpp::image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>prefer_animated</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_animated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For internal use only. Helper function to easily create discord&apos;s cdn endpoint urls <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/reference#image-formatting-cdn-endpoints">https://discord.com/developers/docs/reference#image-formatting-cdn-endpoints</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allowed_formats</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of supported formats for the endpoint from the discord docs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path_without_extension</parametername>
</parameternamelist>
<parameterdescription>
<para>The path for the endpoint (without the extension e.g. <computeroutput>.png</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the wished format to return. Must be one of the formats passed in <computeroutput>allowed_formats</computeroutput>, otherwise it returns an empty string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the image size which will be appended as a querystring to the url. It must be any power of two between 16 and 4096, otherwise no querystring will be appended (discord then returns the image as their default size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefer_animated</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the user prefers gif format. If true, it&apos;ll return gif format whenever the emoji is available as animated. In this case, the <computeroutput>format</computeroutput>-parameter is only used for non-animated images. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_animated</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the image is actually animated or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string endpoint url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="63" column="13" declfile="include/dpp/utility.h" declline="63" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a3cca3973610c9149d9361f29f4888fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::utility::cdn_endpoint_url_hash</definition>
        <argsstring>(const std::vector&lt; image_type &gt; &amp;allowed_formats, const std::string &amp;path_without_extension, const std::string &amp;hash, const dpp::image_type format, uint16_t size, bool prefer_animated=false, bool is_animated=false)</argsstring>
        <name>cdn_endpoint_url_hash</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref> &gt; &amp;</type>
          <declname>allowed_formats</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path_without_extension</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">dpp::image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>prefer_animated</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_animated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For internal use only. Helper function to easily create discord&apos;s cdn endpoint urls <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/reference#image-formatting-cdn-endpoints">https://discord.com/developers/docs/reference#image-formatting-cdn-endpoints</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allowed_formats</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of supported formats for the endpoint from the discord docs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path_without_extension</parametername>
</parameternamelist>
<parameterdescription>
<para>The path for the endpoint (without the extension e.g. <computeroutput>.png</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash (optional). If passed, it will be prefixed with <computeroutput>a_</computeroutput> for animated images (<computeroutput>is_animated</computeroutput>=true) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>the wished format to return. Must be one of the formats passed in <computeroutput>allowed_formats</computeroutput>, otherwise it returns an empty string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the image size which will be appended as a querystring to the url. It must be any power of two between 16 and 4096, otherwise no querystring will be appended (discord then returns the image as their default size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefer_animated</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the user prefers gif format. If true, it&apos;ll return gif format whenever the emoji is available as animated. In this case, the <computeroutput>format</computeroutput>-parameter is only used for non-animated images. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_animated</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the image is actually animated or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string endpoint url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="79" column="13" declfile="include/dpp/utility.h" declline="79" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a997bfb6a27ff8f66642b28d0d6b3e8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::utility::cdn_endpoint_url_sticker</definition>
        <argsstring>(snowflake sticker_id, sticker_format format)</argsstring>
        <name>cdn_endpoint_url_sticker</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>sticker_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1ae2ee458707682eabe7d539c9a13beac2" kindref="member">sticker_format</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For internal use only. Helper function to easily create discord&apos;s cdn endpoint urls (specialised for stickers) <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/reference#image-formatting-cdn-endpoints">https://discord.com/developers/docs/reference#image-formatting-cdn-endpoints</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sticker_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The sticker ID. Returns empty string if 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string endpoint url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="88" column="13" declfile="include/dpp/utility.h" declline="88" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a7fc46cb2a13a958d7361ba96bb416edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::channel_mention</definition>
        <argsstring>(const snowflake &amp;id)</argsstring>
        <name>channel_mention</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Create a mentionable channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The formatted mention of the channel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="486" column="24" declfile="include/dpp/utility.h" declline="486" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1af247cf657d20138e2e364712176810f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t DPP_EXPORT</type>
        <definition>uint32_t DPP_EXPORT dpp::utility::cmyk</definition>
        <argsstring>(double c, double m, double y, double k)</argsstring>
        <name>cmyk</name>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Convert doubles to CMYK for sending in embeds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>cyan value, between 0 and 1 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>magenta value, between 0 and 1 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>yellow value, between 0 and 1 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>key (black) value, between 0 and 1 inclusive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returned integer colour value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="345" column="21" declfile="include/dpp/utility.h" declline="345" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1acfa947bc1c2e1863791a7ad60fe6cda7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t DPP_EXPORT</type>
        <definition>uint32_t DPP_EXPORT dpp::utility::cmyk</definition>
        <argsstring>(int c, int m, int y, int k)</argsstring>
        <name>cmyk</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Convert ints to CMYK for sending in embeds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>cyan value, between 0 and 255 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>magenta value, between 0 and 255 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>yellow value, between 0 and 255 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>key (black) value, between 0 and 255 inclusive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returned integer colour value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="356" column="21" declfile="include/dpp/utility.h" declline="356" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a8c2cc04bb80ffd287b376d5977899277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1log__t" kindref="compound">dpp::log_t</ref> &amp;)&gt; DPP_EXPORT</type>
        <definition>std::function&lt; void(const dpp::log_t &amp;)&gt; DPP_EXPORT dpp::utility::cout_logger</definition>
        <argsstring>()</argsstring>
        <name>cout_logger</name>
        <briefdescription>
<para>Get a default logger that outputs to std::cout. e.g. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">bot.on_log(<ref refid="namespacedpp_1_1utility_1a8c2cc04bb80ffd287b376d5977899277" kindref="member">dpp::utility::cout_logger</ref>());</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>A logger for attaching to on_log </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="131" column="26" declfile="include/dpp/dispatcher.h" declline="131" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a1a9168eaaf347543e55e607858f24eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::current_date_time</definition>
        <argsstring>()</argsstring>
        <name>current_date_time</name>
        <briefdescription>
<para>Returns current date and time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string Current date and time in &quot;Y-m-d H:M:S&quot; format </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="154" column="24" declfile="include/dpp/utility.h" declline="154" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a02456e22a1d41893a9b321bf8ccaeec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::debug_dump</definition>
        <argsstring>(uint8_t *data, size_t length)</argsstring>
        <name>debug_dump</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Output hex values of a section of memory for debugging. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The start of the data to display </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of data to display </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="364" column="24" declfile="include/dpp/utility.h" declline="364" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a2e47c004a5f0d6ee78819935d681a947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::emoji_mention</definition>
        <argsstring>(const std::string &amp;name, const snowflake &amp;id, bool is_animated=false)</argsstring>
        <name>emoji_mention</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_animated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a mentionable emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the emoji. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the emoji. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_animated</parametername>
</parameternamelist>
<parameterdescription>
<para>is emoji animated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The formatted mention of the emoji. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="495" column="24" declfile="include/dpp/utility.h" declline="495" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ac7d516c03d572fe65d01c4ec5e92c6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void DPP_EXPORT</type>
        <definition>void DPP_EXPORT dpp::utility::exec</definition>
        <argsstring>(const std::string &amp;cmd, std::vector&lt; std::string &gt; parameters={}, cmd_result_t callback={})</argsstring>
        <name>exec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>parameters</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1_1utility_1a36d13f96f86debc010768d4c812e3fa6" kindref="member">cmd_result_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Run a commandline program asynchronously. The command line program is spawned in a separate std::thread, and when complete, its output from stdout is passed to the callback function in its string parameter. For example. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal"><ref refid="namespacedpp_1_1utility_1ac7d516c03d572fe65d01c4ec5e92c6f0" kindref="member">dpp::utility::exec</ref>(</highlight><highlight class="stringliteral">&quot;/bin/ls&quot;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&quot;-al&quot;</highlight><highlight class="normal">},<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>output)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>of<sp/>&apos;ls<sp/>-al&apos;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>output<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Command line parameters. Each will be escaped using <computeroutput>std::quoted</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback to call on completion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="138" column="17" declfile="include/dpp/utility.h" declline="138" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a9d70739d6485741d1617c359ec70d1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool DPP_EXPORT</type>
        <definition>bool DPP_EXPORT dpp::utility::has_voice</definition>
        <argsstring>()</argsstring>
        <name>has_voice</name>
        <briefdescription>
<para>Returns true if D++ was built with voice support. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if voice support is compiled in (libsodium/libopus) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="254" column="17" declfile="include/dpp/utility.h" declline="254" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ad9fa7eaac8be5f51f52fcb5e53734910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &amp;detail)&gt; DPP_EXPORT</type>
        <definition>std::function&lt; void(const dpp::confirmation_callback_t &amp;detail)&gt; DPP_EXPORT dpp::utility::log_error</definition>
        <argsstring>()</argsstring>
        <name>log_error</name>
        <briefdescription>
<para>The default callback handler for API calls. on error, sends the error to the logger. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A lambda for attaching to an API callback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="139" column="26" declfile="include/dpp/dispatcher.h" declline="139" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1acae9e089e4b7cfd9745235f86455c045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::loglevel</definition>
        <argsstring>(dpp::loglevel in)</argsstring>
        <name>loglevel</name>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Convert a <ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref> enum value to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>log level to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string string form of log level </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="161" column="24" declfile="include/dpp/utility.h" declline="161" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1aeada90d27918093d9fe6a53d1a245f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::make_url_parameters</definition>
        <argsstring>(const std::map&lt; std::string, std::string &gt; &amp;parameters)</argsstring>
        <name>make_url_parameters</name>
        <param>
          <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Build a URL parameter string e.g. &quot;?a=b&amp;c=d&amp;e=f&quot; from a map of key/value pairs. Entries with empty key names or values are omitted. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>parameters to create a url query string for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string A correctly encoded url query string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="518" column="24" declfile="include/dpp/utility.h" declline="518" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ae97ccaf14820df924f86b32c6932d486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::make_url_parameters</definition>
        <argsstring>(const std::map&lt; std::string, uint64_t &gt; &amp;parameters)</argsstring>
        <name>make_url_parameters</name>
        <param>
          <type>const std::map&lt; std::string, uint64_t &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Build a URL parameter string e.g. &quot;?a=b&amp;c=d&amp;e=f&quot; from a map of key/value pairs. Entries with empty key names or zero values are omitted. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>parameters to create a url query string for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string A correctly encoded url query string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="527" column="24" declfile="include/dpp/utility.h" declline="527" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a2cd10adca7586a99a6fd350bb601f407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::markdown_escape</definition>
        <argsstring>(const std::string &amp;text, bool escape_code_blocks=false)</argsstring>
        <name>markdown_escape</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>escape_code_blocks</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Escapes Discord&apos;s markdown sequences in a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text to escape </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>escape_code_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to false, then code blocks are not escaped. This means that you can still use a code block, and the text within will be left as-is. If set to true, code blocks will also be escaped so that ` symbol may be used as a normal character. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The text with the markdown special characters escaped with a backslash </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="445" column="24" declfile="include/dpp/utility.h" declline="445" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a4e85ceba20c4ed2bfda15d806890428b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::read_file</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>read_file</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Read a whole file into a std::string. Be sure you have enough memory to read the file, if you are reading a large file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Be aware this function can block! If you are regularly reading large files, consider caching them. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The file contents </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1file__exception" kindref="compound">dpp::file_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on failure to read the entire file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="392" column="24" declfile="include/dpp/utility.h" declline="392" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1adb9dcc9f23b8da7836aca978eea7c9d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t DPP_EXPORT</type>
        <definition>uint32_t DPP_EXPORT dpp::utility::rgb</definition>
        <argsstring>(double red, double green, double blue)</argsstring>
        <name>rgb</name>
        <param>
          <type>double</type>
          <declname>red</declname>
        </param>
        <param>
          <type>double</type>
          <declname>green</declname>
        </param>
        <param>
          <type>double</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
<para>Convert doubles to RGB for sending in embeds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>red value, between 0 and 1 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>green value, between 0 and 1 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>blue value, between 0 and 1 inclusive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returned integer colour value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="324" column="21" declfile="include/dpp/utility.h" declline="324" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a9876a6a9d06223cfb2bf8dc83e7c9783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t DPP_EXPORT</type>
        <definition>uint32_t DPP_EXPORT dpp::utility::rgb</definition>
        <argsstring>(int red, int green, int blue)</argsstring>
        <name>rgb</name>
        <param>
          <type>int</type>
          <declname>red</declname>
        </param>
        <param>
          <type>int</type>
          <declname>green</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
<para>Convert ints to RGB for sending in embeds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>red value, between 0 and 255 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>green value, between 0 and 255 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>blue value, between 0 and 255 inclusive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returned integer colour value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="334" column="21" declfile="include/dpp/utility.h" declline="334" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ab7c346258eedffe57cff07d0b8b26c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::role_mention</definition>
        <argsstring>(const snowflake &amp;id)</argsstring>
        <name>role_mention</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Create a mentionable role. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the role. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The formatted mention of the role. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="502" column="24" declfile="include/dpp/utility.h" declline="502" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ab8b9842a7d3645607bf57d6803ee9509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void DPP_EXPORT</type>
        <definition>void DPP_EXPORT dpp::utility::set_thread_name</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>set_thread_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set the name of the current thread for debugging and statistical reporting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>New name to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="534" column="17" declfile="include/dpp/utility.h" declline="534" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ab5e15dbccb96fdcd2ac075bf530290e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::slashcommand_mention</definition>
        <argsstring>(snowflake command_id, const std::string &amp;command_name, const std::string &amp;subcommand=&quot;&quot;)</argsstring>
        <name>slashcommand_mention</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>command_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>command_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>subcommand</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Create a mentionable slashcommand (used in a message). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slashcommand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>command_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The command name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subcommand</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional: The subcommand name (for mentioning a subcommand) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The formatted mention </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="462" column="24" declfile="include/dpp/utility.h" declline="462" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ad9ab04ef6d30a614f608364cb5751e56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::slashcommand_mention</definition>
        <argsstring>(snowflake command_id, const std::string &amp;command_name, const std::string &amp;subcommand_group, const std::string &amp;subcommand)</argsstring>
        <name>slashcommand_mention</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>command_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>command_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>subcommand_group</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>subcommand</declname>
        </param>
        <briefdescription>
<para>Create a mentionable slashcommand (used in a message). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slashcommand </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>command_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The command name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subcommand_group</parametername>
</parameternamelist>
<parameterdescription>
<para>The subcommand group name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subcommand</parametername>
</parameternamelist>
<parameterdescription>
<para>The subcommand name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The formatted mention of the slashcommand with its subcommand </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="472" column="24" declfile="include/dpp/utility.h" declline="472" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a1184092d62c7ab561cb3f60a92f71b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double DPP_EXPORT</type>
        <definition>double DPP_EXPORT dpp::utility::time_f</definition>
        <argsstring>()</argsstring>
        <name>time_f</name>
        <briefdescription>
<para>Return the current time with fractions of seconds. This is a unix epoch time with the fractional seconds part after the decimal place. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double time with fractional seconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="247" column="19" declfile="include/dpp/utility.h" declline="247" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a177699d063618dd535764c81736a7a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::timestamp</definition>
        <argsstring>(time_t ts, time_format tf=tf_short_datetime)</argsstring>
        <name>timestamp</name>
        <param>
          <type>time_t</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7" kindref="member">time_format</ref></type>
          <declname>tf</declname>
          <defval><ref refid="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a71dc667709d06a38a90007af294c8f42" kindref="member">tf_short_datetime</ref></defval>
        </param>
        <briefdescription>
<para>Return a mentionable timestamp (used in a message). These timestamps will display the given timestamp in the user&apos;s timezone and locale. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>Time stamp to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tf</parametername>
</parameternamelist>
<parameterdescription>
<para>Format of timestamp using <ref refid="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7" kindref="member">dpp::utility::time_format</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The formatted timestamp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="147" column="24" declfile="include/dpp/utility.h" declline="147" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ab65e758e198a195ad3fbcec3c534d2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt; DPP_EXPORT</type>
        <definition>std::vector&lt; std::string &gt; DPP_EXPORT dpp::utility::tokenize</definition>
        <argsstring>(std::string const &amp;in, const char *sep=&quot;\r\n&quot;)</argsstring>
        <name>tokenize</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sep</declname>
          <defval>&quot;\r\n&quot;</defval>
        </param>
        <briefdescription>
<para>Split (tokenize) a string into a vector, using the given separators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator characters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; Tokenized strings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="423" column="24" declfile="include/dpp/utility.h" declline="423" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ab1cc19c7021a057083658d7e2cca1013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::url_encode</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>url_encode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Encodes a url parameter similar to <ulink url="https://www.php.net/manual/en/function.urlencode.php">php urlencode()</ulink> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>String to encode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string URL encoded string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="453" column="24" declfile="include/dpp/utility.h" declline="453" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a00f8e4bb0915722be20973c9cf356f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::user_mention</definition>
        <argsstring>(const snowflake &amp;id)</argsstring>
        <name>user_mention</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Create a mentionable user. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The formatted mention of the user. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="479" column="24" declfile="include/dpp/utility.h" declline="479" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a62cc8fc3994f6b3d49cf4923b993c231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t DPP_EXPORT</type>
        <definition>size_t DPP_EXPORT dpp::utility::utf8len</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>utf8len</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns the length of a UTF-8 string in codepoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>string to count length of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t length of string (0 for invalid utf8) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="372" column="19" declfile="include/dpp/utility.h" declline="372" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1afa6985aaa798fa30b73c1decc418cd32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::utf8substr</definition>
        <argsstring>(const std::string &amp;str, std::string::size_type start, std::string::size_type length)</argsstring>
        <name>utf8substr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string::size_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::string::size_type</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Return substring of a UTF-8 encoded string in codepoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>string to return substring from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>start codepoint offset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length in codepoints </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string Substring in UTF-8 or empty string if invalid UTF-8 passed in </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="382" column="24" declfile="include/dpp/utility.h" declline="382" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a3da218e2645e8f07e3b83373505542ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::validate</definition>
        <argsstring>(const std::string &amp;value, size_t _min, size_t _max, const std::string &amp;exception_message)</argsstring>
        <name>validate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_min</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_max</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>exception_message</declname>
        </param>
        <briefdescription>
<para>Validate a string value In the event the length of the string is less than _min, then an exception of type dpp:<ref refid="classdpp_1_1length__exception" kindref="compound">length_exception</ref> will be thrown. If the string is longer than _max UTF8 codepoints it will be truncated to fit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to validate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exception_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception message to throw if value length &lt; _min </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string Validated string, truncated if necessary. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1length__exception" kindref="compound">dpp::length_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if value UTF8 length &lt; _min </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="406" column="24" declfile="include/dpp/utility.h" declline="406" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a7d10e878ab1347eaed727b2e528206ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::version</definition>
        <argsstring>()</argsstring>
        <name>version</name>
        <briefdescription>
<para>Returns the library&apos;s version string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string version </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="509" column="24" declfile="include/dpp/utility.h" declline="509" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utility helper functions, generally for logging, running programs, time/date manipulation, etc. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/dpp/dispatcher.h" line="121" column="1"/>
  </compounddef>
</doxygen>
