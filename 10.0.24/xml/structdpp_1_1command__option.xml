<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1command__option" kind="struct" language="C++" prot="public">
    <compoundname>dpp::command_option</compoundname>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; command_option &gt;</basecompoundref>
    <includes local="no">appcommand.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1command__option_1adbb960edfa14ae19545d64397a785ab3" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58" kindref="member">command_option_type</ref></type>
        <definition>command_option_type dpp::command_option::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>Option type (what type of value is accepted) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="156" column="21" bodyfile="include/dpp/appcommand.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1ac2d487bd055fecbe1c566742def38bb7" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::command_option::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Option name (1-32 chars) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="157" column="13" bodyfile="include/dpp/appcommand.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1a82debcf96e4265cf7d8ea6b2aa47e481" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::command_option::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>Option description (1-100 chars) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="158" column="13" bodyfile="include/dpp/appcommand.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1ad203ab30a75ce7508f565f5821301bdb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::command_option::required</definition>
        <argsstring></argsstring>
        <name>required</name>
        <briefdescription>
<para>True if this is a mandatory parameter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="159" column="6" bodyfile="include/dpp/appcommand.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1ac06b240c8c64a12178564ee97aa231cc" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::command_option::focused</definition>
        <argsstring></argsstring>
        <name>focused</name>
        <briefdescription>
<para>True if the user is typing in this field, when sent via autocomplete. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="160" column="6" bodyfile="include/dpp/appcommand.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1abea0bfad54eead5b638ac53d8f6ba2a5" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a710b32b577396ba92917d0578f0bedb6" kindref="member">command_value</ref></type>
        <definition>command_value dpp::command_option::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
<para>Set only by autocomplete went sent as part of an interaction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="161" column="15" bodyfile="include/dpp/appcommand.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1a05f44f181203ed332696b789c4ef7c6f" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1command__option__choice" kindref="compound">command_option_choice</ref> &gt;</type>
        <definition>std::vector&lt;command_option_choice&gt; dpp::command_option::choices</definition>
        <argsstring></argsstring>
        <name>choices</name>
        <briefdescription>
<para>List of choices for multiple choice command. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="162" column="13" bodyfile="include/dpp/appcommand.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1a0363e8509ec6e91a4bd313c0a57ef71d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::command_option::autocomplete</definition>
        <argsstring></argsstring>
        <name>autocomplete</name>
        <briefdescription>
<para>True if this option supports auto completion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="163" column="6" bodyfile="include/dpp/appcommand.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1a0f238f1e8bb393b2c37b47c6fb564952" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &gt;</type>
        <definition>std::vector&lt;command_option&gt; dpp::command_option::options</definition>
        <argsstring></argsstring>
        <name>options</name>
        <briefdescription>
<para>Sub-commands. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="164" column="13" bodyfile="include/dpp/appcommand.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1a447f1eea2df77fd55ba9a122a80c3ccf" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a732e832861149a278f27ea7840b8e4ca" kindref="member">channel_type</ref> &gt;</type>
        <definition>std::vector&lt;channel_type&gt; dpp::command_option::channel_types</definition>
        <argsstring></argsstring>
        <name>channel_types</name>
        <briefdescription>
<para>Allowed channel types for channel snowflake id options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="165" column="13" bodyfile="include/dpp/appcommand.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1ac4a6aaaa280ccbc4f23533bba5429d81" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a3e80cf6b8ecad18c951fec28be2377ba" kindref="member">command_option_range</ref></type>
        <definition>command_option_range dpp::command_option::min_value</definition>
        <argsstring></argsstring>
        <name>min_value</name>
        <briefdescription>
<para>Minimum value/length that can be entered, for <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58a516b70c3a0d502aeb6af3530c831e86b" kindref="member">dpp::co_number</ref>, <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58a7e18bae49699df4948c28c12bfa8bd19" kindref="member">dpp::co_integer</ref> and <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58acd751201efe224973dfe952d8658a384" kindref="member">dpp::co_string</ref> types only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="167" column="22" bodyfile="include/dpp/appcommand.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1a1a658b6e5472c0f41543addccc14a7e4" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a3e80cf6b8ecad18c951fec28be2377ba" kindref="member">command_option_range</ref></type>
        <definition>command_option_range dpp::command_option::max_value</definition>
        <argsstring></argsstring>
        <name>max_value</name>
        <briefdescription>
<para>Maximum value/length that can be entered, for <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58a516b70c3a0d502aeb6af3530c831e86b" kindref="member">dpp::co_number</ref>, <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58a7e18bae49699df4948c28c12bfa8bd19" kindref="member">dpp::co_integer</ref> and <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58acd751201efe224973dfe952d8658a384" kindref="member">dpp::co_string</ref> types only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="168" column="22" bodyfile="include/dpp/appcommand.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1a63a65559288daaa416ff642b3bf08ef6" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; dpp::command_option::name_localizations</definition>
        <argsstring></argsstring>
        <name>name_localizations</name>
        <briefdescription>
<para>Localisations of command name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="169" column="10" bodyfile="include/dpp/appcommand.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1command__option_1af8644e0b7057a2f956ccac7b9bada607" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; dpp::command_option::description_localizations</definition>
        <argsstring></argsstring>
        <name>description_localizations</name>
        <briefdescription>
<para>Localisations of command description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="170" column="10" bodyfile="include/dpp/appcommand.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1command__option_1a7b9a89420e48ccd85cfdc6deaae63e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::command_option::command_option</definition>
        <argsstring>()=default</argsstring>
        <name>command_option</name>
        <briefdescription>
<para>Construct a new command option object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1a25237e95f4c70a653459a69b3d2aba4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::command_option::~command_option</definition>
        <argsstring>()=default</argsstring>
        <name>~command_option</name>
        <briefdescription>
<para>Destroy the command option object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="181" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1abe4a00e59738602758eb418536781261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
        <definition>command_option &amp; dpp::command_option::add_localization</definition>
        <argsstring>(const std::string &amp;language, const std::string &amp;_name, const std::string &amp;_description=&quot;&quot;)</argsstring>
        <name>add_localization</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>language</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Add a localisation for this slash command option. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/reference#locales">https://discord.com/developers/docs/reference#locales</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of language, see the list of locales linked to above </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of slash command option in the specified language </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_description</parametername>
</parameternamelist>
<parameterdescription>
<para>description of slash command option in the specified language (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref>&amp; reference to self for fluent chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="191" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1a7059a6049828707b2eda2c5a649aeb79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::command_option::command_option</definition>
        <argsstring>(command_option_type t, const std::string &amp;name, const std::string &amp;description, bool required=false)</argsstring>
        <name>command_option</name>
        <param>
          <type><ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58" kindref="member">command_option_type</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>required</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Construct a new command option object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Option type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Option name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Option description </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>required</parametername>
</parameternamelist>
<parameterdescription>
<para>True if this is a mandatory parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1a760d208354981f2866d6788b67dc4026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
        <definition>command_option &amp; dpp::command_option::add_choice</definition>
        <argsstring>(const command_option_choice &amp;o)</argsstring>
        <name>add_choice</name>
        <param>
          <type>const <ref refid="structdpp_1_1command__option__choice" kindref="compound">command_option_choice</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Add a multiple choice option. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>choice to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref>&amp; returns a reference to self for chaining of calls </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> is an autocomplete, so choices cannot be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="210" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1a0ff9143e5346618336b14c78934208d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
        <definition>command_option &amp; dpp::command_option::set_min_value</definition>
        <argsstring>(command_option_range min_v)</argsstring>
        <name>set_min_value</name>
        <param>
          <type><ref refid="namespacedpp_1a3e80cf6b8ecad18c951fec28be2377ba" kindref="member">command_option_range</ref></type>
          <declname>min_v</declname>
        </param>
        <briefdescription>
<para>Set the minimum numeric value of the option. Only valid if the type is <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58a516b70c3a0d502aeb6af3530c831e86b" kindref="member">dpp::co_number</ref> or <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58a7e18bae49699df4948c28c12bfa8bd19" kindref="member">dpp::co_integer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref>&amp; returns a reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="218" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1a15b3a6c2a2a1d5f6e19956e2215e3f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
        <definition>command_option &amp; dpp::command_option::set_max_value</definition>
        <argsstring>(command_option_range max_v)</argsstring>
        <name>set_max_value</name>
        <param>
          <type><ref refid="namespacedpp_1a3e80cf6b8ecad18c951fec28be2377ba" kindref="member">command_option_range</ref></type>
          <declname>max_v</declname>
        </param>
        <briefdescription>
<para>Set the maximum numeric value of the option. Only valid if the type is <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58a516b70c3a0d502aeb6af3530c831e86b" kindref="member">dpp::co_number</ref> or <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58a7e18bae49699df4948c28c12bfa8bd19" kindref="member">dpp::co_integer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref>&amp; returns a reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="226" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1af1908a38a09a68eb25c118f694c6cc40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
        <definition>command_option &amp; dpp::command_option::set_min_length</definition>
        <argsstring>(command_option_range min_v)</argsstring>
        <name>set_min_length</name>
        <param>
          <type><ref refid="namespacedpp_1a3e80cf6b8ecad18c951fec28be2377ba" kindref="member">command_option_range</ref></type>
          <declname>min_v</declname>
        </param>
        <briefdescription>
<para>Set the minimum string length of the option. Must be between 0 and 6000 (inclusive). Only valid if the type is <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58acd751201efe224973dfe952d8658a384" kindref="member">dpp::co_string</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref>&amp; returns a reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="234" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1a7555f4a8cc883bdaa08053f4513262a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
        <definition>command_option &amp; dpp::command_option::set_max_length</definition>
        <argsstring>(command_option_range max_v)</argsstring>
        <name>set_max_length</name>
        <param>
          <type><ref refid="namespacedpp_1a3e80cf6b8ecad18c951fec28be2377ba" kindref="member">command_option_range</ref></type>
          <declname>max_v</declname>
        </param>
        <briefdescription>
<para>Set the maximum string length of the option. Must be between 1 and 6000 (inclusive). Only valid if the type is <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58acd751201efe224973dfe952d8658a384" kindref="member">dpp::co_string</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_v</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref>&amp; returns a reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="242" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1aa5c54bbb1e3cf93a9e18ea21f789cf2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
        <definition>command_option &amp; dpp::command_option::add_option</definition>
        <argsstring>(const command_option &amp;o)</argsstring>
        <name>add_option</name>
        <param>
          <type>const <ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Add a sub-command option. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Sub-command option to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref>&amp; return a reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="250" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1a2ecddb11870c0c32a61be196f48c3ebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
        <definition>command_option &amp; dpp::command_option::add_channel_type</definition>
        <argsstring>(const channel_type ch)</argsstring>
        <name>add_channel_type</name>
        <param>
          <type>const <ref refid="namespacedpp_1a732e832861149a278f27ea7840b8e4ca" kindref="member">channel_type</ref></type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Add channel type for option (only for co_channel type options) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ch</parametername>
</parameternamelist>
<parameterdescription>
<para>type to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref>&amp; return a reference to self for chaining of calls </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="258" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1a397ec7aa607abc775e45a14237e3299a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
        <definition>command_option &amp; dpp::command_option::set_auto_complete</definition>
        <argsstring>(bool autocomp)</argsstring>
        <name>set_auto_complete</name>
        <param>
          <type>bool</type>
          <declname>autocomp</declname>
        </param>
        <briefdescription>
<para>Set the auto complete state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>autocomp</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable auto completion for this option </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref>&amp; return a reference to self for chaining of calls </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>You attempted to enable auto complete on a <ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> that has choices added to it </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="267" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1command__option_1ad80d37679b970a5d56e043641834573d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref> &amp;</type>
        <definition>command_option &amp; dpp::command_option::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill object properties from JSON. Fills options recursively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON to fill from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__option" kindref="compound">command_option</ref>&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="275" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a287c22f692ee3d25b6f9b320ff35baa1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string dpp::json_interface&lt; command_option  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build JSON string from the object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Include the ID in the JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string JSON string version of object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="57" column="21" bodyfile="include/dpp/json_interface.h" bodystart="57" bodyend="59"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Each command option is a command line parameter. It can have a type (see <ref refid="namespacedpp_1abc401d86119c6443bf72d736857c1a58" kindref="member">dpp::command_option_type</ref>), a name, a description, can be required or optional, and can have zero or more choices (for multiple choice), plus options. Adding options acts like sub-commands and can contain more options. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::command_option</label>
        <link refid="structdpp_1_1command__option"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; command_option &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; command_option &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>bool</label>
      </node>
      <node id="4">
        <label>command_option_type</label>
      </node>
      <node id="1">
        <label>dpp::command_option</label>
        <link refid="structdpp_1_1command__option"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>autocomplete</edgelabel>
          <edgelabel>focused</edgelabel>
          <edgelabel>required</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>channel_types</edgelabel>
          <edgelabel>choices</edgelabel>
          <edgelabel>options</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>max_value</edgelabel>
          <edgelabel>min_value</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>description_localizations</edgelabel>
          <edgelabel>name_localizations</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; command_option &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; command_option &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="11">
        <label>map&lt;</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>variant&lt; std::monostate, int64_t, double &gt;</label>
      </node>
      <node id="8">
        <label>variant&lt; std::monostate, std::string, int64_t, bool, snowflake, double &gt;</label>
      </node>
      <node id="9">
        <label>vector&lt;</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/appcommand.h" line="155" column="1" bodyfile="include/dpp/appcommand.h" bodystart="155" bodyend="276"/>
    <listofallmembers>
      <member refid="structdpp_1_1command__option_1a2ecddb11870c0c32a61be196f48c3ebf" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>add_channel_type</name></member>
      <member refid="structdpp_1_1command__option_1a760d208354981f2866d6788b67dc4026" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>add_choice</name></member>
      <member refid="structdpp_1_1command__option_1abe4a00e59738602758eb418536781261" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>add_localization</name></member>
      <member refid="structdpp_1_1command__option_1aa5c54bbb1e3cf93a9e18ea21f789cf2c" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>add_option</name></member>
      <member refid="structdpp_1_1command__option_1a0363e8509ec6e91a4bd313c0a57ef71d" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>autocomplete</name></member>
      <member refid="structdpp_1_1json__interface_1a287c22f692ee3d25b6f9b320ff35baa1" prot="public" virt="virtual"><scope>dpp::command_option</scope><name>build_json</name></member>
      <member refid="structdpp_1_1command__option_1a447f1eea2df77fd55ba9a122a80c3ccf" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>channel_types</name></member>
      <member refid="structdpp_1_1command__option_1a05f44f181203ed332696b789c4ef7c6f" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>choices</name></member>
      <member refid="structdpp_1_1command__option_1a7b9a89420e48ccd85cfdc6deaae63e50" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>command_option</name></member>
      <member refid="structdpp_1_1command__option_1a7059a6049828707b2eda2c5a649aeb79" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>command_option</name></member>
      <member refid="structdpp_1_1command__option_1a82debcf96e4265cf7d8ea6b2aa47e481" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>description</name></member>
      <member refid="structdpp_1_1command__option_1af8644e0b7057a2f956ccac7b9bada607" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>description_localizations</name></member>
      <member refid="structdpp_1_1command__option_1ad80d37679b970a5d56e043641834573d" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1command__option_1ac06b240c8c64a12178564ee97aa231cc" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>focused</name></member>
      <member refid="structdpp_1_1command__option_1a1a658b6e5472c0f41543addccc14a7e4" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>max_value</name></member>
      <member refid="structdpp_1_1command__option_1ac4a6aaaa280ccbc4f23533bba5429d81" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>min_value</name></member>
      <member refid="structdpp_1_1command__option_1ac2d487bd055fecbe1c566742def38bb7" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>name</name></member>
      <member refid="structdpp_1_1command__option_1a63a65559288daaa416ff642b3bf08ef6" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>name_localizations</name></member>
      <member refid="structdpp_1_1command__option_1a0f238f1e8bb393b2c37b47c6fb564952" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>options</name></member>
      <member refid="structdpp_1_1command__option_1ad203ab30a75ce7508f565f5821301bdb" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>required</name></member>
      <member refid="structdpp_1_1command__option_1a397ec7aa607abc775e45a14237e3299a" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>set_auto_complete</name></member>
      <member refid="structdpp_1_1command__option_1a7555f4a8cc883bdaa08053f4513262a9" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>set_max_length</name></member>
      <member refid="structdpp_1_1command__option_1a15b3a6c2a2a1d5f6e19956e2215e3f0d" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>set_max_value</name></member>
      <member refid="structdpp_1_1command__option_1af1908a38a09a68eb25c118f694c6cc40" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>set_min_length</name></member>
      <member refid="structdpp_1_1command__option_1a0ff9143e5346618336b14c78934208d7" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>set_min_value</name></member>
      <member refid="structdpp_1_1command__option_1adbb960edfa14ae19545d64397a785ab3" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>type</name></member>
      <member refid="structdpp_1_1command__option_1abea0bfad54eead5b638ac53d8f6ba2a5" prot="public" virt="non-virtual"><scope>dpp::command_option</scope><name>value</name></member>
      <member refid="structdpp_1_1command__option_1a25237e95f4c70a653459a69b3d2aba4f" prot="public" virt="virtual"><scope>dpp::command_option</scope><name>~command_option</name></member>
      <member refid="structdpp_1_1json__interface_1a8fea07be649b8bb166c28c5a7daccf53" prot="protected" virt="non-virtual"><scope>dpp::command_option</scope><name>~json_interface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
