<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1attachment" kind="struct" language="C++" prot="public">
    <compoundname>dpp::attachment</compoundname>
    <includes local="no">message.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1attachment_1a78fa9315fae4737d760e0b19cc9597cf" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::attachment::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID of attachment </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="790" column="11" bodyfile="include/dpp/message.h" bodystart="790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1a899697fe4fea962a9a81f0cae66e86f5" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::attachment::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size of the attachment in bytes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="792" column="10" bodyfile="include/dpp/message.h" bodystart="792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1a37ae8a828923ad5184133f486241000c" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::attachment::filename</definition>
        <argsstring></argsstring>
        <name>filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>File name of the attachment </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="794" column="13" bodyfile="include/dpp/message.h" bodystart="794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1a0b7feae87c4a22fcfa660b922f7d6ceb" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::attachment::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: Description of the attachment (max 1024 characters) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="796" column="13" bodyfile="include/dpp/message.h" bodystart="796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1ac8dfe8ccce296e4f30452ddbc5bded26" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::attachment::url</definition>
        <argsstring></argsstring>
        <name>url</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>URL which points to the attachment </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="798" column="13" bodyfile="include/dpp/message.h" bodystart="798" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1ac3fa01bbb9915006c0a11db9ed386749" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::attachment::proxy_url</definition>
        <argsstring></argsstring>
        <name>proxy_url</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Proxied URL which points to the attachment </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="800" column="13" bodyfile="include/dpp/message.h" bodystart="800" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1a62039388d0f56e389a538b32716e44c5" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::attachment::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Width of the attachment, if applicable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="802" column="10" bodyfile="include/dpp/message.h" bodystart="802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1a448f0ad9591bb19788cd595ace201ce3" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::attachment::height</definition>
        <argsstring></argsstring>
        <name>height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Height of the attachment, if applicable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="804" column="10" bodyfile="include/dpp/message.h" bodystart="804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1a57c192b2925012e1d06913da80f1bafd" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::attachment::content_type</definition>
        <argsstring></argsstring>
        <name>content_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MIME type of the attachment, if applicable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="806" column="13" bodyfile="include/dpp/message.h" bodystart="806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1a453d43c1a5bb073038cc2a0890cfdbec" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::attachment::ephemeral</definition>
        <argsstring></argsstring>
        <name>ephemeral</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this attachment is ephemeral, if applicable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="808" column="6" bodyfile="include/dpp/message.h" bodystart="808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1ac9dcb0c9252a1bbaddc3090d92e282b3" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double dpp::attachment::duration_secs</definition>
        <argsstring></argsstring>
        <name>duration_secs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The duration of the audio file (currently for voice messages) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="810" column="8" bodyfile="include/dpp/message.h" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1a53081cdedef49b5545995629c3b25a26" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::attachment::waveform</definition>
        <argsstring></argsstring>
        <name>waveform</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>base64 encoded bytearray representing a sampled waveform (currently for voice messages) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="812" column="13" bodyfile="include/dpp/message.h" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1a4e79a5abbab3880ca1344dd6d41b58bf" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::attachment::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags. Made of bits in <ref refid="namespacedpp_1a9ead2d4ab4b3a6035a7940e65027da1d" kindref="member">dpp::attachment_flags</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="814" column="8" bodyfile="include/dpp/message.h" bodystart="814" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1attachment_1ac20e7cdbbb8f1d79ffc04212efea4eb1" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> *</type>
        <definition>struct message* dpp::attachment::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Owning message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="816" column="15" bodyfile="include/dpp/message.h" bodystart="816" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1attachment_1a7282fea4a14c84993155771cc0922b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::attachment::attachment</definition>
        <argsstring>(struct message *o)</argsstring>
        <name>attachment</name>
        <param>
          <type>struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Constructs a new attachment object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Owning <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="822" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1attachment_1aca59a273fa0fda00501c0df147506c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::attachment::attachment</definition>
        <argsstring>(struct message *o, nlohmann::json *j)</argsstring>
        <name>attachment</name>
        <param>
          <type>struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> *</type>
          <declname>o</declname>
        </param>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Constructs a new attachment object from a JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Owning <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON to read information from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="829" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1attachment_1a0911f0f41b456e42ec31615b24042d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::attachment::~attachment</definition>
        <argsstring>()=default</argsstring>
        <name>~attachment</name>
        <briefdescription>
<para>Destructs the attachment object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1attachment_1a2f1e46240f30afbcfc6e51bb49b7ebc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::attachment::download</definition>
        <argsstring>(http_completion_event callback) const</argsstring>
        <name>download</name>
        <param>
          <type><ref refid="namespacedpp_1ae3249e99494d04bb4be50341f474621e" kindref="member">http_completion_event</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Download this attachment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback which is called when the download completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The content of the file will be in the http_info.body parameter of the callback parameter. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If there is no owner associated with this attachment that itself has an owning cluster, this method will throw a <ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref> when called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="844" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1attachment_1a24633e1ddba574692b949632b8b985e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::attachment::is_remix</definition>
        <argsstring>() const</argsstring>
        <name>is_remix</name>
        <briefdescription>
<para>Returns true if remixed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if remixed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="851" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an attachment in a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="7">
        <label>bool</label>
      </node>
      <node id="25">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="8">
        <label>double</label>
      </node>
      <node id="1">
        <label>dpp::attachment</label>
        <link refid="structdpp_1_1attachment"/>
        <childnode refid="2" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>height</edgelabel>
          <edgelabel>size</edgelabel>
          <edgelabel>width</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>content_type</edgelabel>
          <edgelabel>description</edgelabel>
          <edgelabel>filename</edgelabel>
          <edgelabel>proxy_url</edgelabel>
          <edgelabel>url</edgelabel>
          <edgelabel>waveform</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>ephemeral</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>duration_secs</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="25" relation="usage">
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="5" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="5" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="11">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="2" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>dpp::message</label>
        <link refid="structdpp_1_1message"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>webhook_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>author</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>content</edgelabel>
          <edgelabel>nonce</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>attachments</edgelabel>
          <edgelabel>components</edgelabel>
          <edgelabel>embeds</edgelabel>
          <edgelabel>filecontent</edgelabel>
          <edgelabel>filemimetype</edgelabel>
          <edgelabel>filename</edgelabel>
          <edgelabel>mention_channels</edgelabel>
          <edgelabel>mention_roles</edgelabel>
          <edgelabel>mentions</edgelabel>
          <edgelabel>reactions</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>edited</edgelabel>
          <edgelabel>sent</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>message_reference</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>interaction</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>allowed_mentions</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mention_everyone</edgelabel>
          <edgelabel>pinned</edgelabel>
          <edgelabel>tts</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>dpp::message::allowed_ref</label>
        <link refid="structdpp_1_1message_1_1allowed__ref"/>
        <childnode refid="7" relation="usage">
          <edgelabel>parse_everyone</edgelabel>
          <edgelabel>parse_roles</edgelabel>
          <edgelabel>parse_users</edgelabel>
          <edgelabel>replied_user</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>roles</edgelabel>
          <edgelabel>users</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>dpp::message::message_interaction_struct</label>
        <link refid="structdpp_1_1message_1_1message__interaction__struct"/>
        <childnode refid="2" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::message::message_ref</label>
        <link refid="structdpp_1_1message_1_1message__ref"/>
        <childnode refid="2" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>fail_if_not_exists</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="3" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="3" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>event_router_t&lt;</label>
      </node>
      <node id="13">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>message_type</label>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="27">
        <label>condition_variable</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>vector&lt;</label>
      </node>
      <node id="19">
        <label>time_t</label>
      </node>
      <node id="16">
        <label>uint16_t</label>
      </node>
      <node id="4">
        <label>uint32_t</label>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
      <node id="9">
        <label>uint8_t</label>
      </node>
      <node id="26">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/message.h" line="788" column="1" bodyfile="include/dpp/message.h" bodystart="788" bodyend="852"/>
    <listofallmembers>
      <member refid="structdpp_1_1attachment_1a7282fea4a14c84993155771cc0922b90" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>attachment</name></member>
      <member refid="structdpp_1_1attachment_1aca59a273fa0fda00501c0df147506c5f" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>attachment</name></member>
      <member refid="structdpp_1_1attachment_1a57c192b2925012e1d06913da80f1bafd" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>content_type</name></member>
      <member refid="structdpp_1_1attachment_1a0b7feae87c4a22fcfa660b922f7d6ceb" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>description</name></member>
      <member refid="structdpp_1_1attachment_1a2f1e46240f30afbcfc6e51bb49b7ebc1" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>download</name></member>
      <member refid="structdpp_1_1attachment_1ac9dcb0c9252a1bbaddc3090d92e282b3" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>duration_secs</name></member>
      <member refid="structdpp_1_1attachment_1a453d43c1a5bb073038cc2a0890cfdbec" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>ephemeral</name></member>
      <member refid="structdpp_1_1attachment_1a37ae8a828923ad5184133f486241000c" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>filename</name></member>
      <member refid="structdpp_1_1attachment_1a4e79a5abbab3880ca1344dd6d41b58bf" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>flags</name></member>
      <member refid="structdpp_1_1attachment_1a448f0ad9591bb19788cd595ace201ce3" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>height</name></member>
      <member refid="structdpp_1_1attachment_1a78fa9315fae4737d760e0b19cc9597cf" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>id</name></member>
      <member refid="structdpp_1_1attachment_1a24633e1ddba574692b949632b8b985e8" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>is_remix</name></member>
      <member refid="structdpp_1_1attachment_1ac20e7cdbbb8f1d79ffc04212efea4eb1" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>owner</name></member>
      <member refid="structdpp_1_1attachment_1ac3fa01bbb9915006c0a11db9ed386749" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>proxy_url</name></member>
      <member refid="structdpp_1_1attachment_1a899697fe4fea962a9a81f0cae66e86f5" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>size</name></member>
      <member refid="structdpp_1_1attachment_1ac8dfe8ccce296e4f30452ddbc5bded26" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>url</name></member>
      <member refid="structdpp_1_1attachment_1a53081cdedef49b5545995629c3b25a26" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>waveform</name></member>
      <member refid="structdpp_1_1attachment_1a62039388d0f56e389a538b32716e44c5" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>width</name></member>
      <member refid="structdpp_1_1attachment_1a0911f0f41b456e42ec31615b24042d63" prot="public" virt="non-virtual"><scope>dpp::attachment</scope><name>~attachment</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
