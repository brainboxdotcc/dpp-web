<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1cluster" kind="class" language="C++" prot="public">
    <compoundname>dpp::cluster</compoundname>
    <includes local="no">cluster.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1cluster_1ab0d2c95628830a28f9abb09441914e40" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class discord_client</definition>
        <argsstring></argsstring>
        <name>discord_client</name>
        <param>
          <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="84" column="14" bodyfile="include/dpp/cluster.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classdpp_1_1cluster_1abc4e53e79731117ca95bca977baef820" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class discord_voice_client</definition>
        <argsstring></argsstring>
        <name>discord_voice_client</name>
        <param>
          <type><ref refid="classdpp_1_1discord__voice__client" kindref="compound">discord_voice_client</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="85" column="14" bodyfile="include/dpp/cluster.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1cluster_1ade2990d3e8a7f10094b806625a0bc545" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::cluster::default_gateway</definition>
        <argsstring></argsstring>
        <name>default_gateway</name>
        <briefdescription>
<para>default gateway for connecting the websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="90" column="13" bodyfile="include/dpp/cluster.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a550e3f1bf003f129a04c6acc0fcaa914" prot="private" static="no" mutable="no">
        <type><ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> *</type>
        <definition>request_queue* dpp::cluster::rest</definition>
        <argsstring></argsstring>
        <name>rest</name>
        <briefdescription>
<para>queue system for commands sent to Discord, and any replies </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="95" column="15" bodyfile="include/dpp/cluster.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a24896cc48e0c7bcafae0db762ea725d8" prot="private" static="no" mutable="no">
        <type><ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> *</type>
        <definition>request_queue* dpp::cluster::raw_rest</definition>
        <argsstring></argsstring>
        <name>raw_rest</name>
        <briefdescription>
<para>queue system for arbitrary HTTP requests sent by the user to sites other than Discord </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="100" column="15" bodyfile="include/dpp/cluster.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a3334e0a3ee0cbf7e20a7a88e9b73f8df" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::cluster::compressed</definition>
        <argsstring></argsstring>
        <name>compressed</name>
        <briefdescription>
<para>True if to use compression on shards. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="105" column="6" bodyfile="include/dpp/cluster.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a66dc3cad1b49988c7656c92169c7b2bb" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex dpp::cluster::dm_list_lock</definition>
        <argsstring></argsstring>
        <name>dm_list_lock</name>
        <briefdescription>
<para>Lock to prevent concurrent access to dm_channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="110" column="12" bodyfile="include/dpp/cluster.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a9b12c3db92a110916052b0c1b260299d" prot="private" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::cluster::start_time</definition>
        <argsstring></argsstring>
        <name>start_time</name>
        <briefdescription>
<para>Start time of cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="115" column="8" bodyfile="include/dpp/cluster.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a643e94b648db0e392f52e345c8bc3377" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref>, <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::unordered_map&lt;snowflake, snowflake&gt; dpp::cluster::dm_channels</definition>
        <argsstring></argsstring>
        <name>dm_channels</name>
        <briefdescription>
<para>Active DM channels for the bot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="120" column="20" bodyfile="include/dpp/cluster.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a0846d3ebce4cb2c346ef4947683cf058" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a13c4d4e6238396245b349e6a637897e0" kindref="member">shard_list</ref></type>
        <definition>shard_list dpp::cluster::shards</definition>
        <argsstring></argsstring>
        <name>shards</name>
        <briefdescription>
<para>Active shards on this cluster. Shard IDs may have gaps between if there are multiple clusters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="126" column="12" bodyfile="include/dpp/cluster.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a68804071670257a06ffe64c973265753" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a81b406b8f9f9fa3da4b61fd006f13455" kindref="member">timer_reg_t</ref></type>
        <definition>timer_reg_t dpp::cluster::timer_list</definition>
        <argsstring></argsstring>
        <name>timer_list</name>
        <briefdescription>
<para>List of all active registered timers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="131" column="13" bodyfile="include/dpp/cluster.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ac8f279f9245bbfe35888f213b011d3a4" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a408d79969007e9c450e186f5387df9e5" kindref="member">timer_next_t</ref></type>
        <definition>timer_next_t dpp::cluster::next_timer</definition>
        <argsstring></argsstring>
        <name>next_timer</name>
        <briefdescription>
<para>List of timers by time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="136" column="14" bodyfile="include/dpp/cluster.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1cluster_1a644b186bc4b386a8313e3c5dce456c4e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::cluster::token</definition>
        <argsstring></argsstring>
        <name>token</name>
        <briefdescription>
<para>Current bot token for all shards on this cluster and all commands sent via HTTP. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="153" column="13" bodyfile="include/dpp/cluster.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a32ce7fc13658a25e2faeadcd36282b0b" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::cluster::last_identify</definition>
        <argsstring></argsstring>
        <name>last_identify</name>
        <briefdescription>
<para>Last time the bot sent an IDENTIFY. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="158" column="8" bodyfile="include/dpp/cluster.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a239af1e13449c85658fb37e6589745a0" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::cluster::intents</definition>
        <argsstring></argsstring>
        <name>intents</name>
        <briefdescription>
<para>Current bitmask of gateway intents. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="163" column="10" bodyfile="include/dpp/cluster.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a7418aa521c49af80822039b013d8d004" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::cluster::numshards</definition>
        <argsstring></argsstring>
        <name>numshards</name>
        <briefdescription>
<para>Total number of shards across all clusters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="168" column="10" bodyfile="include/dpp/cluster.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a5155862c1d7267c7f4ee8781ff3e8d7f" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::cluster::cluster_id</definition>
        <argsstring></argsstring>
        <name>cluster_id</name>
        <briefdescription>
<para>ID of this cluster, between 0 and MAXCLUSTERS-1 inclusive. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="173" column="10" bodyfile="include/dpp/cluster.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ad80e4df300e69988d163d61c14e540ab" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::cluster::maxclusters</definition>
        <argsstring></argsstring>
        <name>maxclusters</name>
        <briefdescription>
<para>Total number of clusters that are active. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="178" column="10" bodyfile="include/dpp/cluster.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a6161f8d412b2e81a06594f727684a260" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double dpp::cluster::rest_ping</definition>
        <argsstring></argsstring>
        <name>rest_ping</name>
        <briefdescription>
<para>REST latency (HTTPS ping) in seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="183" column="8" bodyfile="include/dpp/cluster.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ad31317a40181f6864646c8758871b495" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref></type>
        <definition>dpp::user dpp::cluster::me</definition>
        <argsstring></argsstring>
        <name>me</name>
        <briefdescription>
<para>The details of the bot user. This is assumed to be identical across all shards in the cluster. Each connecting shard updates this information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="189" column="11" bodyfile="include/dpp/cluster.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a9fae28f81712be86530fe3314d166ad3" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1cache__policy__t" kindref="compound">cache_policy_t</ref></type>
        <definition>cache_policy_t dpp::cluster::cache_policy</definition>
        <argsstring></argsstring>
        <name>cache_policy</name>
        <briefdescription>
<para>Current cache policy for the cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="194" column="16" bodyfile="include/dpp/cluster.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ae10466db79966215a799fc2a30010551" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1af7cde3079d745428f44ef6231a2ac672" kindref="member">websocket_protocol_t</ref></type>
        <definition>websocket_protocol_t dpp::cluster::ws_mode</definition>
        <argsstring></argsstring>
        <name>ws_mode</name>
        <briefdescription>
<para>Websocket mode for all shards in the cluster, either ws_json or ws_etf. Production bots should use ETF, while development bots should use JSON. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="200" column="22" bodyfile="include/dpp/cluster.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a43e11def2111a4fc38db65d4d0b104e6" prot="public" static="no" mutable="no">
        <type>std::condition_variable</type>
        <definition>std::condition_variable dpp::cluster::terminating</definition>
        <argsstring></argsstring>
        <name>terminating</name>
        <briefdescription>
<para>Condition variable notified when the cluster is terminating. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="205" column="25" bodyfile="include/dpp/cluster.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a571d473f65f67265878fa4ba0e405f2f" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1voice__state__update__t" kindref="compound">voice_state_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;voice_state_update_t&gt; dpp::cluster::on_voice_state_update</definition>
        <argsstring></argsstring>
        <name>on_voice_state_update</name>
        <briefdescription>
<para>on voice state update event </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#voice-state-update">https://discord.com/developers/docs/topics/gateway-events#voice-state-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1voice__state__update__t" kindref="compound">voice_state_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="434" column="16" bodyfile="include/dpp/cluster.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ad0a97571a6609c6c6a7fb4393972eaed" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1voice__client__disconnect__t" kindref="compound">voice_client_disconnect_t</ref> &gt;</type>
        <definition>event_router_t&lt;voice_client_disconnect_t&gt; dpp::cluster::on_voice_client_disconnect</definition>
        <argsstring></argsstring>
        <name>on_voice_client_disconnect</name>
        <briefdescription>
<para>on voice client disconnect event </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1voice__client__disconnect__t" kindref="compound">voice_client_disconnect_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="443" column="16" bodyfile="include/dpp/cluster.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a64e8359d2f739a06f9a522c340ac38f5" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1voice__client__speaking__t" kindref="compound">voice_client_speaking_t</ref> &gt;</type>
        <definition>event_router_t&lt;voice_client_speaking_t&gt; dpp::cluster::on_voice_client_speaking</definition>
        <argsstring></argsstring>
        <name>on_voice_client_speaking</name>
        <briefdescription>
<para>on voice client speaking event </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1voice__client__speaking__t" kindref="compound">voice_client_speaking_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="452" column="16" bodyfile="include/dpp/cluster.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ab840686c7cd2e15f4a66ab64f62e106b" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1log__t" kindref="compound">log_t</ref> &gt;</type>
        <definition>event_router_t&lt;log_t&gt; dpp::cluster::on_log</definition>
        <argsstring></argsstring>
        <name>on_log</name>
        <briefdescription>
<para>Called when a log message is to be written to the log. You can attach any logging system here you wish, e.g. spdlog, or even just a simple use of std::cout or printf. If nothing attaches this log event, then the library will be silent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1log__t" kindref="compound">log_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="464" column="16" bodyfile="include/dpp/cluster.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a4bd01f0d6e1eb6e93a027da031aaa25f" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__join__request__delete__t" kindref="compound">guild_join_request_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_join_request_delete_t&gt; dpp::cluster::on_guild_join_request_delete</definition>
        <argsstring></argsstring>
        <name>on_guild_join_request_delete</name>
        <briefdescription>
<para>on guild join request delete. Triggered when a user declines the membership screening questionnaire for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__join__request__delete__t" kindref="compound">guild_join_request_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="473" column="16" bodyfile="include/dpp/cluster.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1aaaac4fce048efff1be42965c82235b3e" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1interaction__create__t" kindref="compound">interaction_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;interaction_create_t&gt; dpp::cluster::on_interaction_create</definition>
        <argsstring></argsstring>
        <name>on_interaction_create</name>
        <briefdescription>
<para>Called when a new interaction is created. Interactions are created by discord when commands you have registered are issued by a user. For an example of this in action please see <ref refid="slashcommands" kindref="compound">Using Slash Commands and Interactions</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#interaction-create">https://discord.com/developers/docs/topics/gateway-events#interaction-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1interaction__create__t" kindref="compound">interaction_create_t</ref>&amp;, and returns void.</para>
</simplesect>
<simplesect kind="note"><para>There are dedicated events to handle slashcommands (See <ref refid="classdpp_1_1cluster_1a540047f8a4795e12c5468ce91ee121b6" kindref="member">dpp::cluster::on_slashcommand</ref>), user context menus (See <ref refid="classdpp_1_1cluster_1a7798d46a55b89e79d7674430f76f1baa" kindref="member">dpp::cluster::on_user_context_menu</ref>) and message context menus (See <ref refid="classdpp_1_1cluster_1a7ac8efe14c2889c76b35df7f41f5a460" kindref="member">dpp::cluster::on_message_context_menu</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="488" column="16" bodyfile="include/dpp/cluster.h" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a540047f8a4795e12c5468ce91ee121b6" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1slashcommand__t" kindref="compound">slashcommand_t</ref> &gt;</type>
        <definition>event_router_t&lt;slashcommand_t&gt; dpp::cluster::on_slashcommand</definition>
        <argsstring></argsstring>
        <name>on_slashcommand</name>
        <briefdescription>
<para>Called when a slash command is issued. Only <ref refid="namespacedpp_1a3af415bd74cead2c665a6a507ce843fba09b58fe33a8d8a5587a8e3676371151a" kindref="member">dpp::ctxm_chat_input</ref> types of interaction are routed to this event. For an example of this in action please see <ref refid="slashcommands" kindref="compound">Using Slash Commands and Interactions</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1slashcommand__t" kindref="compound">slashcommand_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="498" column="16" bodyfile="include/dpp/cluster.h" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1af9409347218d270da0aeb22b0a27c38d" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1button__click__t" kindref="compound">button_click_t</ref> &gt;</type>
        <definition>event_router_t&lt;button_click_t&gt; dpp::cluster::on_button_click</definition>
        <argsstring></argsstring>
        <name>on_button_click</name>
        <briefdescription>
<para>Called when a button is clicked attached to a message. Button clicks are triggered by discord when buttons are clicked which you have associated with a message using <ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1button__click__t" kindref="compound">button_click_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="508" column="16" bodyfile="include/dpp/cluster.h" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a101e35b584bd6979581f5df890215591" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1autocomplete__t" kindref="compound">autocomplete_t</ref> &gt;</type>
        <definition>event_router_t&lt;autocomplete_t&gt; dpp::cluster::on_autocomplete</definition>
        <argsstring></argsstring>
        <name>on_autocomplete</name>
        <briefdescription>
<para>Called when an auto completed field needs suggestions to present to the user This is triggered by discord when option choices have auto completion enabled which you have associated with a <ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1autocomplete__t" kindref="compound">autocomplete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="518" column="16" bodyfile="include/dpp/cluster.h" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a2b040265e217148f7dd9dbf36630e763" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1select__click__t" kindref="compound">select_click_t</ref> &gt;</type>
        <definition>event_router_t&lt;select_click_t&gt; dpp::cluster::on_select_click</definition>
        <argsstring></argsstring>
        <name>on_select_click</name>
        <briefdescription>
<para>Called when a select menu is clicked attached to a message. Select menu clicks are triggered by discord when select menus are clicked which you have associated with a message using <ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1select__click__t" kindref="compound">select_click_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="529" column="16" bodyfile="include/dpp/cluster.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a7ac8efe14c2889c76b35df7f41f5a460" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1message__context__menu__t" kindref="compound">message_context_menu_t</ref> &gt;</type>
        <definition>event_router_t&lt;message_context_menu_t&gt; dpp::cluster::on_message_context_menu</definition>
        <argsstring></argsstring>
        <name>on_message_context_menu</name>
        <briefdescription>
<para>Called when a user right-clicks or long-presses on a message, where a slash command is bound to the <ref refid="namespacedpp_1a3af415bd74cead2c665a6a507ce843fbae5b2d37ae0e714e18602cbc2475ce88a" kindref="member">dpp::ctxm_message</ref> command type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1message__context__menu__t" kindref="compound">message_context_menu_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="538" column="16" bodyfile="include/dpp/cluster.h" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a7798d46a55b89e79d7674430f76f1baa" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1user__context__menu__t" kindref="compound">user_context_menu_t</ref> &gt;</type>
        <definition>event_router_t&lt;user_context_menu_t&gt; dpp::cluster::on_user_context_menu</definition>
        <argsstring></argsstring>
        <name>on_user_context_menu</name>
        <briefdescription>
<para>Called when a user right-clicks or long-presses on a user, where a slash command is bound to the <ref refid="namespacedpp_1a3af415bd74cead2c665a6a507ce843fbaea38e9fafe712b690fe8db15c0eac659" kindref="member">dpp::ctxm_user</ref> command type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1user__context__menu__t" kindref="compound">user_context_menu_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="547" column="16" bodyfile="include/dpp/cluster.h" bodystart="547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ac8f54e4a67895d916c58bd277e486a64" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1form__submit__t" kindref="compound">form_submit_t</ref> &gt;</type>
        <definition>event_router_t&lt;form_submit_t&gt; dpp::cluster::on_form_submit</definition>
        <argsstring></argsstring>
        <name>on_form_submit</name>
        <briefdescription>
<para>Called when a modal dialog is submitted. Form submits are triggered by discord when modal dialogs are submitted which you have associated with a slash command using <ref refid="structdpp_1_1interaction__modal__response" kindref="compound">dpp::interaction_modal_response</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1form__submit__t" kindref="compound">form_submit_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="557" column="16" bodyfile="include/dpp/cluster.h" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a951fe0695fd7cb33e844ebe45f08f96a" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__delete__t" kindref="compound">guild_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_delete_t&gt; dpp::cluster::on_guild_delete</definition>
        <argsstring></argsstring>
        <name>on_guild_delete</name>
        <briefdescription>
<para>Called when a guild is deleted. A guild can be deleted via the bot being kicked, the bot leaving the guild explicitly with <ref refid="classdpp_1_1cluster_1a9b0fccd64f8d21340fe20642d9fdb1e9" kindref="member">dpp::cluster::guild_delete</ref>, or via the guild being unavailable due to an outage. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-delete">https://discord.com/developers/docs/topics/gateway-events#guild-delete</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__delete__t" kindref="compound">guild_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="570" column="16" bodyfile="include/dpp/cluster.h" bodystart="570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1adcf4188adae294f4cb41c615e6329e3f" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1channel__delete__t" kindref="compound">channel_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;channel_delete_t&gt; dpp::cluster::on_channel_delete</definition>
        <argsstring></argsstring>
        <name>on_channel_delete</name>
        <briefdescription>
<para>Called when a channel is deleted from a guild. The channel will still be temporarily available in the cache. Pointers to the channel should not be retained long-term as they will be deleted by the garbage collector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#channel-delete">https://discord.com/developers/docs/topics/gateway-events#channel-delete</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1channel__delete__t" kindref="compound">channel_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="583" column="16" bodyfile="include/dpp/cluster.h" bodystart="583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a5e299f9ff6447aba04af39abcdc085b4" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1channel__update__t" kindref="compound">channel_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;channel_update_t&gt; dpp::cluster::on_channel_update</definition>
        <argsstring></argsstring>
        <name>on_channel_update</name>
        <briefdescription>
<para>Called when a channel is edited on a guild. The new channel details have already been applied to the guild when you receive this event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#channel-update">https://discord.com/developers/docs/topics/gateway-events#channel-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1channel__update__t" kindref="compound">channel_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="595" column="16" bodyfile="include/dpp/cluster.h" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1aa006f45139c81be7705a4dc67e4da242" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1ready__t" kindref="compound">ready_t</ref> &gt;</type>
        <definition>event_router_t&lt;ready_t&gt; dpp::cluster::on_ready</definition>
        <argsstring></argsstring>
        <name>on_ready</name>
        <briefdescription>
<para>Called when a shard is connected and ready. A set of <ref refid="classdpp_1_1cluster_1a60711e8b9aec2f10c6941f306ea4b041" kindref="member">cluster::on_guild_create</ref> events will follow this event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#ready">https://discord.com/developers/docs/topics/gateway-events#ready</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1ready__t" kindref="compound">ready_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="606" column="16" bodyfile="include/dpp/cluster.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a62128522527265f6844c4adf28989936" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1message__delete__t" kindref="compound">message_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;message_delete_t&gt; dpp::cluster::on_message_delete</definition>
        <argsstring></argsstring>
        <name>on_message_delete</name>
        <briefdescription>
<para>Called when a message is deleted. The message has already been deleted from Discord when you receive this event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#message-delete">https://discord.com/developers/docs/topics/gateway-events#message-delete</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1message__delete__t" kindref="compound">message_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="618" column="16" bodyfile="include/dpp/cluster.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a2c9c2b72ba158f44b440cc9b213cf2cf" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__member__remove__t" kindref="compound">guild_member_remove_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_member_remove_t&gt; dpp::cluster::on_guild_member_remove</definition>
        <argsstring></argsstring>
        <name>on_guild_member_remove</name>
        <briefdescription>
<para>Called when a user leaves a guild (either through being kicked, or choosing to leave) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-member-remove">https://discord.com/developers/docs/topics/gateway-events#guild-member-remove</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__member__remove__t" kindref="compound">guild_member_remove_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="628" column="16" bodyfile="include/dpp/cluster.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a9513c83c7b8c0ea8da1ad757329f5666" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1resumed__t" kindref="compound">resumed_t</ref> &gt;</type>
        <definition>event_router_t&lt;resumed_t&gt; dpp::cluster::on_resumed</definition>
        <argsstring></argsstring>
        <name>on_resumed</name>
        <briefdescription>
<para>Called when a connection to a shard successfully resumes. A resumed session does not need to re-synchronise guilds, members, etc. This is generally non-fatal and informational only. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#resumed">https://discord.com/developers/docs/topics/gateway-events#resumed</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1resumed__t" kindref="compound">resumed_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="640" column="16" bodyfile="include/dpp/cluster.h" bodystart="640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a414e7ea80bc310b87de98ec0290fe01a" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__role__create__t" kindref="compound">guild_role_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_role_create_t&gt; dpp::cluster::on_guild_role_create</definition>
        <argsstring></argsstring>
        <name>on_guild_role_create</name>
        <briefdescription>
<para>Called when a new role is created on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-role-create">https://discord.com/developers/docs/topics/gateway-events#guild-role-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__role__create__t" kindref="compound">guild_role_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="650" column="16" bodyfile="include/dpp/cluster.h" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a8ab9838915bb37a34b08c2300c3b99f0" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1typing__start__t" kindref="compound">typing_start_t</ref> &gt;</type>
        <definition>event_router_t&lt;typing_start_t&gt; dpp::cluster::on_typing_start</definition>
        <argsstring></argsstring>
        <name>on_typing_start</name>
        <briefdescription>
<para>Called when a user is typing on a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#typing-start">https://discord.com/developers/docs/topics/gateway-events#typing-start</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1typing__start__t" kindref="compound">typing_start_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="660" column="16" bodyfile="include/dpp/cluster.h" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a815256513aa6b26822dc943875486db7" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1message__reaction__add__t" kindref="compound">message_reaction_add_t</ref> &gt;</type>
        <definition>event_router_t&lt;message_reaction_add_t&gt; dpp::cluster::on_message_reaction_add</definition>
        <argsstring></argsstring>
        <name>on_message_reaction_add</name>
        <briefdescription>
<para>Called when a new reaction is added to a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#message-reaction-add">https://discord.com/developers/docs/topics/gateway-events#message-reaction-add</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1message__reaction__add__t" kindref="compound">message_reaction_add_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="670" column="16" bodyfile="include/dpp/cluster.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a4b9985f3b1b3a0c2dc73a1d7e1cc4cea" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__members__chunk__t" kindref="compound">guild_members_chunk_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_members_chunk_t&gt; dpp::cluster::on_guild_members_chunk</definition>
        <argsstring></argsstring>
        <name>on_guild_members_chunk</name>
        <briefdescription>
<para>Called when a set of members is received for a guild. D++ will request these for all new guilds if needed, after the <ref refid="classdpp_1_1cluster_1a60711e8b9aec2f10c6941f306ea4b041" kindref="member">cluster::on_guild_create</ref> events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-members-chunk">https://discord.com/developers/docs/topics/gateway-events#guild-members-chunk</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__members__chunk__t" kindref="compound">guild_members_chunk_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="682" column="16" bodyfile="include/dpp/cluster.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a952873511790b7f4c2fc64cc9ee47055" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1message__reaction__remove__t" kindref="compound">message_reaction_remove_t</ref> &gt;</type>
        <definition>event_router_t&lt;message_reaction_remove_t&gt; dpp::cluster::on_message_reaction_remove</definition>
        <argsstring></argsstring>
        <name>on_message_reaction_remove</name>
        <briefdescription>
<para>Called when a single reaction is removed from a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#message-reaction-remove">https://discord.com/developers/docs/topics/gateway-events#message-reaction-remove</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1message__reaction__remove__t" kindref="compound">message_reaction_remove_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="692" column="16" bodyfile="include/dpp/cluster.h" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a60711e8b9aec2f10c6941f306ea4b041" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__create__t" kindref="compound">guild_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_create_t&gt; dpp::cluster::on_guild_create</definition>
        <argsstring></argsstring>
        <name>on_guild_create</name>
        <briefdescription>
<para>Called when a new guild is created. D++ will request members for the guild for its cache using guild_members_chunk. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer in this event will become invalid after the event ends. You should make a copy of any data you wish to preserve beyond this.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-create">https://discord.com/developers/docs/topics/gateway-events#guild-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__create__t" kindref="compound">guild_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="706" column="16" bodyfile="include/dpp/cluster.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a486fb3aa72ebe2784c514af965681516" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1channel__create__t" kindref="compound">channel_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;channel_create_t&gt; dpp::cluster::on_channel_create</definition>
        <argsstring></argsstring>
        <name>on_channel_create</name>
        <briefdescription>
<para>Called when a new channel is created on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled channel caching, the pointer in this event will become invalid after the event ends. You should make a copy of any data you wish to preserve beyond this.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#channel-create">https://discord.com/developers/docs/topics/gateway-events#channel-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1channel__create__t" kindref="compound">channel_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="719" column="16" bodyfile="include/dpp/cluster.h" bodystart="719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1af66effcc6ea9bbb1c1f489a98f332cb0" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1message__reaction__remove__emoji__t" kindref="compound">message_reaction_remove_emoji_t</ref> &gt;</type>
        <definition>event_router_t&lt;message_reaction_remove_emoji_t&gt; dpp::cluster::on_message_reaction_remove_emoji</definition>
        <argsstring></argsstring>
        <name>on_message_reaction_remove_emoji</name>
        <briefdescription>
<para>Called when all reactions for a particular emoji are removed from a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#message-reaction-remove-emoji">https://discord.com/developers/docs/topics/gateway-events#message-reaction-remove-emoji</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1message__reaction__remove__emoji__t" kindref="compound">message_reaction_remove_emoji_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="729" column="16" bodyfile="include/dpp/cluster.h" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a9f1c5e2c3426315e5460bdb93d188ef8" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1message__delete__bulk__t" kindref="compound">message_delete_bulk_t</ref> &gt;</type>
        <definition>event_router_t&lt;message_delete_bulk_t&gt; dpp::cluster::on_message_delete_bulk</definition>
        <argsstring></argsstring>
        <name>on_message_delete_bulk</name>
        <briefdescription>
<para>Called when multiple messages are deleted from a channel or DM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#message-delete-bulk">https://discord.com/developers/docs/topics/gateway-events#message-delete-bulk</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1message__delete__bulk__t" kindref="compound">message_delete_bulk_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="739" column="16" bodyfile="include/dpp/cluster.h" bodystart="739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a2bbda872563869ac5f7635ac92455139" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__role__update__t" kindref="compound">guild_role_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_role_update_t&gt; dpp::cluster::on_guild_role_update</definition>
        <argsstring></argsstring>
        <name>on_guild_role_update</name>
        <briefdescription>
<para>Called when an existing role is updated on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-role-update">https://discord.com/developers/docs/topics/gateway-events#guild-role-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__role__update__t" kindref="compound">guild_role_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="751" column="16" bodyfile="include/dpp/cluster.h" bodystart="751" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a09f109e81abcecc3d2d5b4b82d025167" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__role__delete__t" kindref="compound">guild_role_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_role_delete_t&gt; dpp::cluster::on_guild_role_delete</definition>
        <argsstring></argsstring>
        <name>on_guild_role_delete</name>
        <briefdescription>
<para>Called when a role is deleted in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-role-delete">https://discord.com/developers/docs/topics/gateway-events#guild-role-delete</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__role__delete__t" kindref="compound">guild_role_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="763" column="16" bodyfile="include/dpp/cluster.h" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a730da835772cd7b6e638cd359e86209d" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1channel__pins__update__t" kindref="compound">channel_pins_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;channel_pins_update_t&gt; dpp::cluster::on_channel_pins_update</definition>
        <argsstring></argsstring>
        <name>on_channel_pins_update</name>
        <briefdescription>
<para>Called when a message is pinned. Note that the pinned message is not returned to this event, just the timestamp of the last pinned message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#channel-pins-update">https://discord.com/developers/docs/topics/gateway-events#channel-pins-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1channel__pins__update__t" kindref="compound">channel_pins_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="775" column="16" bodyfile="include/dpp/cluster.h" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ae305ae4ce622f6120692aa07d5ae9da9" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1message__reaction__remove__all__t" kindref="compound">message_reaction_remove_all_t</ref> &gt;</type>
        <definition>event_router_t&lt;message_reaction_remove_all_t&gt; dpp::cluster::on_message_reaction_remove_all</definition>
        <argsstring></argsstring>
        <name>on_message_reaction_remove_all</name>
        <briefdescription>
<para>Called when all reactions are removed from a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#message-reaction-remove-all">https://discord.com/developers/docs/topics/gateway-events#message-reaction-remove-all</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1message__reaction__remove__all__t" kindref="compound">message_reaction_remove_all_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="785" column="16" bodyfile="include/dpp/cluster.h" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a1b1388af7672f9eb4ad12de0419204fd" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1voice__server__update__t" kindref="compound">voice_server_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;voice_server_update_t&gt; dpp::cluster::on_voice_server_update</definition>
        <argsstring></argsstring>
        <name>on_voice_server_update</name>
        <briefdescription>
<para>Called when we are told which voice server we can use. This will be sent either when we establish a new voice channel connection, or as discord rearrange their infrastructure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1voice__server__update__t" kindref="compound">voice_server_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="798" column="16" bodyfile="include/dpp/cluster.h" bodystart="798" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ac488322b8dddd93bdedbd9a402f9ed48" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__emojis__update__t" kindref="compound">guild_emojis_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_emojis_update_t&gt; dpp::cluster::on_guild_emojis_update</definition>
        <argsstring></argsstring>
        <name>on_guild_emojis_update</name>
        <briefdescription>
<para>Called when new emojis are added to a guild. The complete set of emojis is sent every time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-emojis-update">https://discord.com/developers/docs/topics/gateway-events#guild-emojis-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__emojis__update__t" kindref="compound">guild_emojis_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="811" column="16" bodyfile="include/dpp/cluster.h" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a30c43c83869e2323a22ce6cce800d86b" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__stickers__update__t" kindref="compound">guild_stickers_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_stickers_update_t&gt; dpp::cluster::on_guild_stickers_update</definition>
        <argsstring></argsstring>
        <name>on_guild_stickers_update</name>
        <briefdescription>
<para>Called when new stickers are added to a guild. The complete set of stickers is sent every time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-stickers-update">https://discord.com/developers/docs/topics/gateway-events#guild-stickers-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__stickers__update__t" kindref="compound">guild_stickers_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="824" column="16" bodyfile="include/dpp/cluster.h" bodystart="824" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a8d818aab0b0355256b5ade9fb221cade" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1presence__update__t" kindref="compound">presence_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;presence_update_t&gt; dpp::cluster::on_presence_update</definition>
        <argsstring></argsstring>
        <name>on_presence_update</name>
        <briefdescription>
<para>Called when a user&apos;s presence is updated. To receive these you will need the GUILD_PRESENCES privileged intent. You will receive many of these, very often, and receiving them will significantly increase your bot&apos;s CPU usage. If you don&apos;t need them it is recommended to not ask for them. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#presence-update">https://discord.com/developers/docs/topics/gateway-events#presence-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1presence__update__t" kindref="compound">presence_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="838" column="16" bodyfile="include/dpp/cluster.h" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a45a46efdbb7a7b952bb113f8400ea110" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1webhooks__update__t" kindref="compound">webhooks_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;webhooks_update_t&gt; dpp::cluster::on_webhooks_update</definition>
        <argsstring></argsstring>
        <name>on_webhooks_update</name>
        <briefdescription>
<para>Called when the webhooks for a guild are updated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#webhooks-update">https://discord.com/developers/docs/topics/gateway-events#webhooks-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1webhooks__update__t" kindref="compound">webhooks_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="848" column="16" bodyfile="include/dpp/cluster.h" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a9990d03329fdf86d06d3c02dd7811abd" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1automod__rule__create__t" kindref="compound">automod_rule_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;automod_rule_create_t&gt; dpp::cluster::on_automod_rule_create</definition>
        <argsstring></argsstring>
        <name>on_automod_rule_create</name>
        <briefdescription>
<para>Called when a new automod rule is created. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#auto-moderation-rule-create">https://discord.com/developers/docs/topics/gateway-events#auto-moderation-rule-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1automod__rule__create__t" kindref="compound">automod_rule_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="857" column="16" bodyfile="include/dpp/cluster.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a341edb94f9eab763c6375f94a4fd22f7" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1automod__rule__update__t" kindref="compound">automod_rule_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;automod_rule_update_t&gt; dpp::cluster::on_automod_rule_update</definition>
        <argsstring></argsstring>
        <name>on_automod_rule_update</name>
        <briefdescription>
<para>Called when an automod rule is updated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#auto-moderation-rule-update">https://discord.com/developers/docs/topics/gateway-events#auto-moderation-rule-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1automod__rule__update__t" kindref="compound">automod_rule_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="867" column="16" bodyfile="include/dpp/cluster.h" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a9fb807aef20371e52faee77b90f613b7" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1automod__rule__delete__t" kindref="compound">automod_rule_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;automod_rule_delete_t&gt; dpp::cluster::on_automod_rule_delete</definition>
        <argsstring></argsstring>
        <name>on_automod_rule_delete</name>
        <briefdescription>
<para>Called when an automod rule is deleted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#auto-moderation-rule-delete">https://discord.com/developers/docs/topics/gateway-events#auto-moderation-rule-delete</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1automod__rule__delete__t" kindref="compound">automod_rule_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="876" column="16" bodyfile="include/dpp/cluster.h" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a7928124576bd703870f2e5ffd0ac54ca" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1automod__rule__execute__t" kindref="compound">automod_rule_execute_t</ref> &gt;</type>
        <definition>event_router_t&lt;automod_rule_execute_t&gt; dpp::cluster::on_automod_rule_execute</definition>
        <argsstring></argsstring>
        <name>on_automod_rule_execute</name>
        <briefdescription>
<para>Called when an automod rule is triggered/executed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#auto-moderation-action-execution">https://discord.com/developers/docs/topics/gateway-events#auto-moderation-action-execution</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1automod__rule__execute__t" kindref="compound">automod_rule_execute_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="885" column="16" bodyfile="include/dpp/cluster.h" bodystart="885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a569b9b46ab3783060e766e3fec8ee988" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__member__add__t" kindref="compound">guild_member_add_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_member_add_t&gt; dpp::cluster::on_guild_member_add</definition>
        <argsstring></argsstring>
        <name>on_guild_member_add</name>
        <briefdescription>
<para>Called when a new member joins a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-member-add">https://discord.com/developers/docs/topics/gateway-events#guild-member-add</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__member__add__t" kindref="compound">guild_member_add_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="896" column="16" bodyfile="include/dpp/cluster.h" bodystart="896" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a94f440b6655ecbb126b336449cc5fedf" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1invite__delete__t" kindref="compound">invite_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;invite_delete_t&gt; dpp::cluster::on_invite_delete</definition>
        <argsstring></argsstring>
        <name>on_invite_delete</name>
        <briefdescription>
<para>Called when an invite is deleted from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#invite-delete">https://discord.com/developers/docs/topics/gateway-events#invite-delete</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1invite__delete__t" kindref="compound">invite_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="906" column="16" bodyfile="include/dpp/cluster.h" bodystart="906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1adc23584464efef5b50e2abdbe2624268" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__update__t" kindref="compound">guild_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_update_t&gt; dpp::cluster::on_guild_update</definition>
        <argsstring></argsstring>
        <name>on_guild_update</name>
        <briefdescription>
<para>Called when details of a guild are updated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer in this event will become invalid after the event ends. You should make a copy of any data you wish to preserve beyond this. If the guild cache is disabled, only changed elements in the updated guild object will be set. all other values will be empty or defaults.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-update">https://discord.com/developers/docs/topics/gateway-events#guild-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__update__t" kindref="compound">guild_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="920" column="16" bodyfile="include/dpp/cluster.h" bodystart="920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a4b5b51f674af02f3267f9b5e2289384d" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__integrations__update__t" kindref="compound">guild_integrations_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_integrations_update_t&gt; dpp::cluster::on_guild_integrations_update</definition>
        <argsstring></argsstring>
        <name>on_guild_integrations_update</name>
        <briefdescription>
<para>Called when an integration is updated for a guild. This returns the complete list. An integration is a connection to a guild of a user&apos;s associated accounts, e.g. youtube or twitch, for automatic assignment of roles etc. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-integrations-update">https://discord.com/developers/docs/topics/gateway-events#guild-integrations-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__integrations__update__t" kindref="compound">guild_integrations_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="935" column="16" bodyfile="include/dpp/cluster.h" bodystart="935" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1aec757095f2c6cde6289b54ca34aef590" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__member__update__t" kindref="compound">guild_member_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_member_update_t&gt; dpp::cluster::on_guild_member_update</definition>
        <argsstring></argsstring>
        <name>on_guild_member_update</name>
        <briefdescription>
<para>Called when details of a guild member (e.g. their roles or nickname) are updated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-member-update">https://discord.com/developers/docs/topics/gateway-events#guild-member-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__member__update__t" kindref="compound">guild_member_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="947" column="16" bodyfile="include/dpp/cluster.h" bodystart="947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a827a4da0154d6d94dc85da5f2e87f40c" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1invite__create__t" kindref="compound">invite_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;invite_create_t&gt; dpp::cluster::on_invite_create</definition>
        <argsstring></argsstring>
        <name>on_invite_create</name>
        <briefdescription>
<para>Called when a new invite is created for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#invite-create">https://discord.com/developers/docs/topics/gateway-events#invite-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1invite__create__t" kindref="compound">invite_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="959" column="16" bodyfile="include/dpp/cluster.h" bodystart="959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a9a5f587275c656d4f76b52161bba5ec9" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1message__update__t" kindref="compound">message_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;message_update_t&gt; dpp::cluster::on_message_update</definition>
        <argsstring></argsstring>
        <name>on_message_update</name>
        <briefdescription>
<para>Called when a message is updated (edited). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#message-update">https://discord.com/developers/docs/topics/gateway-events#message-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1message__update__t" kindref="compound">message_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="969" column="16" bodyfile="include/dpp/cluster.h" bodystart="969" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a832e978df105033f7d3ea8ca0d0573cb" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1user__update__t" kindref="compound">user_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;user_update_t&gt; dpp::cluster::on_user_update</definition>
        <argsstring></argsstring>
        <name>on_user_update</name>
        <briefdescription>
<para>Called when a user is updated. This is separate to <ref refid="classdpp_1_1cluster_1aec757095f2c6cde6289b54ca34aef590" kindref="member">cluster::on_guild_member_update</ref> and includes things such as an avatar change, username change, discriminator change or change in subscription status for nitro. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#user-update">https://discord.com/developers/docs/topics/gateway-events#user-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1user__update__t" kindref="compound">user_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="981" column="16" bodyfile="include/dpp/cluster.h" bodystart="981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a1a632b3c2c8d3ff3a47372ffa770acf5" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1message__create__t" kindref="compound">message_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;message_create_t&gt; dpp::cluster::on_message_create</definition>
        <argsstring></argsstring>
        <name>on_message_create</name>
        <briefdescription>
<para>Called when a new message arrives from discord. Note that D++ does not cache messages. If you want to cache these objects you should create something yourself within your bot. Caching of messages is not on the roadmap to be supported as it consumes excessive amounts of RAM. For an example for caching of messages, please see <ref refid="caching-messages" kindref="compound">Caching Messages</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#message-create">https://discord.com/developers/docs/topics/gateway-events#message-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1message__create__t" kindref="compound">message_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="995" column="16" bodyfile="include/dpp/cluster.h" bodystart="995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1aadcbe6998c78bb1e88c76adc8b1cf0dd" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__audit__log__entry__create__t" kindref="compound">guild_audit_log_entry_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_audit_log_entry_create_t&gt; dpp::cluster::on_guild_audit_log_entry_create</definition>
        <argsstring></argsstring>
        <name>on_guild_audit_log_entry_create</name>
        <briefdescription>
<para>Called when a guild audit log entry is created. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-audit-log-entry-create">https://discord.com/developers/docs/topics/gateway-events#guild-audit-log-entry-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__audit__log__entry__create__t" kindref="compound">guild_audit_log_entry_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1004" column="16" bodyfile="include/dpp/cluster.h" bodystart="1004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1adc62294deed1a73261ba43400f942380" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__ban__add__t" kindref="compound">guild_ban_add_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_ban_add_t&gt; dpp::cluster::on_guild_ban_add</definition>
        <argsstring></argsstring>
        <name>on_guild_ban_add</name>
        <briefdescription>
<para>Called when a ban is added to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-ban-add">https://discord.com/developers/docs/topics/gateway-events#guild-ban-add</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__ban__add__t" kindref="compound">guild_ban_add_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1015" column="16" bodyfile="include/dpp/cluster.h" bodystart="1015" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ae5f02344b6d8d4cc56ff45ecc0a7602b" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__ban__remove__t" kindref="compound">guild_ban_remove_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_ban_remove_t&gt; dpp::cluster::on_guild_ban_remove</definition>
        <argsstring></argsstring>
        <name>on_guild_ban_remove</name>
        <briefdescription>
<para>Called when a ban is removed from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-ban-remove">https://discord.com/developers/docs/topics/gateway-events#guild-ban-remove</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__ban__remove__t" kindref="compound">guild_ban_remove_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1027" column="16" bodyfile="include/dpp/cluster.h" bodystart="1027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ab6c7d069cb8dfc85a8709193df28c967" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1integration__create__t" kindref="compound">integration_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;integration_create_t&gt; dpp::cluster::on_integration_create</definition>
        <argsstring></argsstring>
        <name>on_integration_create</name>
        <briefdescription>
<para>Called when a new integration is attached to a guild by a user. An integration is a connection to a guild of a user&apos;s associated accounts, e.g. youtube or twitch, for automatic assignment of roles etc. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#integration-create">https://discord.com/developers/docs/topics/gateway-events#integration-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1integration__create__t" kindref="compound">integration_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1041" column="16" bodyfile="include/dpp/cluster.h" bodystart="1041" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1adfb0f58a46e4826be34a472af902df37" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1integration__update__t" kindref="compound">integration_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;integration_update_t&gt; dpp::cluster::on_integration_update</definition>
        <argsstring></argsstring>
        <name>on_integration_update</name>
        <briefdescription>
<para>Called when an integration is updated by a user. This returns details of just the single integration that has changed. An integration is a connection to a guild of a user&apos;s associated accounts, e.g. youtube or twitch, for automatic assignment of roles etc. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#integration-update">https://discord.com/developers/docs/topics/gateway-events#integration-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1integration__update__t" kindref="compound">integration_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1056" column="16" bodyfile="include/dpp/cluster.h" bodystart="1056" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a01164d68b98b1d36f35dc7c4407a4a5e" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1integration__delete__t" kindref="compound">integration_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;integration_delete_t&gt; dpp::cluster::on_integration_delete</definition>
        <argsstring></argsstring>
        <name>on_integration_delete</name>
        <briefdescription>
<para>Called when an integration is removed by a user. An integration is a connection to a guild of a user&apos;s associated accounts, e.g. youtube or twitch, for automatic assignment of roles etc. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#integration-delete">https://discord.com/developers/docs/topics/gateway-events#integration-delete</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1integration__delete__t" kindref="compound">integration_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1070" column="16" bodyfile="include/dpp/cluster.h" bodystart="1070" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ae3f2d6cbe1aa08646e2a336cee5fc4d8" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1thread__create__t" kindref="compound">thread_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;thread_create_t&gt; dpp::cluster::on_thread_create</definition>
        <argsstring></argsstring>
        <name>on_thread_create</name>
        <briefdescription>
<para>Called when a thread is created. Note that threads are not cached by D++, but a list of thread IDs is accessible in a guild object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#thread-create">https://discord.com/developers/docs/topics/gateway-events#thread-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1thread__create__t" kindref="compound">thread_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1083" column="16" bodyfile="include/dpp/cluster.h" bodystart="1083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ab0dc630ee245e508e520376ee24dfd70" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1thread__update__t" kindref="compound">thread_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;thread_update_t&gt; dpp::cluster::on_thread_update</definition>
        <argsstring></argsstring>
        <name>on_thread_update</name>
        <briefdescription>
<para>Called when a thread is updated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#thread-update">https://discord.com/developers/docs/topics/gateway-events#thread-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1thread__update__t" kindref="compound">thread_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1095" column="16" bodyfile="include/dpp/cluster.h" bodystart="1095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ac70d87fd2bb537704eb4b1fbfb8f4917" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1thread__delete__t" kindref="compound">thread_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;thread_delete_t&gt; dpp::cluster::on_thread_delete</definition>
        <argsstring></argsstring>
        <name>on_thread_delete</name>
        <briefdescription>
<para>Called when a thread is deleted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#thread-delete">https://discord.com/developers/docs/topics/gateway-events#thread-delete</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1thread__delete__t" kindref="compound">thread_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1107" column="16" bodyfile="include/dpp/cluster.h" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a8b3ebda7442ce09c4e02f1afe3147d0f" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1thread__list__sync__t" kindref="compound">thread_list_sync_t</ref> &gt;</type>
        <definition>event_router_t&lt;thread_list_sync_t&gt; dpp::cluster::on_thread_list_sync</definition>
        <argsstring></argsstring>
        <name>on_thread_list_sync</name>
        <briefdescription>
<para>Called when thread list is synced (upon gaining access to a channel). Note that threads are not cached by D++, but a list of thread IDs is accessible in a guild object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#thread-list-sync">https://discord.com/developers/docs/topics/gateway-events#thread-list-sync</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1thread__list__sync__t" kindref="compound">thread_list_sync_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1120" column="16" bodyfile="include/dpp/cluster.h" bodystart="1120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a24a275e75860e6f8e5cd1eeda30d273b" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1thread__member__update__t" kindref="compound">thread_member_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;thread_member_update_t&gt; dpp::cluster::on_thread_member_update</definition>
        <argsstring></argsstring>
        <name>on_thread_member_update</name>
        <briefdescription>
<para>Called when current user&apos;s thread member object is updated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#thread-member-update">https://discord.com/developers/docs/topics/gateway-events#thread-member-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1thread__member__update__t" kindref="compound">thread_member_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1132" column="16" bodyfile="include/dpp/cluster.h" bodystart="1132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1aff3be9ba4b94fecb564e9843f82a9486" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1thread__members__update__t" kindref="compound">thread_members_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;thread_members_update_t&gt; dpp::cluster::on_thread_members_update</definition>
        <argsstring></argsstring>
        <name>on_thread_members_update</name>
        <briefdescription>
<para>Called when a thread&apos;s member list is updated (without GUILD_MEMBERS intent, is only called for current user) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#thread-members-update">https://discord.com/developers/docs/topics/gateway-events#thread-members-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1thread__members__update__t" kindref="compound">thread_members_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1144" column="16" bodyfile="include/dpp/cluster.h" bodystart="1144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a03466c9bfef2755e7b21080262c55a31" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__scheduled__event__create__t" kindref="compound">guild_scheduled_event_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_scheduled_event_create_t&gt; dpp::cluster::on_guild_scheduled_event_create</definition>
        <argsstring></argsstring>
        <name>on_guild_scheduled_event_create</name>
        <briefdescription>
<para>Called when a new scheduled event is created. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-create">https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__scheduled__event__create__t" kindref="compound">guild_scheduled_event_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1156" column="16" bodyfile="include/dpp/cluster.h" bodystart="1156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a791e9056b3a582028acd2428ef927f54" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__scheduled__event__update__t" kindref="compound">guild_scheduled_event_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_scheduled_event_update_t&gt; dpp::cluster::on_guild_scheduled_event_update</definition>
        <argsstring></argsstring>
        <name>on_guild_scheduled_event_update</name>
        <briefdescription>
<para>Called when a new scheduled event is updated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-update">https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__scheduled__event__update__t" kindref="compound">guild_scheduled_event_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1168" column="16" bodyfile="include/dpp/cluster.h" bodystart="1168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a34d7f734fcd46ca75540f2415f87a120" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__scheduled__event__delete__t" kindref="compound">guild_scheduled_event_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_scheduled_event_delete_t&gt; dpp::cluster::on_guild_scheduled_event_delete</definition>
        <argsstring></argsstring>
        <name>on_guild_scheduled_event_delete</name>
        <briefdescription>
<para>Called when a new scheduled event is deleted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-delete">https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-delete</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__scheduled__event__delete__t" kindref="compound">guild_scheduled_event_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1180" column="16" bodyfile="include/dpp/cluster.h" bodystart="1180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ab55ea1d5f856ada2e80b024d8fc24385" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__scheduled__event__user__add__t" kindref="compound">guild_scheduled_event_user_add_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_scheduled_event_user_add_t&gt; dpp::cluster::on_guild_scheduled_event_user_add</definition>
        <argsstring></argsstring>
        <name>on_guild_scheduled_event_user_add</name>
        <briefdescription>
<para>Called when a user is added to a scheduled event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-user-add">https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-user-add</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__scheduled__event__user__add__t" kindref="compound">guild_scheduled_event_user_add_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1192" column="16" bodyfile="include/dpp/cluster.h" bodystart="1192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a44af186f16be598e2c00b33c820ae408" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1guild__scheduled__event__user__remove__t" kindref="compound">guild_scheduled_event_user_remove_t</ref> &gt;</type>
        <definition>event_router_t&lt;guild_scheduled_event_user_remove_t&gt; dpp::cluster::on_guild_scheduled_event_user_remove</definition>
        <argsstring></argsstring>
        <name>on_guild_scheduled_event_user_remove</name>
        <briefdescription>
<para>Called when a user is removed from a scheduled event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-user-remove">https://discord.com/developers/docs/topics/gateway-events#guild-scheduled-event-user-remove</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1guild__scheduled__event__user__remove__t" kindref="compound">guild_scheduled_event_user_remove_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1204" column="16" bodyfile="include/dpp/cluster.h" bodystart="1204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a4b702b26b73692e0aab0743f4ed07ef9" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1voice__buffer__send__t" kindref="compound">voice_buffer_send_t</ref> &gt;</type>
        <definition>event_router_t&lt;voice_buffer_send_t&gt; dpp::cluster::on_voice_buffer_send</definition>
        <argsstring></argsstring>
        <name>on_voice_buffer_send</name>
        <briefdescription>
<para>Called when packets are sent from the voice buffer. The voice buffer contains packets that are already encoded with Opus and encrypted with Sodium, and merged into packets by the repacketizer, which is done in the dpp::discord_voice_client::send_audio method. You should use the buffer size properties of <ref refid="structdpp_1_1voice__buffer__send__t" kindref="compound">dpp::voice_buffer_send_t</ref> to determine if you should fill the buffer with more content. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1voice__buffer__send__t" kindref="compound">voice_buffer_send_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1220" column="16" bodyfile="include/dpp/cluster.h" bodystart="1220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1aec3fff428675781140071d95f06f1694" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1voice__user__talking__t" kindref="compound">voice_user_talking_t</ref> &gt;</type>
        <definition>event_router_t&lt;voice_user_talking_t&gt; dpp::cluster::on_voice_user_talking</definition>
        <argsstring></argsstring>
        <name>on_voice_user_talking</name>
        <briefdescription>
<para>Called when a user is talking on a voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1voice__user__talking__t" kindref="compound">voice_user_talking_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1231" column="16" bodyfile="include/dpp/cluster.h" bodystart="1231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a8f2f865ac3492196a8167a319261ffb6" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1voice__ready__t" kindref="compound">voice_ready_t</ref> &gt;</type>
        <definition>event_router_t&lt;voice_ready_t&gt; dpp::cluster::on_voice_ready</definition>
        <argsstring></argsstring>
        <name>on_voice_ready</name>
        <briefdescription>
<para>Called when a voice channel is connected and ready to send audio. Note that this is not directly attached to the READY event of the websocket, as there is further connection that needs to be done before audio is ready to send. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1voice__ready__t" kindref="compound">voice_ready_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1244" column="16" bodyfile="include/dpp/cluster.h" bodystart="1244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a67227dd1f0d393d8a43c8b481c1fbbbe" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1voice__receive__t" kindref="compound">voice_receive_t</ref> &gt;</type>
        <definition>event_router_t&lt;voice_receive_t&gt; dpp::cluster::on_voice_receive</definition>
        <argsstring></argsstring>
        <name>on_voice_receive</name>
        <briefdescription>
<para>Called when new audio data is received. Each separate user&apos;s audio from the voice channel will arrive tagged with their user id in the event, if a user can be attributed to the received audio. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Receiving audio for bots is not officially supported by discord.</para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1voice__receive__t" kindref="compound">voice_receive_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1257" column="16" bodyfile="include/dpp/cluster.h" bodystart="1257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1aece6405e1cde23b7dcf3a9043e477f91" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1voice__receive__t" kindref="compound">voice_receive_t</ref> &gt;</type>
        <definition>event_router_t&lt;voice_receive_t&gt; dpp::cluster::on_voice_receive_combined</definition>
        <argsstring></argsstring>
        <name>on_voice_receive_combined</name>
        <briefdescription>
<para>Called when new audio data is received, combined and mixed for all speaking users. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Receiving audio for bots is not officially supported by discord.</para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1voice__receive__t" kindref="compound">voice_receive_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1267" column="16" bodyfile="include/dpp/cluster.h" bodystart="1267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1adaad9d9e5d575b9d68eea94f5fcf0245" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1voice__track__marker__t" kindref="compound">voice_track_marker_t</ref> &gt;</type>
        <definition>event_router_t&lt;voice_track_marker_t&gt; dpp::cluster::on_voice_track_marker</definition>
        <argsstring></argsstring>
        <name>on_voice_track_marker</name>
        <briefdescription>
<para>Called when sending of audio passes over a track marker. Track markers are arbitrarily placed &quot;bookmarks&quot; in the audio buffer, placed by the bot developer. Each track marker can have a string value associated with it which is specified in <ref refid="classdpp_1_1discord__voice__client_1afe1408c1ad305aebedc7e99ba2128aa8" kindref="member">dpp::discord_voice_client::insert_marker</ref> and returned to this event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1voice__track__marker__t" kindref="compound">voice_track_marker_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1279" column="16" bodyfile="include/dpp/cluster.h" bodystart="1279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a420f1cfb65bb234cc7f616b35420cad1" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1stage__instance__create__t" kindref="compound">stage_instance_create_t</ref> &gt;</type>
        <definition>event_router_t&lt;stage_instance_create_t&gt; dpp::cluster::on_stage_instance_create</definition>
        <argsstring></argsstring>
        <name>on_stage_instance_create</name>
        <briefdescription>
<para>Called when a new stage instance is created on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#stage-instance-create">https://discord.com/developers/docs/topics/gateway-events#stage-instance-create</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1stage__instance__create__t" kindref="compound">stage_instance_create_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1291" column="16" bodyfile="include/dpp/cluster.h" bodystart="1291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a446a90c6c006fb9da1e30af7f5d81a89" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1stage__instance__update__t" kindref="compound">stage_instance_update_t</ref> &gt;</type>
        <definition>event_router_t&lt;stage_instance_update_t&gt; dpp::cluster::on_stage_instance_update</definition>
        <argsstring></argsstring>
        <name>on_stage_instance_update</name>
        <briefdescription>
<para>Called when a stage instance is updated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#stage-instance-update">https://discord.com/developers/docs/topics/gateway-events#stage-instance-update</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1stage__instance__update__t" kindref="compound">stage_instance_update_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1303" column="16" bodyfile="include/dpp/cluster.h" bodystart="1303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a609fe17e552b68a35c3c61423c9f3b58" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1event__router__t" kindref="compound">event_router_t</ref>&lt; <ref refid="structdpp_1_1stage__instance__delete__t" kindref="compound">stage_instance_delete_t</ref> &gt;</type>
        <definition>event_router_t&lt;stage_instance_delete_t&gt; dpp::cluster::on_stage_instance_delete</definition>
        <argsstring></argsstring>
        <name>on_stage_instance_delete</name>
        <briefdescription>
<para>Called when an existing stage instance is deleted from a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If the cache policy has disabled guild caching, the pointer to the guild in this event may be nullptr.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#stage-instance-delete">https://discord.com/developers/docs/topics/gateway-events#stage-instance-delete</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Use operator() to attach a lambda to this event, and the detach method to detach the listener using the returned ID. The function signature for this event takes a single <computeroutput>const</computeroutput> reference of type <ref refid="structdpp_1_1stage__instance__delete__t" kindref="compound">stage_instance_delete_t</ref>&amp;, and returns void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1315" column="16" bodyfile="include/dpp/cluster.h" bodystart="1315" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1cluster_1a5c4de3765be2073c0c39cc1c16481f83" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::tick_timers</definition>
        <argsstring>()</argsstring>
        <name>tick_timers</name>
        <briefdescription>
<para>Tick active timers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="141" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a39020c02b1a38a2abd412e651543d0b5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::timer_reschedule</definition>
        <argsstring>(timer_t *t)</argsstring>
        <name>timer_reschedule</name>
        <param>
          <type><ref refid="structdpp_1_1timer__t" kindref="compound">timer_t</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Reschedule a timer for its next tick. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer to reschedule </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="148" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1cluster_1a50b5bea83641d9542df5c0ec7fa5b43c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::cluster::cluster</definition>
        <argsstring>(const std::string &amp;token, uint32_t intents=i_default_intents, uint32_t shards=0, uint32_t cluster_id=0, uint32_t maxclusters=1, bool compressed=true, cache_policy_t policy=cache_policy::cpol_default, uint32_t request_threads=12, uint32_t request_threads_raw=1)</argsstring>
        <name>cluster</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>intents</declname>
          <defval><ref refid="namespacedpp_1a0042c0fc8164da4239b977d5be8e2ef5a561a52b3c6883808735c41891351c68f" kindref="member">i_default_intents</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shards</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cluster_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxclusters</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>compressed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="structdpp_1_1cache__policy__t" kindref="compound">cache_policy_t</ref></type>
          <declname>policy</declname>
          <defval><ref refid="namespacedpp_1_1cache__policy_1a851fe024df39295092817467cee45abe" kindref="member">cache_policy::cpol_default</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>request_threads</declname>
          <defval>12</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>request_threads_raw</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Constructor for creating a cluster. All but the token are optional. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The bot token to use for all HTTP commands and websocket connections </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intents</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitmask of dpd::intents values for all shards on this cluster. This is required to be sent for all bots with over 100 servers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shards</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of shards on this bot. If there are multiple clusters, then (shards / clusters) actual shards will run on this cluster. If you omit this value, the library will attempt to query the Discord API for the correct number of shards to start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cluster_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of this cluster, should be between 0 and MAXCLUSTERS-1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxclusters</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of clusters that are active, which may be on separate processes or even separate machines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to use compression for shards on this cluster. Saves a ton of bandwidth at the cost of some CPU </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>Set the caching policy for the cluster, either lazy (only cache users/members when they message the bot) or aggressive (request whole member lists on seeing new guilds too) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of threads to allocate for making HTTP requests to Discord. This defaults to 12. You can increase this at runtime via the object returned from <ref refid="classdpp_1_1cluster_1a77a590b138e5a832faba65cc8de449c4" kindref="member">get_rest()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_threads_raw</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of threads to allocate for making HTTP requests to sites outside of Discord. This defaults to 1. You can increase this at runtime via the object returned from <ref refid="classdpp_1_1cluster_1aaf4dd99670856e7efed749e53e96fa7c" kindref="member">get_raw_rest()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Thrown on windows, if WinSock fails to initialise, or on any other system if a <ref refid="classdpp_1_1request__queue" kindref="compound">dpp::request_queue</ref> fails to construct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6b0b523f89559b4ce204ca9ed9693d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::cluster::cluster</definition>
        <argsstring>(const cluster &amp;)=delete</argsstring>
        <name>cluster</name>
        <param>
          <type>const <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;</type>
        </param>
        <briefdescription>
<para><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> is non-copyable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2d957f52245734f6d44444af8380c952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::cluster::cluster</definition>
        <argsstring>(const cluster &amp;&amp;)=delete</argsstring>
        <name>cluster</name>
        <param>
          <type>const <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> is non-moveable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adfece237b42b8a0ab4d81c000e159fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;</type>
        <definition>cluster &amp; dpp::cluster::operator=</definition>
        <argsstring>(const cluster &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;</type>
        </param>
        <briefdescription>
<para><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> is non-copyable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="236" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a17780ca53ef05b8d66df90185eb51a04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;</type>
        <definition>cluster &amp; dpp::cluster::operator=</definition>
        <argsstring>(const cluster &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> is non-moveable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="241" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6e6c0859b49fdb91edb74e6b16a87521" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::cluster::~cluster</definition>
        <argsstring>()</argsstring>
        <name>~cluster</name>
        <briefdescription>
<para>Destroy the cluster object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="246" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3ace7f63d2a8571b6f586e2ac1ac3d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::shutdown</definition>
        <argsstring>()</argsstring>
        <name>shutdown</name>
        <briefdescription>
<para>End cluster execution without destructing it. To restart the cluster, call <ref refid="classdpp_1_1cluster_1a40e99d13e1380eccd30d13123014594f" kindref="member">cluster::start()</ref> again. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="252" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a77a590b138e5a832faba65cc8de449c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> *</type>
        <definition>request_queue * dpp::cluster::get_rest</definition>
        <argsstring>()</argsstring>
        <name>get_rest</name>
        <briefdescription>
<para>Get the rest_queue object which handles HTTPS requests to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>request_queue* pointer to <ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="258" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aaf4dd99670856e7efed749e53e96fa7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> *</type>
        <definition>request_queue * dpp::cluster::get_raw_rest</definition>
        <argsstring>()</argsstring>
        <name>get_raw_rest</name>
        <briefdescription>
<para>Get the raw rest_queue object which handles all HTTP(S) requests that are not directed at Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>request_queue* pointer to <ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="264" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a056e4191c03dd210c2a410b6599a0bf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;</type>
        <definition>cluster &amp; dpp::cluster::set_websocket_protocol</definition>
        <argsstring>(websocket_protocol_t mode)</argsstring>
        <name>set_websocket_protocol</name>
        <param>
          <type><ref refid="namespacedpp_1af7cde3079d745428f44ef6231a2ac672" kindref="member">websocket_protocol_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set the websocket protocol for all shards on this cluster. You should call this method before <ref refid="classdpp_1_1cluster_1a40e99d13e1380eccd30d13123014594f" kindref="member">cluster::start</ref>. Generally ws_etf is faster, but provides less facilities for debugging should something go wrong. It is recommended to use ETF in production and JSON in development. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>websocket protocol to use, either ws_json or ws_etf. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cluster&amp; Reference to self for chaining. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>If called after the cluster is started (this is not supported) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="276" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;</type>
        <definition>cluster &amp; dpp::cluster::set_audit_reason</definition>
        <argsstring>(const std::string &amp;reason)</argsstring>
        <name>set_audit_reason</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
<para>Set the audit log reason for the next REST call to be made. This is set per-thread, so you must ensure that if you call this method, your request that is associated with the reason happens on the same thread where you set the reason. Once the next call is made, the audit log reason is cleared for this thread automatically. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <programlisting><codeline><highlight class="normal">bot.set_audit_reason(</highlight><highlight class="stringliteral">&quot;Too<sp/>much<sp/>abusive<sp/>content&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>.channel_delete(my_channel_id);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>The reason to set for the next REST call on this thread </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cluster&amp; Reference to self for chaining. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="293" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af1e3f0868ece15373e81844dff719aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;</type>
        <definition>cluster &amp; dpp::cluster::clear_audit_reason</definition>
        <argsstring>()</argsstring>
        <name>clear_audit_reason</name>
        <briefdescription>
<para>Clear the audit log reason for the next REST call to be made. This is set per-thread, so you must ensure that if you call this method, your request that is associated with the reason happens on the same thread where you set the reason. Once the next call is made, the audit log reason is cleared for this thread automatically. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <programlisting><codeline><highlight class="normal">bot.set_audit_reason(</highlight><highlight class="stringliteral">&quot;Won&apos;t<sp/>be<sp/>sent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/>.clear_audit_reason()</highlight></codeline>
<codeline><highlight class="normal"><sp/>.channel_delete(my_channel_id);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>cluster&amp; Reference to self for chaining. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="310" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab7a2958625740b4a6fde6643042c5f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::cluster::get_audit_reason</definition>
        <argsstring>()</argsstring>
        <name>get_audit_reason</name>
        <briefdescription>
<para>Get the audit reason set for the next REST call to be made on this thread. This is set per-thread, so you must ensure that if you call this method, your request that is associated with the reason happens on the same thread where you set the reason. Once the next call is made, the audit log reason is cleared for this thread automatically. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method call clears the audit reason when it returns it.</para>
</simplesect>
<simplesect kind="return"><para>std::string The audit reason to be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="323" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af675c512fd018d72b6c96a042acb542f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;</type>
        <definition>cluster &amp; dpp::cluster::set_default_gateway</definition>
        <argsstring>(std::string &amp;default_gateway)</argsstring>
        <name>set_default_gateway</name>
        <param>
          <type>std::string &amp;</type>
          <declname>default_gateway</declname>
        </param>
        <briefdescription>
<para>Sets the address of the default gateway, for connecting the websockets. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>cluster&amp; Reference to self for chaining. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="330" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a13689440c9cc80279d415c563a6363c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const</argsstring>
        <name>log</name>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message to whatever log the user is using. The logged message is passed up the chain to the on_log event in user code which can then do whatever it wants to do with it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level from <ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The log message to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="339" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2a87a674519512fbf96b59f9b9cb8bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a8b9ab0b8cf29978147a7df3947cd8f30" kindref="member">timer</ref></type>
        <definition>timer dpp::cluster::start_timer</definition>
        <argsstring>(timer_callback_t on_tick, uint64_t frequency, timer_callback_t on_stop={})</argsstring>
        <name>start_timer</name>
        <param>
          <type><ref refid="namespacedpp_1ad4658c417b9af90d3021253375580a61" kindref="member">timer_callback_t</ref></type>
          <declname>on_tick</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>frequency</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1ad4658c417b9af90d3021253375580a61" kindref="member">timer_callback_t</ref></type>
          <declname>on_stop</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Start a timer. Every <computeroutput>frequency</computeroutput> seconds, the callback is called. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>on_tick</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback lambda to call for this timer when ticked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>on_stop</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback lambda to call for this timer when it is stopped </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>How often to tick the timer in seconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>timer A handle to the timer, used to remove that timer later </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="349" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a065dbc305d760d94f4ce0867f64777a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::cluster::stop_timer</definition>
        <argsstring>(timer t)</argsstring>
        <name>stop_timer</name>
        <param>
          <type><ref refid="namespacedpp_1a8b9ab0b8cf29978147a7df3947cd8f30" kindref="member">timer</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Stop a ticking timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer handle received from <ref refid="classdpp_1_1cluster_1a2a87a674519512fbf96b59f9b9cb8bb5" kindref="member">cluster::start_timer</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if the timer was stopped, false if it did not exist </para>
</simplesect>
<simplesect kind="note"><para>If the timer has an on_stop lambda, the on_stop lambda will be called. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="358" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab960df57796742a4013c7a492f782ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="namespacedpp_1a8b9ab0b8cf29978147a7df3947cd8f30" kindref="member">timer</ref> &gt;</type>
        <definition>async&lt; timer &gt; dpp::cluster::co_sleep</definition>
        <argsstring>(uint64_t seconds)</argsstring>
        <name>co_sleep</name>
        <param>
          <type>uint64_t</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
<para>Get an awaitable to wait a certain amount of seconds. Use the co_await keyword on its return value to suspend the coroutine until the timer ends. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>How long to wait for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>async&lt;timer&gt; Object that can be co_await-ed to suspend the function for a certain time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="367" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae6164d5543b7594731a980da9b0b2088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::cluster::get_dm_channel</definition>
        <argsstring>(snowflake user_id)</argsstring>
        <name>get_dm_channel</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get the dm channel for a user id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the user id to get the dm channel for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 0 on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="376" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3fc501cc0ebb334d09a7f4bb1ea6b3e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::set_dm_channel</definition>
        <argsstring>(snowflake user_id, snowflake channel_id)</argsstring>
        <name>set_dm_channel</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Set the dm channel id for a user id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>user id to set the dm channel for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>dm channel to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="384" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af12b5b33ea156bde9977796858066a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref></type>
        <definition>dpp::utility::uptime dpp::cluster::uptime</definition>
        <argsstring>()</argsstring>
        <name>uptime</name>
        <briefdescription>
<para>Returns the uptime of the cluster. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref> The uptime of the cluster </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="391" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a40e99d13e1380eccd30d13123014594f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::start</definition>
        <argsstring>(bool return_after=true)</argsstring>
        <name>start</name>
        <param>
          <type>bool</type>
          <declname>return_after</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Start the cluster, connecting all its shards. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns once all shards are connected if return_after is true, otherwise enters an infinite loop while the shards run.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>return_after</parametername>
</parameternamelist>
<parameterdescription>
<para>If true the bot will return to your program after starting shards, if false this function will never return. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="401" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9b67c9455ac0378712e4c0fd0ba7f2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::set_presence</definition>
        <argsstring>(const class dpp::presence &amp;p)</argsstring>
        <name>set_presence</name>
        <param>
          <type>const class <ref refid="classdpp_1_1presence" kindref="compound">dpp::presence</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Set the presence for all shards on the cluster. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The presence to set. Only the online status and the first activity are sent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="408" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5c677c0d5c059e87cc01ce598d49487d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>discord_client * dpp::cluster::get_shard</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>get_shard</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a shard by id, returning the <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Shard ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>discord_client* shard, or null </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="416" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af4d6195862e6d25c644902631a0b34d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacedpp_1a13c4d4e6238396245b349e6a637897e0" kindref="member">shard_list</ref> &amp;</type>
        <definition>const shard_list &amp; dpp::cluster::get_shards</definition>
        <argsstring>()</argsstring>
        <name>get_shards</name>
        <briefdescription>
<para>Get the list of shards. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>shard_list&amp; Reference to map of shards for this cluster </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="423" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aebf7330c120e96cbcefe304572c65c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::post_rest</definition>
        <argsstring>(const std::string &amp;endpoint, const std::string &amp;major_parameters, const std::string &amp;parameters, http_method method, const std::string &amp;postdata, json_encode_t callback, const std::string &amp;filename=&quot;&quot;, const std::string &amp;filecontent=&quot;&quot;, const std::string &amp;filemimetype=&quot;&quot;)</argsstring>
        <name>post_rest</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>endpoint</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>major_parameters</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">http_method</ref></type>
          <declname>method</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>postdata</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aafc7fb6792b12d92c4e77b46d20924ee" kindref="member">json_encode_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filecontent</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filemimetype</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Post a REST request. Where possible use a helper method instead like message_create. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint to post to, e.g. /api/guilds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>major_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Major parameters for the endpoint e.g. a guild id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor parameters for the API request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Method, e.g. GET, POST </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>postdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Post data (usually JSON encoded) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the HTTP call completes. The callback parameter will contain amongst other things, the decoded json. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename to post for POST requests (for uploading files) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filecontent</parametername>
</parameternamelist>
<parameterdescription>
<para>File content to post for POST requests (for uploading files) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filemimetype</parametername>
</parameternamelist>
<parameterdescription>
<para>File content to post for POST requests (for uploading files) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1331" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3c540c26342e8238a76b8ac252f7f262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::post_rest_multipart</definition>
        <argsstring>(const std::string &amp;endpoint, const std::string &amp;major_parameters, const std::string &amp;parameters, http_method method, const std::string &amp;postdata, json_encode_t callback, const std::vector&lt; std::string &gt; &amp;filename={}, const std::vector&lt; std::string &gt; &amp;filecontent={}, const std::vector&lt; std::string &gt; &amp;filemimetypes={})</argsstring>
        <name>post_rest_multipart</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>endpoint</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>major_parameters</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">http_method</ref></type>
          <declname>method</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>postdata</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aafc7fb6792b12d92c4e77b46d20924ee" kindref="member">json_encode_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>filename</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>filecontent</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>filemimetypes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Post a multipart REST request. Where possible use a helper method instead like message_create. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint to post to, e.g. /api/guilds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>major_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Major parameters for the endpoint e.g. a guild id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor parameters for the API request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Method, e.g. GET, POST </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>postdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Post data (usually JSON encoded) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the HTTP call completes. The callback parameter will contain amongst other things, the decoded json. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>List of filenames to post for POST requests (for uploading files) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filecontent</parametername>
</parameternamelist>
<parameterdescription>
<para>List of file content to post for POST requests (for uploading files) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filemimetypes</parametername>
</parameternamelist>
<parameterdescription>
<para>List of mime types for each file to post for POST requests (for uploading files) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1346" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a156fe68358c421111e690f553c4e4f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::request</definition>
        <argsstring>(const std::string &amp;url, http_method method, http_completion_event callback, const std::string &amp;postdata=&quot;&quot;, const std::string &amp;mimetype=&quot;text/plain&quot;, const std::multimap&lt; std::string, std::string &gt; &amp;headers={})</argsstring>
        <name>request</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">http_method</ref></type>
          <declname>method</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1ae3249e99494d04bb4be50341f474621e" kindref="member">http_completion_event</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>postdata</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mimetype</declname>
          <defval>&quot;text/plain&quot;</defval>
        </param>
        <param>
          <type>const std::multimap&lt; std::string, std::string &gt; &amp;</type>
          <declname>headers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Make a HTTP(S) request. For use when wanting asynchronous access to HTTP APIs outside of Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>Full URL to post to, e.g. <ulink url="https://api.somewhere.com/v1/foo/">https://api.somewhere.com/v1/foo/</ulink> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Method, e.g. GET, POST </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the HTTP call completes. No processing is done on the returned data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>postdata</parametername>
</parameternamelist>
<parameterdescription>
<para>POST data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mimetype</parametername>
</parameternamelist>
<parameterdescription>
<para>MIME type of POST data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headers</parametername>
</parameternamelist>
<parameterdescription>
<para>Headers to send with the request </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1358" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a61e03d7c6a19f6a652d3a80b1a8157ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_response_create</definition>
        <argsstring>(snowflake interaction_id, const std::string &amp;token, const interaction_response &amp;r, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>interaction_response_create</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>interaction_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1interaction__response" kindref="compound">interaction_response</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Respond to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interaction_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Interaction id to respond to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Response to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1370" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a983ac4283ea7ee5261475ec232a2c1bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_response_edit</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>interaction_response_edit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit response to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1381" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7c1ab9427b77d2a251f8ce0dda1596d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_response_get_original</definition>
        <argsstring>(const std::string &amp;token, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>interaction_response_get_original</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Get the original response to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#get-original-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#get-original-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1391" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a90096bfbf3b4469eb51f35f74604e902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_followup_create</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m, command_completion_event_t callback)</argsstring>
        <name>interaction_followup_create</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Create a followup message to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>followup message to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1402" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae26c81bfce6baf63926232c81e89db9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_followup_edit_original</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>interaction_followup_edit_original</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit original followup message to a slash command This is an alias for <ref refid="classdpp_1_1cluster_1a983ac4283ea7ee5261475ec232a2c1bf" kindref="member">cluster::interaction_response_edit</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a983ac4283ea7ee5261475ec232a2c1bf" kindref="member">cluster::interaction_response_edit</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>message to edit, the ID should be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1414" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab0877de7e9587e932b4655681ca634db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_followup_delete</definition>
        <argsstring>(const std::string &amp;token, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>interaction_followup_delete</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete the initial interaction response. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1424" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4038261414555dcebc8b78e96b121265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_followup_edit</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>interaction_followup_edit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit followup message to a slash command The message ID in the message you pass should be correctly set to that of a followup message you previously sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#edit-followup-message">https://discord.com/developers/docs/interactions/receiving-and-responding#edit-followup-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>message to edit, the ID should be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1436" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af92385c3dff6752ecdac1126b67c2f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_followup_get</definition>
        <argsstring>(const std::string &amp;token, snowflake message_id, command_completion_event_t callback)</argsstring>
        <name>interaction_followup_get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the followup message to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#get-followup-message">https://discord.com/developers/docs/interactions/receiving-and-responding#get-followup-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>message to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1447" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae3edfe1883e2fe2cd1bcfeab28e5124e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_followup_get_original</definition>
        <argsstring>(const std::string &amp;token, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>interaction_followup_get_original</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Get the original followup message to a slash command This is an alias for <ref refid="classdpp_1_1cluster_1a7c1ab9427b77d2a251f8ce0dda1596d3" kindref="member">cluster::interaction_response_get_original</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a7c1ab9427b77d2a251f8ce0dda1596d3" kindref="member">cluster::interaction_response_get_original</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1458" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a11bccddf1068abb215bd6e69ba30b76b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::global_command_create</definition>
        <argsstring>(const slashcommand &amp;s, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>global_command_create</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a global slash command (a bot can have a maximum of 100 of these). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#create-global-application-command">https://discord.com/developers/docs/interactions/application-commands#create-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1468" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a398a2b72a5cc084333e3fb5ce1f83727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::global_command_get</definition>
        <argsstring>(snowflake id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>global_command_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Get a global slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-global-application-command">https://discord.com/developers/docs/interactions/application-commands#get-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1478" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aac1d1a95eac3a6c38370083abbba9d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_auditlog_get</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, uint32_t action_type, snowflake before, snowflake after, uint32_t limit, command_completion_event_t callback)</argsstring>
        <name>guild_auditlog_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>action_type</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the audit log for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log">https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get the audit log of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries from a specific user ID. Set this to <computeroutput>0</computeroutput> will fetch any user </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries for a specific <ref refid="namespacedpp_1a29a51ae6f6d959baee7d5e77d53d6c3d" kindref="member">dpp::audit_type</ref>. Set this to <computeroutput>0</computeroutput> will fetch any type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries with ID less than a specific audit log entry ID. Used for paginating </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries with ID greater than a specific audit log entry ID. Used for paginating </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of entries (between 1-100) to return </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1auditlog" kindref="compound">dpp::auditlog</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1493" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6e4a1a241299bcd1b5f6bfd69ae1ead9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_command_create</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_command_create</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Creating a command with the same name as an existing command for your application will overwrite the old command. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create the slash command in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1505" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a392bb1f732d92fe4b9d8eacdbf4d3ffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_bulk_command_create</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands, snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_bulk_command_create</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create/overwrite guild slash commands. Any existing guild slash commands on this guild will be deleted and replaced with these. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands">https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of slash commands to create/update. New guild commands will be available in the guild immediately. If the command did not already exist, it will count toward daily application command create limits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create/update the slash commands in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1adfefe335636cdf5dbbba145a3828c554" kindref="member">dpp::slashcommand_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1519" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6bbdec2006aa6a44a6448986a32f0dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::global_bulk_command_create</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>global_bulk_command_create</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create/overwrite global slash commands. Any existing global slash commands will be deleted and replaced with these. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands">https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of slash commands to create/update. overwriting existing commands that are registered globally for this application. Updates will be available in all guilds after 1 hour. Commands that do not already exist will count toward daily application command create limits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1adfefe335636cdf5dbbba145a3828c554" kindref="member">dpp::slashcommand_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1532" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a53e89466c1d02fd7f350bca69bf03d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::global_command_edit</definition>
        <argsstring>(const slashcommand &amp;s, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>global_command_edit</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command">https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to change </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1542" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad33f299b64e188e935184a32ab8515f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_command_get</definition>
        <argsstring>(snowflake id, snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_command_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Get a slash command of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The returned slash commands will not have permissions set, you need to use a permissions getter e.g. dpp::guild_commands_get_permissions to get the guild command permissions </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash command from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1554" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afbf6872567ddc76148f8537e5b53c192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_command_edit</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_command_edit</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit the slash command in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1565" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af7c607ba6c25317d4cf86fea933259ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_command_edit_permissions</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_command_edit_permissions</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit slash command permissions of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>You can only add up to 10 permission overwrites for a command </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to edit the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit the slash command in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1577" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a69ebf194c8bb078ce6998080b552c9ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_command_get_permissions</definition>
        <argsstring>(snowflake id, snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_command_get_permissions</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Get the permissions for a slash command of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command to get the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the permissions of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild__command__permissions" kindref="compound">dpp::guild_command_permissions</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1588" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0dcccabdbf1b3fb41e29145f80aaecb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_bulk_command_edit_permissions</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands, snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_bulk_command_edit_permissions</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit/Overwrite the permissions of all existing slash commands in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>You can only add up to 10 permission overwrites for a command</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#batch-edit-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#batch-edit-application-command-permissions</ulink> </para>
</simplesect>
<simplesect kind="warning"><para>The endpoint will overwrite all existing permissions for all commands of the application in a guild, including slash commands, user commands, and message commands. Meaning that if you forgot to pass a slash command, the permissions of it might be removed. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of slash commands to edit/overwrite the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit permissions of the slash commands in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a855d4fbe3b9026d08b31561a61a82e92" kindref="member">dpp::guild_command_permissions_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000010"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This has been disabled with updates to Permissions v2. You can use guild_command_edit_permissions instead </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1603" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6efaf2b6ce4557b5a7b039d89f956e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::global_command_delete</definition>
        <argsstring>(snowflake id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>global_command_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command">https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1613" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a210e7585068339c47e71b8ff3d219958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_command_delete</definition>
        <argsstring>(snowflake id, snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_command_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete the slash command in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1624" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a01623d7535dc359905990e710ae3b5e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_commands_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_commands_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the application&apos;s slash commands for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-guild-application-commands">https://discord.com/developers/docs/interactions/application-commands#get-guild-application-commands</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The returned slash commands will not have permissions set, you need to use a permissions getter e.g. dpp::guild_commands_get_permissions to get the guild command permissions </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash commands for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1adfefe335636cdf5dbbba145a3828c554" kindref="member">dpp::slashcommand_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1635" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab7e992a10e120846d39a7d7d3c048ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_commands_get_permissions</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_commands_get_permissions</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all slash command permissions of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash commands permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a855d4fbe3b9026d08b31561a61a82e92" kindref="member">dpp::guild_command_permissions_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1645" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8a8cadcdde42fcfa8d29c0c4fd0bec5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::global_commands_get</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>global_commands_get</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the application&apos;s global slash commands. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands">https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1adfefe335636cdf5dbbba145a3828c554" kindref="member">dpp::slashcommand_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1654" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa88bbdcc5005da82928497545e9455bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::direct_message_create</definition>
        <argsstring>(snowflake user_id, const message &amp;m, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>direct_message_create</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a direct message, also create the channel for the direct message if needed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#create-dm">https://discord.com/developers/docs/resources/user#create-dm</ulink> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-message">https://discord.com/developers/docs/resources/channel#create-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of user to send message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1666" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9d3b0f7c3dae4ecb1980cabe8f10ccd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_get</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, command_completion_event_t callback)</argsstring>
        <name>message_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel-message">https://discord.com/developers/docs/resources/channel#get-channel-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1677" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad471be0405745e32f130a2bfcd371c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::messages_get</definition>
        <argsstring>(snowflake channel_id, snowflake around, snowflake before, snowflake after, uint64_t limit, command_completion_event_t callback)</argsstring>
        <name>messages_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>around</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get multiple messages. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will attempt to fetch as many messages as possible using multiple API calls if needed.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel-messages">https://discord.com/developers/docs/resources/channel#get-channel-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to retrieve messages for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>around</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages should be retrieved around this ID if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages after this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of messages maximum should be returned, up to a maximum of 100. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a44d4dd39b5d7c24c5fe97a76a73cf708" kindref="member">dpp::message_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1693" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa6ae3dc32ebc2dd14264962710d35af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_create</definition>
        <argsstring>(const struct message &amp;m, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_create</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Send a message to a channel. The callback function is called when the message has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-message">https://discord.com/developers/docs/resources/channel#create-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1703" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab67f05b1b4b4bd3ea97a6bafc3b7151d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_crosspost</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_crosspost</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Crosspost a message. The callback function is called when the message has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#crosspost-message">https://discord.com/developers/docs/resources/channel#crosspost-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to crosspost </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to crosspost from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1714" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a173ff389feb4f48ac67a8c037081b2d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_edit</definition>
        <argsstring>(const struct message &amp;m, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_edit</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a message on a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#edit-message">https://discord.com/developers/docs/resources/channel#edit-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1724" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adbee89fb3c2967fe5df3deee7876199c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_add_reaction</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_add_reaction</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Add a reaction to a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-reaction">https://discord.com/developers/docs/resources/channel#create-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to add a reaction to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to add. Emojis should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1735" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aee40a0e598714c898630c65119003d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_own_reaction</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_delete_own_reaction</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete own reaction from a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-own-reaction">https://discord.com/developers/docs/resources/channel#delete-own-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete own reaction from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete. The reaction should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1746" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae30a16651849e78cee9030ceb07f9f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_reaction</definition>
        <argsstring>(const struct message &amp;m, snowflake user_id, const std::string &amp;reaction, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_delete_reaction</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a user&apos;s reaction from a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-user-reaction">https://discord.com/developers/docs/resources/channel#delete-user-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete a user&apos;s reaction from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID who&apos;s reaction you want to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to remove. Reactions should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1758" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab05fea3d6c298d5f2371704084383f8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_get_reactions</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction, snowflake before, snowflake after, snowflake limit, command_completion_event_t callback)</argsstring>
        <name>message_get_reactions</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get reactions on a message for a particular emoji. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-reactions">https://discord.com/developers/docs/resources/channel#get-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to get reactions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction should be in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of reactions maximum should be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a1c4073c92e19579c06591033a4a234e1" kindref="member">dpp::user_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1772" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8bab4c3df83ddf8a7c81504a2107afe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_all_reactions</definition>
        <argsstring>(const struct message &amp;m, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_delete_all_reactions</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete all reactions on a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions">https://discord.com/developers/docs/resources/channel#delete-all-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1782" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9879e447c31abfd6672b31e752b159ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_reaction_emoji</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_delete_reaction_emoji</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete all reactions on a message using a particular emoji. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji">https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete, in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1793" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a189db8e638496e15542de95d747b1cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_add_reaction</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_add_reaction</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Add a reaction to a message by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway#message-reaction-add">https://discord.com/developers/docs/topics/gateway#message-reaction-add</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to add reactions to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to add reactions to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to add. Emojis should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1805" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8883a23158a30995acd4f95a955ebd07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_own_reaction</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_delete_own_reaction</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete own reaction from a message by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-own-reaction">https://discord.com/developers/docs/resources/channel#delete-own-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete. The reaction should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1817" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4dba919144ae71cc32653ec19283c935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_reaction</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, snowflake user_id, const std::string &amp;reaction, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_delete_reaction</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a user&apos;s reaction from a message by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-user-reaction">https://discord.com/developers/docs/resources/channel#delete-user-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID who&apos;s reaction you want to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to remove. Reactions should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1830" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a06083a6cacaf7c4e41884cfb2a1078ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_get_reactions</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction, snowflake before, snowflake after, snowflake limit, command_completion_event_t callback)</argsstring>
        <name>message_get_reactions</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get reactions on a message for a particular emoji by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-reactions">https://discord.com/developers/docs/resources/channel#get-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to get reactions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get reactions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction should be in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of reactions maximum should be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a1c4073c92e19579c06591033a4a234e1" kindref="member">dpp::user_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1845" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a91fd6f5978046b8fae78a11ddb7137c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_all_reactions</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_delete_all_reactions</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete all reactions on a message by id. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions">https://discord.com/developers/docs/resources/channel#delete-all-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1856" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a36fc5115ae69378547f38f04ae435fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_reaction_emoji</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_delete_reaction_emoji</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete all reactions on a message using a particular emoji by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji">https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete, in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1868" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3aa3ef912199ea0ebac49dfe1cf5cd2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a message from a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-message">https://discord.com/developers/docs/resources/channel#delete-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1880" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a945ff67bd26bdb38e74192389a660cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_bulk</definition>
        <argsstring>(const std::vector&lt; snowflake &gt; &amp;message_ids, snowflake channel_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_delete_bulk</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt; &amp;</type>
          <declname>message_ids</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Bulk delete messages from a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="note"><para>If any message provided older than 2 weeks or any duplicate message ID, it will fail.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#bulk-delete-messages">https://discord.com/developers/docs/resources/channel#bulk-delete-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>List of message IDs to delete (at least 2 and at most 100 message IDs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1894" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a108f6f06b43709c8d47df5f94a3ca0a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_get</definition>
        <argsstring>(snowflake c, command_completion_event_t callback)</argsstring>
        <name>channel_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel">https://discord.com/developers/docs/resources/channel#get-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1channel" kindref="compound">dpp::channel</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1904" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a24e67431b79cc2c3d0f12d59afd5a1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channels_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>channels_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all channels for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channels">https://discord.com/developers/docs/resources/channel#get-channels</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to retrieve channels for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a7c77c4dd9434985643b2f1993b227f30" kindref="member">dpp::channel_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1914" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a66df9163f111cec5a180d642f521660a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_create</definition>
        <argsstring>(const class channel &amp;c, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new channel object for the guild. Requires the <computeroutput>MANAGE_CHANNELS</computeroutput> permission. If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied. Setting <computeroutput>MANAGE_ROLES</computeroutput> permission in channels is only possible for guild administrators. Returns the new channel object on success. Fires a <computeroutput>Channel Create Gateway</computeroutput> event.</para>
<para>All parameters to this endpoint are optional excluding <computeroutput>name</computeroutput></para>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-channel">https://discord.com/developers/docs/resources/channel#create-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1channel" kindref="compound">dpp::channel</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1931" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8ca7054e8447493eb1136f4972053b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_edit</definition>
        <argsstring>(const class channel &amp;c, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_edit</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#modify-channel">https://discord.com/developers/docs/resources/channel#modify-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to edit/update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1channel" kindref="compound">dpp::channel</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1941" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa005ff4940e700f034b01e197670837b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_edit_positions</definition>
        <argsstring>(const std::vector&lt; channel &gt; &amp;c, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_edit_positions</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit multiple channels positions. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify the positions of a set of channel objects for the guild. Requires <computeroutput>MANAGE_CHANNELS</computeroutput> permission. Fires multiple <computeroutput>Channel Update Gateway</computeroutput> events. Only channels to be modified are required.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions">https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to change the position for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1955" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a55c02ced51fff33b7b8c4832a9857e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_edit_permissions</definition>
        <argsstring>(const class channel &amp;c, const snowflake overwrite_id, const uint64_t allow, const uint64_t deny, const bool member, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_edit_permissions</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>allow</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>deny</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>member</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a channel&apos;s permissions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#edit-channel-permissions">https://discord.com/developers/docs/resources/channel#edit-channel-permissions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to set permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to change (a user or role ID) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow</parametername>
</parameternamelist>
<parameterdescription>
<para>allow permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deny</parametername>
</parameternamelist>
<parameterdescription>
<para>deny permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the overwrite_id is a user id, false if it is a channel id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1970" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a96e656be4a8ea8e87a3a4133dd3a07dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_edit_permissions</definition>
        <argsstring>(const snowflake channel_id, const snowflake overwrite_id, const uint64_t allow, const uint64_t deny, const bool member, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_edit_permissions</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>allow</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>deny</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>member</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a channel&apos;s permissions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#edit-channel-permissions">https://discord.com/developers/docs/resources/channel#edit-channel-permissions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the channel to set permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to change (a user or role ID) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow</parametername>
</parameternamelist>
<parameterdescription>
<para>allow permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deny</parametername>
</parameternamelist>
<parameterdescription>
<para>deny permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the overwrite_id is a user id, false if it is a channel id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1985" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a837aa702a92e98ef593381fb147d23fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_delete</definition>
        <argsstring>(snowflake channel_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#deleteclose-channel">https://discord.com/developers/docs/resources/channel#deleteclose-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1995" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6dbddcf4f753ced02d8ec693dcaf583c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::invite_get</definition>
        <argsstring>(const std::string &amp;invite_code, command_completion_event_t callback)</argsstring>
        <name>invite_get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>invite_code</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get details about an invite. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/invite#get-invite">https://discord.com/developers/docs/resources/invite#get-invite</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invite_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite code to get information on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1invite" kindref="compound">dpp::invite</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2005" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1279fd6e3b1bd609c4dc85b6c3fc3631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::invite_delete</definition>
        <argsstring>(const std::string &amp;invite, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>invite_delete</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>invite</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete an invite. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/invite#delete-invite">https://discord.com/developers/docs/resources/invite#delete-invite</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invite</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite code to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1invite" kindref="compound">dpp::invite</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2016" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa03a0da5c8e6801dc56bda258265da04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_invites_get</definition>
        <argsstring>(const class channel &amp;c, command_completion_event_t callback)</argsstring>
        <name>channel_invites_get</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get invites for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/invite#get-invites">https://discord.com/developers/docs/resources/invite#get-invites</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get invites for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1aa85b043fd45cf24caa23ab6004a2415a" kindref="member">dpp::invite_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2026" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5e3f97577e5948896b38836fd293cefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_invite_create</definition>
        <argsstring>(const class channel &amp;c, const class invite &amp;i, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_invite_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create invite for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-channel-invite">https://discord.com/developers/docs/resources/channel#create-channel-invite</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to create an invite on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1invite" kindref="compound">dpp::invite</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2037" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a553bfda3b4f1671e75c5713275b781bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_pins_get</definition>
        <argsstring>(snowflake channel_id, command_completion_event_t callback)</argsstring>
        <name>channel_pins_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a channel&apos;s pins. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-pinned-messages">https://discord.com/developers/docs/resources/channel#get-pinned-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to get pins for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a44d4dd39b5d7c24c5fe97a76a73cf708" kindref="member">dpp::message_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2046" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab9aec491f4116fa33aeabf1e614051f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::gdm_add</definition>
        <argsstring>(snowflake channel_id, snowflake user_id, const std::string &amp;access_token, const std::string &amp;nick, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>gdm_add</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_token</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nick</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Adds a recipient to a Group DM using their access token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#group-dm-add-recipient">https://discord.com/developers/docs/resources/channel#group-dm-add-recipient</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to add group DM recipients to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_token</parametername>
</parameternamelist>
<parameterdescription>
<para>Access token from OAuth2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname of user to apply to the chat </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2058" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0d130c81079f3b55c440710f5ea0470e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::gdm_remove</definition>
        <argsstring>(snowflake channel_id, snowflake user_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>gdm_remove</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Removes a recipient from a Group DM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#group-dm-remove-recipient">https://discord.com/developers/docs/resources/channel#group-dm-remove-recipient</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID of group DM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove from group DM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2068" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac335bec6c58c7161348b521aad154431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_delete_permission</definition>
        <argsstring>(const class channel &amp;c, snowflake overwrite_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_delete_permission</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Remove a permission from a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-channel-permission">https://discord.com/developers/docs/resources/channel#delete-channel-permission</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to remove permission from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to remove, user or channel ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2079" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a83fa90627b403c4489320b64d6e31c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_follow_news</definition>
        <argsstring>(const class channel &amp;c, snowflake target_channel_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_follow_news</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>target_channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Follow an announcement (news) channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#follow-news-channel">https://discord.com/developers/docs/resources/channel#follow-news-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to follow </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to subscribe the channel to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2089" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aff1ad5764f2878eec2e7cbed3a231bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_typing</definition>
        <argsstring>(const class channel &amp;c, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_typing</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Trigger channel typing indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#trigger-typing-indicator">https://discord.com/developers/docs/resources/channel#trigger-typing-indicator</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to set as typing on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2098" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aac0f01d11e06168e68b0e798ef7ce61b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_typing</definition>
        <argsstring>(snowflake cid, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>channel_typing</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>cid</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Trigger channel typing indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#trigger-typing-indicator">https://discord.com/developers/docs/resources/channel#trigger-typing-indicator</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to set as typing on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2107" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0530fdfa85085ad367a6666386968ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_pin</definition>
        <argsstring>(snowflake channel_id, snowflake message_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_pin</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Pin a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#pin-message">https://discord.com/developers/docs/resources/channel#pin-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to pin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message id to pin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2118" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aaf055f95bc7ce80ff06cff9956bddca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_unpin</definition>
        <argsstring>(snowflake channel_id, snowflake message_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>message_unpin</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Unpin a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#unpin-message">https://discord.com/developers/docs/resources/channel#unpin-message</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to unpin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message id to unpin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2129" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6a003669770549d25a951810bff0153e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get</definition>
        <argsstring>(snowflake g, command_completion_event_t callback)</argsstring>
        <name>guild_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the guild object for the given id. This endpoint will also return approximate_member_count and approximate_presence_count for the guild. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild">https://discord.com/developers/docs/resources/guild#get-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2141" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3ecd82c6169107c9c944356f19abba9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_preview</definition>
        <argsstring>(snowflake g, command_completion_event_t callback)</argsstring>
        <name>guild_get_preview</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a guild preview. Returns a guild object but only a subset of the fields will be populated. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the guild preview object for the given id <computeroutput>g</computeroutput>. If the user is not in the guild, then the guild must be lurkable (it must be Discoverable or have a live public stage). <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-preview">https://discord.com/developers/docs/resources/guild#get-guild-preview</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2153" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a99e8227f11ef33cd2d9cc3abef46adfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_member</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_member</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-member">https://discord.com/developers/docs/resources/guild#get-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get member for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of member to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild__member" kindref="compound">dpp::guild_member</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2163" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a52cc92ce052d063854e0372539e4d9ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_search_members</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;query, uint16_t limit, command_completion_event_t callback)</argsstring>
        <name>guild_search_members</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Search for guild members based on whether their username or nickname starts with the given string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint is restricted according to whether the <computeroutput>GUILD_MEMBERS</computeroutput> Privileged Intent is enabled for your application. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#search-guild-members">https://discord.com/developers/docs/resources/guild#search-guild-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to search in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>Query string to match username(s) and nickname(s) against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of members to return (1-1000) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a219aedbe5bf37835c4a65115fccba278" kindref="member">dpp::guild_member_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2176" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6b24baba4de9d38f7d9a7cea2f71a545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_members</definition>
        <argsstring>(snowflake guild_id, uint16_t limit, snowflake after, command_completion_event_t callback)</argsstring>
        <name>guild_get_members</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all guild members. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint is restricted according to whether the <computeroutput>GUILD_MEMBERS</computeroutput> Privileged Intent is enabled for your application. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-members">https://discord.com/developers/docs/resources/guild#get-guild-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get all members for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of members to return (1-1000) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>the highest user id in the previous page </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a219aedbe5bf37835c4a65115fccba278" kindref="member">dpp::guild_member_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2189" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a19819f7f2f2f3badecc1e29a928f2690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_add_member</definition>
        <argsstring>(const guild_member &amp;gm, const std::string &amp;access_token, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_add_member</name>
        <param>
          <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
          <declname>gm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_token</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Add guild member. Needs a specific oauth2 scope, from which you get the access_token. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a user to the guild, provided you have a valid oauth2 access token for the user with the guilds.join scope. Returns the <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref>, which is defaulted if the user is already a member of the guild. Fires a <computeroutput>Guild Member Add</computeroutput> Gateway event.</para>
<para>For guilds with Membership Screening enabled, this endpoint will default to adding new members as pending in the guild member object. Members that are pending will have to complete membership screening before they become full members that can talk.</para>
<para><simplesect kind="note"><para>All parameters to this endpoint except for access_token are optional. The bot must be a member of the guild with <computeroutput>CREATE_INSTANT_INVITE</computeroutput> permission. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#add-guild-member">https://discord.com/developers/docs/resources/guild#add-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gm</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild member to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_token</parametername>
</parameternamelist>
<parameterdescription>
<para>Access token from Oauth2 scope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild__member" kindref="compound">dpp::guild_member</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2208" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad793626d2733715381c3c5c440f31bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_edit_member</definition>
        <argsstring>(const guild_member &amp;gm, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_edit_member</name>
        <param>
          <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
          <declname>gm</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit the properties of an existing guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify attributes of a guild member. Returns the <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref>. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. To remove a timeout, set the <computeroutput>communication_disabled_until</computeroutput> to a non-zero time in the past, e.g. 1. When moving members to channels, the API user must have permissions to both connect to the channel and have the <computeroutput>MOVE_MEMBERS</computeroutput> permission. For moving and disconnecting users from voice, use <ref refid="classdpp_1_1cluster_1ac673fb500731954ad50e90de70b2fd03" kindref="member">dpp::cluster::guild_member_move</ref>. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gm</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild member to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild__member" kindref="compound">dpp::guild_member</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2223" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac673fb500731954ad50e90de70b2fd03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_move</definition>
        <argsstring>(const snowflake channel_id, const snowflake guild_id, const snowflake user_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_member_move</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Moves the guild member to a other voice channel, if member is connected to one. Set the <computeroutput>channel_id</computeroutput> to <computeroutput>0</computeroutput> to disconnect the user. </para>
        </briefdescription>
        <detaileddescription>
<para>Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="note"><para>When moving members to channels, the API user <bold>must</bold> have permissions to both connect to the channel and have the <computeroutput>MOVE_MEMBERS</computeroutput> permission. </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the channel to which the user is used. Set to <computeroutput>0</computeroutput> to disconnect the user </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id to which the user is connected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User id, who should be moved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild__member" kindref="compound">dpp::guild_member</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2239" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4a8074b289fee0f43d7eafb2bc6ae5c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_set_nickname</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;nickname, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_set_nickname</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Change current user nickname. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the nickname of the current user in a guild. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event.</para>
<para><xrefsect id="deprecated_1_deprecated000011"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Deprecated in favor of Modify Current Member. Will be replaced by <ref refid="classdpp_1_1cluster_1ab55ebdf053917a35368be4d86237af33" kindref="member">dpp::cluster::guild_current_member_edit</ref> </para>
</xrefdescription></xrefsect><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-user-nick">https://discord.com/developers/docs/resources/guild#modify-current-user-nick</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change nickname on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>New nickname, or empty string to clear nickname </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2255" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aeffb7f4f32ca342886a79692ed8fb416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_add_role</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_member_add_role</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Add role to guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a role to a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#add-guild-member-role">https://discord.com/developers/docs/resources/guild#add-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to add a role to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to add role to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role ID to add to the user </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2270" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a98e8223a62f31bb716c326ff59f67576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_delete_role</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_member_delete_role</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Remove role from guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes a role from a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member-role">https://discord.com/developers/docs/resources/guild#remove-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to remove role from user on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove role from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="deprecated_1_deprecated000012"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="classdpp_1_1cluster_1a4e310334b84b6711119fe20a340ddc85" kindref="member">dpp::cluster::guild_member_remove_role</ref> instead </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2286" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4e310334b84b6711119fe20a340ddc85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_remove_role</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_member_remove_role</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Remove role from guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes a role from a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member-role">https://discord.com/developers/docs/resources/guild#remove-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to remove role from user on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove role from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2301" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a40788ea66fddce18336fb53ff8a2a6b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_delete</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_member_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Remove (kick) a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove a member from a guild. Requires <computeroutput>KICK_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Member Remove</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member">https://discord.com/developers/docs/resources/guild#remove-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000013"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Replaced by <ref refid="classdpp_1_1cluster_1a8d4b8738bf9ba45254582ce16d14e22d" kindref="member">dpp::cluster::guild_member_kick</ref> </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to kick member from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to kick </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2316" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8d4b8738bf9ba45254582ce16d14e22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_kick</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_member_kick</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Remove (kick) a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove a member from a guild. Requires <computeroutput>KICK_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Member Remove</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member">https://discord.com/developers/docs/resources/guild#remove-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to kick member from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to kick </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2330" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9afda69f8c99365001ec349f8dc70388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_timeout</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, time_t communication_disabled_until, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_member_timeout</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>communication_disabled_until</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Set the timeout of a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to timeout the member in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to set the timeout for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>communication_disabled_until</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp when the user&apos;s timeout will expire (up to 28 days in the future). Set to 0 to remove the timeout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2344" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a00fe9bf79228a671d618e9fb27b5684a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_ban_add</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, uint32_t delete_message_seconds=0, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_ban_add</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>delete_message_seconds</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Add guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a guild ban, and optionally delete previous messages sent by the banned user. Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Ban Add</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild-ban">https://discord.com/developers/docs/resources/guild#create-guild-ban</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to add ban to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to ban </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delete_message_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>How many seconds to delete messages for, between 0 and 604800 (7 days). Defaults to 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2359" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a77f277230e3cd4d34eac3d2d9838f6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_ban_delete</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_ban_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the ban for a user. Requires the <computeroutput>BAN_MEMBERS</computeroutput> permissions. Fires a Guild Ban Remove Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-ban">https://discord.com/developers/docs/resources/guild#remove-guild-ban</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to delete ban from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to delete ban for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2373" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac7fe3385e506ea073076bc4fb57f06c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_bans</definition>
        <argsstring>(snowflake guild_id, snowflake before, snowflake after, snowflake limit, command_completion_event_t callback)</argsstring>
        <name>guild_get_bans</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild ban list. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-bans">https://discord.com/developers/docs/resources/guild#get-guild-bans</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Provide a user ID to <computeroutput>before</computeroutput> and <computeroutput>after</computeroutput> for pagination. Users will always be returned in ascending order by the user ID. If both before and after are provided, only before is respected. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get bans for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-zero, all bans for user ids before this user id will be returned up to the limit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-zero, all bans for user ids after this user id will be returned up to the limit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of bans to retrieve in this call up to a maximum of 1000 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a52b195380df96e9c43f35fa2da82db14" kindref="member">dpp::ban_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2388" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad871d30ed11d0799da4a831ede8a7d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_ban</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_ban</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get single guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-ban">https://discord.com/developers/docs/resources/guild#get-guild-ban</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get ban for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of ban to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1ban" kindref="compound">dpp::ban</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2400" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a52366e37144b166c6a2c773e14992b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::template_get</definition>
        <argsstring>(const std::string &amp;code, command_completion_event_t callback)</argsstring>
        <name>template_get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#get-guild-template">https://discord.com/developers/docs/resources/guild-template#get-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1dtemplate" kindref="compound">dpp::dtemplate</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2409" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3124bdcf2432f3880f78914037f9e87e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_create_from_template</definition>
        <argsstring>(const std::string &amp;code, const std::string &amp;name, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_create_from_template</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a new guild based on a template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint can be used only by bots in less than 10 guilds. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#create-guild-from-guild-template">https://discord.com/developers/docs/resources/guild-template#create-guild-from-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to create guild from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild name to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2420" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1faa321ede15b209c789ea1155a3d356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_templates_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_templates_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild templates. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#get-guild-templates">https://discord.com/developers/docs/resources/guild-template#get-guild-templates</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get templates for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a9a1e92263bfa31397d459725d26e47b6" kindref="member">dpp::dtemplate_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2430" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a38db2ce96431b742e98cabf8170a84d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_template_create</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;name, const std::string &amp;description, command_completion_event_t callback)</argsstring>
        <name>guild_template_create</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Creates a template for the guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#create-guild-template">https://discord.com/developers/docs/resources/guild-template#create-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to create template from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Template name to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of template to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1dtemplate" kindref="compound">dpp::dtemplate</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2442" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af115bd1c7fe12eba1c12d90d5971d10b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_template_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_template_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Syncs the template to the guild&apos;s current state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#sync-guild-template">https://discord.com/developers/docs/resources/guild-template#sync-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to synchronise template for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Code of template to synchronise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1dtemplate" kindref="compound">dpp::dtemplate</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2453" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5db4327a5ad614adc419db6ff7b7bc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_template_modify</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code, const std::string &amp;name, const std::string &amp;description, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_template_modify</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Modifies the template&apos;s metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#modify-guild-template">https://discord.com/developers/docs/resources/guild-template#modify-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of template to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>New name of template </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>New description of template </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1dtemplate" kindref="compound">dpp::dtemplate</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2466" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8527d66d4e1b2996c495d1196c6af718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_template_delete</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_template_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Deletes the template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#delete-guild-template">https://discord.com/developers/docs/resources/guild-template#delete-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of template to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2477" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8e7f40eadf7748bcf35f67d152c3462c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_create</definition>
        <argsstring>(const class guild &amp;g, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new guild. Returns a guild object on success. <computeroutput>Fires a Guild Create Gateway</computeroutput> event.</para>
<para>When using the roles parameter, the first member of the array is used to change properties of the guild&apos;s everyone role. If you are trying to bootstrap a guild with additional roles, keep this in mind. The required id field within each role object is an integer placeholder, and will be replaced by the API upon consumption. Its purpose is to allow you to overwrite a role&apos;s permissions in a channel when also passing in channels with the channels array. When using the channels parameter, the position field is ignored, and none of the default channels are created. The id field within each channel object may be set to an integer placeholder, and will be replaced by the API upon consumption. Its purpose is to allow you to create <computeroutput>GUILD_CATEGORY</computeroutput> channels by setting the <computeroutput>parent_id</computeroutput> field on any children to the category&apos;s id field. Category channels must be listed before any children.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild">https://discord.com/developers/docs/resources/guild#create-guild</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The region field is deprecated and is replaced by <ref refid="classdpp_1_1channel_1a05f56fbd37e993e0fc36df06b3d65bad" kindref="member">channel.rtc_region</ref>. This endpoint can be used only by bots in less than 10 guilds. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2499" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a54e2174822bb1796a541f849d568664c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_edit</definition>
        <argsstring>(const class guild &amp;g, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_edit</name>
        <param>
          <type>const class <ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify a guild&apos;s settings. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. Returns the updated guild object on success. Fires a <computeroutput>Guild Update Gateway</computeroutput> event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild">https://discord.com/developers/docs/resources/guild#modify-guild</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2513" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9b0fccd64f8d21340fe20642d9fdb1e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_delete</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete a guild permanently. User must be owner. Fires a <computeroutput>Guild Delete Gateway</computeroutput> event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild">https://discord.com/developers/docs/resources/guild#delete-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2525" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad66ab98a72eb1ba8d2686fcaa1eb49db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_emojis_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_emojis_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all emojis for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#list-guild-emojis">https://discord.com/developers/docs/resources/emoji#list-guild-emojis</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get emojis for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a58e2720e1ccc11d2b3b1be2e18df79d9" kindref="member">dpp::emoji_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2535" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ada721a222fb3a42a1a1bb6d93dfcc745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_emoji_get</definition>
        <argsstring>(snowflake guild_id, snowflake emoji_id, command_completion_event_t callback)</argsstring>
        <name>guild_emoji_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>emoji_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a single emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#get-guild-emoji">https://discord.com/developers/docs/resources/emoji#get-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get emoji for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emoji_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji ID to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1emoji" kindref="compound">dpp::emoji</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2546" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8bea7e9ba3d487e9a6b2fe747c98e9e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_emoji_create</definition>
        <argsstring>(snowflake guild_id, const class emoji &amp;newemoji, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_emoji_create</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
          <declname>newemoji</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create single emoji. You must ensure that the emoji passed contained image data using the <ref refid="classdpp_1_1emoji_1afb0fd2592f901c60d505bc4ac5226e49" kindref="member">emoji::load_image()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#create-guild-emoji">https://discord.com/developers/docs/resources/emoji#create-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create emoji om </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newemoji</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1emoji" kindref="compound">dpp::emoji</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2559" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7461e2fa96c4bf77468226ffb25744ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_emoji_edit</definition>
        <argsstring>(snowflake guild_id, const class emoji &amp;newemoji, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_emoji_edit</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
          <declname>newemoji</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a single emoji. </para>
        </briefdescription>
        <detaileddescription>
<para>You must ensure that the emoji passed contained image data using the <ref refid="classdpp_1_1emoji_1afb0fd2592f901c60d505bc4ac5226e49" kindref="member">emoji::load_image()</ref> method. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#modify-guild-emoji">https://discord.com/developers/docs/resources/emoji#modify-guild-emoji</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit emoji on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newemoji</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1emoji" kindref="compound">dpp::emoji</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2572" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a55b6d9100c34ea5bbbe37d3ba5089be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_emoji_delete</definition>
        <argsstring>(snowflake guild_id, snowflake emoji_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_emoji_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>emoji_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a guild emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#delete-guild-emoji">https://discord.com/developers/docs/resources/emoji#delete-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete emoji on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emoji_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2584" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aad296f07bd5b9f900dcedbf88c464e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_prune_counts</definition>
        <argsstring>(snowflake guild_id, const struct prune &amp;pruneinfo, command_completion_event_t callback)</argsstring>
        <name>guild_get_prune_counts</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &amp;</type>
          <declname>pruneinfo</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get prune counts. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a prune object indicating the number of members that would be removed in a prune operation. Requires the <computeroutput>KICK_MEMBERS</computeroutput> permission. By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the include_roles parameter. Any inactive user that has a subset of the provided role(s) will be counted in the prune and users with additional roles will not.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-prune-count">https://discord.com/developers/docs/resources/guild#get-guild-prune-count</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to count for pruning </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pruneinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pruning info </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1prune" kindref="compound">dpp::prune</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2600" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a68d13c11179006d5271c1a398df58bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_begin_prune</definition>
        <argsstring>(snowflake guild_id, const struct prune &amp;pruneinfo, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_begin_prune</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &amp;</type>
          <declname>pruneinfo</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Begin guild prune. </para>
        </briefdescription>
        <detaileddescription>
<para>Begin a prune operation. Requires the <computeroutput>KICK_MEMBERS</computeroutput> permission. Returns a prune object indicating the number of members that were removed in the prune operation. For large guilds it&apos;s recommended to set the <computeroutput>compute_prune_count</computeroutput> option to false, forcing &apos;pruned&apos; to 0. Fires multiple <computeroutput>Guild Member Remove</computeroutput> Gateway events. By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the <computeroutput>include_roles</computeroutput> parameter. Any inactive user that has a subset of the provided role(s) will be included in the prune and users with additional roles will not.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#begin-guild-prune">https://discord.com/developers/docs/resources/guild#begin-guild-prune</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to prune </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pruneinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pruning info </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1prune" kindref="compound">dpp::prune</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2618" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae5556385a69a408a268332f774ba6c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_voice_regions</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_voice_regions</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para>Voice regions per guild are somewhat deprecated in preference of per-channel voice regions. Returns a list of voice region objects for the guild. Unlike the similar /voice route, this returns VIP servers when the guild is VIP-enabled.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-voice-regions">https://discord.com/developers/docs/resources/guild#get-guild-voice-regions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get voice regions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1ae90871830444cab0316109a1824fc0b8" kindref="member">dpp::voiceregion_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2632" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a93c0e07243611419141305da123c859a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_invites</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_invites</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild invites. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of invite objects (with invite metadata) for the guild. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-invites">https://discord.com/developers/docs/resources/guild#get-guild-invites</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get invites for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1aa85b043fd45cf24caa23ab6004a2415a" kindref="member">dpp::invite_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2644" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a43cba3bd187f9b28dcaed5b4f4ed5bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_integrations</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_integrations</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild integrations. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-integrations">https://discord.com/developers/docs/resources/guild#get-guild-integrations</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get integrations for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1aa13e2c5898009fad42ebe12fd5641d8a" kindref="member">dpp::integration_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This endpoint returns a maximum of 50 integrations. If a guild has more integrations, they cannot be accessed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2658" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0cc29438d9f4a8a42e5f5d44ce44c6db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_modify_integration</definition>
        <argsstring>(snowflake guild_id, const class integration &amp;i, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_modify_integration</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1integration" kindref="compound">integration</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Modify guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-integration">https://discord.com/developers/docs/resources/guild#modify-guild-integration</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to modify integration for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1integration" kindref="compound">dpp::integration</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2670" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab4ed64619f058ac4b71a90066e7aac73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_delete_integration</definition>
        <argsstring>(snowflake guild_id, snowflake integration_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_delete_integration</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>integration_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete the attached integration object for the guild. Deletes any associated webhooks and kicks the associated bot if there is one. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. Fires a Guild Integrations Update Gateway event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild-integration">https://discord.com/developers/docs/resources/guild#delete-guild-integration</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete integration for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2685" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4bef071b931d0ca71b45ee0d8bf3a96c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_sync_integration</definition>
        <argsstring>(snowflake guild_id, snowflake integration_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_sync_integration</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>integration_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Sync guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#sync-guild-integration">https://discord.com/developers/docs/resources/guild#sync-guild-integration</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to sync integration on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to synchronise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2696" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a57626c7a0e06aee1c362b986e44030c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_widget</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_widget</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild widget. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-widget">https://discord.com/developers/docs/resources/guild#get-guild-widget</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get widget for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild__widget" kindref="compound">dpp::guild_widget</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2708" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae97d98927594cee1821c4ff318eb9561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_edit_widget</definition>
        <argsstring>(snowflake guild_id, const class guild_widget &amp;gw, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_edit_widget</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1guild__widget" kindref="compound">guild_widget</ref> &amp;</type>
          <declname>gw</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit guild widget. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-widget">https://discord.com/developers/docs/resources/guild#modify-guild-widget</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit widget for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gw</parametername>
</parameternamelist>
<parameterdescription>
<para>New guild widget information </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1guild__widget" kindref="compound">dpp::guild_widget</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2722" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad1332e45cc89e871009e840c25145df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_vanity</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_vanity</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild vanity url, if enabled. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a partial <ref refid="classdpp_1_1invite" kindref="compound">dpp::invite</ref> object for guilds with that feature enabled. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. code will be null if a vanity url for the guild is not set. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-vanity-url">https://discord.com/developers/docs/resources/guild#get-guild-vanity-url</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get vanity URL for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1invite" kindref="compound">dpp::invite</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref> filled to match the vanity url. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2733" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7a6352ff9824bf2a5fdd3e41b8da8155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_onboarding</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_onboarding</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the guild&apos;s onboarding configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-onboarding">https://discord.com/developers/docs/resources/guild#get-guild-onboarding</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>The onboarding object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1onboarding" kindref="compound">dpp::onboarding</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref> filled to match the vanity url. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2743" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa31987df09d132a45b2d0f5b719df9e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_edit_onboarding</definition>
        <argsstring>(const struct onboarding &amp;o, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_edit_onboarding</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1onboarding" kindref="compound">onboarding</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit the guild&apos;s onboarding configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> and <computeroutput>MANAGE_ROLES</computeroutput> permissions.</para>
<para><simplesect kind="note"><para>Onboarding enforces constraints when enabled. These constraints are that there must be at least 7 Default Channels and at least 5 of them must allow sending messages to the @everyone role. The <computeroutput><ref refid="structdpp_1_1onboarding_1ae3d9e7cc64867f0b586fc157c37aaeb5" kindref="member">onboarding::mode</ref></computeroutput> field modifies what is considered when enforcing these constraints.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-onboarding">https://discord.com/developers/docs/resources/guild#modify-guild-onboarding</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>The onboarding object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1onboarding" kindref="compound">dpp::onboarding</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref> filled to match the vanity url. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2758" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a864553916e3ddee27517b092de35fd12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_welcome_screen</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_welcome_screen</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the guild&apos;s welcome screen. </para>
        </briefdescription>
        <detaileddescription>
<para>If the welcome screen is not enabled, the <computeroutput>MANAGE_GUILD</computeroutput> permission is required.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-welcome-screen">https://discord.com/developers/docs/resources/guild#get-guild-welcome-screen</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild ID to get the welcome screen from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1welcome__screen" kindref="compound">dpp::welcome_screen</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref> filled to match the vanity url. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2770" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a077a0f54778632d4a76794f53075b341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_edit_welcome_screen</definition>
        <argsstring>(snowflake guild_id, const struct welcome_screen &amp;welcome_screen, bool enabled, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_edit_welcome_screen</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1welcome__screen" kindref="compound">welcome_screen</ref> &amp;</type>
          <declname>welcome_screen</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit the guild&apos;s welcome screen. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. May fire a <computeroutput>Guild Update</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-welcome-screen">https://discord.com/developers/docs/resources/guild#modify-guild-welcome-screen</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild ID to edit the welcome screen for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structdpp_1_1welcome__screen" kindref="compound">welcome_screen</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The welcome screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the welcome screen should be enabled or disabled </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1welcome__screen" kindref="compound">dpp::welcome_screen</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref> filled to match the vanity url. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2784" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a634f650e53df2d3535131870985e0313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::create_webhook</definition>
        <argsstring>(const class webhook &amp;w, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>create_webhook</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#create-webhook">https://discord.com/developers/docs/resources/webhook#create-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1webhook" kindref="compound">dpp::webhook</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2794" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8d352afcbc0430ca11576386278da7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_guild_webhooks</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>get_guild_webhooks</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild webhooks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-guild-webhooks">https://discord.com/developers/docs/resources/webhook#get-guild-webhooks</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get webhooks for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a1cb0cc074a1653521bab47f83498e9ca" kindref="member">dpp::webhook_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2803" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae58b1f27711b42e9aa8a21e34147429f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_channel_webhooks</definition>
        <argsstring>(snowflake channel_id, command_completion_event_t callback)</argsstring>
        <name>get_channel_webhooks</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get channel webhooks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-guild-webhooks">https://discord.com/developers/docs/resources/webhook#get-guild-webhooks</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to get webhooks for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a1cb0cc074a1653521bab47f83498e9ca" kindref="member">dpp::webhook_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2812" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a40e140f1e2eda9632828bce461bc7338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_webhook</definition>
        <argsstring>(snowflake webhook_id, command_completion_event_t callback)</argsstring>
        <name>get_webhook</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook">https://discord.com/developers/docs/resources/webhook#get-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1webhook" kindref="compound">dpp::webhook</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2821" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a770526895ed13e2dfb746decc3f0be67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_webhook_with_token</definition>
        <argsstring>(snowflake webhook_id, const std::string &amp;token, command_completion_event_t callback)</argsstring>
        <name>get_webhook_with_token</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get webhook using token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook-with-token">https://discord.com/developers/docs/resources/webhook#get-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token of webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1webhook" kindref="compound">dpp::webhook</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2831" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad5039e83f20e5c321b78b319fe7608c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::edit_webhook</definition>
        <argsstring>(const class webhook &amp;wh, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>edit_webhook</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#modify-webhook">https://discord.com/developers/docs/resources/webhook#modify-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1webhook" kindref="compound">dpp::webhook</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2841" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a40262f5c4ef4a56fe394e91faf0ac8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::edit_webhook_with_token</definition>
        <argsstring>(const class webhook &amp;wh, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>edit_webhook_with_token</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit webhook with token (token is encapsulated in the webhook object) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token">https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit (should include token) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1webhook" kindref="compound">dpp::webhook</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2850" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa2f345c51a6a933a29e2e86d50d6a20e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::delete_webhook</definition>
        <argsstring>(snowflake webhook_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>delete_webhook</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook">https://discord.com/developers/docs/resources/webhook#delete-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2860" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4556a4647c5fd1468fe6918a2f637984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::delete_webhook_with_token</definition>
        <argsstring>(snowflake webhook_id, const std::string &amp;token, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>delete_webhook_with_token</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete webhook with token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token">https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token of webhook to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2870" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0417d872a41150d122901fd300a89190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::execute_webhook</definition>
        <argsstring>(const class webhook &amp;wh, const struct message &amp;m, bool wait=false, snowflake thread_id=0, const std::string &amp;thread_name=&quot;&quot;, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>execute_webhook</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Execute webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#execute-webhook">https://discord.com/developers/docs/resources/webhook#execute-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to execute </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait</parametername>
</parameternamelist>
<parameterdescription>
<para>waits for server confirmation of message send before response, and returns the created message body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Send a message to the specified thread within a webhook&apos;s channel. The thread will automatically be unarchived </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of thread to create (requires the webhook channel to be a forum channel) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If the webhook channel is a forum channel, you must provide either <computeroutput>thread_id</computeroutput> or <computeroutput>thread_name</computeroutput>. If <computeroutput>thread_id</computeroutput> is provided, the message will send in that thread. If <computeroutput>thread_name</computeroutput> is provided, a thread with that name will be created in the forum channel. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2885" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8ff6d3aec04b3bc1ce06a3d077495994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_webhook_message</definition>
        <argsstring>(const class webhook &amp;wh, snowflake message_id, snowflake thread_id=0, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>get_webhook_message</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Get webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook-message">https://discord.com/developers/docs/resources/webhook#get-webhook-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to get the original message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread the message is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2897" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a006039f6dfb56c6b49a9c9baec463563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::edit_webhook_message</definition>
        <argsstring>(const class webhook &amp;wh, const struct message &amp;m, snowflake thread_id=0, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>edit_webhook_message</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para>When the content field is edited, the mentions array in the message object will be reconstructed from scratch based on the new content. The allowed_mentions field of the edit request controls how this happens. If there is no explicit allowed_mentions in the edit request, the content will be parsed with default allowances, that is, without regard to whether or not an allowed_mentions was present in the request that originally created the message.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#edit-webhook-message">https://discord.com/developers/docs/resources/webhook#edit-webhook-message</ulink> </para>
</simplesect>
<simplesect kind="note"><para>the attachments array must contain all attachments that should be present after edit, including retained and new attachments provided in the request body. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>New message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread the message is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2915" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5d415cd3438b7d505415a8c183d57adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::delete_webhook_message</definition>
        <argsstring>(const class webhook &amp;wh, snowflake message_id, snowflake thread_id=0, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>delete_webhook_message</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook-message">https://discord.com/developers/docs/resources/webhook#delete-webhook-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to delete message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread the message is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2927" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a884dbb70619fcf92b06577dea8093219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::roles_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>roles_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a role for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-roles">https://discord.com/developers/docs/resources/guild#get-guild-roles</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get role for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1adb1c0770936ed4ac64158cf9523e638b" kindref="member">dpp::role_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2938" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a849017410297379997601daac5e99ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::role_create</definition>
        <argsstring>(const class role &amp;r, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>role_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a role on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new role for the guild. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Returns the new role object on success. Fires a <computeroutput>Guild Role Create</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild-role">https://discord.com/developers/docs/resources/guild#create-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to create (guild ID is encapsulated in the role object) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1role" kindref="compound">dpp::role</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2952" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab6bc6ef9b6f1ef9aa5b9c1391ccedbf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::role_edit</definition>
        <argsstring>(const class role &amp;r, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>role_edit</name>
        <param>
          <type>const class <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a role on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Returns the updated role on success. Fires a <computeroutput>Guild Role Update</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-role">https://discord.com/developers/docs/resources/guild#modify-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1role" kindref="compound">dpp::role</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2965" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3549d2ebe52210d7b98adeb766b968b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::roles_edit_position</definition>
        <argsstring>(snowflake guild_id, const std::vector&lt; role &gt; &amp;roles, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>roles_edit_position</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1role" kindref="compound">role</ref> &gt; &amp;</type>
          <declname>roles</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit multiple role&apos;s position in a guild. Returns a list of all roles of the guild on success. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify the positions of a set of role objects for the guild. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires multiple <computeroutput>Guild Role Update</computeroutput> Gateway events.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-role-positions">https://discord.com/developers/docs/resources/guild#modify-guild-role-positions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change the roles position on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roles</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of roles to change the positions of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1adb1c0770936ed4ac64158cf9523e638b" kindref="member">dpp::role_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2980" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6d4cdab9c22eefdeba0d28105c006b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::role_delete</definition>
        <argsstring>(snowflake guild_id, snowflake role_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>role_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a role. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Role Delete</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild-role">https://discord.com/developers/docs/resources/guild#delete-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete the role on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="2994" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae66aa8feb8759ff76301aac34c97cc7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::application_role_connection_get</definition>
        <argsstring>(snowflake application_id, command_completion_event_t callback)</argsstring>
        <name>application_role_connection_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the application&apos;s role connection metadata records. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/application-role-connection-metadata#get-application-role-connection-metadata-records">https://discord.com/developers/docs/resources/application-role-connection-metadata#get-application-role-connection-metadata-records</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a91276efac2bca1f8fe69b27a3bbc821f" kindref="member">dpp::application_role_connection_metadata_list</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3004" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afa094e7895245b07195a3b4ec013af0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::application_role_connection_update</definition>
        <argsstring>(snowflake application_id, const std::vector&lt; application_role_connection_metadata &gt; &amp;connection_metadata, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>application_role_connection_update</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1application__role__connection__metadata" kindref="compound">application_role_connection_metadata</ref> &gt; &amp;</type>
          <declname>connection_metadata</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Update the application&apos;s role connection metadata records. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/application-role-connection-metadata#update-application-role-connection-metadata-records">https://discord.com/developers/docs/resources/application-role-connection-metadata#update-application-role-connection-metadata-records</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connection_metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>The application role connection metadata to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a91276efac2bca1f8fe69b27a3bbc821f" kindref="member">dpp::application_role_connection_metadata_list</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>An application can have a maximum of 5 metadata records. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3016" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3f3fc4fdfc918f7383773bda717134bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::user_application_role_connection_get</definition>
        <argsstring>(snowflake application_id, command_completion_event_t callback)</argsstring>
        <name>user_application_role_connection_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get user application role connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user-application-role-connection">https://discord.com/developers/docs/resources/user#get-user-application-role-connection</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1application__role__connection" kindref="compound">dpp::application_role_connection</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3026" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac6426506b0175419913b157ad9f10f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::user_application_role_connection_update</definition>
        <argsstring>(snowflake application_id, const application_role_connection &amp;connection, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>user_application_role_connection_update</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> &amp;</type>
          <declname>connection</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Update user application role connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#update-user-application-role-connection">https://discord.com/developers/docs/resources/user#update-user-application-role-connection</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>The application role connection to update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1application__role__connection" kindref="compound">dpp::application_role_connection</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3037" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a73483dbeb0f1946dc18b1d0a5331b0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::user_get</definition>
        <argsstring>(snowflake user_id, command_completion_event_t callback)</argsstring>
        <name>user_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a user by id, without using the cache. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user">https://discord.com/developers/docs/resources/user#get-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1user__identified" kindref="compound">dpp::user_identified</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> to user with <computeroutput>dynamic_cast</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>unless you want something special from <computeroutput><ref refid="classdpp_1_1user__identified" kindref="compound">dpp::user_identified</ref></computeroutput> or you&apos;ve turned off caching, you have no need to call this. Call <computeroutput><ref refid="namespacedpp_1aafb458435d5650149340555ecd43f93f" kindref="member">dpp::find_user</ref></computeroutput> instead that looks up the user in the cache rather than a REST call. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3051" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a00caec14273460343d60830dcb6bea9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::user_get_cached</definition>
        <argsstring>(snowflake user_id, command_completion_event_t callback)</argsstring>
        <name>user_get_cached</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a user by id, checking in the cache first. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user">https://discord.com/developers/docs/resources/user#get-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1user__identified" kindref="compound">dpp::user_identified</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> to user with <computeroutput>dynamic_cast</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>If the user is found in the cache, special values set in <computeroutput><ref refid="classdpp_1_1user__identified" kindref="compound">dpp::user_identified</ref></computeroutput> will be undefined. This call should be used where you want to for example resolve a user who may no longer be in the bot&apos;s guilds, for something like a ban log message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3065" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aad927e85ed6b99e9b05f4190f1b19cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_get</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>current_user_get</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get current (bot) user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-current-user">https://discord.com/developers/docs/resources/user#get-current-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1user__identified" kindref="compound">dpp::user_identified</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> to user with <computeroutput>dynamic_cast</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3076" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac3dc39069aaaa492727f39b35edd957e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_application_get</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>current_application_get</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get current (bot) application. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/oauth2#get-current-bot-application-information">https://discord.com/developers/docs/topics/oauth2#get-current-bot-application-information</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1application" kindref="compound">dpp::application</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3085" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab55ebdf053917a35368be4d86237af33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_current_member_edit</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;nickname, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_current_member_edit</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Modify current member. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the current member in a guild. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event.</para>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-member">https://discord.com/developers/docs/resources/guild#modify-current-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>New nickname, or empty string to clear nickname </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3100" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a75e1e5dd813d36fffd6b532ed1b31178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_connections_get</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>current_user_connections_get</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get current user&apos;s connections (linked accounts, e.g. steam, xbox). This call requires the oauth2 <computeroutput>connections</computeroutput> scope and cannot be executed against a bot token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user-connections">https://discord.com/developers/docs/resources/user#get-user-connections</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1ad5f78f7b7bca070ac34c0267ca49013a" kindref="member">dpp::connection_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3110" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a93c8fd5f22e0eae6bf357ad498b43f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_get_guilds</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>current_user_get_guilds</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get current (bot) user guilds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-current-user-guilds">https://discord.com/developers/docs/resources/user#get-current-user-guilds</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a0d9e1952e25391a3379ee3db2d930bf7" kindref="member">dpp::guild_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3118" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a114d7930f0a219ef974143b65134a2f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_edit</definition>
        <argsstring>(const std::string &amp;nickname, const std::string &amp;image_blob=&quot;&quot;, const image_type type=i_png, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>current_user_edit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>image_blob</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit current (bot) user. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the current member in a guild. Returns the updated <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> object on success. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#modify-current-user">https://discord.com/developers/docs/resources/user#modify-current-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>Avatar data to upload (NOTE: Very heavily rate limited!) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of image for avatar. It can be one of <computeroutput>i_gif</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1length__exception" kindref="compound">dpp::length_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Image data is larger than the maximum size of 256 kilobytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3133" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a662fc0a998c62395f166da5e4a2acaf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_get_dms</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>current_user_get_dms</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get current user DM channels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a7c77c4dd9434985643b2f1993b227f30" kindref="member">dpp::channel_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3141" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aab0538838d054a0c80c07cd0556a894c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::create_dm_channel</definition>
        <argsstring>(snowflake user_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>create_dm_channel</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a dm channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#create-dm">https://discord.com/developers/docs/resources/user#create-dm</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to create DM channel with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1channel" kindref="compound">dpp::channel</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3150" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4fd6cc6c6635e6e0a9bdddcc6cda0e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_leave_guild</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>current_user_leave_guild</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Leave a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#leave-guild">https://discord.com/developers/docs/resources/user#leave-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to leave </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3159" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad96d8fcec4c69d82fd4f2fb85ddfa2bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_create_in_forum</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, const message &amp;msg, auto_archive_duration_t auto_archive_duration, uint16_t rate_limit_per_user, std::vector&lt; snowflake &gt; applied_tags={}, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>thread_create_in_forum</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a9ea85c1ebdea9ba69a289c812bd630f8" kindref="member">auto_archive_duration_t</ref></type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
          <declname>applied_tags</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a thread in a forum or media channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#start-thread-in-forum-channel">https://discord.com/developers/docs/resources/channel#start-thread-in-forum-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the forum thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Forum channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to start the thread with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration to automatically archive the thread after recent activity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>applied_tags</parametername>
</parameternamelist>
<parameterdescription>
<para>List of IDs of forum tags (<ref refid="structdpp_1_1forum__tag" kindref="compound">dpp::forum_tag</ref>) to apply to this thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1thread" kindref="compound">dpp::thread</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3175" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0c41c2fada744b16b48d8a5538e19fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_create</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, uint16_t auto_archive_duration, channel_type thread_type, bool invitable, uint16_t rate_limit_per_user, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>thread_create</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a732e832861149a278f27ea7840b8e4ca" kindref="member">channel_type</ref></type>
          <declname>thread_type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invitable</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#start-thread-without-message">https://discord.com/developers/docs/resources/channel#start-thread-without-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration after which thread auto-archives. Can be set to - 60, 1440 (for boosted guilds can also be: 4320, 10080) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of thread - CHANNEL_PUBLIC_THREAD, CHANNEL_ANNOUNCEMENT_THREAD, CHANNEL_PRIVATE_THREAD </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invitable</parametername>
</parameternamelist>
<parameterdescription>
<para>whether non-moderators can add other non-moderators to a thread; only available when creating a private thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1thread" kindref="compound">dpp::thread</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3191" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2986f2f79b812b0a6d579f557d459aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_edit</definition>
        <argsstring>(const thread &amp;t, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>thread_edit</name>
        <param>
          <type>const <ref refid="classdpp_1_1thread" kindref="compound">thread</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/threads#editing-deleting-threads">https://discord.com/developers/docs/topics/threads#editing-deleting-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1thread" kindref="compound">dpp::thread</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3202" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adf113903aeca27e9994fb366486250d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_create_with_message</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, snowflake message_id, uint16_t auto_archive_duration, uint16_t rate_limit_per_user, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>thread_create_with_message</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a thread with a message (Discord: ID of a thread is same as message ID) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#start-thread-from-message">https://discord.com/developers/docs/resources/channel#start-thread-from-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>message to start thread with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration after which thread auto-archives. Can be set to - 60, 1440 (for boosted guilds can also be: 4320, 10080) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1thread" kindref="compound">dpp::thread</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3216" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa62bc561994b7222712583e46cb68799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_join_thread</definition>
        <argsstring>(snowflake thread_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>current_user_join_thread</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Join a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#join-thread">https://discord.com/developers/docs/resources/channel#join-thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to join </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3225" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3a313be1a4fd6bde99606047761c4518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_leave_thread</definition>
        <argsstring>(snowflake thread_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>current_user_leave_thread</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Leave a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#leave-thread">https://discord.com/developers/docs/resources/channel#leave-thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to leave </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3234" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a905fa0c06477d9d9ecd4a536b54d21aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_member_add</definition>
        <argsstring>(snowflake thread_id, snowflake user_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>thread_member_add</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Add a member to a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#add-thread-member">https://discord.com/developers/docs/resources/channel#add-thread-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to add to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Member ID to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3244" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a754ae607b98b27d54f344db908836c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_member_remove</definition>
        <argsstring>(snowflake thread_id, snowflake user_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>thread_member_remove</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Remove a member from a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#remove-thread-member">https://discord.com/developers/docs/resources/channel#remove-thread-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to remove from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Member ID to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3254" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad39edec2f1389d1aa5bb6c09e4318b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_member_get</definition>
        <argsstring>(const snowflake thread_id, const snowflake user_id, command_completion_event_t callback)</argsstring>
        <name>thread_member_get</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a thread member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-thread-member">https://discord.com/developers/docs/resources/channel#get-thread-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to get member for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the user to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes On success the callback will contain a <ref refid="structdpp_1_1thread__member" kindref="compound">dpp::thread_member</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3264" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a636b55f518a2e724eabf31453aa89abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_members_get</definition>
        <argsstring>(snowflake thread_id, command_completion_event_t callback)</argsstring>
        <name>thread_members_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get members of a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-thread-members">https://discord.com/developers/docs/resources/channel#list-thread-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to get members for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes On success the callback will contain a <ref refid="namespacedpp_1a57e84724c41fed341bee0d653a06076a" kindref="member">dpp::thread_member_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3273" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aefa49b6113343575dbc9dd2e40112847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::threads_get_active</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>threads_get_active</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all active threads in the guild, including public and private threads. Threads are ordered by their id, in descending order. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#list-active-guild-threads">https://discord.com/developers/docs/resources/guild#list-active-guild-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get active threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes On success the callback will contain a <ref refid="namespacedpp_1a161fc59985e2e2f32d24f72397002e46" kindref="member">dpp::active_threads</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3282" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2b93e8be30c7e954c27e19d8b7fa8170" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::threads_get_public_archived</definition>
        <argsstring>(snowflake channel_id, time_t before_timestamp, uint16_t limit, command_completion_event_t callback)</argsstring>
        <name>threads_get_public_archived</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>before_timestamp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get public archived threads in a channel (Sorted by archive_timestamp in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-public-archived-threads">https://discord.com/developers/docs/resources/channel#list-public-archived-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads archived before this timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes On success the callback will contain a <ref refid="namespacedpp_1afb8eae726b5ea68baff8c48d7fb835af" kindref="member">dpp::thread_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3293" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae8336e48eaabaeb8df4d69a087982e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::threads_get_private_archived</definition>
        <argsstring>(snowflake channel_id, time_t before_timestamp, uint16_t limit, command_completion_event_t callback)</argsstring>
        <name>threads_get_private_archived</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>before_timestamp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get private archived threads in a channel (Sorted by archive_timestamp in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-private-archived-threads">https://discord.com/developers/docs/resources/channel#list-private-archived-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads archived before this timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes On success the callback will contain a <ref refid="namespacedpp_1afb8eae726b5ea68baff8c48d7fb835af" kindref="member">dpp::thread_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3304" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0d0c3894cd560fa7871f22d7cfb8f591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::threads_get_joined_private_archived</definition>
        <argsstring>(snowflake channel_id, snowflake before_id, uint16_t limit, command_completion_event_t callback)</argsstring>
        <name>threads_get_joined_private_archived</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get private archived threads in a channel which current user has joined (Sorted by ID in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-joined-private-archived-threads">https://discord.com/developers/docs/resources/channel#list-joined-private-archived-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads before this id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes On success the callback will contain a <ref refid="namespacedpp_1afb8eae726b5ea68baff8c48d7fb835af" kindref="member">dpp::thread_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3315" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae09c9ae57529d89455ed7f3481d629cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_sticker_create</definition>
        <argsstring>(const sticker &amp;s, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_sticker_create</name>
        <param>
          <type>const <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a sticker in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#create-guild-sticker">https://discord.com/developers/docs/resources/sticker#create-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Sticker to create. Must have its guild ID set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1sticker" kindref="compound">dpp::sticker</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3325" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1686a4d8a5a9b01f58c4768b33145b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_sticker_modify</definition>
        <argsstring>(const sticker &amp;s, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_sticker_modify</name>
        <param>
          <type>const <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Modify a sticker in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#modify-guild-sticker">https://discord.com/developers/docs/resources/sticker#modify-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Sticker to modify. Must have its guild ID and sticker ID set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1sticker" kindref="compound">dpp::sticker</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3335" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa93a97a167922bb0a40c6489a928d4fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_sticker_delete</definition>
        <argsstring>(snowflake sticker_id, snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_sticker_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>sticker_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a sticker from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#delete-guild-sticker">https://discord.com/developers/docs/resources/sticker#delete-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sticker_id</parametername>
</parameternamelist>
<parameterdescription>
<para>sticker ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>guild ID to delete from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1sticker" kindref="compound">dpp::sticker</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3346" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a115a49075ceb1817f1e81fc9388bf65e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::nitro_sticker_get</definition>
        <argsstring>(snowflake id, command_completion_event_t callback)</argsstring>
        <name>nitro_sticker_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a nitro sticker. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-sticker">https://discord.com/developers/docs/resources/sticker#get-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of sticker to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1sticker" kindref="compound">dpp::sticker</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3355" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac7a2d335385b4689e7489d0eaf4475fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_sticker_get</definition>
        <argsstring>(snowflake id, snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_sticker_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a guild sticker. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-guild-sticker">https://discord.com/developers/docs/resources/sticker#get-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of sticker to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of the guild where the sticker is </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1sticker" kindref="compound">dpp::sticker</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3365" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adccd1468d3f031c5bc786fdbd087d0a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_stickers_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_stickers_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all guild stickers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-guild-stickers">https://discord.com/developers/docs/resources/sticker#get-guild-stickers</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of the guild where the sticker is </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a0d09f413c01571a98b8ec9a267a0e48f" kindref="member">dpp::sticker_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3374" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae64421a4b2402238feb0536639009c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::sticker_packs_get</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>sticker_packs_get</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a list of available sticker packs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#list-nitro-sticker-packs">https://discord.com/developers/docs/resources/sticker#list-nitro-sticker-packs</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1adc1d24fba1d0f9fbdbe054d31efe5283" kindref="member">dpp::sticker_pack_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3382" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac62b4564e7512125f0b30377b5c7319a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::stage_instance_create</definition>
        <argsstring>(const stage_instance &amp;instance, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>stage_instance_create</name>
        <param>
          <type>const <ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref> &amp;</type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a stage instance on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/stage-instance#create-stage-instance">https://discord.com/developers/docs/resources/stage-instance#create-stage-instance</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage instance to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes On success the callback will contain a <ref refid="structdpp_1_1stage__instance" kindref="compound">dpp::stage_instance</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3392" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1edd6ac5d8553b4823465bebadfaa9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::stage_instance_get</definition>
        <argsstring>(const snowflake channel_id, command_completion_event_t callback)</argsstring>
        <name>stage_instance_get</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the stage instance associated with the channel id, if it exists. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/stage-instance#get-stage-instance">https://discord.com/developers/docs/resources/stage-instance#get-stage-instance</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the associated channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes On success the callback will contain a <ref refid="structdpp_1_1stage__instance" kindref="compound">dpp::stage_instance</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3401" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a720ea171f6c432a2ba0cc897fcc61475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::stage_instance_edit</definition>
        <argsstring>(const stage_instance &amp;instance, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>stage_instance_edit</name>
        <param>
          <type>const <ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref> &amp;</type>
          <declname>instance</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit a stage instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/stage-instance#modify-stage-instance">https://discord.com/developers/docs/resources/stage-instance#modify-stage-instance</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage instance to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes On success the callback will contain a <ref refid="structdpp_1_1stage__instance" kindref="compound">dpp::stage_instance</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3411" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2b4391d87cad53c95e869400534fbd2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::stage_instance_delete</definition>
        <argsstring>(const snowflake channel_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>stage_instance_delete</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a stage instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/stage-instance#delete-stage-instance">https://discord.com/developers/docs/resources/stage-instance#delete-stage-instance</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the associated channel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3421" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af6d45a29b3976f7b623d92e70ab9a1bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_voice_regions</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>get_voice_regions</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/voice#list-voice-regions">https://discord.com/developers/docs/resources/voice#list-voice-regions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1ae90871830444cab0316109a1824fc0b8" kindref="member">dpp::voiceregion_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3429" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a68f16d04f100a0159683cba96e8c0a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_gateway_bot</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>get_gateway_bot</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the gateway information for the bot using the token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway#get-gateway-bot">https://discord.com/developers/docs/topics/gateway#get-gateway-bot</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1gateway" kindref="compound">dpp::gateway</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3437" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae8554f93aed5fb84162af41c997fc1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_events_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_events_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all scheduled events for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild">https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get events for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a1d8eeeaca0cdc14125cbf2f4f0722781" kindref="member">dpp::scheduled_event_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3446" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a09f6a78b9b2ad6218ed1b8c7b044013a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_event_users_get</definition>
        <argsstring>(snowflake guild_id, snowflake event_id, command_completion_event_t callback, uint8_t limit=100, snowflake before=0, snowflake after=0)</argsstring>
        <name>guild_event_users_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>event_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>limit</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get users RSVP&apos;d to an event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users">https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get user list for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get user list for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of results to return </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Return user IDs that fall before this ID, if provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Return user IDs that fall after this ID, if provided </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a912d2a5c3a763ffc462dfb7c4c7a0562" kindref="member">dpp::event_member_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3460" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a360bf7b9dd6b27774be3706a1176f8f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_event_create</definition>
        <argsstring>(const scheduled_event &amp;event, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_event_create</name>
        <param>
          <type>const <ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a scheduled event on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to create (guild ID must be populated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a1d8eeeaca0cdc14125cbf2f4f0722781" kindref="member">dpp::scheduled_event_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3470" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a513c773562fbd9997141c5b317be8087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_event_delete</definition>
        <argsstring>(snowflake event_id, snowflake guild_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_event_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>event_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete a scheduled event from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of event to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3481" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a338867a84983e985b77829f0d9ccb34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_event_edit</definition>
        <argsstring>(const scheduled_event &amp;event, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>guild_event_edit</name>
        <param>
          <type>const <ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit/modify a scheduled event on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to create (event ID and guild ID must be populated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a1d8eeeaca0cdc14125cbf2f4f0722781" kindref="member">dpp::scheduled_event_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3491" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5b8c168682519ee125ed0a48239c08ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_event_get</definition>
        <argsstring>(snowflake guild_id, snowflake event_id, command_completion_event_t callback)</argsstring>
        <name>guild_event_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>event_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a scheduled event for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get event for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1scheduled__event" kindref="compound">dpp::scheduled_event</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3502" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad611ecc2a6231c4bc100e74c1f28ee75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_set_voice_state</definition>
        <argsstring>(snowflake guild_id, snowflake channel_id, bool suppress=false, time_t request_to_speak_timestamp=0, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>current_user_set_voice_state</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>time_t</type>
          <declname>request_to_speak_timestamp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Set the bot&apos;s voice state on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Caveats</bold></para>
<para>There are currently several caveats for this endpoint:</para>
<para><itemizedlist>
<listitem><para><computeroutput>channel_id</computeroutput> must currently point to a stage channel.</para>
</listitem><listitem><para>current user must already have joined <computeroutput>channel_id</computeroutput>.</para>
</listitem><listitem><para>You must have the <computeroutput>MUTE_MEMBERS</computeroutput> permission to unsuppress yourself. You can always suppress yourself.</para>
</listitem><listitem><para>You must have the <computeroutput>REQUEST_TO_SPEAK</computeroutput> permission to request to speak. You can always clear your own request to speak.</para>
</listitem><listitem><para>You are able to set <computeroutput>request_to_speak_timestamp</computeroutput> to any present or future time.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-user-voice-state">https://discord.com/developers/docs/resources/guild#modify-current-user-voice-state</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to set voice state on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage channel to set voice state on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the user&apos;s audio should be suppressed, false if it should not </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_to_speak_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The time at which we requested to speak, or 0 to clear the request. The time set here must be the current time or in the future. On success the callback will contain a <ref refid="structdpp_1_1scheduled__event" kindref="compound">dpp::scheduled_event</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_exception</parametername>
</parameternamelist>
<parameterdescription>
<para>You attempted to set a request_to_speak_timestamp in the past which is not the value of 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3526" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a66c65f30625391586fd4cf6614b6a1df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::user_set_voice_state</definition>
        <argsstring>(snowflake user_id, snowflake guild_id, snowflake channel_id, bool suppress=false, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>user_set_voice_state</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Set a user&apos;s voice state on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Caveats</bold></para>
<para>There are currently several caveats for this endpoint:</para>
<para><itemizedlist>
<listitem><para><computeroutput>channel_id</computeroutput> must currently point to a stage channel.</para>
</listitem><listitem><para>User must already have joined <computeroutput>channel_id</computeroutput>.</para>
</listitem><listitem><para>You must have the <computeroutput>MUTE_MEMBERS</computeroutput> permission. (Since suppression is the only thing that is available currently)</para>
</listitem><listitem><para>When unsuppressed, non-bot users will have their <computeroutput>request_to_speak_timestamp</computeroutput> set to the current time. Bot users will not.</para>
</listitem><listitem><para>When suppressed, the user will have their <computeroutput>request_to_speak_timestamp</computeroutput> removed.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-user-voice-state">https://discord.com/developers/docs/resources/guild#modify-user-voice-state</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The user to set the voice state of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to set voice state on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage channel to set voice state on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the user&apos;s audio should be suppressed, false if it should not On success the callback will contain a <ref refid="structdpp_1_1scheduled__event" kindref="compound">dpp::scheduled_event</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3549" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af88b9b913287a87b2d69cf26ebcf6394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::automod_rules_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>automod_rules_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all auto moderation rules for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a9933dc4fb55fa0e30b939b905b9b0df6" kindref="member">dpp::automod_rule_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3558" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1acb7e0e57232db6fa8365443d5868bec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::automod_rule_get</definition>
        <argsstring>(snowflake guild_id, snowflake rule_id, command_completion_event_t callback)</argsstring>
        <name>automod_rule_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>rule_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a single auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Rule id to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1automod__rule" kindref="compound">dpp::automod_rule</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3568" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac7d1f2dbbddfde9f7e7c06270c3e744f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::automod_rule_create</definition>
        <argsstring>(snowflake guild_id, const automod_rule &amp;r, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>automod_rule_create</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Create an auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Auto moderation rule to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1automod__rule" kindref="compound">dpp::automod_rule</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3578" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aafe2796940cd1429cab5471c168ef010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::automod_rule_edit</definition>
        <argsstring>(snowflake guild_id, const automod_rule &amp;r, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>automod_rule_edit</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit an auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Auto moderation rule to edit. The rule&apos;s id must be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1automod__rule" kindref="compound">dpp::automod_rule</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3588" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a39fb700f0bbc716f63d03aa50783759b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::automod_rule_delete</definition>
        <argsstring>(snowflake guild_id, snowflake rule_id, command_completion_event_t callback=utility::log_error())</argsstring>
        <name>automod_rule_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>rule_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete an auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Auto moderation rule id to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="3598" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a336233c9d572ff34612fad878a741509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_global_bulk_command_create</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands)</argsstring>
        <name>co_global_bulk_command_create</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
<para>Create/overwrite global slash commands. Any existing global slash commands will be deleted and replaced with these. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6bbdec2006aa6a44a6448986a32f0dc4" kindref="member">dpp::cluster::global_bulk_command_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands">https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of slash commands to create/update. overwriting existing commands that are registered globally for this application. Updates will be available in all guilds after 1 hour. Commands that do not already exist will count toward daily application command create limits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="41" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="41" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a78b5b5f78ea5025d15cef1b872fa4545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_global_command_create</definition>
        <argsstring>(const slashcommand &amp;s)</argsstring>
        <name>co_global_command_create</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Create a global slash command (a bot can have a maximum of 100 of these). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a11bccddf1068abb215bd6e69ba30b76b" kindref="member">dpp::cluster::global_command_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#create-global-application-command">https://discord.com/developers/docs/interactions/application-commands#create-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="52" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="52" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a66cbf2830c4dcf6bd6917bb120cd52d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_global_command_get</definition>
        <argsstring>(snowflake id)</argsstring>
        <name>co_global_command_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a global slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a398a2b72a5cc084333e3fb5ce1f83727" kindref="member">dpp::cluster::global_command_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-global-application-command">https://discord.com/developers/docs/interactions/application-commands#get-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="63" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="63" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9620a873cc12a1a6f58d9097230d9d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_global_command_delete</definition>
        <argsstring>(snowflake id)</argsstring>
        <name>co_global_command_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Delete a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6efaf2b6ce4557b5a7b039d89f956e3e" kindref="member">dpp::cluster::global_command_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command">https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="74" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="74" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a02b342b184e976f1d2a241410494bb19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_global_command_edit</definition>
        <argsstring>(const slashcommand &amp;s)</argsstring>
        <name>co_global_command_edit</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Edit a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a53e89466c1d02fd7f350bca69bf03d59" kindref="member">dpp::cluster::global_command_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command">https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to change </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="85" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="85" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7abb3438bc255c9707e5c5ade6f75885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_global_commands_get</definition>
        <argsstring>()</argsstring>
        <name>co_global_commands_get</name>
        <briefdescription>
<para>Get the application&apos;s global slash commands. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8a8cadcdde42fcfa8d29c0c4fd0bec5b" kindref="member">dpp::cluster::global_commands_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands">https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands</ulink> </para>
</simplesect>
<simplesect kind="return"><para>slashcommand_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="95" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="95" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae54ed4aeb515d27b4b8d20bf7de78ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_bulk_command_create</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands, snowflake guild_id)</argsstring>
        <name>co_guild_bulk_command_create</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Create/overwrite guild slash commands. Any existing guild slash commands on this guild will be deleted and replaced with these. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a392bb1f732d92fe4b9d8eacdbf4d3ffe" kindref="member">dpp::cluster::guild_bulk_command_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands">https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of slash commands to create/update. New guild commands will be available in the guild immediately. If the command did not already exist, it will count toward daily application command create limits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create/update the slash commands in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="109" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="109" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae32039cc1ae9fd09428b73e991484028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_commands_get_permissions</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_commands_get_permissions</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all slash command permissions of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab7e992a10e120846d39a7d7d3c048ef9" kindref="member">dpp::cluster::guild_commands_get_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash commands permissions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_command_permissions_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="120" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="120" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3ee777c60e4d399ed15c7eb1785a76e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_bulk_command_edit_permissions</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands, snowflake guild_id)</argsstring>
        <name>co_guild_bulk_command_edit_permissions</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Edit/Overwrite the permissions of all existing slash commands in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>You can only add up to 10 permission overwrites for a command</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0dcccabdbf1b3fb41e29145f80aaecb6" kindref="member">dpp::cluster::guild_bulk_command_edit_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#batch-edit-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#batch-edit-application-command-permissions</ulink> </para>
</simplesect>
<simplesect kind="warning"><para>The endpoint will overwrite all existing permissions for all commands of the application in a guild, including slash commands, user commands, and message commands. Meaning that if you forgot to pass a slash command, the permissions of it might be removed. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of slash commands to edit/overwrite the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit permissions of the slash commands in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_command_permissions_map returned object on completion </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000014"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This has been disabled with updates to Permissions v2. You can use guild_command_edit_permissions instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="136" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="136" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1eb6632b5f2d38cc69e1e48a6401873b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_command_create</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id)</argsstring>
        <name>co_guild_command_create</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Create a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6e4a1a241299bcd1b5f6bfd69ae1ead9" kindref="member">dpp::cluster::guild_command_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Creating a command with the same name as an existing command for your application will overwrite the old command. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="149" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="149" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab64a996edd56b38bbaf912eb1524c3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_command_delete</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>co_guild_command_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a210e7585068339c47e71b8ff3d219958" kindref="member">dpp::cluster::guild_command_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="161" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="161" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1064c352d1ae17883d8c8fd81b1dfa5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_command_edit_permissions</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id)</argsstring>
        <name>co_guild_command_edit_permissions</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Edit slash command permissions of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af7c607ba6c25317d4cf86fea933259ce" kindref="member">dpp::cluster::guild_command_edit_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>You can only add up to 10 permission overwrites for a command </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to edit the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="174" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="174" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a65acd4ba1e5e0dfbea45040f3c899119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_command_get</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>co_guild_command_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get a slash command of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad33f299b64e188e935184a32ab8515f1" kindref="member">dpp::cluster::guild_command_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The returned slash commands will not have permissions set, you need to use a permissions getter e.g. dpp::guild_commands_get_permissions to get the guild command permissions </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash command from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="187" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="187" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2bfc0f5e50bc00585790f0bb42c33095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_command_get_permissions</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>co_guild_command_get_permissions</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the permissions for a slash command of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a69ebf194c8bb078ce6998080b552c9ad" kindref="member">dpp::cluster::guild_command_get_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command to get the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the permissions of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__command__permissions" kindref="compound">guild_command_permissions</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="199" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="199" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a57bb591dd81bb49a8db97a2a63b45938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_command_edit</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id)</argsstring>
        <name>co_guild_command_edit</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Edit a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1afbf6872567ddc76148f8537e5b53c192" kindref="member">dpp::cluster::guild_command_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="211" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="211" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a357bdcd8128e7a6993387f4edf8b47ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_commands_get</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_commands_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the application&apos;s slash commands for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a01623d7535dc359905990e710ae3b5e9" kindref="member">dpp::cluster::guild_commands_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-guild-application-commands">https://discord.com/developers/docs/interactions/application-commands#get-guild-application-commands</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The returned slash commands will not have permissions set, you need to use a permissions getter e.g. dpp::guild_commands_get_permissions to get the guild command permissions </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash commands for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="223" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="223" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0823e4b3b4a9f4a3ddf91a08ac49e33b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_interaction_response_create</definition>
        <argsstring>(snowflake interaction_id, const std::string &amp;token, const interaction_response &amp;r)</argsstring>
        <name>co_interaction_response_create</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>interaction_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1interaction__response" kindref="compound">interaction_response</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Respond to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a61e03d7c6a19f6a652d3a80b1a8157ca" kindref="member">dpp::cluster::interaction_response_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interaction_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Interaction id to respond to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Response to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="236" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="236" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa4aeb61237bd340c0985acc68285fd5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_interaction_response_edit</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m)</argsstring>
        <name>co_interaction_response_edit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit response to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a983ac4283ea7ee5261475ec232a2c1bf" kindref="member">dpp::cluster::interaction_response_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="248" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="248" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa7a24e632f5ecde036e90c6acdadb9b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_interaction_response_get_original</definition>
        <argsstring>(const std::string &amp;token)</argsstring>
        <name>co_interaction_response_get_original</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Get the original response to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a7c1ab9427b77d2a251f8ce0dda1596d3" kindref="member">dpp::cluster::interaction_response_get_original</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#get-original-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#get-original-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="259" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="259" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afc5e0aa55bffa6b25b58f95bc90d46b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_interaction_followup_create</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m)</argsstring>
        <name>co_interaction_followup_create</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Create a followup message to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a90096bfbf3b4469eb51f35f74604e902" kindref="member">dpp::cluster::interaction_followup_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>followup message to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="271" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="271" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac5fcfd2ee6dfa534174d26a9d37442a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_interaction_followup_edit_original</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m)</argsstring>
        <name>co_interaction_followup_edit_original</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit original followup message to a slash command This is an alias for <ref refid="classdpp_1_1cluster_1a983ac4283ea7ee5261475ec232a2c1bf" kindref="member">cluster::interaction_response_edit</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae26c81bfce6baf63926232c81e89db9e" kindref="member">dpp::cluster::interaction_followup_edit_original</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a983ac4283ea7ee5261475ec232a2c1bf" kindref="member">cluster::interaction_response_edit</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>message to edit, the ID should be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="284" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="284" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af5007787195983a08991dd9c0448fa74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_interaction_followup_delete</definition>
        <argsstring>(const std::string &amp;token)</argsstring>
        <name>co_interaction_followup_delete</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Delete the initial interaction response. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab0877de7e9587e932b4655681ca634db" kindref="member">dpp::cluster::interaction_followup_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="295" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="295" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a51877cfa4ce3bf50c9e80c19c5a9fa9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_interaction_followup_edit</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m)</argsstring>
        <name>co_interaction_followup_edit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit followup message to a slash command The message ID in the message you pass should be correctly set to that of a followup message you previously sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4038261414555dcebc8b78e96b121265" kindref="member">dpp::cluster::interaction_followup_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#edit-followup-message">https://discord.com/developers/docs/interactions/receiving-and-responding#edit-followup-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>message to edit, the ID should be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="308" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="308" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4a625fe3d4a1cdf08a18088f2b0494e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_interaction_followup_get</definition>
        <argsstring>(const std::string &amp;token, snowflake message_id)</argsstring>
        <name>co_interaction_followup_get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <briefdescription>
<para>Get the followup message to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af92385c3dff6752ecdac1126b67c2f4a" kindref="member">dpp::cluster::interaction_followup_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#get-followup-message">https://discord.com/developers/docs/interactions/receiving-and-responding#get-followup-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>message to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="320" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="320" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afae592de6d2b6c5b727cc54de59b7296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_interaction_followup_get_original</definition>
        <argsstring>(const std::string &amp;token)</argsstring>
        <name>co_interaction_followup_get_original</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Get the original followup message to a slash command This is an alias for <ref refid="classdpp_1_1cluster_1a7c1ab9427b77d2a251f8ce0dda1596d3" kindref="member">cluster::interaction_response_get_original</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae3edfe1883e2fe2cd1bcfeab28e5124e" kindref="member">dpp::cluster::interaction_followup_get_original</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a7c1ab9427b77d2a251f8ce0dda1596d3" kindref="member">cluster::interaction_response_get_original</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="332" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="332" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9a9d5107db333ac8d7c25fe22e1f2df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_automod_rules_get</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_automod_rules_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all auto moderation rules for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>automod_rule_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="341" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="341" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad4f2cbc5dd8334a248a4dfe1f2c3b30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_automod_rule_get</definition>
        <argsstring>(snowflake guild_id, snowflake rule_id)</argsstring>
        <name>co_automod_rule_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>rule_id</declname>
        </param>
        <briefdescription>
<para>Get a single auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Rule id to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="351" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="351" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5f83a8e6f3d338d8cdd8c98259034e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_automod_rule_create</definition>
        <argsstring>(snowflake guild_id, const automod_rule &amp;r)</argsstring>
        <name>co_automod_rule_create</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Create an auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Auto moderation rule to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="361" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="361" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a968bba8ea7940c676f6e0d81d18d1a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_automod_rule_edit</definition>
        <argsstring>(snowflake guild_id, const automod_rule &amp;r)</argsstring>
        <name>co_automod_rule_edit</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Edit an auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Auto moderation rule to edit. The rule&apos;s id must be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="371" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="371" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4e64a07483d26c4b679a3430b8014785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_automod_rule_delete</definition>
        <argsstring>(snowflake guild_id, snowflake rule_id)</argsstring>
        <name>co_automod_rule_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>rule_id</declname>
        </param>
        <briefdescription>
<para>Delete an auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Auto moderation rule id to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="381" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="381" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7df54f6cdc7348bec9753ac36d4cbd01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_create</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>co_channel_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Create a channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new channel object for the guild. Requires the <computeroutput>MANAGE_CHANNELS</computeroutput> permission. If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied. Setting <computeroutput>MANAGE_ROLES</computeroutput> permission in channels is only possible for guild administrators. Returns the new channel object on success. Fires a <computeroutput>Channel Create Gateway</computeroutput> event.</para>
<para>All parameters to this endpoint are optional excluding <computeroutput>name</computeroutput></para>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a66df9163f111cec5a180d642f521660a" kindref="member">dpp::cluster::channel_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-channel">https://discord.com/developers/docs/resources/channel#create-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="399" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="399" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aee350ac6b4380feaabe333db5cfe2368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_delete_permission</definition>
        <argsstring>(const class channel &amp;c, snowflake overwrite_id)</argsstring>
        <name>co_channel_delete_permission</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <briefdescription>
<para>Remove a permission from a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac335bec6c58c7161348b521aad154431" kindref="member">dpp::cluster::channel_delete_permission</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-channel-permission">https://discord.com/developers/docs/resources/channel#delete-channel-permission</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to remove permission from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to remove, user or channel ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="411" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="411" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a00ec3cadd3ad5dfef728afda609546c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_delete</definition>
        <argsstring>(snowflake channel_id)</argsstring>
        <name>co_channel_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a837aa702a92e98ef593381fb147d23fb" kindref="member">dpp::cluster::channel_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#deleteclose-channel">https://discord.com/developers/docs/resources/channel#deleteclose-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="422" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="422" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2d07a62d79ab2b92148f9f6baa9a6547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_edit_permissions</definition>
        <argsstring>(const class channel &amp;c, const snowflake overwrite_id, const uint64_t allow, const uint64_t deny, const bool member)</argsstring>
        <name>co_channel_edit_permissions</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>allow</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>deny</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>member</declname>
        </param>
        <briefdescription>
<para>Edit a channel&apos;s permissions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a55c02ced51fff33b7b8c4832a9857e1e" kindref="member">dpp::cluster::channel_edit_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#edit-channel-permissions">https://discord.com/developers/docs/resources/channel#edit-channel-permissions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to set permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to change (a user or role ID) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow</parametername>
</parameternamelist>
<parameterdescription>
<para>allow permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deny</parametername>
</parameternamelist>
<parameterdescription>
<para>deny permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the overwrite_id is a user id, false if it is a channel id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="438" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="438" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7026a258c8fe01ccfd55b2dfc2d6c756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_edit_permissions</definition>
        <argsstring>(const snowflake channel_id, const snowflake overwrite_id, const uint64_t allow, const uint64_t deny, const bool member)</argsstring>
        <name>co_channel_edit_permissions</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>allow</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>deny</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>member</declname>
        </param>
        <briefdescription>
<para>Edit a channel&apos;s permissions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a55c02ced51fff33b7b8c4832a9857e1e" kindref="member">dpp::cluster::channel_edit_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#edit-channel-permissions">https://discord.com/developers/docs/resources/channel#edit-channel-permissions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the channel to set permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to change (a user or role ID) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow</parametername>
</parameternamelist>
<parameterdescription>
<para>allow permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deny</parametername>
</parameternamelist>
<parameterdescription>
<para>deny permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the overwrite_id is a user id, false if it is a channel id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="454" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="454" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac54db21fbc4bcfca3d7aaa2bf7f404f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_edit_positions</definition>
        <argsstring>(const std::vector&lt; channel &gt; &amp;c)</argsstring>
        <name>co_channel_edit_positions</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Edit multiple channels positions. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify the positions of a set of channel objects for the guild. Requires <computeroutput>MANAGE_CHANNELS</computeroutput> permission. Fires multiple <computeroutput>Channel Update Gateway</computeroutput> events. Only channels to be modified are required.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa005ff4940e700f034b01e197670837b" kindref="member">dpp::cluster::channel_edit_positions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions">https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to change the position for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="469" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="469" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6cdfebcfdb4430da482a5c6620eeafab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_edit</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>co_channel_edit</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Edit a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8ca7054e8447493eb1136f4972053b0f" kindref="member">dpp::cluster::channel_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#modify-channel">https://discord.com/developers/docs/resources/channel#modify-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to edit/update </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="480" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="480" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6d2d574b2afde1845f902efc6d4d7d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_follow_news</definition>
        <argsstring>(const class channel &amp;c, snowflake target_channel_id)</argsstring>
        <name>co_channel_follow_news</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>target_channel_id</declname>
        </param>
        <briefdescription>
<para>Follow an announcement (news) channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a83fa90627b403c4489320b64d6e31c8c" kindref="member">dpp::cluster::channel_follow_news</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#follow-news-channel">https://discord.com/developers/docs/resources/channel#follow-news-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to follow </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to subscribe the channel to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="491" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="491" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aebd4fea6c8087065108610546d2d7ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_get</definition>
        <argsstring>(snowflake c)</argsstring>
        <name>co_channel_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Get a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a108f6f06b43709c8d47df5f94a3ca0a5" kindref="member">dpp::cluster::channel_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel">https://discord.com/developers/docs/resources/channel#get-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="502" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="502" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa42692d4a1acee3126b4c917b73f9c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_invite_create</definition>
        <argsstring>(const class channel &amp;c, const class invite &amp;i)</argsstring>
        <name>co_channel_invite_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Create invite for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5e3f97577e5948896b38836fd293cefd" kindref="member">dpp::cluster::channel_invite_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-channel-invite">https://discord.com/developers/docs/resources/channel#create-channel-invite</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to create an invite on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="514" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="514" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a566977c5d61d0596ce805e84a9dbe5b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_invites_get</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>co_channel_invites_get</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Get invites for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa03a0da5c8e6801dc56bda258265da04" kindref="member">dpp::cluster::channel_invites_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/invite#get-invites">https://discord.com/developers/docs/resources/invite#get-invites</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get invites for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="525" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="525" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a14d47f8eb8c59209b9c06ed67a6c5ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_typing</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>co_channel_typing</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Trigger channel typing indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aff1ad5764f2878eec2e7cbed3a231bbe" kindref="member">dpp::cluster::channel_typing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#trigger-typing-indicator">https://discord.com/developers/docs/resources/channel#trigger-typing-indicator</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to set as typing on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="535" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="535" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3e51c984fc44e6347d9993e78292a7f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_typing</definition>
        <argsstring>(snowflake cid)</argsstring>
        <name>co_channel_typing</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>cid</declname>
        </param>
        <briefdescription>
<para>Trigger channel typing indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aff1ad5764f2878eec2e7cbed3a231bbe" kindref="member">dpp::cluster::channel_typing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#trigger-typing-indicator">https://discord.com/developers/docs/resources/channel#trigger-typing-indicator</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to set as typing on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="545" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="545" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2845de229ea00966b0f00b674d54b6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channels_get</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_channels_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all channels for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a24e67431b79cc2c3d0f12d59afd5a1c8" kindref="member">dpp::cluster::channels_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channels">https://discord.com/developers/docs/resources/channel#get-channels</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to retrieve channels for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="556" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="556" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8519977f32198ee10ab34d9e51b7c602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_create_dm_channel</definition>
        <argsstring>(snowflake user_id)</argsstring>
        <name>co_create_dm_channel</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Create a dm channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aab0538838d054a0c80c07cd0556a894c" kindref="member">dpp::cluster::create_dm_channel</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#create-dm">https://discord.com/developers/docs/resources/user#create-dm</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to create DM channel with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="566" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="566" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab5f50a1379164c2c30f4e4ba9292a688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_current_user_get_dms</definition>
        <argsstring>()</argsstring>
        <name>co_current_user_get_dms</name>
        <briefdescription>
<para>Get current user DM channels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>channel_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="574" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="574" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adfc26c3868c79c436fd8c5d03859d10e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_direct_message_create</definition>
        <argsstring>(snowflake user_id, const message &amp;m)</argsstring>
        <name>co_direct_message_create</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Create a direct message, also create the channel for the direct message if needed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa88bbdcc5005da82928497545e9455bc" kindref="member">dpp::cluster::direct_message_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#create-dm">https://discord.com/developers/docs/resources/user#create-dm</ulink> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa88bbdcc5005da82928497545e9455bc" kindref="member">dpp::cluster::direct_message_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-message">https://discord.com/developers/docs/resources/channel#create-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of user to send message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="588" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="588" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0bc57cc401b552fec540971764ed0ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_gdm_add</definition>
        <argsstring>(snowflake channel_id, snowflake user_id, const std::string &amp;access_token, const std::string &amp;nick)</argsstring>
        <name>co_gdm_add</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_token</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nick</declname>
        </param>
        <briefdescription>
<para>Adds a recipient to a Group DM using their access token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab9aec491f4116fa33aeabf1e614051f0" kindref="member">dpp::cluster::gdm_add</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#group-dm-add-recipient">https://discord.com/developers/docs/resources/channel#group-dm-add-recipient</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to add group DM recipients to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_token</parametername>
</parameternamelist>
<parameterdescription>
<para>Access token from OAuth2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname of user to apply to the chat </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="601" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="601" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af7bd07bead431c72b43cbdb18fe3188a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_gdm_remove</definition>
        <argsstring>(snowflake channel_id, snowflake user_id)</argsstring>
        <name>co_gdm_remove</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Removes a recipient from a Group DM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0d130c81079f3b55c440710f5ea0470e" kindref="member">dpp::cluster::gdm_remove</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#group-dm-remove-recipient">https://discord.com/developers/docs/resources/channel#group-dm-remove-recipient</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID of group DM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove from group DM </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="612" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="612" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac9bf5283f8e804dbcb6efabb9654593f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_emoji_create</definition>
        <argsstring>(snowflake guild_id, const class emoji &amp;newemoji)</argsstring>
        <name>co_guild_emoji_create</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
          <declname>newemoji</declname>
        </param>
        <briefdescription>
<para>Create single emoji. You must ensure that the emoji passed contained image data using the <ref refid="classdpp_1_1emoji_1afb0fd2592f901c60d505bc4ac5226e49" kindref="member">emoji::load_image()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8bea7e9ba3d487e9a6b2fe747c98e9e1" kindref="member">dpp::cluster::guild_emoji_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#create-guild-emoji">https://discord.com/developers/docs/resources/emoji#create-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create emoji om </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newemoji</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="626" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="626" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aea1a32265a6c71c6779c161762e628d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_emoji_delete</definition>
        <argsstring>(snowflake guild_id, snowflake emoji_id)</argsstring>
        <name>co_guild_emoji_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>emoji_id</declname>
        </param>
        <briefdescription>
<para>Delete a guild emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a55b6d9100c34ea5bbbe37d3ba5089be3" kindref="member">dpp::cluster::guild_emoji_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#delete-guild-emoji">https://discord.com/developers/docs/resources/emoji#delete-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete emoji on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emoji_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="639" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="639" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af45ab2952178ece3c5f99f35d6a0ee00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_emoji_edit</definition>
        <argsstring>(snowflake guild_id, const class emoji &amp;newemoji)</argsstring>
        <name>co_guild_emoji_edit</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
          <declname>newemoji</declname>
        </param>
        <briefdescription>
<para>Edit a single emoji. </para>
        </briefdescription>
        <detaileddescription>
<para>You must ensure that the emoji passed contained image data using the <ref refid="classdpp_1_1emoji_1afb0fd2592f901c60d505bc4ac5226e49" kindref="member">emoji::load_image()</ref> method. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a7461e2fa96c4bf77468226ffb25744ea" kindref="member">dpp::cluster::guild_emoji_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#modify-guild-emoji">https://discord.com/developers/docs/resources/emoji#modify-guild-emoji</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit emoji on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newemoji</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="653" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="653" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa6a6a7c234742add614b3bc71ccd8b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_emoji_get</definition>
        <argsstring>(snowflake guild_id, snowflake emoji_id)</argsstring>
        <name>co_guild_emoji_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>emoji_id</declname>
        </param>
        <briefdescription>
<para>Get a single emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ada721a222fb3a42a1a1bb6d93dfcc745" kindref="member">dpp::cluster::guild_emoji_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#get-guild-emoji">https://discord.com/developers/docs/resources/emoji#get-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get emoji for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emoji_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="665" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="665" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1875852bae2bd1bbbe4ed6f3a2b6ff94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_emojis_get</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_emojis_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all emojis for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad66ab98a72eb1ba8d2686fcaa1eb49db" kindref="member">dpp::cluster::guild_emojis_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#list-guild-emojis">https://discord.com/developers/docs/resources/emoji#list-guild-emojis</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get emojis for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="676" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="676" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a700ce06be7970ce81e2b895d9b70c340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_get_gateway_bot</definition>
        <argsstring>()</argsstring>
        <name>co_get_gateway_bot</name>
        <briefdescription>
<para>Get the gateway information for the bot using the token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a68f16d04f100a0159683cba96e8c0a6c" kindref="member">dpp::cluster::get_gateway_bot</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway#get-gateway-bot">https://discord.com/developers/docs/topics/gateway#get-gateway-bot</ulink> </para>
</simplesect>
<simplesect kind="return"><para>gateway returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="685" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="685" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a77e1f28445fb2ce3c52d940286e6c334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_current_member_edit</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;nickname)</argsstring>
        <name>co_guild_current_member_edit</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <briefdescription>
<para>Modify current member. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the current member in a guild. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event.</para>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab55ebdf053917a35368be4d86237af33" kindref="member">dpp::cluster::guild_current_member_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-member">https://discord.com/developers/docs/resources/guild#modify-current-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>New nickname, or empty string to clear nickname </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="701" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="701" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8cb4793694731c788b439be31c455966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_auditlog_get</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, uint32_t action_type, snowflake before, snowflake after, uint32_t limit)</argsstring>
        <name>co_guild_auditlog_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>action_type</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get the audit log for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aac1d1a95eac3a6c38370083abbba9d67" kindref="member">dpp::cluster::guild_auditlog_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log">https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get the audit log of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries from a specific user ID. Set this to <computeroutput>0</computeroutput> will fetch any user </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries for a specific <ref refid="namespacedpp_1a29a51ae6f6d959baee7d5e77d53d6c3d" kindref="member">dpp::audit_type</ref>. Set this to <computeroutput>0</computeroutput> will fetch any type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries with ID less than a specific audit log entry ID. Used for paginating </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries with ID greater than a specific audit log entry ID. Used for paginating </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of entries (between 1-100) to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auditlog returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="717" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="717" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a406e8ca352529a61ee11fd7cfcb127cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_ban_add</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, uint32_t delete_message_seconds=0)</argsstring>
        <name>co_guild_ban_add</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>delete_message_seconds</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Add guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a guild ban, and optionally delete previous messages sent by the banned user. Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Ban Add</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a00fe9bf79228a671d618e9fb27b5684a" kindref="member">dpp::cluster::guild_ban_add</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild-ban">https://discord.com/developers/docs/resources/guild#create-guild-ban</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to add ban to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to ban </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delete_message_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>How many seconds to delete messages for, between 0 and 604800 (7 days). Defaults to 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="733" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="733" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a89c29c9484a16717c92539d25c00bc8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_ban_delete</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>co_guild_ban_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Delete guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the ban for a user. Requires the <computeroutput>BAN_MEMBERS</computeroutput> permissions. Fires a Guild Ban Remove Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a77f277230e3cd4d34eac3d2d9838f6d7" kindref="member">dpp::cluster::guild_ban_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-ban">https://discord.com/developers/docs/resources/guild#remove-guild-ban</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to delete ban from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to delete ban for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="748" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="748" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afc556903538e3b3dcf66cebd1abcf217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_create</definition>
        <argsstring>(const class guild &amp;g)</argsstring>
        <name>co_guild_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Create a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new guild. Returns a guild object on success. <computeroutput>Fires a Guild Create Gateway</computeroutput> event.</para>
<para>When using the roles parameter, the first member of the array is used to change properties of the guild&apos;s everyone role. If you are trying to bootstrap a guild with additional roles, keep this in mind. The required id field within each role object is an integer placeholder, and will be replaced by the API upon consumption. Its purpose is to allow you to overwrite a role&apos;s permissions in a channel when also passing in channels with the channels array. When using the channels parameter, the position field is ignored, and none of the default channels are created. The id field within each channel object may be set to an integer placeholder, and will be replaced by the API upon consumption. Its purpose is to allow you to create <computeroutput>GUILD_CATEGORY</computeroutput> channels by setting the <computeroutput>parent_id</computeroutput> field on any children to the category&apos;s id field. Category channels must be listed before any children.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8e7f40eadf7748bcf35f67d152c3462c" kindref="member">dpp::cluster::guild_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild">https://discord.com/developers/docs/resources/guild#create-guild</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The region field is deprecated and is replaced by <ref refid="classdpp_1_1channel_1a05f56fbd37e993e0fc36df06b3d65bad" kindref="member">channel.rtc_region</ref>. This endpoint can be used only by bots in less than 10 guilds. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="771" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="771" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a138cb826f27bb7cbd1b16bf146d75a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_delete</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete a guild permanently. User must be owner. Fires a <computeroutput>Guild Delete Gateway</computeroutput> event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9b0fccd64f8d21340fe20642d9fdb1e9" kindref="member">dpp::cluster::guild_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild">https://discord.com/developers/docs/resources/guild#delete-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="784" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="784" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a56b6b7061df4463c399e8477149b9a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_delete_integration</definition>
        <argsstring>(snowflake guild_id, snowflake integration_id)</argsstring>
        <name>co_guild_delete_integration</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>integration_id</declname>
        </param>
        <briefdescription>
<para>Delete guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete the attached integration object for the guild. Deletes any associated webhooks and kicks the associated bot if there is one. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. Fires a Guild Integrations Update Gateway event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab4ed64619f058ac4b71a90066e7aac73" kindref="member">dpp::cluster::guild_delete_integration</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild-integration">https://discord.com/developers/docs/resources/guild#delete-guild-integration</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete integration for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="800" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="800" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7e428ca24e5538ace5cb3090ccae818b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_edit</definition>
        <argsstring>(const class guild &amp;g)</argsstring>
        <name>co_guild_edit</name>
        <param>
          <type>const class <ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Edit a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify a guild&apos;s settings. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. Returns the updated guild object on success. Fires a <computeroutput>Guild Update Gateway</computeroutput> event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a54e2174822bb1796a541f849d568664c" kindref="member">dpp::cluster::guild_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild">https://discord.com/developers/docs/resources/guild#modify-guild</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="815" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="815" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a79f0146fd8d01101367d95ada0d2989b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_edit_widget</definition>
        <argsstring>(snowflake guild_id, const class guild_widget &amp;gw)</argsstring>
        <name>co_guild_edit_widget</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1guild__widget" kindref="compound">guild_widget</ref> &amp;</type>
          <declname>gw</declname>
        </param>
        <briefdescription>
<para>Edit guild widget. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae97d98927594cee1821c4ff318eb9561" kindref="member">dpp::cluster::guild_edit_widget</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-widget">https://discord.com/developers/docs/resources/guild#modify-guild-widget</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit widget for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gw</parametername>
</parameternamelist>
<parameterdescription>
<para>New guild widget information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__widget" kindref="compound">guild_widget</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="830" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="830" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad7484d84408c910c27fdb79a76f7b411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_ban</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>co_guild_get_ban</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get single guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad871d30ed11d0799da4a831ede8a7d95" kindref="member">dpp::cluster::guild_get_ban</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-ban">https://discord.com/developers/docs/resources/guild#get-guild-ban</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get ban for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of ban to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ban returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="843" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="843" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a750c165decef57b3949186ebb635a7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_bans</definition>
        <argsstring>(snowflake guild_id, snowflake before, snowflake after, snowflake limit)</argsstring>
        <name>co_guild_get_bans</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get guild ban list. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac7fe3385e506ea073076bc4fb57f06c3" kindref="member">dpp::cluster::guild_get_bans</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-bans">https://discord.com/developers/docs/resources/guild#get-guild-bans</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Provide a user ID to <computeroutput>before</computeroutput> and <computeroutput>after</computeroutput> for pagination. Users will always be returned in ascending order by the user ID. If both before and after are provided, only before is respected. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get bans for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-zero, all bans for user ids before this user id will be returned up to the limit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-zero, all bans for user ids after this user id will be returned up to the limit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of bans to retrieve in this call up to a maximum of 1000 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ban_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="859" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="859" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab59942062ef12766b18fa5c9525975da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_integrations</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_get_integrations</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild integrations. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a43cba3bd187f9b28dcaed5b4f4ed5bda" kindref="member">dpp::cluster::guild_get_integrations</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-integrations">https://discord.com/developers/docs/resources/guild#get-guild-integrations</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get integrations for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integration_map returned object on completion</para>
</simplesect>
<simplesect kind="note"><para>This endpoint returns a maximum of 50 integrations. If a guild has more integrations, they cannot be accessed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="877" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="877" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5797aad3312dff554a4a7a689c62ceef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_vanity</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_get_vanity</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild vanity url, if enabled. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a partial <ref refid="classdpp_1_1invite" kindref="compound">dpp::invite</ref> object for guilds with that feature enabled. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. code will be null if a vanity url for the guild is not set. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad1332e45cc89e871009e840c25145df5" kindref="member">dpp::cluster::guild_get_vanity</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-vanity-url">https://discord.com/developers/docs/resources/guild#get-guild-vanity-url</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get vanity URL for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="892" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="892" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad9ff91da8be53d4eb243ee29a866ac36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_widget</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_get_widget</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild widget. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a57626c7a0e06aee1c362b986e44030c2" kindref="member">dpp::cluster::guild_get_widget</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-widget">https://discord.com/developers/docs/resources/guild#get-guild-widget</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get widget for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__widget" kindref="compound">guild_widget</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="905" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="905" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1c16e8c08f2dc4678d7912df35bdead7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_modify_integration</definition>
        <argsstring>(snowflake guild_id, const class integration &amp;i)</argsstring>
        <name>co_guild_modify_integration</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1integration" kindref="compound">integration</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Modify guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0cc29438d9f4a8a42e5f5d44ce44c6db" kindref="member">dpp::cluster::guild_modify_integration</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-integration">https://discord.com/developers/docs/resources/guild#modify-guild-integration</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to modify integration for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration to modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="918" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="918" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a89910305e620dc5e1d304e2abbf381c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_prune_counts</definition>
        <argsstring>(snowflake guild_id, const struct prune &amp;pruneinfo)</argsstring>
        <name>co_guild_get_prune_counts</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &amp;</type>
          <declname>pruneinfo</declname>
        </param>
        <briefdescription>
<para>Get prune counts. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a prune object indicating the number of members that would be removed in a prune operation. Requires the <computeroutput>KICK_MEMBERS</computeroutput> permission. By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the include_roles parameter. Any inactive user that has a subset of the provided role(s) will be counted in the prune and users with additional roles will not.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aad296f07bd5b9f900dcedbf88c464e09" kindref="member">dpp::cluster::guild_get_prune_counts</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-prune-count">https://discord.com/developers/docs/resources/guild#get-guild-prune-count</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to count for pruning </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pruneinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pruning info </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>prune returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="935" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="935" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9daf4d7763bb3832bdfb2606388023f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_begin_prune</definition>
        <argsstring>(snowflake guild_id, const struct prune &amp;pruneinfo)</argsstring>
        <name>co_guild_begin_prune</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &amp;</type>
          <declname>pruneinfo</declname>
        </param>
        <briefdescription>
<para>Begin guild prune. </para>
        </briefdescription>
        <detaileddescription>
<para>Begin a prune operation. Requires the <computeroutput>KICK_MEMBERS</computeroutput> permission. Returns a prune object indicating the number of members that were removed in the prune operation. For large guilds it&apos;s recommended to set the <computeroutput>compute_prune_count</computeroutput> option to false, forcing &apos;pruned&apos; to 0. Fires multiple <computeroutput>Guild Member Remove</computeroutput> Gateway events. By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the <computeroutput>include_roles</computeroutput> parameter. Any inactive user that has a subset of the provided role(s) will be included in the prune and users with additional roles will not.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a68d13c11179006d5271c1a398df58bc2" kindref="member">dpp::cluster::guild_begin_prune</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#begin-guild-prune">https://discord.com/developers/docs/resources/guild#begin-guild-prune</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to prune </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pruneinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pruning info </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>prune returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="954" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="954" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0b19904e0494bf086ac825696f023dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_set_nickname</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;nickname)</argsstring>
        <name>co_guild_set_nickname</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <briefdescription>
<para>Change current user nickname. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the nickname of the current user in a guild. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event.</para>
<para><xrefsect id="deprecated_1_deprecated000015"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Deprecated in favor of Modify Current Member. Will be replaced by <ref refid="classdpp_1_1cluster_1ab55ebdf053917a35368be4d86237af33" kindref="member">dpp::cluster::guild_current_member_edit</ref> </para>
</xrefdescription></xrefsect><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4a8074b289fee0f43d7eafb2bc6ae5c7" kindref="member">dpp::cluster::guild_set_nickname</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-user-nick">https://discord.com/developers/docs/resources/guild#modify-current-user-nick</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change nickname on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>New nickname, or empty string to clear nickname </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="971" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="971" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5686ca9c6bfce0ba888fb6e087ffc21a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_sync_integration</definition>
        <argsstring>(snowflake guild_id, snowflake integration_id)</argsstring>
        <name>co_guild_sync_integration</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>integration_id</declname>
        </param>
        <briefdescription>
<para>Sync guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4bef071b931d0ca71b45ee0d8bf3a96c" kindref="member">dpp::cluster::guild_sync_integration</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#sync-guild-integration">https://discord.com/developers/docs/resources/guild#sync-guild-integration</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to sync integration on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to synchronise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="983" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="983" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7b67f5c628e29e46717e9e7aff26caad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_onboarding</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_get_onboarding</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the guild&apos;s onboarding configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a7a6352ff9824bf2a5fdd3e41b8da8155" kindref="member">dpp::cluster::guild_get_onboarding</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-onboarding">https://discord.com/developers/docs/resources/guild#get-guild-onboarding</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>The onboarding object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>onboarding returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="994" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="994" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aafdb4c8b67dbcdc965fc59196badf778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_edit_onboarding</definition>
        <argsstring>(const struct onboarding &amp;o)</argsstring>
        <name>co_guild_edit_onboarding</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1onboarding" kindref="compound">onboarding</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Edit the guild&apos;s onboarding configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> and <computeroutput>MANAGE_ROLES</computeroutput> permissions.</para>
<para><simplesect kind="note"><para>Onboarding enforces constraints when enabled. These constraints are that there must be at least 7 Default Channels and at least 5 of them must allow sending messages to the @everyone role. The <computeroutput><ref refid="structdpp_1_1onboarding_1ae3d9e7cc64867f0b586fc157c37aaeb5" kindref="member">onboarding::mode</ref></computeroutput> field modifies what is considered when enforcing these constraints.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa31987df09d132a45b2d0f5b719df9e8" kindref="member">dpp::cluster::guild_edit_onboarding</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-onboarding">https://discord.com/developers/docs/resources/guild#modify-guild-onboarding</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>The onboarding object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>onboarding returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1010" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1010" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab738b3aa61bb5be18006b83d457ebd82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_welcome_screen</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_get_welcome_screen</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the guild&apos;s welcome screen. </para>
        </briefdescription>
        <detaileddescription>
<para>If the welcome screen is not enabled, the <computeroutput>MANAGE_GUILD</computeroutput> permission is required.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a864553916e3ddee27517b092de35fd12" kindref="member">dpp::cluster::guild_get_welcome_screen</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-welcome-screen">https://discord.com/developers/docs/resources/guild#get-guild-welcome-screen</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild ID to get the welcome screen from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1welcome__screen" kindref="compound">dpp::welcome_screen</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1023" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1023" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afcf4eb0bc71852fc965aa0e40baf79ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_edit_welcome_screen</definition>
        <argsstring>(snowflake guild_id, const struct welcome_screen &amp;welcome_screen, bool enabled)</argsstring>
        <name>co_guild_edit_welcome_screen</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1welcome__screen" kindref="compound">welcome_screen</ref> &amp;</type>
          <declname>welcome_screen</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Edit the guild&apos;s welcome screen. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. May fire a <computeroutput>Guild Update</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a077a0f54778632d4a76794f53075b341" kindref="member">dpp::cluster::guild_edit_welcome_screen</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-welcome-screen">https://discord.com/developers/docs/resources/guild#modify-guild-welcome-screen</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild ID to edit the welcome screen for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structdpp_1_1welcome__screen" kindref="compound">welcome_screen</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The welcome screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the welcome screen should be enabled or disabled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1welcome__screen" kindref="compound">dpp::welcome_screen</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1038" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1038" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4db668047415bf7a6681523d421d172d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_add_member</definition>
        <argsstring>(const guild_member &amp;gm, const std::string &amp;access_token)</argsstring>
        <name>co_guild_add_member</name>
        <param>
          <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
          <declname>gm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_token</declname>
        </param>
        <briefdescription>
<para>Add guild member. Needs a specific oauth2 scope, from which you get the access_token. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a user to the guild, provided you have a valid oauth2 access token for the user with the guilds.join scope. Returns the <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref>, which is defaulted if the user is already a member of the guild. Fires a <computeroutput>Guild Member Add</computeroutput> Gateway event.</para>
<para>For guilds with Membership Screening enabled, this endpoint will default to adding new members as pending in the guild member object. Members that are pending will have to complete membership screening before they become full members that can talk.</para>
<para><simplesect kind="note"><para>All parameters to this endpoint except for access_token are optional. The bot must be a member of the guild with <computeroutput>CREATE_INSTANT_INVITE</computeroutput> permission. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a19819f7f2f2f3badecc1e29a928f2690" kindref="member">dpp::cluster::guild_add_member</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#add-guild-member">https://discord.com/developers/docs/resources/guild#add-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gm</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild member to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_token</parametername>
</parameternamelist>
<parameterdescription>
<para>Access token from Oauth2 scope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1058" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1058" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae319d43427995972f3bdefea126b170a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_edit_member</definition>
        <argsstring>(const guild_member &amp;gm)</argsstring>
        <name>co_guild_edit_member</name>
        <param>
          <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
          <declname>gm</declname>
        </param>
        <briefdescription>
<para>Edit the properties of an existing guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify attributes of a guild member. Returns the <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref>. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. To remove a timeout, set the <computeroutput>communication_disabled_until</computeroutput> to a non-zero time in the past, e.g. 1. When moving members to channels, the API user must have permissions to both connect to the channel and have the <computeroutput>MOVE_MEMBERS</computeroutput> permission. For moving and disconnecting users from voice, use <ref refid="classdpp_1_1cluster_1ac673fb500731954ad50e90de70b2fd03" kindref="member">dpp::cluster::guild_member_move</ref>. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad793626d2733715381c3c5c440f31bd0" kindref="member">dpp::cluster::guild_edit_member</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gm</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild member to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1074" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1074" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7b1ff826ec10a4bee4f734d59434af08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_member</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>co_guild_get_member</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a99e8227f11ef33cd2d9cc3abef46adfd" kindref="member">dpp::cluster::guild_get_member</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-member">https://discord.com/developers/docs/resources/guild#get-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get member for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of member to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1085" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1085" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3a594d883a754955e5aa3dc8b77cf054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_members</definition>
        <argsstring>(snowflake guild_id, uint16_t limit, snowflake after)</argsstring>
        <name>co_guild_get_members</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <briefdescription>
<para>Get all guild members. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint is restricted according to whether the <computeroutput>GUILD_MEMBERS</computeroutput> Privileged Intent is enabled for your application. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6b24baba4de9d38f7d9a7cea2f71a545" kindref="member">dpp::cluster::guild_get_members</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-members">https://discord.com/developers/docs/resources/guild#get-guild-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get all members for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of members to return (1-1000) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>the highest user id in the previous page </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_member_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1099" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1099" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a634fe7ca599b28fe11fb51e3ca35faa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_member_add_role</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id)</argsstring>
        <name>co_guild_member_add_role</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Add role to guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a role to a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aeffb7f4f32ca342886a79692ed8fb416" kindref="member">dpp::cluster::guild_member_add_role</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#add-guild-member-role">https://discord.com/developers/docs/resources/guild#add-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to add a role to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to add role to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role ID to add to the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1115" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1115" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adbb138b90ed13cb2ee1c3fd9cbf32fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_member_delete</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>co_guild_member_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Remove (kick) a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove a member from a guild. Requires <computeroutput>KICK_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Member Remove</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a40788ea66fddce18336fb53ff8a2a6b1" kindref="member">dpp::cluster::guild_member_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member">https://discord.com/developers/docs/resources/guild#remove-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000016"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Replaced by <ref refid="classdpp_1_1cluster_1a8d4b8738bf9ba45254582ce16d14e22d" kindref="member">dpp::cluster::guild_member_kick</ref> </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to kick member from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to kick </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1131" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1131" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a05afd677e76509f774113b7143957250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_member_kick</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>co_guild_member_kick</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Remove (kick) a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove a member from a guild. Requires <computeroutput>KICK_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Member Remove</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8d4b8738bf9ba45254582ce16d14e22d" kindref="member">dpp::cluster::guild_member_kick</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member">https://discord.com/developers/docs/resources/guild#remove-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to kick member from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to kick </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1146" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1146" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a023353280af3c99e0922052519b9ab95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_member_timeout</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, time_t communication_disabled_until)</argsstring>
        <name>co_guild_member_timeout</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>communication_disabled_until</declname>
        </param>
        <briefdescription>
<para>Set the timeout of a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9afda69f8c99365001ec349f8dc70388" kindref="member">dpp::cluster::guild_member_timeout</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to timeout the member in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to set the timeout for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>communication_disabled_until</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp when the user&apos;s timeout will expire (up to 28 days in the future). Set to 0 to remove the timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1161" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1161" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa8611f02a1c12ae31a709774584962a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_member_delete_role</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id)</argsstring>
        <name>co_guild_member_delete_role</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Remove role from guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes a role from a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a98e8223a62f31bb716c326ff59f67576" kindref="member">dpp::cluster::guild_member_delete_role</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member-role">https://discord.com/developers/docs/resources/guild#remove-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to remove role from user on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove role from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000017"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="classdpp_1_1cluster_1a4e310334b84b6711119fe20a340ddc85" kindref="member">dpp::cluster::guild_member_remove_role</ref> instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1178" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1178" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae68afcfec96acb91f85d761e702f6df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_member_remove_role</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id)</argsstring>
        <name>co_guild_member_remove_role</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Remove role from guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes a role from a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4e310334b84b6711119fe20a340ddc85" kindref="member">dpp::cluster::guild_member_remove_role</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member-role">https://discord.com/developers/docs/resources/guild#remove-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to remove role from user on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove role from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1194" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1194" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a46045f3caf3ec9b8c430e69e8a6a17ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_member_move</definition>
        <argsstring>(const snowflake channel_id, const snowflake guild_id, const snowflake user_id)</argsstring>
        <name>co_guild_member_move</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Moves the guild member to a other voice channel, if member is connected to one. Set the <computeroutput>channel_id</computeroutput> to <computeroutput>0</computeroutput> to disconnect the user. </para>
        </briefdescription>
        <detaileddescription>
<para>Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="note"><para>When moving members to channels, the API user <bold>must</bold> have permissions to both connect to the channel and have the <computeroutput>MOVE_MEMBERS</computeroutput> permission. </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac673fb500731954ad50e90de70b2fd03" kindref="member">dpp::cluster::guild_member_move</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the channel to which the user is used. Set to <computeroutput>0</computeroutput> to disconnect the user </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id to which the user is connected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User id, who should be moved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1211" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1211" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1129bbff55bfb004ea10763a94c7a524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_search_members</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;query, uint16_t limit)</argsstring>
        <name>co_guild_search_members</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Search for guild members based on whether their username or nickname starts with the given string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint is restricted according to whether the <computeroutput>GUILD_MEMBERS</computeroutput> Privileged Intent is enabled for your application. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a52cc92ce052d063854e0372539e4d9ee" kindref="member">dpp::cluster::guild_search_members</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#search-guild-members">https://discord.com/developers/docs/resources/guild#search-guild-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to search in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>Query string to match username(s) and nickname(s) against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of members to return (1-1000) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_member_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1225" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1225" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a099af4c5e6c2a84f6f043fb93289bc06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_invites</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_get_invites</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild invites. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of invite objects (with invite metadata) for the guild. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a93c0e07243611419141305da123c859a" kindref="member">dpp::cluster::guild_get_invites</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-invites">https://discord.com/developers/docs/resources/guild#get-guild-invites</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get invites for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1238" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1238" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac8d38f7158778c6ea8fe1d73f0a6a89c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_invite_get</definition>
        <argsstring>(const std::string &amp;invite_code)</argsstring>
        <name>co_invite_get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>invite_code</declname>
        </param>
        <briefdescription>
<para>Get details about an invite. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6dbddcf4f753ced02d8ec693dcaf583c" kindref="member">dpp::cluster::invite_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/invite#get-invite">https://discord.com/developers/docs/resources/invite#get-invite</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invite_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite code to get information on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1252" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1252" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afce30a4142d06658831c3a3a77ad569a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_add_reaction</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction)</argsstring>
        <name>co_message_add_reaction</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Add a reaction to a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1adbee89fb3c2967fe5df3deee7876199c" kindref="member">dpp::cluster::message_add_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-reaction">https://discord.com/developers/docs/resources/channel#create-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to add a reaction to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to add. Emojis should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1264" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1264" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa95d28ed80a7003e3d82c2b60e1023ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_add_reaction</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction)</argsstring>
        <name>co_message_add_reaction</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Add a reaction to a message by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1adbee89fb3c2967fe5df3deee7876199c" kindref="member">dpp::cluster::message_add_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway#message-reaction-add">https://discord.com/developers/docs/topics/gateway#message-reaction-add</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to add reactions to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to add reactions to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to add. Emojis should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1277" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1277" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab9ad0d98f81e30ba95dd39729a2ce818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_create</definition>
        <argsstring>(const struct message &amp;m)</argsstring>
        <name>co_message_create</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Send a message to a channel. The callback function is called when the message has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa6ae3dc32ebc2dd14264962710d35af7" kindref="member">dpp::cluster::message_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-message">https://discord.com/developers/docs/resources/channel#create-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1288" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1288" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3388597d41ade186238cf0c8e6a8a3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_crosspost</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>co_message_crosspost</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Crosspost a message. The callback function is called when the message has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab67f05b1b4b4bd3ea97a6bafc3b7151d" kindref="member">dpp::cluster::message_crosspost</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#crosspost-message">https://discord.com/developers/docs/resources/channel#crosspost-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to crosspost </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to crosspost from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1300" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1300" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adbfb1941f1a3f2085d09d887d7088c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_delete_all_reactions</definition>
        <argsstring>(const struct message &amp;m)</argsstring>
        <name>co_message_delete_all_reactions</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Delete all reactions on a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8bab4c3df83ddf8a7c81504a2107afe7" kindref="member">dpp::cluster::message_delete_all_reactions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions">https://discord.com/developers/docs/resources/channel#delete-all-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1311" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1311" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac47a65323daa30e1b59d39e07299f5fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_delete_all_reactions</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>co_message_delete_all_reactions</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete all reactions on a message by id. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8bab4c3df83ddf8a7c81504a2107afe7" kindref="member">dpp::cluster::message_delete_all_reactions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions">https://discord.com/developers/docs/resources/channel#delete-all-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1323" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1323" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac32de08f127acf2a15e9154ead427f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_delete_bulk</definition>
        <argsstring>(const std::vector&lt; snowflake &gt; &amp;message_ids, snowflake channel_id)</argsstring>
        <name>co_message_delete_bulk</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt; &amp;</type>
          <declname>message_ids</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Bulk delete messages from a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="note"><para>If any message provided older than 2 weeks or any duplicate message ID, it will fail.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a945ff67bd26bdb38e74192389a660cb1" kindref="member">dpp::cluster::message_delete_bulk</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#bulk-delete-messages">https://discord.com/developers/docs/resources/channel#bulk-delete-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>List of message IDs to delete (at least 2 and at most 100 message IDs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1338" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1338" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6b8ae5f05c0d977316dc6984a6716331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_delete</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>co_message_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete a message from a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3aa3ef912199ea0ebac49dfe1cf5cd2f" kindref="member">dpp::cluster::message_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-message">https://discord.com/developers/docs/resources/channel#delete-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1351" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1351" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad7671216d76bee4b46cdbd4defa0df1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_delete_own_reaction</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction)</argsstring>
        <name>co_message_delete_own_reaction</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete own reaction from a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aee40a0e598714c898630c65119003d01" kindref="member">dpp::cluster::message_delete_own_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-own-reaction">https://discord.com/developers/docs/resources/channel#delete-own-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete own reaction from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete. The reaction should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1363" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1363" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0647f97f47b5dfdcc72919fbc0f29dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_delete_own_reaction</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction)</argsstring>
        <name>co_message_delete_own_reaction</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete own reaction from a message by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aee40a0e598714c898630c65119003d01" kindref="member">dpp::cluster::message_delete_own_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-own-reaction">https://discord.com/developers/docs/resources/channel#delete-own-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete. The reaction should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1376" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1376" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3e100ec63dcae86419e277a7fe332661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_delete_reaction</definition>
        <argsstring>(const struct message &amp;m, snowflake user_id, const std::string &amp;reaction)</argsstring>
        <name>co_message_delete_reaction</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete a user&apos;s reaction from a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae30a16651849e78cee9030ceb07f9f28" kindref="member">dpp::cluster::message_delete_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-user-reaction">https://discord.com/developers/docs/resources/channel#delete-user-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete a user&apos;s reaction from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID who&apos;s reaction you want to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to remove. Reactions should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1389" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1389" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a90ce3c34eebc8e69b2c559018218e72b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_delete_reaction</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, snowflake user_id, const std::string &amp;reaction)</argsstring>
        <name>co_message_delete_reaction</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete a user&apos;s reaction from a message by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae30a16651849e78cee9030ceb07f9f28" kindref="member">dpp::cluster::message_delete_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-user-reaction">https://discord.com/developers/docs/resources/channel#delete-user-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID who&apos;s reaction you want to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to remove. Reactions should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1403" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1403" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae2825ed106a5e50d4ffb0549767adf48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_delete_reaction_emoji</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction)</argsstring>
        <name>co_message_delete_reaction_emoji</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete all reactions on a message using a particular emoji. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9879e447c31abfd6672b31e752b159ed" kindref="member">dpp::cluster::message_delete_reaction_emoji</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji">https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete, in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1415" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1415" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac02299ec8f190763445af530c8d2fca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_delete_reaction_emoji</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction)</argsstring>
        <name>co_message_delete_reaction_emoji</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete all reactions on a message using a particular emoji by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9879e447c31abfd6672b31e752b159ed" kindref="member">dpp::cluster::message_delete_reaction_emoji</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji">https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete, in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1428" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1428" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac5693112552376203c41e003996def63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_edit</definition>
        <argsstring>(const struct message &amp;m)</argsstring>
        <name>co_message_edit</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit a message on a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a173ff389feb4f48ac67a8c037081b2d5" kindref="member">dpp::cluster::message_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#edit-message">https://discord.com/developers/docs/resources/channel#edit-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1439" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1439" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a38b072f34751620ccde6630f5f2b6bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_get</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>co_message_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9d3b0f7c3dae4ecb1980cabe8f10ccd7" kindref="member">dpp::cluster::message_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel-message">https://discord.com/developers/docs/resources/channel#get-channel-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1451" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1451" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1a1245482db3c66c7047f7f6d15d0b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_get_reactions</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction, snowflake before, snowflake after, snowflake limit)</argsstring>
        <name>co_message_get_reactions</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get reactions on a message for a particular emoji. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab05fea3d6c298d5f2371704084383f8f" kindref="member">dpp::cluster::message_get_reactions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-reactions">https://discord.com/developers/docs/resources/channel#get-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to get reactions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction should be in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of reactions maximum should be returned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>user_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1466" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1466" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4168b1026946a3d382ed89c686ace406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_get_reactions</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction, snowflake before, snowflake after, snowflake limit)</argsstring>
        <name>co_message_get_reactions</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get reactions on a message for a particular emoji by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab05fea3d6c298d5f2371704084383f8f" kindref="member">dpp::cluster::message_get_reactions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-reactions">https://discord.com/developers/docs/resources/channel#get-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to get reactions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get reactions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction should be in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of reactions maximum should be returned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1482" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1482" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8f781a40cc300d4054135147abe69c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_pin</definition>
        <argsstring>(snowflake channel_id, snowflake message_id)</argsstring>
        <name>co_message_pin</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <briefdescription>
<para>Pin a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0530fdfa85085ad367a6666386968ac4" kindref="member">dpp::cluster::message_pin</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#pin-message">https://discord.com/developers/docs/resources/channel#pin-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to pin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message id to pin message on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1494" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1494" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a10dca63f3bf462e40446b7b5ab650aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_messages_get</definition>
        <argsstring>(snowflake channel_id, snowflake around, snowflake before, snowflake after, uint64_t limit)</argsstring>
        <name>co_messages_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>around</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get multiple messages. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will attempt to fetch as many messages as possible using multiple API calls if needed.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad471be0405745e32f130a2bfcd371c73" kindref="member">dpp::cluster::messages_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel-messages">https://discord.com/developers/docs/resources/channel#get-channel-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to retrieve messages for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>around</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages should be retrieved around this ID if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages after this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of messages maximum should be returned, up to a maximum of 100. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1511" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1511" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0af92a0fdbaba430fe51f5936a6f4f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_message_unpin</definition>
        <argsstring>(snowflake channel_id, snowflake message_id)</argsstring>
        <name>co_message_unpin</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <briefdescription>
<para>Unpin a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aaf055f95bc7ce80ff06cff9956bddca5" kindref="member">dpp::cluster::message_unpin</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#unpin-message">https://discord.com/developers/docs/resources/channel#unpin-message</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to unpin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message id to unpin message on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1523" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1523" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad842325e9583a6b32c94865e139cedf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_channel_pins_get</definition>
        <argsstring>(snowflake channel_id)</argsstring>
        <name>co_channel_pins_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get a channel&apos;s pins. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a553bfda3b4f1671e75c5713275b781bd" kindref="member">dpp::cluster::channel_pins_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-pinned-messages">https://discord.com/developers/docs/resources/channel#get-pinned-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to get pins for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1533" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1533" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a74773012e6fdf775013c324a800d73e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_role_create</definition>
        <argsstring>(const class role &amp;r)</argsstring>
        <name>co_role_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Create a role on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new role for the guild. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Returns the new role object on success. Fires a <computeroutput>Guild Role Create</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a849017410297379997601daac5e99ce1" kindref="member">dpp::cluster::role_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild-role">https://discord.com/developers/docs/resources/guild#create-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to create (guild ID is encapsulated in the role object) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1548" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1548" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a561e03e319b741e7c93ad3716750dc51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_role_delete</definition>
        <argsstring>(snowflake guild_id, snowflake role_id)</argsstring>
        <name>co_role_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Delete a role. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Role Delete</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6d4cdab9c22eefdeba0d28105c006b2b" kindref="member">dpp::cluster::role_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild-role">https://discord.com/developers/docs/resources/guild#delete-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete the role on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1563" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1563" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af5920a1075d203a9959cfbd968603dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_role_edit</definition>
        <argsstring>(const class role &amp;r)</argsstring>
        <name>co_role_edit</name>
        <param>
          <type>const class <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Edit a role on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Returns the updated role on success. Fires a <computeroutput>Guild Role Update</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab6bc6ef9b6f1ef9aa5b9c1391ccedbf5" kindref="member">dpp::cluster::role_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-role">https://discord.com/developers/docs/resources/guild#modify-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1577" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1577" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4ccce48e1a9388861b6359ef1dd77594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_roles_edit_position</definition>
        <argsstring>(snowflake guild_id, const std::vector&lt; role &gt; &amp;roles)</argsstring>
        <name>co_roles_edit_position</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1role" kindref="compound">role</ref> &gt; &amp;</type>
          <declname>roles</declname>
        </param>
        <briefdescription>
<para>Edit multiple role&apos;s position in a guild. Returns a list of all roles of the guild on success. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify the positions of a set of role objects for the guild. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires multiple <computeroutput>Guild Role Update</computeroutput> Gateway events.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3549d2ebe52210d7b98adeb766b968b1" kindref="member">dpp::cluster::roles_edit_position</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-role-positions">https://discord.com/developers/docs/resources/guild#modify-guild-role-positions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change the roles position on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roles</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of roles to change the positions of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1593" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1593" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa3bf7f040cae29cf185f84fa415ed9e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_roles_get</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_roles_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get a role for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a884dbb70619fcf92b06577dea8093219" kindref="member">dpp::cluster::roles_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-roles">https://discord.com/developers/docs/resources/guild#get-guild-roles</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get role for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1604" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1604" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ace3b697dd0ec53534a007995fe684f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_application_role_connection_get</definition>
        <argsstring>(snowflake application_id)</argsstring>
        <name>co_application_role_connection_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <briefdescription>
<para>Get the application&apos;s role connection metadata records. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae66aa8feb8759ff76301aac34c97cc7e" kindref="member">dpp::cluster::application_role_connection_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/application-role-connection-metadata#get-application-role-connection-metadata-records">https://discord.com/developers/docs/resources/application-role-connection-metadata#get-application-role-connection-metadata-records</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1615" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1615" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5cacc22cd09b3ac04fa69624c4f55efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_application_role_connection_update</definition>
        <argsstring>(snowflake application_id, const std::vector&lt; application_role_connection_metadata &gt; &amp;connection_metadata)</argsstring>
        <name>co_application_role_connection_update</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1application__role__connection__metadata" kindref="compound">application_role_connection_metadata</ref> &gt; &amp;</type>
          <declname>connection_metadata</declname>
        </param>
        <briefdescription>
<para>Update the application&apos;s role connection metadata records. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1afa094e7895245b07195a3b4ec013af0b" kindref="member">dpp::cluster::application_role_connection_update</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/application-role-connection-metadata#update-application-role-connection-metadata-records">https://discord.com/developers/docs/resources/application-role-connection-metadata#update-application-role-connection-metadata-records</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connection_metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>The application role connection metadata to update </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>An application can have a maximum of 5 metadata records. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1628" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1628" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af16e1f67eb4ac92d8a2ae11aad7cd51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_user_application_role_connection_get</definition>
        <argsstring>(snowflake application_id)</argsstring>
        <name>co_user_application_role_connection_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <briefdescription>
<para>Get user application role connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3f3fc4fdfc918f7383773bda717134bd" kindref="member">dpp::cluster::user_application_role_connection_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user-application-role-connection">https://discord.com/developers/docs/resources/user#get-user-application-role-connection</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1639" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1639" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0b9bfa04e675ef90148da4110f9e6027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_user_application_role_connection_update</definition>
        <argsstring>(snowflake application_id, const application_role_connection &amp;connection)</argsstring>
        <name>co_user_application_role_connection_update</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> &amp;</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Update user application role connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac6426506b0175419913b157ad9f10f71" kindref="member">dpp::cluster::user_application_role_connection_update</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#update-user-application-role-connection">https://discord.com/developers/docs/resources/user#update-user-application-role-connection</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>The application role connection to update </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1651" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1651" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af62754a3ec788f1f66e191d68d1c46ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_events_get</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_events_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all scheduled events for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae8554f93aed5fb84162af41c997fc1e3" kindref="member">dpp::cluster::guild_events_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild">https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get events for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>scheduled_event_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1661" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1661" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afe21c07931f563d14ce5f44d3b4ee137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_event_create</definition>
        <argsstring>(const scheduled_event &amp;event)</argsstring>
        <name>co_guild_event_create</name>
        <param>
          <type>const <ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Create a scheduled event on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a360bf7b9dd6b27774be3706a1176f8f3" kindref="member">dpp::cluster::guild_event_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to create (guild ID must be populated) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1672" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1672" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad172f3adc0cf2a7d2c65a793efc40169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_event_delete</definition>
        <argsstring>(snowflake event_id, snowflake guild_id)</argsstring>
        <name>co_guild_event_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>event_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a scheduled event from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a513c773562fbd9997141c5b317be8087" kindref="member">dpp::cluster::guild_event_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of event to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1684" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1684" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a16befbe2f26b64f78765e47c00c3142b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_event_edit</definition>
        <argsstring>(const scheduled_event &amp;event)</argsstring>
        <name>co_guild_event_edit</name>
        <param>
          <type>const <ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Edit/modify a scheduled event on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a338867a84983e985b77829f0d9ccb34c" kindref="member">dpp::cluster::guild_event_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to create (event ID and guild ID must be populated) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1695" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1695" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa47058d30b901b0969a689b227dbe067" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_event_get</definition>
        <argsstring>(snowflake guild_id, snowflake event_id)</argsstring>
        <name>co_guild_event_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>event_id</declname>
        </param>
        <briefdescription>
<para>Get a scheduled event for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5b8c168682519ee125ed0a48239c08ef" kindref="member">dpp::cluster::guild_event_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get event for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1707" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1707" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a36841035bc83febe57280a304482cd82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_stage_instance_get</definition>
        <argsstring>(const snowflake channel_id)</argsstring>
        <name>co_stage_instance_get</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get the stage instance associated with the channel id, if it exists. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a1edd6ac5d8553b4823465bebadfaa9af" kindref="member">dpp::cluster::stage_instance_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/stage-instance#get-stage-instance">https://discord.com/developers/docs/resources/stage-instance#get-stage-instance</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the associated channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1720" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1720" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a89e989a8a4dceab8104a73d1a7a1d9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_stage_instance_delete</definition>
        <argsstring>(const snowflake channel_id)</argsstring>
        <name>co_stage_instance_delete</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete a stage instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a2b4391d87cad53c95e869400534fbd2e" kindref="member">dpp::cluster::stage_instance_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/stage-instance#delete-stage-instance">https://discord.com/developers/docs/resources/stage-instance#delete-stage-instance</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the associated channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1734" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1734" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af6138aa522979e0ba28c3cd4f4406ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_sticker_create</definition>
        <argsstring>(const sticker &amp;s)</argsstring>
        <name>co_guild_sticker_create</name>
        <param>
          <type>const <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Create a sticker in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae09c9ae57529d89455ed7f3481d629cc" kindref="member">dpp::cluster::guild_sticker_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#create-guild-sticker">https://discord.com/developers/docs/resources/sticker#create-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Sticker to create. Must have its guild ID set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1745" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1745" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af59fa884dbd2129bc9d44a2f4137657c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_sticker_delete</definition>
        <argsstring>(snowflake sticker_id, snowflake guild_id)</argsstring>
        <name>co_guild_sticker_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>sticker_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a sticker from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa93a97a167922bb0a40c6489a928d4fa" kindref="member">dpp::cluster::guild_sticker_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#delete-guild-sticker">https://discord.com/developers/docs/resources/sticker#delete-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sticker_id</parametername>
</parameternamelist>
<parameterdescription>
<para>sticker ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>guild ID to delete from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1757" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1757" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa44ae4ff4a4fd8518b6a87f2114c9007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_sticker_get</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>co_guild_sticker_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get a guild sticker. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac7a2d335385b4689e7489d0eaf4475fe" kindref="member">dpp::cluster::guild_sticker_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-guild-sticker">https://discord.com/developers/docs/resources/sticker#get-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of sticker to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of the guild where the sticker is </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1768" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1768" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac8694c18598e657f2bdb0c4a53a88298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_sticker_modify</definition>
        <argsstring>(const sticker &amp;s)</argsstring>
        <name>co_guild_sticker_modify</name>
        <param>
          <type>const <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify a sticker in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a1686a4d8a5a9b01f58c4768b33145b4b" kindref="member">dpp::cluster::guild_sticker_modify</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#modify-guild-sticker">https://discord.com/developers/docs/resources/sticker#modify-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Sticker to modify. Must have its guild ID and sticker ID set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1779" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1779" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6ee6b7a6c1a9d27c6d3a8bfe8cff8d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_stickers_get</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_stickers_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all guild stickers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1adccd1468d3f031c5bc786fdbd087d0a2" kindref="member">dpp::cluster::guild_stickers_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-guild-stickers">https://discord.com/developers/docs/resources/sticker#get-guild-stickers</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of the guild where the sticker is </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1789" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1789" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6228894aee74714bbaef0c0b176b0178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_nitro_sticker_get</definition>
        <argsstring>(snowflake id)</argsstring>
        <name>co_nitro_sticker_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a nitro sticker. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a115a49075ceb1817f1e81fc9388bf65e" kindref="member">dpp::cluster::nitro_sticker_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-sticker">https://discord.com/developers/docs/resources/sticker#get-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of sticker to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1799" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1799" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1471308de099ad3fb4331aff4678193f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_sticker_packs_get</definition>
        <argsstring>()</argsstring>
        <name>co_sticker_packs_get</name>
        <briefdescription>
<para>Get a list of available sticker packs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae64421a4b2402238feb0536639009c18" kindref="member">dpp::cluster::sticker_packs_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#list-nitro-sticker-packs">https://discord.com/developers/docs/resources/sticker#list-nitro-sticker-packs</ulink> </para>
</simplesect>
<simplesect kind="return"><para>sticker_pack_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1808" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1808" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad61625a41a1fc5dff29e976f3742ca3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_create_from_template</definition>
        <argsstring>(const std::string &amp;code, const std::string &amp;name)</argsstring>
        <name>co_guild_create_from_template</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a new guild based on a template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint can be used only by bots in less than 10 guilds. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3124bdcf2432f3880f78914037f9e87e" kindref="member">dpp::cluster::guild_create_from_template</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#create-guild-from-guild-template">https://discord.com/developers/docs/resources/guild-template#create-guild-from-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to create guild from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild name to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1820" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1820" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac485af90315a6918702a39a916315fdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_template_create</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;name, const std::string &amp;description)</argsstring>
        <name>co_guild_template_create</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Creates a template for the guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a38db2ce96431b742e98cabf8170a84d7" kindref="member">dpp::cluster::guild_template_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#create-guild-template">https://discord.com/developers/docs/resources/guild-template#create-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to create template from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Template name to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of template to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1833" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1833" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adf35d0956ffe08619d333ee2f2efe8a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_template_delete</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code)</argsstring>
        <name>co_guild_template_delete</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Deletes the template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8527d66d4e1b2996c495d1196c6af718" kindref="member">dpp::cluster::guild_template_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#delete-guild-template">https://discord.com/developers/docs/resources/guild-template#delete-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of template to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1845" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1845" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7e81e0ae42f8c27c30b0847c66d48269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_template_modify</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code, const std::string &amp;name, const std::string &amp;description)</argsstring>
        <name>co_guild_template_modify</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Modifies the template&apos;s metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5db4327a5ad614adc419db6ff7b7bc17" kindref="member">dpp::cluster::guild_template_modify</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#modify-guild-template">https://discord.com/developers/docs/resources/guild-template#modify-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of template to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>New name of template </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>New description of template </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1859" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1859" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4ebf7a5d247236a0a5a53d0a6769df95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_templates_get</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_templates_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild templates. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a1faa321ede15b209c789ea1155a3d356" kindref="member">dpp::cluster::guild_templates_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#get-guild-templates">https://discord.com/developers/docs/resources/guild-template#get-guild-templates</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get templates for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1870" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1870" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a03dcbffa0d0a16b6da13928573042f26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_template_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code)</argsstring>
        <name>co_guild_template_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Syncs the template to the guild&apos;s current state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af115bd1c7fe12eba1c12d90d5971d10b" kindref="member">dpp::cluster::guild_template_sync</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#sync-guild-template">https://discord.com/developers/docs/resources/guild-template#sync-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to synchronise template for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Code of template to synchronise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1882" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1882" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a315b340423ff4779631faac66a8daae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_template_get</definition>
        <argsstring>(const std::string &amp;code)</argsstring>
        <name>co_template_get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Get a template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a52366e37144b166c6a2c773e14992b21" kindref="member">dpp::cluster::template_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#get-guild-template">https://discord.com/developers/docs/resources/guild-template#get-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1892" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1892" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab4e2464d8a0e2ee188fbba19e1c7bda4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_current_user_join_thread</definition>
        <argsstring>(snowflake thread_id)</argsstring>
        <name>co_current_user_join_thread</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Join a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa62bc561994b7222712583e46cb68799" kindref="member">dpp::cluster::current_user_join_thread</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#join-thread">https://discord.com/developers/docs/resources/channel#join-thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to join </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1902" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1902" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8328f64334d55de64b9b5356e2d766a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_current_user_leave_thread</definition>
        <argsstring>(snowflake thread_id)</argsstring>
        <name>co_current_user_leave_thread</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Leave a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3a313be1a4fd6bde99606047761c4518" kindref="member">dpp::cluster::current_user_leave_thread</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#leave-thread">https://discord.com/developers/docs/resources/channel#leave-thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to leave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1912" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1912" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7786d44081a5634f5c0edc633c7d984f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_threads_get_active</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_threads_get_active</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all active threads in the guild, including public and private threads. Threads are ordered by their id, in descending order. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aefa49b6113343575dbc9dd2e40112847" kindref="member">dpp::cluster::threads_get_active</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#list-active-guild-threads">https://discord.com/developers/docs/resources/guild#list-active-guild-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get active threads for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>active_threads returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1922" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1922" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae7e7bd3ba22b7a6aae04bc3bc053042f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_threads_get_joined_private_archived</definition>
        <argsstring>(snowflake channel_id, snowflake before_id, uint16_t limit)</argsstring>
        <name>co_threads_get_joined_private_archived</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get private archived threads in a channel which current user has joined (Sorted by ID in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0d0c3894cd560fa7871f22d7cfb8f591" kindref="member">dpp::cluster::threads_get_joined_private_archived</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-joined-private-archived-threads">https://discord.com/developers/docs/resources/channel#list-joined-private-archived-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads before this id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1934" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1934" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a28a4326579fdefff6cf55666beaca8ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_threads_get_private_archived</definition>
        <argsstring>(snowflake channel_id, time_t before_timestamp, uint16_t limit)</argsstring>
        <name>co_threads_get_private_archived</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>before_timestamp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get private archived threads in a channel (Sorted by archive_timestamp in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae8336e48eaabaeb8df4d69a087982e82" kindref="member">dpp::cluster::threads_get_private_archived</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-private-archived-threads">https://discord.com/developers/docs/resources/channel#list-private-archived-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads archived before this timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1946" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1946" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a580da644a8f295093245814978eeadef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_threads_get_public_archived</definition>
        <argsstring>(snowflake channel_id, time_t before_timestamp, uint16_t limit)</argsstring>
        <name>co_threads_get_public_archived</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>before_timestamp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get public archived threads in a channel (Sorted by archive_timestamp in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a2b93e8be30c7e954c27e19d8b7fa8170" kindref="member">dpp::cluster::threads_get_public_archived</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-public-archived-threads">https://discord.com/developers/docs/resources/channel#list-public-archived-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads archived before this timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1958" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1958" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa709614c092e9b67b26b901bc75ba141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_thread_member_get</definition>
        <argsstring>(const snowflake thread_id, const snowflake user_id)</argsstring>
        <name>co_thread_member_get</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a thread member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad39edec2f1389d1aa5bb6c09e4318b6a" kindref="member">dpp::cluster::thread_member_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-thread-member">https://discord.com/developers/docs/resources/channel#get-thread-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to get member for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the user to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1thread__member" kindref="compound">thread_member</ref> returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1969" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1969" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae3f6bb8d85dda1d14ab99b1101936f58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_thread_members_get</definition>
        <argsstring>(snowflake thread_id)</argsstring>
        <name>co_thread_members_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Get members of a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a636b55f518a2e724eabf31453aa89abe" kindref="member">dpp::cluster::thread_members_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-thread-members">https://discord.com/developers/docs/resources/channel#list-thread-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to get members for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_member_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1979" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1979" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac0b77acf04f62842fb4966f28257dbcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_thread_create_in_forum</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, const message &amp;msg, auto_archive_duration_t auto_archive_duration, uint16_t rate_limit_per_user, std::vector&lt; snowflake &gt; applied_tags={})</argsstring>
        <name>co_thread_create_in_forum</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a9ea85c1ebdea9ba69a289c812bd630f8" kindref="member">auto_archive_duration_t</ref></type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
          <declname>applied_tags</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a thread in a forum or media channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad96d8fcec4c69d82fd4f2fb85ddfa2bf" kindref="member">dpp::cluster::thread_create_in_forum</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#start-thread-in-forum-channel">https://discord.com/developers/docs/resources/channel#start-thread-in-forum-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the forum thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Forum channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to start the thread with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration to automatically archive the thread after recent activity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>applied_tags</parametername>
</parameternamelist>
<parameterdescription>
<para>List of IDs of forum tags (<ref refid="structdpp_1_1forum__tag" kindref="compound">dpp::forum_tag</ref>) to apply to this thread </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="1996" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="1996" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a151cdf7d3c7ae4e2b24de527d571b785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_thread_create</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, uint16_t auto_archive_duration, channel_type thread_type, bool invitable, uint16_t rate_limit_per_user)</argsstring>
        <name>co_thread_create</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a732e832861149a278f27ea7840b8e4ca" kindref="member">channel_type</ref></type>
          <declname>thread_type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invitable</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <briefdescription>
<para>Create a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0c41c2fada744b16b48d8a5538e19fc5" kindref="member">dpp::cluster::thread_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#start-thread-without-message">https://discord.com/developers/docs/resources/channel#start-thread-without-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration after which thread auto-archives. Can be set to - 60, 1440 (for boosted guilds can also be: 4320, 10080) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of thread - CHANNEL_PUBLIC_THREAD, CHANNEL_ANNOUNCEMENT_THREAD, CHANNEL_PRIVATE_THREAD </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invitable</parametername>
</parameternamelist>
<parameterdescription>
<para>whether non-moderators can add other non-moderators to a thread; only available when creating a private thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2013" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2013" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a133f5582ae4cf60c48beef60142dc300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_thread_edit</definition>
        <argsstring>(const thread &amp;t)</argsstring>
        <name>co_thread_edit</name>
        <param>
          <type>const <ref refid="classdpp_1_1thread" kindref="compound">thread</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Edit a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a2986f2f79b812b0a6d579f557d459aab" kindref="member">dpp::cluster::thread_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/threads#editing-deleting-threads">https://discord.com/developers/docs/topics/threads#editing-deleting-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2025" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2025" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0f792b2617edeadb3268557cf514e898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_thread_create_with_message</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, snowflake message_id, uint16_t auto_archive_duration, uint16_t rate_limit_per_user)</argsstring>
        <name>co_thread_create_with_message</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <briefdescription>
<para>Create a thread with a message (Discord: ID of a thread is same as message ID) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1adf113903aeca27e9994fb366486250d1" kindref="member">dpp::cluster::thread_create_with_message</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#start-thread-from-message">https://discord.com/developers/docs/resources/channel#start-thread-from-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>message to start thread with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration after which thread auto-archives. Can be set to - 60, 1440 (for boosted guilds can also be: 4320, 10080) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2040" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2040" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7fd804ce3515972a0f51d6ec2356505e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_thread_member_add</definition>
        <argsstring>(snowflake thread_id, snowflake user_id)</argsstring>
        <name>co_thread_member_add</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Add a member to a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a905fa0c06477d9d9ecd4a536b54d21aa" kindref="member">dpp::cluster::thread_member_add</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#add-thread-member">https://discord.com/developers/docs/resources/channel#add-thread-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to add to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Member ID to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2051" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2051" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a64e020ff11bf6a4fdb07c2b35b3df5d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_thread_member_remove</definition>
        <argsstring>(snowflake thread_id, snowflake user_id)</argsstring>
        <name>co_thread_member_remove</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Remove a member from a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a754ae607b98b27d54f344db908836c46" kindref="member">dpp::cluster::thread_member_remove</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#remove-thread-member">https://discord.com/developers/docs/resources/channel#remove-thread-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to remove from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Member ID to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2062" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2062" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a177a60c698700b475384cd3084a190dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_current_user_edit</definition>
        <argsstring>(const std::string &amp;nickname, const std::string &amp;image_blob=&quot;&quot;, const image_type type=i_png)</argsstring>
        <name>co_current_user_edit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>image_blob</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <briefdescription>
<para>Edit current (bot) user. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the current member in a guild. Returns the updated <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> object on success. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a114d7930f0a219ef974143b65134a2f8" kindref="member">dpp::cluster::current_user_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#modify-current-user">https://discord.com/developers/docs/resources/user#modify-current-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>Avatar data to upload (NOTE: Very heavily rate limited!) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of image for avatar. It can be one of <computeroutput>i_gif</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>user returned object on completion </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1length__exception" kindref="compound">dpp::length_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Image data is larger than the maximum size of 256 kilobytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2078" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2078" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a508a09faff652dcf3683f5b732ce4f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_current_application_get</definition>
        <argsstring>()</argsstring>
        <name>co_current_application_get</name>
        <briefdescription>
<para>Get current (bot) application. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac3dc39069aaaa492727f39b35edd957e" kindref="member">dpp::cluster::current_application_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/oauth2#get-current-bot-application-information">https://discord.com/developers/docs/topics/oauth2#get-current-bot-application-information</ulink> </para>
</simplesect>
<simplesect kind="return"><para>application returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2088" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2088" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a62487f93b551a69efd8ec017706097b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_current_user_get</definition>
        <argsstring>()</argsstring>
        <name>co_current_user_get</name>
        <briefdescription>
<para>Get current (bot) user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aad927e85ed6b99e9b05f4190f1b19cae" kindref="member">dpp::cluster::current_user_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-current-user">https://discord.com/developers/docs/resources/user#get-current-user</ulink> </para>
</simplesect>
<simplesect kind="return"><para><ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>The <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> to user with <computeroutput>dynamic_cast</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2100" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2100" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3b3f06b2ec8bc3170b8fc7af47de28d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_current_user_set_voice_state</definition>
        <argsstring>(snowflake guild_id, snowflake channel_id, bool suppress=false, time_t request_to_speak_timestamp=0)</argsstring>
        <name>co_current_user_set_voice_state</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>time_t</type>
          <declname>request_to_speak_timestamp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the bot&apos;s voice state on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Caveats</bold></para>
<para>There are currently several caveats for this endpoint:</para>
<para><itemizedlist>
<listitem><para><computeroutput>channel_id</computeroutput> must currently point to a stage channel.</para>
</listitem><listitem><para>current user must already have joined <computeroutput>channel_id</computeroutput>.</para>
</listitem><listitem><para>You must have the <computeroutput>MUTE_MEMBERS</computeroutput> permission to unsuppress yourself. You can always suppress yourself.</para>
</listitem><listitem><para>You must have the <computeroutput>REQUEST_TO_SPEAK</computeroutput> permission to request to speak. You can always clear your own request to speak.</para>
</listitem><listitem><para>You are able to set <computeroutput>request_to_speak_timestamp</computeroutput> to any present or future time.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad611ecc2a6231c4bc100e74c1f28ee75" kindref="member">dpp::cluster::current_user_set_voice_state</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-user-voice-state">https://discord.com/developers/docs/resources/guild#modify-current-user-voice-state</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to set voice state on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage channel to set voice state on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the user&apos;s audio should be suppressed, false if it should not </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_to_speak_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The time at which we requested to speak, or 0 to clear the request. The time set here must be the current time or in the future. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_exception</parametername>
</parameternamelist>
<parameterdescription>
<para>You attempted to set a request_to_speak_timestamp in the past which is not the value of 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2125" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2125" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a246f4c285e228c759fa582f14813317c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_user_set_voice_state</definition>
        <argsstring>(snowflake user_id, snowflake guild_id, snowflake channel_id, bool suppress=false)</argsstring>
        <name>co_user_set_voice_state</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Set a user&apos;s voice state on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Caveats</bold></para>
<para>There are currently several caveats for this endpoint:</para>
<para><itemizedlist>
<listitem><para><computeroutput>channel_id</computeroutput> must currently point to a stage channel.</para>
</listitem><listitem><para>User must already have joined <computeroutput>channel_id</computeroutput>.</para>
</listitem><listitem><para>You must have the <computeroutput>MUTE_MEMBERS</computeroutput> permission. (Since suppression is the only thing that is available currently)</para>
</listitem><listitem><para>When unsuppressed, non-bot users will have their <computeroutput>request_to_speak_timestamp</computeroutput> set to the current time. Bot users will not.</para>
</listitem><listitem><para>When suppressed, the user will have their <computeroutput>request_to_speak_timestamp</computeroutput> removed.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a66c65f30625391586fd4cf6614b6a1df" kindref="member">dpp::cluster::user_set_voice_state</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-user-voice-state">https://discord.com/developers/docs/resources/guild#modify-user-voice-state</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The user to set the voice state of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to set voice state on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage channel to set voice state on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the user&apos;s audio should be suppressed, false if it should not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2149" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2149" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6d32848095962bfcf68cfe9653c00257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_current_user_connections_get</definition>
        <argsstring>()</argsstring>
        <name>co_current_user_connections_get</name>
        <briefdescription>
<para>Get current user&apos;s connections (linked accounts, e.g. steam, xbox). This call requires the oauth2 <computeroutput>connections</computeroutput> scope and cannot be executed against a bot token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a75e1e5dd813d36fffd6b532ed1b31178" kindref="member">dpp::cluster::current_user_connections_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user-connections">https://discord.com/developers/docs/resources/user#get-user-connections</ulink> </para>
</simplesect>
<simplesect kind="return"><para>connection_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2160" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2160" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa97fd6e309cf09128bb5a6de9b92123f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_current_user_get_guilds</definition>
        <argsstring>()</argsstring>
        <name>co_current_user_get_guilds</name>
        <briefdescription>
<para>Get current (bot) user guilds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a93c8fd5f22e0eae6bf357ad498b43f87" kindref="member">dpp::cluster::current_user_get_guilds</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-current-user-guilds">https://discord.com/developers/docs/resources/user#get-current-user-guilds</ulink> </para>
</simplesect>
<simplesect kind="return"><para>guild_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2169" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2169" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a52c49f5a45904bfe3b7f1bae71299dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_current_user_leave_guild</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_current_user_leave_guild</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Leave a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4fd6cc6c6635e6e0a9bdddcc6cda0e97" kindref="member">dpp::cluster::current_user_leave_guild</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#leave-guild">https://discord.com/developers/docs/resources/user#leave-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to leave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2179" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2179" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5524e88381051cded943e8f16be7ba17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_user_get</definition>
        <argsstring>(snowflake user_id)</argsstring>
        <name>co_user_get</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a user by id, without using the cache. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a73483dbeb0f1946dc18b1d0a5331b0d0" kindref="member">dpp::cluster::user_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user">https://discord.com/developers/docs/resources/user#get-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>The <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> to user with <computeroutput>dynamic_cast</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>unless you want something special from <computeroutput><ref refid="classdpp_1_1user__identified" kindref="compound">dpp::user_identified</ref></computeroutput> or you&apos;ve turned off caching, you have no need to call this. Call <computeroutput><ref refid="namespacedpp_1aafb458435d5650149340555ecd43f93f" kindref="member">dpp::find_user</ref></computeroutput> instead that looks up the user in the cache rather than a REST call. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2194" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2194" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9c3a9a57736a4cacf44184ffbf482c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_user_get_cached</definition>
        <argsstring>(snowflake user_id)</argsstring>
        <name>co_user_get_cached</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a user by id, checking in the cache first. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a00caec14273460343d60830dcb6bea9f" kindref="member">dpp::cluster::user_get_cached</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user">https://discord.com/developers/docs/resources/user#get-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>The <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> to user with <computeroutput>dynamic_cast</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>If the user is found in the cache, special values set in <computeroutput><ref refid="classdpp_1_1user__identified" kindref="compound">dpp::user_identified</ref></computeroutput> will be undefined. This call should be used where you want to for example resolve a user who may no longer be in the bot&apos;s guilds, for something like a ban log message. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2209" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2209" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4c78ebc439accbd999a74d4c7f73d5e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_get_voice_regions</definition>
        <argsstring>()</argsstring>
        <name>co_get_voice_regions</name>
        <briefdescription>
<para>Get all voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af6d45a29b3976f7b623d92e70ab9a1bc" kindref="member">dpp::cluster::get_voice_regions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/voice#list-voice-regions">https://discord.com/developers/docs/resources/voice#list-voice-regions</ulink> </para>
</simplesect>
<simplesect kind="return"><para>voiceregion_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2218" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2218" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aeeb491cf6cc246f9b2435d7127f87c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_guild_get_voice_regions</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_guild_get_voice_regions</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para>Voice regions per guild are somewhat deprecated in preference of per-channel voice regions. Returns a list of voice region objects for the guild. Unlike the similar /voice route, this returns VIP servers when the guild is VIP-enabled.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae5556385a69a408a268332f774ba6c3c" kindref="member">dpp::cluster::guild_get_voice_regions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-voice-regions">https://discord.com/developers/docs/resources/guild#get-guild-voice-regions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get voice regions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>voiceregion_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2233" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2233" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a31e252fd495f4cd15044cfc6d4a8d67f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_create_webhook</definition>
        <argsstring>(const class webhook &amp;w)</argsstring>
        <name>co_create_webhook</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Create a webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a634f650e53df2d3535131870985e0313" kindref="member">dpp::cluster::create_webhook</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#create-webhook">https://discord.com/developers/docs/resources/webhook#create-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2244" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2244" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9cd4df063abb2a236b03c9e75b312e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_delete_webhook</definition>
        <argsstring>(snowflake webhook_id)</argsstring>
        <name>co_delete_webhook</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <briefdescription>
<para>Delete a webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa2f345c51a6a933a29e2e86d50d6a20e" kindref="member">dpp::cluster::delete_webhook</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook">https://discord.com/developers/docs/resources/webhook#delete-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2255" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2255" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8e7f8af35b10f7eb78a55eeeafc95bfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_delete_webhook_message</definition>
        <argsstring>(const class webhook &amp;wh, snowflake message_id, snowflake thread_id=0)</argsstring>
        <name>co_delete_webhook_message</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Delete webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5d415cd3438b7d505415a8c183d57adb" kindref="member">dpp::cluster::delete_webhook_message</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook-message">https://discord.com/developers/docs/resources/webhook#delete-webhook-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to delete message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread the message is in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2268" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2268" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1acb3631dd6ed2ed66a76eb9952deb1d7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_delete_webhook_with_token</definition>
        <argsstring>(snowflake webhook_id, const std::string &amp;token)</argsstring>
        <name>co_delete_webhook_with_token</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Delete webhook with token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4556a4647c5fd1468fe6918a2f637984" kindref="member">dpp::cluster::delete_webhook_with_token</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token">https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token of webhook to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2279" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2279" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad58e2d7aa275757a0808ec748c879dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_edit_webhook</definition>
        <argsstring>(const class webhook &amp;wh)</argsstring>
        <name>co_edit_webhook</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <briefdescription>
<para>Edit webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad5039e83f20e5c321b78b319fe7608c0" kindref="member">dpp::cluster::edit_webhook</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#modify-webhook">https://discord.com/developers/docs/resources/webhook#modify-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2290" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2290" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aeb21146f7896406d8d6172c6d7ad4b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_edit_webhook_message</definition>
        <argsstring>(const class webhook &amp;wh, const struct message &amp;m, snowflake thread_id=0)</argsstring>
        <name>co_edit_webhook_message</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Edit webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para>When the content field is edited, the mentions array in the message object will be reconstructed from scratch based on the new content. The allowed_mentions field of the edit request controls how this happens. If there is no explicit allowed_mentions in the edit request, the content will be parsed with default allowances, that is, without regard to whether or not an allowed_mentions was present in the request that originally created the message.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a006039f6dfb56c6b49a9c9baec463563" kindref="member">dpp::cluster::edit_webhook_message</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#edit-webhook-message">https://discord.com/developers/docs/resources/webhook#edit-webhook-message</ulink> </para>
</simplesect>
<simplesect kind="note"><para>the attachments array must contain all attachments that should be present after edit, including retained and new attachments provided in the request body. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>New message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread the message is in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2309" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2309" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4e0ad166f697f18ebe934af146e066c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_edit_webhook_with_token</definition>
        <argsstring>(const class webhook &amp;wh)</argsstring>
        <name>co_edit_webhook_with_token</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <briefdescription>
<para>Edit webhook with token (token is encapsulated in the webhook object) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a40262f5c4ef4a56fe394e91faf0ac8e4" kindref="member">dpp::cluster::edit_webhook_with_token</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token">https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit (should include token) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2319" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2319" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aaaa2fda3f082539a1ce1f84830555a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_execute_webhook</definition>
        <argsstring>(const class webhook &amp;wh, const struct message &amp;m, bool wait=false, snowflake thread_id=0, const std::string &amp;thread_name=&quot;&quot;)</argsstring>
        <name>co_execute_webhook</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Execute webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0417d872a41150d122901fd300a89190" kindref="member">dpp::cluster::execute_webhook</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#execute-webhook">https://discord.com/developers/docs/resources/webhook#execute-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to execute </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait</parametername>
</parameternamelist>
<parameterdescription>
<para>waits for server confirmation of message send before response, and returns the created message body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Send a message to the specified thread within a webhook&apos;s channel. The thread will automatically be unarchived </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of thread to create (requires the webhook channel to be a forum channel) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>If the webhook channel is a forum channel, you must provide either <computeroutput>thread_id</computeroutput> or <computeroutput>thread_name</computeroutput>. If <computeroutput>thread_id</computeroutput> is provided, the message will send in that thread. If <computeroutput>thread_name</computeroutput> is provided, a thread with that name will be created in the forum channel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2335" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2335" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1c09e2b72bcd1f6019bb8797628b8a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_get_channel_webhooks</definition>
        <argsstring>(snowflake channel_id)</argsstring>
        <name>co_get_channel_webhooks</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get channel webhooks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae58b1f27711b42e9aa8a21e34147429f" kindref="member">dpp::cluster::get_channel_webhooks</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-guild-webhooks">https://discord.com/developers/docs/resources/webhook#get-guild-webhooks</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to get webhooks for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2345" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2345" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3685d029b33131c282043ccaa1321a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_get_guild_webhooks</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>co_get_guild_webhooks</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild webhooks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8d352afcbc0430ca11576386278da7d0" kindref="member">dpp::cluster::get_guild_webhooks</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-guild-webhooks">https://discord.com/developers/docs/resources/webhook#get-guild-webhooks</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get webhooks for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook_map returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2355" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2355" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a29a7262bcf1c340ed34ddc70079eaaf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_get_webhook</definition>
        <argsstring>(snowflake webhook_id)</argsstring>
        <name>co_get_webhook</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <briefdescription>
<para>Get webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a40e140f1e2eda9632828bce461bc7338" kindref="member">dpp::cluster::get_webhook</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook">https://discord.com/developers/docs/resources/webhook#get-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2365" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2365" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a61c288df0c096c522db9b3822a3cbc0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_get_webhook_message</definition>
        <argsstring>(const class webhook &amp;wh, snowflake message_id, snowflake thread_id=0)</argsstring>
        <name>co_get_webhook_message</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8ff6d3aec04b3bc1ce06a3d077495994" kindref="member">dpp::cluster::get_webhook_message</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook-message">https://discord.com/developers/docs/resources/webhook#get-webhook-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to get the original message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread the message is in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2378" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2378" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aebed6516449a186f68ed8ec188166023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &gt;</type>
        <definition>async&lt; confirmation_callback_t &gt; co_get_webhook_with_token</definition>
        <argsstring>(snowflake webhook_id, const std::string &amp;token)</argsstring>
        <name>co_get_webhook_with_token</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Get webhook using token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a770526895ed13e2dfb746decc3f0be67" kindref="member">dpp::cluster::get_webhook_with_token</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook-with-token">https://discord.com/developers/docs/resources/webhook#get-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token of webhook </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_coro_calls.h" line="2389" column="8" declfile="include/dpp/cluster_coro_calls.h" declline="2389" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1ac19d1cb177d67408309d0cdc35fedb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1adfefe335636cdf5dbbba145a3828c554" kindref="member">slashcommand_map</ref></type>
        <definition>slashcommand_map global_bulk_command_create_sync</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands)</argsstring>
        <name>global_bulk_command_create_sync</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <briefdescription>
<para>Create/overwrite global slash commands. Any existing global slash commands will be deleted and replaced with these. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6bbdec2006aa6a44a6448986a32f0dc4" kindref="member">dpp::cluster::global_bulk_command_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands">https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of slash commands to create/update. overwriting existing commands that are registered globally for this application. Updates will be available in all guilds after 1 hour. Commands that do not already exist will count toward daily application command create limits. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="44" column="18" declfile="include/dpp/cluster_sync_calls.h" declline="44" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa80cee43dfab51b80eaa56c9518a5902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref></type>
        <definition>slashcommand global_command_create_sync</definition>
        <argsstring>(const slashcommand &amp;s)</argsstring>
        <name>global_command_create_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Create a global slash command (a bot can have a maximum of 100 of these). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a11bccddf1068abb215bd6e69ba30b76b" kindref="member">dpp::cluster::global_command_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#create-global-application-command">https://discord.com/developers/docs/interactions/application-commands#create-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="58" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="58" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1abb035c6be650c05f6f847d2b22643d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref></type>
        <definition>slashcommand global_command_get_sync</definition>
        <argsstring>(snowflake id)</argsstring>
        <name>global_command_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a global slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a398a2b72a5cc084333e3fb5ce1f83727" kindref="member">dpp::cluster::global_command_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-global-application-command">https://discord.com/developers/docs/interactions/application-commands#get-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="72" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="72" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa1359fe28bc8be1b707c7bc29c7a53ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation global_command_delete_sync</definition>
        <argsstring>(snowflake id)</argsstring>
        <name>global_command_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Delete a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6efaf2b6ce4557b5a7b039d89f956e3e" kindref="member">dpp::cluster::global_command_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command">https://discord.com/developers/docs/interactions/application-commands#delete-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="86" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="86" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af0bd069670dc9c7a2fd87591a02d6434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation global_command_edit_sync</definition>
        <argsstring>(const slashcommand &amp;s)</argsstring>
        <name>global_command_edit_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Edit a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a53e89466c1d02fd7f350bca69bf03d59" kindref="member">dpp::cluster::global_command_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command">https://discord.com/developers/docs/interactions/application-commands#edit-global-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to change </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="100" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="100" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a26c76ebb9724cd5490b26f86bebc244c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1adfefe335636cdf5dbbba145a3828c554" kindref="member">slashcommand_map</ref></type>
        <definition>slashcommand_map global_commands_get_sync</definition>
        <argsstring>()</argsstring>
        <name>global_commands_get_sync</name>
        <briefdescription>
<para>Get the application&apos;s global slash commands. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8a8cadcdde42fcfa8d29c0c4fd0bec5b" kindref="member">dpp::cluster::global_commands_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands">https://discord.com/developers/docs/interactions/application-commands#get-global-application-commands</ulink> </para>
</simplesect>
<simplesect kind="return"><para>slashcommand_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="113" column="18" declfile="include/dpp/cluster_sync_calls.h" declline="113" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae323eef41c836adfaf03a3d49bfe7dfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1adfefe335636cdf5dbbba145a3828c554" kindref="member">slashcommand_map</ref></type>
        <definition>slashcommand_map guild_bulk_command_create_sync</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands, snowflake guild_id)</argsstring>
        <name>guild_bulk_command_create_sync</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Create/overwrite guild slash commands. Any existing guild slash commands on this guild will be deleted and replaced with these. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a392bb1f732d92fe4b9d8eacdbf4d3ffe" kindref="member">dpp::cluster::guild_bulk_command_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands">https://discord.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of slash commands to create/update. New guild commands will be available in the guild immediately. If the command did not already exist, it will count toward daily application command create limits. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create/update the slash commands in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="130" column="18" declfile="include/dpp/cluster_sync_calls.h" declline="130" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a944a2780e88312e85782ef5e76cac1b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a855d4fbe3b9026d08b31561a61a82e92" kindref="member">guild_command_permissions_map</ref></type>
        <definition>guild_command_permissions_map guild_commands_get_permissions_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_commands_get_permissions_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all slash command permissions of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab7e992a10e120846d39a7d7d3c048ef9" kindref="member">dpp::cluster::guild_commands_get_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash commands permissions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_command_permissions_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="144" column="31" declfile="include/dpp/cluster_sync_calls.h" declline="144" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8b9690c1f70fcc0604c62c42af6b6401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a855d4fbe3b9026d08b31561a61a82e92" kindref="member">guild_command_permissions_map</ref></type>
        <definition>guild_command_permissions_map guild_bulk_command_edit_permissions_sync</definition>
        <argsstring>(const std::vector&lt; slashcommand &gt; &amp;commands, snowflake guild_id)</argsstring>
        <name>guild_bulk_command_edit_permissions_sync</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &gt; &amp;</type>
          <declname>commands</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Edit/Overwrite the permissions of all existing slash commands in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>You can only add up to 10 permission overwrites for a command</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0dcccabdbf1b3fb41e29145f80aaecb6" kindref="member">dpp::cluster::guild_bulk_command_edit_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#batch-edit-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#batch-edit-application-command-permissions</ulink> </para>
</simplesect>
<simplesect kind="warning"><para>The endpoint will overwrite all existing permissions for all commands of the application in a guild, including slash commands, user commands, and message commands. Meaning that if you forgot to pass a slash command, the permissions of it might be removed. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>commands</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of slash commands to edit/overwrite the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit permissions of the slash commands in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_command_permissions_map returned object on completion </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000018"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This has been disabled with updates to Permissions v2. You can use guild_command_edit_permissions instead</para>
</xrefdescription></xrefsect><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="163" column="31" declfile="include/dpp/cluster_sync_calls.h" declline="163" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae23edb71f27122a372f38d62cbc7d69b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref></type>
        <definition>slashcommand guild_command_create_sync</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id)</argsstring>
        <name>guild_command_create_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Create a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6e4a1a241299bcd1b5f6bfd69ae1ead9" kindref="member">dpp::cluster::guild_command_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#create-guild-application-command</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Creating a command with the same name as an existing command for your application will overwrite the old command. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="179" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="179" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad4aeba78271a566f4ef2c55ca91e4f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_command_delete_sync</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>guild_command_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a210e7585068339c47e71b8ff3d219958" kindref="member">dpp::cluster::guild_command_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#delete-guild-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="194" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="194" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2d3684312c2fa0b0157b01de22b4e515" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_command_edit_permissions_sync</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id)</argsstring>
        <name>guild_command_edit_permissions_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Edit slash command permissions of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af7c607ba6c25317d4cf86fea933259ce" kindref="member">dpp::cluster::guild_command_edit_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#edit-application-command-permissions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>You can only add up to 10 permission overwrites for a command </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to edit the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="210" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="210" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9b9f4f19415e847d3c6d6d6bf436bbbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref></type>
        <definition>slashcommand guild_command_get_sync</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>guild_command_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get a slash command of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad33f299b64e188e935184a32ab8515f1" kindref="member">dpp::cluster::guild_command_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#get-guild-application-command</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The returned slash commands will not have permissions set, you need to use a permissions getter e.g. dpp::guild_commands_get_permissions to get the guild command permissions </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash command from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="226" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="226" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a75a93adb582262f8436f8ba5ad9d05fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__command__permissions" kindref="compound">guild_command_permissions</ref></type>
        <definition>guild_command_permissions guild_command_get_permissions_sync</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>guild_command_get_permissions_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the permissions for a slash command of a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a69ebf194c8bb078ce6998080b552c9ad" kindref="member">dpp::cluster::guild_command_get_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions">https://discord.com/developers/docs/interactions/application-commands#get-application-command-permissions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the slash command to get the permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the permissions of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__command__permissions" kindref="compound">guild_command_permissions</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="241" column="27" declfile="include/dpp/cluster_sync_calls.h" declline="241" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a58bd59adea01fe5b7a5b5f8ec105278a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_command_edit_sync</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id)</argsstring>
        <name>guild_command_edit_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Edit a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1afbf6872567ddc76148f8537e5b53c192" kindref="member">dpp::cluster::guild_command_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command">https://discord.com/developers/docs/interactions/application-commands#edit-guild-application-command</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit the slash command in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="256" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="256" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae07608af71753db6d0d094ecb095c097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1adfefe335636cdf5dbbba145a3828c554" kindref="member">slashcommand_map</ref></type>
        <definition>slashcommand_map guild_commands_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_commands_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the application&apos;s slash commands for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a01623d7535dc359905990e710ae3b5e9" kindref="member">dpp::cluster::guild_commands_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/application-commands#get-guild-application-commands">https://discord.com/developers/docs/interactions/application-commands#get-guild-application-commands</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The returned slash commands will not have permissions set, you need to use a permissions getter e.g. dpp::guild_commands_get_permissions to get the guild command permissions </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash commands for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>slashcommand_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="271" column="18" declfile="include/dpp/cluster_sync_calls.h" declline="271" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a52a10719c16f7e7a15191a58ef62f5a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation interaction_response_create_sync</definition>
        <argsstring>(snowflake interaction_id, const std::string &amp;token, const interaction_response &amp;r)</argsstring>
        <name>interaction_response_create_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>interaction_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1interaction__response" kindref="compound">interaction_response</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Respond to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a61e03d7c6a19f6a652d3a80b1a8157ca" kindref="member">dpp::cluster::interaction_response_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interaction_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Interaction id to respond to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Response to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="287" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="287" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6701dcaad8e58149e44fc6555b1124d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation interaction_response_edit_sync</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m)</argsstring>
        <name>interaction_response_edit_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit response to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a983ac4283ea7ee5261475ec232a2c1bf" kindref="member">dpp::cluster::interaction_response_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="302" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="302" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6cd1ca58728f8b24b30c2981963b583b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message interaction_response_get_original_sync</definition>
        <argsstring>(const std::string &amp;token)</argsstring>
        <name>interaction_response_get_original_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Get the original response to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a7c1ab9427b77d2a251f8ce0dda1596d3" kindref="member">dpp::cluster::interaction_response_get_original</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#get-original-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#get-original-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="316" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="316" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9b2db5193a9f78bde481df6534f08b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation interaction_followup_create_sync</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m)</argsstring>
        <name>interaction_followup_create_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Create a followup message to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a90096bfbf3b4469eb51f35f74604e902" kindref="member">dpp::cluster::interaction_followup_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#create-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>followup message to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="331" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="331" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7b265e0f1882449d56b26ebca4aa082d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation interaction_followup_edit_original_sync</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m)</argsstring>
        <name>interaction_followup_edit_original_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit original followup message to a slash command This is an alias for <ref refid="classdpp_1_1cluster_1a983ac4283ea7ee5261475ec232a2c1bf" kindref="member">cluster::interaction_response_edit</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae26c81bfce6baf63926232c81e89db9e" kindref="member">dpp::cluster::interaction_followup_edit_original</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a983ac4283ea7ee5261475ec232a2c1bf" kindref="member">cluster::interaction_response_edit</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>message to edit, the ID should be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="347" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="347" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af5501b3f1ed610d5eaa30cebc0d272a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation interaction_followup_delete_sync</definition>
        <argsstring>(const std::string &amp;token)</argsstring>
        <name>interaction_followup_delete_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Delete the initial interaction response. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab0877de7e9587e932b4655681ca634db" kindref="member">dpp::cluster::interaction_followup_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response">https://discord.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="361" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="361" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa197615b5c740215ed856e1cc4b06d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation interaction_followup_edit_sync</definition>
        <argsstring>(const std::string &amp;token, const message &amp;m)</argsstring>
        <name>interaction_followup_edit_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit followup message to a slash command The message ID in the message you pass should be correctly set to that of a followup message you previously sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4038261414555dcebc8b78e96b121265" kindref="member">dpp::cluster::interaction_followup_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#edit-followup-message">https://discord.com/developers/docs/interactions/receiving-and-responding#edit-followup-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>message to edit, the ID should be set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="377" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="377" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ace22dacf579bc1ed987aee6e2e3f2fb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message interaction_followup_get_sync</definition>
        <argsstring>(const std::string &amp;token, snowflake message_id)</argsstring>
        <name>interaction_followup_get_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <briefdescription>
<para>Get the followup message to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af92385c3dff6752ecdac1126b67c2f4a" kindref="member">dpp::cluster::interaction_followup_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/interactions/receiving-and-responding#get-followup-message">https://discord.com/developers/docs/interactions/receiving-and-responding#get-followup-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>message to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="392" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="392" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae43de72e98352b598c79fd2fce50945a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message interaction_followup_get_original_sync</definition>
        <argsstring>(const std::string &amp;token)</argsstring>
        <name>interaction_followup_get_original_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Get the original followup message to a slash command This is an alias for <ref refid="classdpp_1_1cluster_1a7c1ab9427b77d2a251f8ce0dda1596d3" kindref="member">cluster::interaction_response_get_original</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae3edfe1883e2fe2cd1bcfeab28e5124e" kindref="member">dpp::cluster::interaction_followup_get_original</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a7c1ab9427b77d2a251f8ce0dda1596d3" kindref="member">cluster::interaction_response_get_original</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token for the interaction webhook </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="407" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="407" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aac149559dd761ce056088787ed177d13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a9933dc4fb55fa0e30b939b905b9b0df6" kindref="member">automod_rule_map</ref></type>
        <definition>automod_rule_map automod_rules_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>automod_rules_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all auto moderation rules for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>automod_rule_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="419" column="18" declfile="include/dpp/cluster_sync_calls.h" declline="419" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4b377cb13518e3b30a27e9cf55ffebd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref></type>
        <definition>automod_rule automod_rule_get_sync</definition>
        <argsstring>(snowflake guild_id, snowflake rule_id)</argsstring>
        <name>automod_rule_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>rule_id</declname>
        </param>
        <briefdescription>
<para>Get a single auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Rule id to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="432" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="432" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a468d967cca03ee11285475dcd27f8d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref></type>
        <definition>automod_rule automod_rule_create_sync</definition>
        <argsstring>(snowflake guild_id, const automod_rule &amp;r)</argsstring>
        <name>automod_rule_create_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Create an auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Auto moderation rule to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="445" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="445" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4bec2e8982df6c01912a4372f40e87ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref></type>
        <definition>automod_rule automod_rule_edit_sync</definition>
        <argsstring>(snowflake guild_id, const automod_rule &amp;r)</argsstring>
        <name>automod_rule_edit_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Edit an auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Auto moderation rule to edit. The rule&apos;s id must be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1automod__rule" kindref="compound">automod_rule</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="458" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="458" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af711099a6ba904a113e2dae4184f7581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation automod_rule_delete_sync</definition>
        <argsstring>(snowflake guild_id, snowflake rule_id)</argsstring>
        <name>automod_rule_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>rule_id</declname>
        </param>
        <briefdescription>
<para>Delete an auto moderation rule. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id of the auto moderation rule </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rule_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Auto moderation rule id to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="471" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="471" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac5703c22c4a8e033984d6aadd730486c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref></type>
        <definition>channel channel_create_sync</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>channel_create_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Create a channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new channel object for the guild. Requires the <computeroutput>MANAGE_CHANNELS</computeroutput> permission. If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied. Setting <computeroutput>MANAGE_ROLES</computeroutput> permission in channels is only possible for guild administrators. Returns the new channel object on success. Fires a <computeroutput>Channel Create Gateway</computeroutput> event.</para>
<para>All parameters to this endpoint are optional excluding <computeroutput>name</computeroutput></para>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a66df9163f111cec5a180d642f521660a" kindref="member">dpp::cluster::channel_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-channel">https://discord.com/developers/docs/resources/channel#create-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="492" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="492" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a69bb83b19b7e543be770c775eb3e177c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation channel_delete_permission_sync</definition>
        <argsstring>(const class channel &amp;c, snowflake overwrite_id)</argsstring>
        <name>channel_delete_permission_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <briefdescription>
<para>Remove a permission from a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac335bec6c58c7161348b521aad154431" kindref="member">dpp::cluster::channel_delete_permission</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-channel-permission">https://discord.com/developers/docs/resources/channel#delete-channel-permission</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to remove permission from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to remove, user or channel ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="507" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="507" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4ba8a783fae43469dce6ecd7aaa0c4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation channel_delete_sync</definition>
        <argsstring>(snowflake channel_id)</argsstring>
        <name>channel_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a837aa702a92e98ef593381fb147d23fb" kindref="member">dpp::cluster::channel_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#deleteclose-channel">https://discord.com/developers/docs/resources/channel#deleteclose-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="521" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="521" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a12ff26e2f64af361c1617d7974ed0c9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation channel_edit_permissions_sync</definition>
        <argsstring>(const class channel &amp;c, const snowflake overwrite_id, const uint64_t allow, const uint64_t deny, const bool member)</argsstring>
        <name>channel_edit_permissions_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>allow</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>deny</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>member</declname>
        </param>
        <briefdescription>
<para>Edit a channel&apos;s permissions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a55c02ced51fff33b7b8c4832a9857e1e" kindref="member">dpp::cluster::channel_edit_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#edit-channel-permissions">https://discord.com/developers/docs/resources/channel#edit-channel-permissions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to set permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to change (a user or role ID) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow</parametername>
</parameternamelist>
<parameterdescription>
<para>allow permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deny</parametername>
</parameternamelist>
<parameterdescription>
<para>deny permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the overwrite_id is a user id, false if it is a channel id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="540" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="540" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac4d255775676f8683cbf8def8d0e3377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation channel_edit_permissions_sync</definition>
        <argsstring>(const snowflake channel_id, const snowflake overwrite_id, const uint64_t allow, const uint64_t deny, const bool member)</argsstring>
        <name>channel_edit_permissions_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>allow</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>deny</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>member</declname>
        </param>
        <briefdescription>
<para>Edit a channel&apos;s permissions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a55c02ced51fff33b7b8c4832a9857e1e" kindref="member">dpp::cluster::channel_edit_permissions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#edit-channel-permissions">https://discord.com/developers/docs/resources/channel#edit-channel-permissions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the channel to set permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to change (a user or role ID) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow</parametername>
</parameternamelist>
<parameterdescription>
<para>allow permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deny</parametername>
</parameternamelist>
<parameterdescription>
<para>deny permissions bitmask </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the overwrite_id is a user id, false if it is a channel id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="559" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="559" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a49661dd640641131e8e5258b58fb5cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation channel_edit_positions_sync</definition>
        <argsstring>(const std::vector&lt; channel &gt; &amp;c)</argsstring>
        <name>channel_edit_positions_sync</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Edit multiple channels positions. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify the positions of a set of channel objects for the guild. Requires <computeroutput>MANAGE_CHANNELS</computeroutput> permission. Fires multiple <computeroutput>Channel Update Gateway</computeroutput> events. Only channels to be modified are required.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa005ff4940e700f034b01e197670837b" kindref="member">dpp::cluster::channel_edit_positions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions">https://discord.com/developers/docs/resources/guild#modify-guild-channel-positions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to change the position for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="577" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="577" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a60453ac12acfdb8108f6f36f253ed960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref></type>
        <definition>channel channel_edit_sync</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>channel_edit_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Edit a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8ca7054e8447493eb1136f4972053b0f" kindref="member">dpp::cluster::channel_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#modify-channel">https://discord.com/developers/docs/resources/channel#modify-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to edit/update </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="591" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="591" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4fe79bb6586c6ab4102cbd54ebcf68b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation channel_follow_news_sync</definition>
        <argsstring>(const class channel &amp;c, snowflake target_channel_id)</argsstring>
        <name>channel_follow_news_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>target_channel_id</declname>
        </param>
        <briefdescription>
<para>Follow an announcement (news) channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a83fa90627b403c4489320b64d6e31c8c" kindref="member">dpp::cluster::channel_follow_news</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#follow-news-channel">https://discord.com/developers/docs/resources/channel#follow-news-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to follow </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to subscribe the channel to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="605" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="605" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aeded9b004af14d3d5aebd1481e812545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref></type>
        <definition>channel channel_get_sync</definition>
        <argsstring>(snowflake c)</argsstring>
        <name>channel_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Get a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a108f6f06b43709c8d47df5f94a3ca0a5" kindref="member">dpp::cluster::channel_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel">https://discord.com/developers/docs/resources/channel#get-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="619" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="619" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa1b4e06cf773b0caf61efc79e9f5cd18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref></type>
        <definition>invite channel_invite_create_sync</definition>
        <argsstring>(const class channel &amp;c, const class invite &amp;i)</argsstring>
        <name>channel_invite_create_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Create invite for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5e3f97577e5948896b38836fd293cefd" kindref="member">dpp::cluster::channel_invite_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-channel-invite">https://discord.com/developers/docs/resources/channel#create-channel-invite</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to create an invite on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="634" column="8" declfile="include/dpp/cluster_sync_calls.h" declline="634" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9c0ee769b45fc809ea84ec20915d033f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1aa85b043fd45cf24caa23ab6004a2415a" kindref="member">invite_map</ref></type>
        <definition>invite_map channel_invites_get_sync</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>channel_invites_get_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Get invites for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa03a0da5c8e6801dc56bda258265da04" kindref="member">dpp::cluster::channel_invites_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/invite#get-invites">https://discord.com/developers/docs/resources/invite#get-invites</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get invites for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="648" column="12" declfile="include/dpp/cluster_sync_calls.h" declline="648" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a80d14eeccb28776cd2995ffbac11d3c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation channel_typing_sync</definition>
        <argsstring>(const class channel &amp;c)</argsstring>
        <name>channel_typing_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Trigger channel typing indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aff1ad5764f2878eec2e7cbed3a231bbe" kindref="member">dpp::cluster::channel_typing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#trigger-typing-indicator">https://discord.com/developers/docs/resources/channel#trigger-typing-indicator</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to set as typing on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="661" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="661" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a03addb17162e4ea346df1ece0f545813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation channel_typing_sync</definition>
        <argsstring>(snowflake cid)</argsstring>
        <name>channel_typing_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>cid</declname>
        </param>
        <briefdescription>
<para>Trigger channel typing indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aff1ad5764f2878eec2e7cbed3a231bbe" kindref="member">dpp::cluster::channel_typing</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#trigger-typing-indicator">https://discord.com/developers/docs/resources/channel#trigger-typing-indicator</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cid</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to set as typing on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="674" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="674" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a041620de1941bc984992d390815cf927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a7c77c4dd9434985643b2f1993b227f30" kindref="member">channel_map</ref></type>
        <definition>channel_map channels_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>channels_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all channels for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a24e67431b79cc2c3d0f12d59afd5a1c8" kindref="member">dpp::cluster::channels_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channels">https://discord.com/developers/docs/resources/channel#get-channels</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to retrieve channels for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="688" column="13" declfile="include/dpp/cluster_sync_calls.h" declline="688" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1b6203473027ccfb563a7da986467ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref></type>
        <definition>channel create_dm_channel_sync</definition>
        <argsstring>(snowflake user_id)</argsstring>
        <name>create_dm_channel_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Create a dm channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aab0538838d054a0c80c07cd0556a894c" kindref="member">dpp::cluster::create_dm_channel</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#create-dm">https://discord.com/developers/docs/resources/user#create-dm</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to create DM channel with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>channel returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="701" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="701" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a129f52484acb39470f73e22508104910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a7c77c4dd9434985643b2f1993b227f30" kindref="member">channel_map</ref></type>
        <definition>channel_map current_user_get_dms_sync</definition>
        <argsstring>()</argsstring>
        <name>current_user_get_dms_sync</name>
        <briefdescription>
<para>Get current user DM channels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>channel_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="712" column="13" declfile="include/dpp/cluster_sync_calls.h" declline="712" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a26bd2938ab89082fca3637b59a83d0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message direct_message_create_sync</definition>
        <argsstring>(snowflake user_id, const message &amp;m)</argsstring>
        <name>direct_message_create_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Create a direct message, also create the channel for the direct message if needed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa88bbdcc5005da82928497545e9455bc" kindref="member">dpp::cluster::direct_message_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#create-dm">https://discord.com/developers/docs/resources/user#create-dm</ulink> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa88bbdcc5005da82928497545e9455bc" kindref="member">dpp::cluster::direct_message_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-message">https://discord.com/developers/docs/resources/channel#create-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of user to send message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="729" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="729" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa0e11a2d335d101bd9832a1bc1169aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation gdm_add_sync</definition>
        <argsstring>(snowflake channel_id, snowflake user_id, const std::string &amp;access_token, const std::string &amp;nick)</argsstring>
        <name>gdm_add_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_token</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nick</declname>
        </param>
        <briefdescription>
<para>Adds a recipient to a Group DM using their access token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab9aec491f4116fa33aeabf1e614051f0" kindref="member">dpp::cluster::gdm_add</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#group-dm-add-recipient">https://discord.com/developers/docs/resources/channel#group-dm-add-recipient</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to add group DM recipients to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_token</parametername>
</parameternamelist>
<parameterdescription>
<para>Access token from OAuth2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname of user to apply to the chat </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="745" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="745" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5c7f2b0fe5e158c6998ea60b1ee0aacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation gdm_remove_sync</definition>
        <argsstring>(snowflake channel_id, snowflake user_id)</argsstring>
        <name>gdm_remove_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Removes a recipient from a Group DM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0d130c81079f3b55c440710f5ea0470e" kindref="member">dpp::cluster::gdm_remove</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#group-dm-remove-recipient">https://discord.com/developers/docs/resources/channel#group-dm-remove-recipient</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID of group DM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove from group DM </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="759" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="759" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5239aad651cb9b6d1d4692867b79367e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref></type>
        <definition>emoji guild_emoji_create_sync</definition>
        <argsstring>(snowflake guild_id, const class emoji &amp;newemoji)</argsstring>
        <name>guild_emoji_create_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
          <declname>newemoji</declname>
        </param>
        <briefdescription>
<para>Create single emoji. You must ensure that the emoji passed contained image data using the <ref refid="classdpp_1_1emoji_1afb0fd2592f901c60d505bc4ac5226e49" kindref="member">emoji::load_image()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8bea7e9ba3d487e9a6b2fe747c98e9e1" kindref="member">dpp::cluster::guild_emoji_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#create-guild-emoji">https://discord.com/developers/docs/resources/emoji#create-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create emoji om </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newemoji</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="776" column="7" declfile="include/dpp/cluster_sync_calls.h" declline="776" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab9232aa15c656ec0bb91350fb4b79f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_emoji_delete_sync</definition>
        <argsstring>(snowflake guild_id, snowflake emoji_id)</argsstring>
        <name>guild_emoji_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>emoji_id</declname>
        </param>
        <briefdescription>
<para>Delete a guild emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a55b6d9100c34ea5bbbe37d3ba5089be3" kindref="member">dpp::cluster::guild_emoji_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#delete-guild-emoji">https://discord.com/developers/docs/resources/emoji#delete-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete emoji on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emoji_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="792" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="792" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a17b209858949bb0b4c079f44972cd85b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref></type>
        <definition>emoji guild_emoji_edit_sync</definition>
        <argsstring>(snowflake guild_id, const class emoji &amp;newemoji)</argsstring>
        <name>guild_emoji_edit_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
          <declname>newemoji</declname>
        </param>
        <briefdescription>
<para>Edit a single emoji. </para>
        </briefdescription>
        <detaileddescription>
<para>You must ensure that the emoji passed contained image data using the <ref refid="classdpp_1_1emoji_1afb0fd2592f901c60d505bc4ac5226e49" kindref="member">emoji::load_image()</ref> method. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a7461e2fa96c4bf77468226ffb25744ea" kindref="member">dpp::cluster::guild_emoji_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#modify-guild-emoji">https://discord.com/developers/docs/resources/emoji#modify-guild-emoji</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit emoji on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newemoji</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="809" column="7" declfile="include/dpp/cluster_sync_calls.h" declline="809" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aed360fe893fb2aceacbb1160de0de77b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref></type>
        <definition>emoji guild_emoji_get_sync</definition>
        <argsstring>(snowflake guild_id, snowflake emoji_id)</argsstring>
        <name>guild_emoji_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>emoji_id</declname>
        </param>
        <briefdescription>
<para>Get a single emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ada721a222fb3a42a1a1bb6d93dfcc745" kindref="member">dpp::cluster::guild_emoji_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#get-guild-emoji">https://discord.com/developers/docs/resources/emoji#get-guild-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get emoji for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emoji_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="824" column="7" declfile="include/dpp/cluster_sync_calls.h" declline="824" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a83a297526f214d56547bf17e3ef0280e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a58e2720e1ccc11d2b3b1be2e18df79d9" kindref="member">emoji_map</ref></type>
        <definition>emoji_map guild_emojis_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_emojis_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all emojis for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad66ab98a72eb1ba8d2686fcaa1eb49db" kindref="member">dpp::cluster::guild_emojis_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/emoji#list-guild-emojis">https://discord.com/developers/docs/resources/emoji#list-guild-emojis</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get emojis for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="838" column="11" declfile="include/dpp/cluster_sync_calls.h" declline="838" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2686c9d5fb863f7c254e05c306d7d153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1gateway" kindref="compound">gateway</ref></type>
        <definition>gateway get_gateway_bot_sync</definition>
        <argsstring>()</argsstring>
        <name>get_gateway_bot_sync</name>
        <briefdescription>
<para>Get the gateway information for the bot using the token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a68f16d04f100a0159683cba96e8c0a6c" kindref="member">dpp::cluster::get_gateway_bot</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway#get-gateway-bot">https://discord.com/developers/docs/topics/gateway#get-gateway-bot</ulink> </para>
</simplesect>
<simplesect kind="return"><para>gateway returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="850" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="850" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aed140ef08751aa3fbca1ecaa78a95c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_current_member_edit_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;nickname)</argsstring>
        <name>guild_current_member_edit_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <briefdescription>
<para>Modify current member. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the current member in a guild. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event.</para>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab55ebdf053917a35368be4d86237af33" kindref="member">dpp::cluster::guild_current_member_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-member">https://discord.com/developers/docs/resources/guild#modify-current-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>New nickname, or empty string to clear nickname </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="869" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="869" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad232b426b23439c48debd9f4327802b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1auditlog" kindref="compound">auditlog</ref></type>
        <definition>auditlog guild_auditlog_get_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, uint32_t action_type, snowflake before, snowflake after, uint32_t limit)</argsstring>
        <name>guild_auditlog_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>action_type</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get the audit log for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aac1d1a95eac3a6c38370083abbba9d67" kindref="member">dpp::cluster::guild_auditlog_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log">https://discord.com/developers/docs/resources/audit-log#get-guild-audit-log</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get the audit log of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries from a specific user ID. Set this to <computeroutput>0</computeroutput> will fetch any user </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries for a specific <ref refid="namespacedpp_1a29a51ae6f6d959baee7d5e77d53d6c3d" kindref="member">dpp::audit_type</ref>. Set this to <computeroutput>0</computeroutput> will fetch any type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries with ID less than a specific audit log entry ID. Used for paginating </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Entries with ID greater than a specific audit log entry ID. Used for paginating </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of entries (between 1-100) to return </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auditlog returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="888" column="10" declfile="include/dpp/cluster_sync_calls.h" declline="888" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5b5e472841d9122aa7ac8373ecd02e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_ban_add_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, uint32_t delete_message_seconds=0)</argsstring>
        <name>guild_ban_add_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>delete_message_seconds</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Add guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a guild ban, and optionally delete previous messages sent by the banned user. Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Ban Add</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a00fe9bf79228a671d618e9fb27b5684a" kindref="member">dpp::cluster::guild_ban_add</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild-ban">https://discord.com/developers/docs/resources/guild#create-guild-ban</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to add ban to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to ban </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delete_message_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>How many seconds to delete messages for, between 0 and 604800 (7 days). Defaults to 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="907" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="907" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a381e6103f73e667bd42fc7b8f01117f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_ban_delete_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>guild_ban_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Delete guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove the ban for a user. Requires the <computeroutput>BAN_MEMBERS</computeroutput> permissions. Fires a Guild Ban Remove Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a77f277230e3cd4d34eac3d2d9838f6d7" kindref="member">dpp::cluster::guild_ban_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-ban">https://discord.com/developers/docs/resources/guild#remove-guild-ban</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to delete ban from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to delete ban for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="925" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="925" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac20fa35c137c48987aceb48f023e3e2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref></type>
        <definition>guild guild_create_sync</definition>
        <argsstring>(const class guild &amp;g)</argsstring>
        <name>guild_create_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Create a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new guild. Returns a guild object on success. <computeroutput>Fires a Guild Create Gateway</computeroutput> event.</para>
<para>When using the roles parameter, the first member of the array is used to change properties of the guild&apos;s everyone role. If you are trying to bootstrap a guild with additional roles, keep this in mind. The required id field within each role object is an integer placeholder, and will be replaced by the API upon consumption. Its purpose is to allow you to overwrite a role&apos;s permissions in a channel when also passing in channels with the channels array. When using the channels parameter, the position field is ignored, and none of the default channels are created. The id field within each channel object may be set to an integer placeholder, and will be replaced by the API upon consumption. Its purpose is to allow you to create <computeroutput>GUILD_CATEGORY</computeroutput> channels by setting the <computeroutput>parent_id</computeroutput> field on any children to the category&apos;s id field. Category channels must be listed before any children.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8e7f40eadf7748bcf35f67d152c3462c" kindref="member">dpp::cluster::guild_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild">https://discord.com/developers/docs/resources/guild#create-guild</ulink> </para>
</simplesect>
<simplesect kind="note"><para>The region field is deprecated and is replaced by <ref refid="classdpp_1_1channel_1a05f56fbd37e993e0fc36df06b3d65bad" kindref="member">channel.rtc_region</ref>. This endpoint can be used only by bots in less than 10 guilds. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="951" column="7" declfile="include/dpp/cluster_sync_calls.h" declline="951" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1b63d41d834a4223bad56d528fde1b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_delete_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete a guild permanently. User must be owner. Fires a <computeroutput>Guild Delete Gateway</computeroutput> event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9b0fccd64f8d21340fe20642d9fdb1e9" kindref="member">dpp::cluster::guild_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild">https://discord.com/developers/docs/resources/guild#delete-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="967" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="967" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5704ecc3212ed418b36d6f4fa8b4ab02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_delete_integration_sync</definition>
        <argsstring>(snowflake guild_id, snowflake integration_id)</argsstring>
        <name>guild_delete_integration_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>integration_id</declname>
        </param>
        <briefdescription>
<para>Delete guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para>Delete the attached integration object for the guild. Deletes any associated webhooks and kicks the associated bot if there is one. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. Fires a Guild Integrations Update Gateway event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab4ed64619f058ac4b71a90066e7aac73" kindref="member">dpp::cluster::guild_delete_integration</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild-integration">https://discord.com/developers/docs/resources/guild#delete-guild-integration</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete integration for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="986" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="986" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab0a20f6a371ed8915654c50de208162b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref></type>
        <definition>guild guild_edit_sync</definition>
        <argsstring>(const class guild &amp;g)</argsstring>
        <name>guild_edit_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Edit a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify a guild&apos;s settings. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. Returns the updated guild object on success. Fires a <computeroutput>Guild Update Gateway</computeroutput> event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a54e2174822bb1796a541f849d568664c" kindref="member">dpp::cluster::guild_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild">https://discord.com/developers/docs/resources/guild#modify-guild</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1004" column="7" declfile="include/dpp/cluster_sync_calls.h" declline="1004" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a649e4c0a19992e9c3f6ff297ed006911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__widget" kindref="compound">guild_widget</ref></type>
        <definition>guild_widget guild_edit_widget_sync</definition>
        <argsstring>(snowflake guild_id, const class guild_widget &amp;gw)</argsstring>
        <name>guild_edit_widget_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1guild__widget" kindref="compound">guild_widget</ref> &amp;</type>
          <declname>gw</declname>
        </param>
        <briefdescription>
<para>Edit guild widget. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae97d98927594cee1821c4ff318eb9561" kindref="member">dpp::cluster::guild_edit_widget</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-widget">https://discord.com/developers/docs/resources/guild#modify-guild-widget</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit widget for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gw</parametername>
</parameternamelist>
<parameterdescription>
<para>New guild widget information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__widget" kindref="compound">guild_widget</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1022" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1022" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9810b52f5a6cdb45b3e8ba20066e4f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1ban" kindref="compound">ban</ref></type>
        <definition>ban guild_get_ban_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>guild_get_ban_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get single guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad871d30ed11d0799da4a831ede8a7d95" kindref="member">dpp::cluster::guild_get_ban</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-ban">https://discord.com/developers/docs/resources/guild#get-guild-ban</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get ban for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of ban to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ban returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1038" column="5" declfile="include/dpp/cluster_sync_calls.h" declline="1038" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7c9b4971f52b184c3604ea9e12943479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a52b195380df96e9c43f35fa2da82db14" kindref="member">ban_map</ref></type>
        <definition>ban_map guild_get_bans_sync</definition>
        <argsstring>(snowflake guild_id, snowflake before, snowflake after, snowflake limit)</argsstring>
        <name>guild_get_bans_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get guild ban list. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>BAN_MEMBERS</computeroutput> permission. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac7fe3385e506ea073076bc4fb57f06c3" kindref="member">dpp::cluster::guild_get_bans</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-bans">https://discord.com/developers/docs/resources/guild#get-guild-bans</ulink> </para>
</simplesect>
<simplesect kind="note"><para>Provide a user ID to <computeroutput>before</computeroutput> and <computeroutput>after</computeroutput> for pagination. Users will always be returned in ascending order by the user ID. If both before and after are provided, only before is respected. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get bans for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>If non-zero, all bans for user ids before this user id will be returned up to the limit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-zero, all bans for user ids after this user id will be returned up to the limit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of bans to retrieve in this call up to a maximum of 1000 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ban_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1057" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="1057" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9eaa26f60bb494c8b7494b611f54dbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1aa13e2c5898009fad42ebe12fd5641d8a" kindref="member">integration_map</ref></type>
        <definition>integration_map guild_get_integrations_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_integrations_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild integrations. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a43cba3bd187f9b28dcaed5b4f4ed5bda" kindref="member">dpp::cluster::guild_get_integrations</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-integrations">https://discord.com/developers/docs/resources/guild#get-guild-integrations</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get integrations for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integration_map returned object on completion</para>
</simplesect>
<simplesect kind="note"><para>This endpoint returns a maximum of 50 integrations. If a guild has more integrations, they cannot be accessed.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1078" column="17" declfile="include/dpp/cluster_sync_calls.h" declline="1078" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac002c4fdeaeac6da804fcb8ec1b42811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref></type>
        <definition>invite guild_get_vanity_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_vanity_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild vanity url, if enabled. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a partial <ref refid="classdpp_1_1invite" kindref="compound">dpp::invite</ref> object for guilds with that feature enabled. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. code will be null if a vanity url for the guild is not set. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad1332e45cc89e871009e840c25145df5" kindref="member">dpp::cluster::guild_get_vanity</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-vanity-url">https://discord.com/developers/docs/resources/guild#get-guild-vanity-url</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get vanity URL for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1096" column="8" declfile="include/dpp/cluster_sync_calls.h" declline="1096" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a34bfc464bcb65b888bca02995c6daf1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__widget" kindref="compound">guild_widget</ref></type>
        <definition>guild_widget guild_get_widget_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_widget_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild widget. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a57626c7a0e06aee1c362b986e44030c2" kindref="member">dpp::cluster::guild_get_widget</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-widget">https://discord.com/developers/docs/resources/guild#get-guild-widget</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get widget for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__widget" kindref="compound">guild_widget</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1112" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1112" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a88210140e34d8a771b95298179542a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_modify_integration_sync</definition>
        <argsstring>(snowflake guild_id, const class integration &amp;i)</argsstring>
        <name>guild_modify_integration_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1integration" kindref="compound">integration</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Modify guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0cc29438d9f4a8a42e5f5d44ce44c6db" kindref="member">dpp::cluster::guild_modify_integration</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-integration">https://discord.com/developers/docs/resources/guild#modify-guild-integration</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to modify integration for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration to modify </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1128" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1128" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6fef8b393d4a36c5415a4c36338d8489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1prune" kindref="compound">prune</ref></type>
        <definition>prune guild_get_prune_counts_sync</definition>
        <argsstring>(snowflake guild_id, const struct prune &amp;pruneinfo)</argsstring>
        <name>guild_get_prune_counts_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &amp;</type>
          <declname>pruneinfo</declname>
        </param>
        <briefdescription>
<para>Get prune counts. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a prune object indicating the number of members that would be removed in a prune operation. Requires the <computeroutput>KICK_MEMBERS</computeroutput> permission. By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the include_roles parameter. Any inactive user that has a subset of the provided role(s) will be counted in the prune and users with additional roles will not.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aad296f07bd5b9f900dcedbf88c464e09" kindref="member">dpp::cluster::guild_get_prune_counts</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-prune-count">https://discord.com/developers/docs/resources/guild#get-guild-prune-count</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to count for pruning </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pruneinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pruning info </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>prune returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1148" column="7" declfile="include/dpp/cluster_sync_calls.h" declline="1148" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9199f4f2112559032957d59937a13544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1prune" kindref="compound">prune</ref></type>
        <definition>prune guild_begin_prune_sync</definition>
        <argsstring>(snowflake guild_id, const struct prune &amp;pruneinfo)</argsstring>
        <name>guild_begin_prune_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &amp;</type>
          <declname>pruneinfo</declname>
        </param>
        <briefdescription>
<para>Begin guild prune. </para>
        </briefdescription>
        <detaileddescription>
<para>Begin a prune operation. Requires the <computeroutput>KICK_MEMBERS</computeroutput> permission. Returns a prune object indicating the number of members that were removed in the prune operation. For large guilds it&apos;s recommended to set the <computeroutput>compute_prune_count</computeroutput> option to false, forcing &apos;pruned&apos; to 0. Fires multiple <computeroutput>Guild Member Remove</computeroutput> Gateway events. By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the <computeroutput>include_roles</computeroutput> parameter. Any inactive user that has a subset of the provided role(s) will be included in the prune and users with additional roles will not.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a68d13c11179006d5271c1a398df58bc2" kindref="member">dpp::cluster::guild_begin_prune</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#begin-guild-prune">https://discord.com/developers/docs/resources/guild#begin-guild-prune</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to prune </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pruneinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pruning info </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>prune returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1170" column="7" declfile="include/dpp/cluster_sync_calls.h" declline="1170" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4f9206883af01ce3253b5909bf3153d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_set_nickname_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;nickname)</argsstring>
        <name>guild_set_nickname_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <briefdescription>
<para>Change current user nickname. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the nickname of the current user in a guild. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event.</para>
<para><xrefsect id="deprecated_1_deprecated000019"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Deprecated in favor of Modify Current Member. Will be replaced by <ref refid="classdpp_1_1cluster_1ab55ebdf053917a35368be4d86237af33" kindref="member">dpp::cluster::guild_current_member_edit</ref> </para>
</xrefdescription></xrefsect><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4a8074b289fee0f43d7eafb2bc6ae5c7" kindref="member">dpp::cluster::guild_set_nickname</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-user-nick">https://discord.com/developers/docs/resources/guild#modify-current-user-nick</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change nickname on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>New nickname, or empty string to clear nickname </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1190" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1190" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a59b4ba9bc83e41b336b8e93f972d4cd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_sync_integration_sync</definition>
        <argsstring>(snowflake guild_id, snowflake integration_id)</argsstring>
        <name>guild_sync_integration_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>integration_id</declname>
        </param>
        <briefdescription>
<para>Sync guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4bef071b931d0ca71b45ee0d8bf3a96c" kindref="member">dpp::cluster::guild_sync_integration</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#sync-guild-integration">https://discord.com/developers/docs/resources/guild#sync-guild-integration</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to sync integration on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to synchronise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1205" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1205" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a56260b496f9653e5e46ce16f0143bc2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1onboarding" kindref="compound">onboarding</ref></type>
        <definition>onboarding guild_get_onboarding_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_onboarding_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the guild&apos;s onboarding configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a7a6352ff9824bf2a5fdd3e41b8da8155" kindref="member">dpp::cluster::guild_get_onboarding</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-onboarding">https://discord.com/developers/docs/resources/guild#get-guild-onboarding</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>The onboarding object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>onboarding returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1219" column="12" declfile="include/dpp/cluster_sync_calls.h" declline="1219" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6bc508cf375c7375cf53262982dc46bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1onboarding" kindref="compound">onboarding</ref></type>
        <definition>onboarding guild_edit_onboarding_sync</definition>
        <argsstring>(const struct onboarding &amp;o)</argsstring>
        <name>guild_edit_onboarding_sync</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1onboarding" kindref="compound">onboarding</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Edit the guild&apos;s onboarding configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> and <computeroutput>MANAGE_ROLES</computeroutput> permissions.</para>
<para><simplesect kind="note"><para>Onboarding enforces constraints when enabled. These constraints are that there must be at least 7 Default Channels and at least 5 of them must allow sending messages to the @everyone role. The <computeroutput><ref refid="structdpp_1_1onboarding_1ae3d9e7cc64867f0b586fc157c37aaeb5" kindref="member">onboarding::mode</ref></computeroutput> field modifies what is considered when enforcing these constraints.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa31987df09d132a45b2d0f5b719df9e8" kindref="member">dpp::cluster::guild_edit_onboarding</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-onboarding">https://discord.com/developers/docs/resources/guild#modify-guild-onboarding</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>The onboarding object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>onboarding returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1238" column="12" declfile="include/dpp/cluster_sync_calls.h" declline="1238" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a525a3d910d58fea05286438857cfa00d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1welcome__screen" kindref="compound">dpp::welcome_screen</ref></type>
        <definition>dpp::welcome_screen guild_get_welcome_screen_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_welcome_screen_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get the guild&apos;s welcome screen. </para>
        </briefdescription>
        <detaileddescription>
<para>If the welcome screen is not enabled, the <computeroutput>MANAGE_GUILD</computeroutput> permission is required.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a864553916e3ddee27517b092de35fd12" kindref="member">dpp::cluster::guild_get_welcome_screen</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-welcome-screen">https://discord.com/developers/docs/resources/guild#get-guild-welcome-screen</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild ID to get the welcome screen from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1welcome__screen" kindref="compound">dpp::welcome_screen</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1254" column="21" declfile="include/dpp/cluster_sync_calls.h" declline="1254" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a15a6633362b4d0c9da740cea46df4ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1welcome__screen" kindref="compound">dpp::welcome_screen</ref></type>
        <definition>dpp::welcome_screen guild_edit_welcome_screen_sync</definition>
        <argsstring>(snowflake guild_id, const struct welcome_screen &amp;welcome_screen, bool enabled)</argsstring>
        <name>guild_edit_welcome_screen_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1welcome__screen" kindref="compound">welcome_screen</ref> &amp;</type>
          <declname>welcome_screen</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Edit the guild&apos;s welcome screen. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission. May fire a <computeroutput>Guild Update</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a077a0f54778632d4a76794f53075b341" kindref="member">dpp::cluster::guild_edit_welcome_screen</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-welcome-screen">https://discord.com/developers/docs/resources/guild#modify-guild-welcome-screen</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild ID to edit the welcome screen for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="structdpp_1_1welcome__screen" kindref="compound">welcome_screen</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The welcome screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the welcome screen should be enabled or disabled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1welcome__screen" kindref="compound">dpp::welcome_screen</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1272" column="21" declfile="include/dpp/cluster_sync_calls.h" declline="1272" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4066c8f1e67919da1580a4c128032879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_add_member_sync</definition>
        <argsstring>(const guild_member &amp;gm, const std::string &amp;access_token)</argsstring>
        <name>guild_add_member_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
          <declname>gm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_token</declname>
        </param>
        <briefdescription>
<para>Add guild member. Needs a specific oauth2 scope, from which you get the access_token. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a user to the guild, provided you have a valid oauth2 access token for the user with the guilds.join scope. Returns the <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref>, which is defaulted if the user is already a member of the guild. Fires a <computeroutput>Guild Member Add</computeroutput> Gateway event.</para>
<para>For guilds with Membership Screening enabled, this endpoint will default to adding new members as pending in the guild member object. Members that are pending will have to complete membership screening before they become full members that can talk.</para>
<para><simplesect kind="note"><para>All parameters to this endpoint except for access_token are optional. The bot must be a member of the guild with <computeroutput>CREATE_INSTANT_INVITE</computeroutput> permission. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a19819f7f2f2f3badecc1e29a928f2690" kindref="member">dpp::cluster::guild_add_member</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#add-guild-member">https://discord.com/developers/docs/resources/guild#add-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gm</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild member to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_token</parametername>
</parameternamelist>
<parameterdescription>
<para>Access token from Oauth2 scope </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1295" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1295" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5014eb727a1b771fb769a2e8fd42a225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref></type>
        <definition>guild_member guild_edit_member_sync</definition>
        <argsstring>(const guild_member &amp;gm)</argsstring>
        <name>guild_edit_member_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
          <declname>gm</declname>
        </param>
        <briefdescription>
<para>Edit the properties of an existing guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify attributes of a guild member. Returns the <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref>. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. To remove a timeout, set the <computeroutput>communication_disabled_until</computeroutput> to a non-zero time in the past, e.g. 1. When moving members to channels, the API user must have permissions to both connect to the channel and have the <computeroutput>MOVE_MEMBERS</computeroutput> permission. For moving and disconnecting users from voice, use <ref refid="classdpp_1_1cluster_1ac673fb500731954ad50e90de70b2fd03" kindref="member">dpp::cluster::guild_member_move</ref>. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad793626d2733715381c3c5c440f31bd0" kindref="member">dpp::cluster::guild_edit_member</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gm</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild member to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1314" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1314" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1f78587049cac058d4d4dcb63f8ab987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref></type>
        <definition>guild_member guild_get_member_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>guild_get_member_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a99e8227f11ef33cd2d9cc3abef46adfd" kindref="member">dpp::cluster::guild_get_member</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-member">https://discord.com/developers/docs/resources/guild#get-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get member for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of member to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1328" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1328" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa94fc2c644808aa8ca570fbd24ffe209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a219aedbe5bf37835c4a65115fccba278" kindref="member">guild_member_map</ref></type>
        <definition>guild_member_map guild_get_members_sync</definition>
        <argsstring>(snowflake guild_id, uint16_t limit, snowflake after)</argsstring>
        <name>guild_get_members_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <briefdescription>
<para>Get all guild members. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint is restricted according to whether the <computeroutput>GUILD_MEMBERS</computeroutput> Privileged Intent is enabled for your application. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6b24baba4de9d38f7d9a7cea2f71a545" kindref="member">dpp::cluster::guild_get_members</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-members">https://discord.com/developers/docs/resources/guild#get-guild-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get all members for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of members to return (1-1000) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>the highest user id in the previous page </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_member_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1345" column="18" declfile="include/dpp/cluster_sync_calls.h" declline="1345" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a71e5cd442880ff73b4cc4bd4bf2ac346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_member_add_role_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id)</argsstring>
        <name>guild_member_add_role_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Add role to guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Adds a role to a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aeffb7f4f32ca342886a79692ed8fb416" kindref="member">dpp::cluster::guild_member_add_role</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#add-guild-member-role">https://discord.com/developers/docs/resources/guild#add-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to add a role to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to add role to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role ID to add to the user </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1364" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1364" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa8221744be81a0696a8124467e6145a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_member_delete_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>guild_member_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Remove (kick) a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove a member from a guild. Requires <computeroutput>KICK_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Member Remove</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a40788ea66fddce18336fb53ff8a2a6b1" kindref="member">dpp::cluster::guild_member_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member">https://discord.com/developers/docs/resources/guild#remove-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000020"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Replaced by <ref refid="classdpp_1_1cluster_1a8d4b8738bf9ba45254582ce16d14e22d" kindref="member">dpp::cluster::guild_member_kick</ref> </para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to kick member from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to kick </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1383" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1383" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a20d3638fb222bd91aa9c2ad460b30b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_member_kick_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id)</argsstring>
        <name>guild_member_kick_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Remove (kick) a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove a member from a guild. Requires <computeroutput>KICK_MEMBERS</computeroutput> permission. Fires a <computeroutput>Guild Member Remove</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8d4b8738bf9ba45254582ce16d14e22d" kindref="member">dpp::cluster::guild_member_kick</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member">https://discord.com/developers/docs/resources/guild#remove-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to kick member from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to kick </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1401" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1401" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a22ce81e0f2204d4217ac284a9163b8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_member_timeout_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, time_t communication_disabled_until)</argsstring>
        <name>guild_member_timeout_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>communication_disabled_until</declname>
        </param>
        <briefdescription>
<para>Set the timeout of a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9afda69f8c99365001ec349f8dc70388" kindref="member">dpp::cluster::guild_member_timeout</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to timeout the member in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to set the timeout for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>communication_disabled_until</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp when the user&apos;s timeout will expire (up to 28 days in the future). Set to 0 to remove the timeout </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1419" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1419" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa2e1667b47f46137b0abf1a994821da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_member_delete_role_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id)</argsstring>
        <name>guild_member_delete_role_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Remove role from guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes a role from a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a98e8223a62f31bb716c326ff59f67576" kindref="member">dpp::cluster::guild_member_delete_role</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member-role">https://discord.com/developers/docs/resources/guild#remove-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to remove role from user on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove role from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000021"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="classdpp_1_1cluster_1a4e310334b84b6711119fe20a340ddc85" kindref="member">dpp::cluster::guild_member_remove_role</ref> instead</para>
</xrefdescription></xrefsect><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1439" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1439" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0393db5997c2d6acd5e7de306e5ace09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_member_remove_role_sync</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id)</argsstring>
        <name>guild_member_remove_role_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Remove role from guild member. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes a role from a guild member. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4e310334b84b6711119fe20a340ddc85" kindref="member">dpp::cluster::guild_member_remove_role</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#remove-guild-member-role">https://discord.com/developers/docs/resources/guild#remove-guild-member-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to remove role from user on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove role from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1458" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1458" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1abf8cf09e2e52018299f14f71ca1da5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref></type>
        <definition>guild_member guild_member_move_sync</definition>
        <argsstring>(const snowflake channel_id, const snowflake guild_id, const snowflake user_id)</argsstring>
        <name>guild_member_move_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Moves the guild member to a other voice channel, if member is connected to one. Set the <computeroutput>channel_id</computeroutput> to <computeroutput>0</computeroutput> to disconnect the user. </para>
        </briefdescription>
        <detaileddescription>
<para>Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="note"><para>When moving members to channels, the API user <bold>must</bold> have permissions to both connect to the channel and have the <computeroutput>MOVE_MEMBERS</computeroutput> permission. </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac673fb500731954ad50e90de70b2fd03" kindref="member">dpp::cluster::guild_member_move</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-member">https://discord.com/developers/docs/resources/guild#modify-guild-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the channel to which the user is used. Set to <computeroutput>0</computeroutput> to disconnect the user </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id to which the user is connected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User id, who should be moved </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1478" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1478" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a33520747ebe8e62b47bbc177bc15d09d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a219aedbe5bf37835c4a65115fccba278" kindref="member">guild_member_map</ref></type>
        <definition>guild_member_map guild_search_members_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;query, uint16_t limit)</argsstring>
        <name>guild_search_members_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>query</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Search for guild members based on whether their username or nickname starts with the given string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint is restricted according to whether the <computeroutput>GUILD_MEMBERS</computeroutput> Privileged Intent is enabled for your application. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a52cc92ce052d063854e0372539e4d9ee" kindref="member">dpp::cluster::guild_search_members</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#search-guild-members">https://discord.com/developers/docs/resources/guild#search-guild-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to search in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>Query string to match username(s) and nickname(s) against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of members to return (1-1000) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild_member_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1495" column="18" declfile="include/dpp/cluster_sync_calls.h" declline="1495" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7e224a9dbbb971e0e365db9428780881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1aa85b043fd45cf24caa23ab6004a2415a" kindref="member">invite_map</ref></type>
        <definition>invite_map guild_get_invites_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_invites_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild invites. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of invite objects (with invite metadata) for the guild. Requires the <computeroutput>MANAGE_GUILD</computeroutput> permission.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a93c0e07243611419141305da123c859a" kindref="member">dpp::cluster::guild_get_invites</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-invites">https://discord.com/developers/docs/resources/guild#get-guild-invites</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get invites for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1511" column="12" declfile="include/dpp/cluster_sync_calls.h" declline="1511" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7d80b50f5803c20d1163226dcda05427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1invite" kindref="compound">invite</ref></type>
        <definition>invite invite_get_sync</definition>
        <argsstring>(const std::string &amp;invite_code)</argsstring>
        <name>invite_get_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>invite_code</declname>
        </param>
        <briefdescription>
<para>Get details about an invite. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6dbddcf4f753ced02d8ec693dcaf583c" kindref="member">dpp::cluster::invite_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/invite#get-invite">https://discord.com/developers/docs/resources/invite#get-invite</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invite_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite code to get information on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>invite returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1528" column="8" declfile="include/dpp/cluster_sync_calls.h" declline="1528" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7b6a92b9a8937b5f4e8974ad3b82940a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_add_reaction_sync</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction)</argsstring>
        <name>message_add_reaction_sync</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Add a reaction to a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1adbee89fb3c2967fe5df3deee7876199c" kindref="member">dpp::cluster::message_add_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-reaction">https://discord.com/developers/docs/resources/channel#create-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to add a reaction to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to add. Emojis should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1543" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1543" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa451af6e4bfb6cb6864e7225c788a3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_add_reaction_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction)</argsstring>
        <name>message_add_reaction_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Add a reaction to a message by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1adbee89fb3c2967fe5df3deee7876199c" kindref="member">dpp::cluster::message_add_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway#message-reaction-add">https://discord.com/developers/docs/topics/gateway#message-reaction-add</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to add reactions to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to add reactions to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to add. Emojis should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1559" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1559" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a798ae7bfe0fe06d93a70fde240a52514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message message_create_sync</definition>
        <argsstring>(const struct message &amp;m)</argsstring>
        <name>message_create_sync</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Send a message to a channel. The callback function is called when the message has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa6ae3dc32ebc2dd14264962710d35af7" kindref="member">dpp::cluster::message_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#create-message">https://discord.com/developers/docs/resources/channel#create-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1573" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="1573" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6e94df1c101df8ef23a83037a90aa9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message message_crosspost_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>message_crosspost_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Crosspost a message. The callback function is called when the message has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab67f05b1b4b4bd3ea97a6bafc3b7151d" kindref="member">dpp::cluster::message_crosspost</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#crosspost-message">https://discord.com/developers/docs/resources/channel#crosspost-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to crosspost </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to crosspost from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1588" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="1588" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a66d92a3e0e148a66c0522d3c29c94776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_delete_all_reactions_sync</definition>
        <argsstring>(const struct message &amp;m)</argsstring>
        <name>message_delete_all_reactions_sync</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Delete all reactions on a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8bab4c3df83ddf8a7c81504a2107afe7" kindref="member">dpp::cluster::message_delete_all_reactions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions">https://discord.com/developers/docs/resources/channel#delete-all-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1602" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1602" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1abf713b9478f3d256d3a113721e3bb218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_delete_all_reactions_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>message_delete_all_reactions_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete all reactions on a message by id. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8bab4c3df83ddf8a7c81504a2107afe7" kindref="member">dpp::cluster::message_delete_all_reactions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions">https://discord.com/developers/docs/resources/channel#delete-all-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1617" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1617" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6c36ad5bd3b5ea099bd025e9ad09bda8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_delete_bulk_sync</definition>
        <argsstring>(const std::vector&lt; snowflake &gt; &amp;message_ids, snowflake channel_id)</argsstring>
        <name>message_delete_bulk_sync</name>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt; &amp;</type>
          <declname>message_ids</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Bulk delete messages from a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="note"><para>If any message provided older than 2 weeks or any duplicate message ID, it will fail.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a945ff67bd26bdb38e74192389a660cb1" kindref="member">dpp::cluster::message_delete_bulk</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#bulk-delete-messages">https://discord.com/developers/docs/resources/channel#bulk-delete-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>List of message IDs to delete (at least 2 and at most 100 message IDs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1635" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1635" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5883ba9a11a360bcd0e2b0e79f99a448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_delete_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>message_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete a message from a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3aa3ef912199ea0ebac49dfe1cf5cd2f" kindref="member">dpp::cluster::message_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-message">https://discord.com/developers/docs/resources/channel#delete-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1651" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1651" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad2d0a0325976bc550d0ffe69c49d6dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_delete_own_reaction_sync</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction)</argsstring>
        <name>message_delete_own_reaction_sync</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete own reaction from a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aee40a0e598714c898630c65119003d01" kindref="member">dpp::cluster::message_delete_own_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-own-reaction">https://discord.com/developers/docs/resources/channel#delete-own-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete own reaction from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete. The reaction should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1666" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1666" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aebf1364bb0f89ca44471879815a3894d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_delete_own_reaction_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction)</argsstring>
        <name>message_delete_own_reaction_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete own reaction from a message by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aee40a0e598714c898630c65119003d01" kindref="member">dpp::cluster::message_delete_own_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-own-reaction">https://discord.com/developers/docs/resources/channel#delete-own-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete. The reaction should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1682" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1682" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a115c405b3cfd386bb376ae7e000e6b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_delete_reaction_sync</definition>
        <argsstring>(const struct message &amp;m, snowflake user_id, const std::string &amp;reaction)</argsstring>
        <name>message_delete_reaction_sync</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete a user&apos;s reaction from a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae30a16651849e78cee9030ceb07f9f28" kindref="member">dpp::cluster::message_delete_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-user-reaction">https://discord.com/developers/docs/resources/channel#delete-user-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete a user&apos;s reaction from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID who&apos;s reaction you want to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to remove. Reactions should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1698" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1698" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a175f2bcebce29c907d7fb4018bec6b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_delete_reaction_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, snowflake user_id, const std::string &amp;reaction)</argsstring>
        <name>message_delete_reaction_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete a user&apos;s reaction from a message by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae30a16651849e78cee9030ceb07f9f28" kindref="member">dpp::cluster::message_delete_reaction</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-user-reaction">https://discord.com/developers/docs/resources/channel#delete-user-reaction</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID who&apos;s reaction you want to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to remove. Reactions should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1715" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1715" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa9e800a8a24b01122f8a6443c0bd213f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_delete_reaction_emoji_sync</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction)</argsstring>
        <name>message_delete_reaction_emoji_sync</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete all reactions on a message using a particular emoji. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9879e447c31abfd6672b31e752b159ed" kindref="member">dpp::cluster::message_delete_reaction_emoji</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji">https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete, in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1730" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1730" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae0d344a190676f6dfd2f9e724396a1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_delete_reaction_emoji_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction)</argsstring>
        <name>message_delete_reaction_emoji_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <briefdescription>
<para>Delete all reactions on a message using a particular emoji by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9879e447c31abfd6672b31e752b159ed" kindref="member">dpp::cluster::message_delete_reaction_emoji</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji">https://discord.com/developers/docs/resources/channel#delete-all-reactions-for-emoji</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete, in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1746" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1746" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad6d12710877b058e6f159c53f3c34c49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message message_edit_sync</definition>
        <argsstring>(const struct message &amp;m)</argsstring>
        <name>message_edit_sync</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit a message on a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a173ff389feb4f48ac67a8c037081b2d5" kindref="member">dpp::cluster::message_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#edit-message">https://discord.com/developers/docs/resources/channel#edit-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1760" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="1760" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adfd84a3dcf55fbbecf72fe0b412d7dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message message_get_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id)</argsstring>
        <name>message_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a9d3b0f7c3dae4ecb1980cabe8f10ccd7" kindref="member">dpp::cluster::message_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel-message">https://discord.com/developers/docs/resources/channel#get-channel-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1775" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="1775" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad2fcdba22e610a3eb35f95fff3a257c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a1c4073c92e19579c06591033a4a234e1" kindref="member">user_map</ref></type>
        <definition>user_map message_get_reactions_sync</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction, snowflake before, snowflake after, snowflake limit)</argsstring>
        <name>message_get_reactions_sync</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get reactions on a message for a particular emoji. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab05fea3d6c298d5f2371704084383f8f" kindref="member">dpp::cluster::message_get_reactions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-reactions">https://discord.com/developers/docs/resources/channel#get-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to get reactions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction should be in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of reactions maximum should be returned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>user_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1793" column="10" declfile="include/dpp/cluster_sync_calls.h" declline="1793" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa066a0654588a9bec98e81e268641212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a58e2720e1ccc11d2b3b1be2e18df79d9" kindref="member">emoji_map</ref></type>
        <definition>emoji_map message_get_reactions_sync</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, const std::string &amp;reaction, snowflake before, snowflake after, snowflake limit)</argsstring>
        <name>message_get_reactions_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get reactions on a message for a particular emoji by id. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab05fea3d6c298d5f2371704084383f8f" kindref="member">dpp::cluster::message_get_reactions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-reactions">https://discord.com/developers/docs/resources/channel#get-reactions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to get reactions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get reactions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction should be in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of reactions maximum should be returned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1812" column="11" declfile="include/dpp/cluster_sync_calls.h" declline="1812" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab25380f93d6a7f1c25b39b6f073639be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_pin_sync</definition>
        <argsstring>(snowflake channel_id, snowflake message_id)</argsstring>
        <name>message_pin_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <briefdescription>
<para>Pin a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0530fdfa85085ad367a6666386968ac4" kindref="member">dpp::cluster::message_pin</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#pin-message">https://discord.com/developers/docs/resources/channel#pin-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to pin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message id to pin message on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1827" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1827" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a795ac11245e689599fb24f9e5a6a060d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a44d4dd39b5d7c24c5fe97a76a73cf708" kindref="member">message_map</ref></type>
        <definition>message_map messages_get_sync</definition>
        <argsstring>(snowflake channel_id, snowflake around, snowflake before, snowflake after, uint64_t limit)</argsstring>
        <name>messages_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>around</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get multiple messages. </para>
        </briefdescription>
        <detaileddescription>
<para>This function will attempt to fetch as many messages as possible using multiple API calls if needed.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad471be0405745e32f130a2bfcd371c73" kindref="member">dpp::cluster::messages_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-channel-messages">https://discord.com/developers/docs/resources/channel#get-channel-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to retrieve messages for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>around</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages should be retrieved around this ID if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages after this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of messages maximum should be returned, up to a maximum of 100. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1847" column="13" declfile="include/dpp/cluster_sync_calls.h" declline="1847" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab678ce2a5961a13562e37ff9d1ddc174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation message_unpin_sync</definition>
        <argsstring>(snowflake channel_id, snowflake message_id)</argsstring>
        <name>message_unpin_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <briefdescription>
<para>Unpin a message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aaf055f95bc7ce80ff06cff9956bddca5" kindref="member">dpp::cluster::message_unpin</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#unpin-message">https://discord.com/developers/docs/resources/channel#unpin-message</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to unpin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message id to unpin message on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1862" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1862" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6cfc3aa580dd523b6e357eebfd757159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a44d4dd39b5d7c24c5fe97a76a73cf708" kindref="member">message_map</ref></type>
        <definition>message_map channel_pins_get_sync</definition>
        <argsstring>(snowflake channel_id)</argsstring>
        <name>channel_pins_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get a channel&apos;s pins. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a553bfda3b4f1671e75c5713275b781bd" kindref="member">dpp::cluster::channel_pins_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-pinned-messages">https://discord.com/developers/docs/resources/channel#get-pinned-messages</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to get pins for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1875" column="13" declfile="include/dpp/cluster_sync_calls.h" declline="1875" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8fa5c60e4a435244d30e2fea4bbc3dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref></type>
        <definition>role role_create_sync</definition>
        <argsstring>(const class role &amp;r)</argsstring>
        <name>role_create_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Create a role on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new role for the guild. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Returns the new role object on success. Fires a <computeroutput>Guild Role Create</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a849017410297379997601daac5e99ce1" kindref="member">dpp::cluster::role_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#create-guild-role">https://discord.com/developers/docs/resources/guild#create-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to create (guild ID is encapsulated in the role object) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1893" column="6" declfile="include/dpp/cluster_sync_calls.h" declline="1893" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab7fe97b155a1139d5cd93a473e03c3e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation role_delete_sync</definition>
        <argsstring>(snowflake guild_id, snowflake role_id)</argsstring>
        <name>role_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <briefdescription>
<para>Delete a role. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires a <computeroutput>Guild Role Delete</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a6d4cdab9c22eefdeba0d28105c006b2b" kindref="member">dpp::cluster::role_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#delete-guild-role">https://discord.com/developers/docs/resources/guild#delete-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete the role on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1911" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="1911" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a95decd52461e3be9c15d94d6ee5defbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref></type>
        <definition>role role_edit_sync</definition>
        <argsstring>(const class role &amp;r)</argsstring>
        <name>role_edit_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Edit a role on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para>Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Returns the updated role on success. Fires a <computeroutput>Guild Role Update</computeroutput> Gateway event.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ab6bc6ef9b6f1ef9aa5b9c1391ccedbf5" kindref="member">dpp::cluster::role_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-role">https://discord.com/developers/docs/resources/guild#modify-guild-role</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1928" column="6" declfile="include/dpp/cluster_sync_calls.h" declline="1928" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab4f1d985f90ff65362e687978abef6cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1adb1c0770936ed4ac64158cf9523e638b" kindref="member">role_map</ref></type>
        <definition>role_map roles_edit_position_sync</definition>
        <argsstring>(snowflake guild_id, const std::vector&lt; role &gt; &amp;roles)</argsstring>
        <name>roles_edit_position_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1role" kindref="compound">role</ref> &gt; &amp;</type>
          <declname>roles</declname>
        </param>
        <briefdescription>
<para>Edit multiple role&apos;s position in a guild. Returns a list of all roles of the guild on success. </para>
        </briefdescription>
        <detaileddescription>
<para>Modify the positions of a set of role objects for the guild. Requires the <computeroutput>MANAGE_ROLES</computeroutput> permission. Fires multiple <computeroutput>Guild Role Update</computeroutput> Gateway events.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3549d2ebe52210d7b98adeb766b968b1" kindref="member">dpp::cluster::roles_edit_position</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-guild-role-positions">https://discord.com/developers/docs/resources/guild#modify-guild-role-positions</ulink> </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change the roles position on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roles</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of roles to change the positions of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1947" column="10" declfile="include/dpp/cluster_sync_calls.h" declline="1947" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4e9bb5386f8edd51c6f8c34653d74ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1adb1c0770936ed4ac64158cf9523e638b" kindref="member">role_map</ref></type>
        <definition>role_map roles_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>roles_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get a role for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a884dbb70619fcf92b06577dea8093219" kindref="member">dpp::cluster::roles_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-roles">https://discord.com/developers/docs/resources/guild#get-guild-roles</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get role for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1961" column="10" declfile="include/dpp/cluster_sync_calls.h" declline="1961" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a86b195c135689a71983f79400e106b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref></type>
        <definition>application_role_connection application_role_connection_get_sync</definition>
        <argsstring>(snowflake application_id)</argsstring>
        <name>application_role_connection_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <briefdescription>
<para>Get the application&apos;s role connection metadata records. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae66aa8feb8759ff76301aac34c97cc7e" kindref="member">dpp::cluster::application_role_connection_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/application-role-connection-metadata#get-application-role-connection-metadata-records">https://discord.com/developers/docs/resources/application-role-connection-metadata#get-application-role-connection-metadata-records</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1975" column="29" declfile="include/dpp/cluster_sync_calls.h" declline="1975" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8f45c36a65e041ccb567999ba3e48d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref></type>
        <definition>application_role_connection application_role_connection_update_sync</definition>
        <argsstring>(snowflake application_id, const std::vector&lt; application_role_connection_metadata &gt; &amp;connection_metadata)</argsstring>
        <name>application_role_connection_update_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1application__role__connection__metadata" kindref="compound">application_role_connection_metadata</ref> &gt; &amp;</type>
          <declname>connection_metadata</declname>
        </param>
        <briefdescription>
<para>Update the application&apos;s role connection metadata records. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1afa094e7895245b07195a3b4ec013af0b" kindref="member">dpp::cluster::application_role_connection_update</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/application-role-connection-metadata#update-application-role-connection-metadata-records">https://discord.com/developers/docs/resources/application-role-connection-metadata#update-application-role-connection-metadata-records</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connection_metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>The application role connection metadata to update </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>An application can have a maximum of 5 metadata records.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="1991" column="29" declfile="include/dpp/cluster_sync_calls.h" declline="1991" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8deaf03e2a8577c6083bb6fc09887c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref></type>
        <definition>application_role_connection user_application_role_connection_get_sync</definition>
        <argsstring>(snowflake application_id)</argsstring>
        <name>user_application_role_connection_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <briefdescription>
<para>Get user application role connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3f3fc4fdfc918f7383773bda717134bd" kindref="member">dpp::cluster::user_application_role_connection_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user-application-role-connection">https://discord.com/developers/docs/resources/user#get-user-application-role-connection</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2005" column="29" declfile="include/dpp/cluster_sync_calls.h" declline="2005" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2ef2ef7842ed20dee035d2179e53ab3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref></type>
        <definition>application_role_connection user_application_role_connection_update_sync</definition>
        <argsstring>(snowflake application_id, const application_role_connection &amp;connection)</argsstring>
        <name>user_application_role_connection_update_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>application_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> &amp;</type>
          <declname>connection</declname>
        </param>
        <briefdescription>
<para>Update user application role connection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac6426506b0175419913b157ad9f10f71" kindref="member">dpp::cluster::user_application_role_connection_update</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#update-user-application-role-connection">https://discord.com/developers/docs/resources/user#update-user-application-role-connection</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>application_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The application ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connection</parametername>
</parameternamelist>
<parameterdescription>
<para>The application role connection to update </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1application__role__connection" kindref="compound">application_role_connection</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2020" column="29" declfile="include/dpp/cluster_sync_calls.h" declline="2020" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aade42f057ced1493a3c7c59f39659844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a1d8eeeaca0cdc14125cbf2f4f0722781" kindref="member">scheduled_event_map</ref></type>
        <definition>scheduled_event_map guild_events_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_events_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all scheduled events for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae8554f93aed5fb84162af41c997fc1e3" kindref="member">dpp::cluster::guild_events_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild">https://discord.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get events for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>scheduled_event_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2033" column="21" declfile="include/dpp/cluster_sync_calls.h" declline="2033" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6d3a0ffeffd167c57099d98e202b6c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref></type>
        <definition>scheduled_event guild_event_create_sync</definition>
        <argsstring>(const scheduled_event &amp;event)</argsstring>
        <name>guild_event_create_sync</name>
        <param>
          <type>const <ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Create a scheduled event on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a360bf7b9dd6b27774be3706a1176f8f3" kindref="member">dpp::cluster::guild_event_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to create (guild ID must be populated) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2047" column="17" declfile="include/dpp/cluster_sync_calls.h" declline="2047" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1748760125e3f9829f2d49e8e5c3f983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_event_delete_sync</definition>
        <argsstring>(snowflake event_id, snowflake guild_id)</argsstring>
        <name>guild_event_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>event_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a scheduled event from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a513c773562fbd9997141c5b317be8087" kindref="member">dpp::cluster::guild_event_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of event to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2062" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2062" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a964ab2b864033d0992f8fa01eb6603e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref></type>
        <definition>scheduled_event guild_event_edit_sync</definition>
        <argsstring>(const scheduled_event &amp;event)</argsstring>
        <name>guild_event_edit_sync</name>
        <param>
          <type>const <ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> &amp;</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Edit/modify a scheduled event on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a338867a84983e985b77829f0d9ccb34c" kindref="member">dpp::cluster::guild_event_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to create (event ID and guild ID must be populated) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2076" column="17" declfile="include/dpp/cluster_sync_calls.h" declline="2076" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab71e5419bee86ee4afec0870e0ce8a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref></type>
        <definition>scheduled_event guild_event_get_sync</definition>
        <argsstring>(snowflake guild_id, snowflake event_id)</argsstring>
        <name>guild_event_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>event_id</declname>
        </param>
        <briefdescription>
<para>Get a scheduled event for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5b8c168682519ee125ed0a48239c08ef" kindref="member">dpp::cluster::guild_event_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event">https://discord.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get event for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Event ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1scheduled__event" kindref="compound">scheduled_event</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2091" column="17" declfile="include/dpp/cluster_sync_calls.h" declline="2091" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7620cfb5b51cf091b5c2d4ed6cc19884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref></type>
        <definition>stage_instance stage_instance_get_sync</definition>
        <argsstring>(const snowflake channel_id)</argsstring>
        <name>stage_instance_get_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get the stage instance associated with the channel id, if it exists. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a1edd6ac5d8553b4823465bebadfaa9af" kindref="member">dpp::cluster::stage_instance_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/stage-instance#get-stage-instance">https://discord.com/developers/docs/resources/stage-instance#get-stage-instance</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the associated channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2107" column="16" declfile="include/dpp/cluster_sync_calls.h" declline="2107" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3de0179783edd7785ee4a21d192571f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation stage_instance_delete_sync</definition>
        <argsstring>(const snowflake channel_id)</argsstring>
        <name>stage_instance_delete_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Delete a stage instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a2b4391d87cad53c95e869400534fbd2e" kindref="member">dpp::cluster::stage_instance_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/stage-instance#delete-stage-instance">https://discord.com/developers/docs/resources/stage-instance#delete-stage-instance</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the associated channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2124" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2124" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad11a96461c8490210e82c4eec2951cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref></type>
        <definition>sticker guild_sticker_create_sync</definition>
        <argsstring>(const sticker &amp;s)</argsstring>
        <name>guild_sticker_create_sync</name>
        <param>
          <type>const <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Create a sticker in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae09c9ae57529d89455ed7f3481d629cc" kindref="member">dpp::cluster::guild_sticker_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#create-guild-sticker">https://discord.com/developers/docs/resources/sticker#create-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Sticker to create. Must have its guild ID set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2138" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2138" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab054c959a6a0528d12380093fec98c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_sticker_delete_sync</definition>
        <argsstring>(snowflake sticker_id, snowflake guild_id)</argsstring>
        <name>guild_sticker_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>sticker_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Delete a sticker from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa93a97a167922bb0a40c6489a928d4fa" kindref="member">dpp::cluster::guild_sticker_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#delete-guild-sticker">https://discord.com/developers/docs/resources/sticker#delete-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sticker_id</parametername>
</parameternamelist>
<parameterdescription>
<para>sticker ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>guild ID to delete from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2153" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2153" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac116541a0983b35acf418bdd0086581d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref></type>
        <definition>sticker guild_sticker_get_sync</definition>
        <argsstring>(snowflake id, snowflake guild_id)</argsstring>
        <name>guild_sticker_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get a guild sticker. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac7a2d335385b4689e7489d0eaf4475fe" kindref="member">dpp::cluster::guild_sticker_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-guild-sticker">https://discord.com/developers/docs/resources/sticker#get-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of sticker to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of the guild where the sticker is </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2167" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2167" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a76b109dc386e49977b4003eb47b88073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref></type>
        <definition>sticker guild_sticker_modify_sync</definition>
        <argsstring>(const sticker &amp;s)</argsstring>
        <name>guild_sticker_modify_sync</name>
        <param>
          <type>const <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify a sticker in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a1686a4d8a5a9b01f58c4768b33145b4b" kindref="member">dpp::cluster::guild_sticker_modify</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#modify-guild-sticker">https://discord.com/developers/docs/resources/sticker#modify-guild-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Sticker to modify. Must have its guild ID and sticker ID set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2181" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2181" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7665fd32a1c71218bd6fed3e69b3ad9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a0d09f413c01571a98b8ec9a267a0e48f" kindref="member">sticker_map</ref></type>
        <definition>sticker_map guild_stickers_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_stickers_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all guild stickers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1adccd1468d3f031c5bc786fdbd087d0a2" kindref="member">dpp::cluster::guild_stickers_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-guild-stickers">https://discord.com/developers/docs/resources/sticker#get-guild-stickers</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of the guild where the sticker is </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2194" column="13" declfile="include/dpp/cluster_sync_calls.h" declline="2194" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad5636998161cc4ebdf4b6fb5040f9e7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref></type>
        <definition>sticker nitro_sticker_get_sync</definition>
        <argsstring>(snowflake id)</argsstring>
        <name>nitro_sticker_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a nitro sticker. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a115a49075ceb1817f1e81fc9388bf65e" kindref="member">dpp::cluster::nitro_sticker_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#get-sticker">https://discord.com/developers/docs/resources/sticker#get-sticker</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of sticker to get. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sticker returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2207" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2207" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a34eaca67acfb23c14ac444a83f1d47c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1adc1d24fba1d0f9fbdbe054d31efe5283" kindref="member">sticker_pack_map</ref></type>
        <definition>sticker_pack_map sticker_packs_get_sync</definition>
        <argsstring>()</argsstring>
        <name>sticker_packs_get_sync</name>
        <briefdescription>
<para>Get a list of available sticker packs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae64421a4b2402238feb0536639009c18" kindref="member">dpp::cluster::sticker_packs_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/sticker#list-nitro-sticker-packs">https://discord.com/developers/docs/resources/sticker#list-nitro-sticker-packs</ulink> </para>
</simplesect>
<simplesect kind="return"><para>sticker_pack_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2219" column="18" declfile="include/dpp/cluster_sync_calls.h" declline="2219" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1abd034a34d7428cd43d6f3891cb8f828a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref></type>
        <definition>guild guild_create_from_template_sync</definition>
        <argsstring>(const std::string &amp;code, const std::string &amp;name)</argsstring>
        <name>guild_create_from_template_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a new guild based on a template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This endpoint can be used only by bots in less than 10 guilds. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3124bdcf2432f3880f78914037f9e87e" kindref="member">dpp::cluster::guild_create_from_template</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#create-guild-from-guild-template">https://discord.com/developers/docs/resources/guild-template#create-guild-from-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to create guild from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild name to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2234" column="7" declfile="include/dpp/cluster_sync_calls.h" declline="2234" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab6efbc6878f3e599de0ea4a60ffc6e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1dtemplate" kindref="compound">dtemplate</ref></type>
        <definition>dtemplate guild_template_create_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;name, const std::string &amp;description)</argsstring>
        <name>guild_template_create_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Creates a template for the guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a38db2ce96431b742e98cabf8170a84d7" kindref="member">dpp::cluster::guild_template_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#create-guild-template">https://discord.com/developers/docs/resources/guild-template#create-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to create template from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Template name to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of template to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2250" column="11" declfile="include/dpp/cluster_sync_calls.h" declline="2250" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1acabbe3b11bfece6a47b95d375d721cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation guild_template_delete_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code)</argsstring>
        <name>guild_template_delete_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Deletes the template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8527d66d4e1b2996c495d1196c6af718" kindref="member">dpp::cluster::guild_template_delete</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#delete-guild-template">https://discord.com/developers/docs/resources/guild-template#delete-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of template to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2265" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2265" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a90f939be4b880a2ee5ff099aaa90cd72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1dtemplate" kindref="compound">dtemplate</ref></type>
        <definition>dtemplate guild_template_modify_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code, const std::string &amp;name, const std::string &amp;description)</argsstring>
        <name>guild_template_modify_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Modifies the template&apos;s metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5db4327a5ad614adc419db6ff7b7bc17" kindref="member">dpp::cluster::guild_template_modify</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#modify-guild-template">https://discord.com/developers/docs/resources/guild-template#modify-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of template to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>New name of template </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>New description of template </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2282" column="11" declfile="include/dpp/cluster_sync_calls.h" declline="2282" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1acc12378fb3059bff6906c8be0bc1f10e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a9a1e92263bfa31397d459725d26e47b6" kindref="member">dtemplate_map</ref></type>
        <definition>dtemplate_map guild_templates_get_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_templates_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild templates. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a1faa321ede15b209c789ea1155a3d356" kindref="member">dpp::cluster::guild_templates_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#get-guild-templates">https://discord.com/developers/docs/resources/guild-template#get-guild-templates</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get templates for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2296" column="15" declfile="include/dpp/cluster_sync_calls.h" declline="2296" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4a07438d33153ee88588315cd4b1b838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1dtemplate" kindref="compound">dtemplate</ref></type>
        <definition>dtemplate guild_template_sync_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code)</argsstring>
        <name>guild_template_sync_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Syncs the template to the guild&apos;s current state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af115bd1c7fe12eba1c12d90d5971d10b" kindref="member">dpp::cluster::guild_template_sync</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#sync-guild-template">https://discord.com/developers/docs/resources/guild-template#sync-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to synchronise template for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Code of template to synchronise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2311" column="11" declfile="include/dpp/cluster_sync_calls.h" declline="2311" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0c79f31f217eb4d22c2f5192d562c241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1dtemplate" kindref="compound">dtemplate</ref></type>
        <definition>dtemplate template_get_sync</definition>
        <argsstring>(const std::string &amp;code)</argsstring>
        <name>template_get_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Get a template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a52366e37144b166c6a2c773e14992b21" kindref="member">dpp::cluster::template_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild-template#get-guild-template">https://discord.com/developers/docs/resources/guild-template#get-guild-template</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>dtemplate returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2324" column="11" declfile="include/dpp/cluster_sync_calls.h" declline="2324" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa03b55f7a28ea8d4d520c9d255c87e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation current_user_join_thread_sync</definition>
        <argsstring>(snowflake thread_id)</argsstring>
        <name>current_user_join_thread_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Join a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa62bc561994b7222712583e46cb68799" kindref="member">dpp::cluster::current_user_join_thread</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#join-thread">https://discord.com/developers/docs/resources/channel#join-thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to join </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2337" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2337" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1acb305d660acf37bbccab5da34bb170b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation current_user_leave_thread_sync</definition>
        <argsstring>(snowflake thread_id)</argsstring>
        <name>current_user_leave_thread_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Leave a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a3a313be1a4fd6bde99606047761c4518" kindref="member">dpp::cluster::current_user_leave_thread</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#leave-thread">https://discord.com/developers/docs/resources/channel#leave-thread</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to leave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2350" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2350" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a475723bbcca444b9de7ddee04a202617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a161fc59985e2e2f32d24f72397002e46" kindref="member">active_threads</ref></type>
        <definition>active_threads threads_get_active_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>threads_get_active_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get all active threads in the guild, including public and private threads. Threads are ordered by their id, in descending order. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aefa49b6113343575dbc9dd2e40112847" kindref="member">dpp::cluster::threads_get_active</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#list-active-guild-threads">https://discord.com/developers/docs/resources/guild#list-active-guild-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get active threads for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>active_threads returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2363" column="16" declfile="include/dpp/cluster_sync_calls.h" declline="2363" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac14ada29643bb656707e563f4276d8f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1afb8eae726b5ea68baff8c48d7fb835af" kindref="member">thread_map</ref></type>
        <definition>thread_map threads_get_joined_private_archived_sync</definition>
        <argsstring>(snowflake channel_id, snowflake before_id, uint16_t limit)</argsstring>
        <name>threads_get_joined_private_archived_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>before_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get private archived threads in a channel which current user has joined (Sorted by ID in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0d0c3894cd560fa7871f22d7cfb8f591" kindref="member">dpp::cluster::threads_get_joined_private_archived</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-joined-private-archived-threads">https://discord.com/developers/docs/resources/channel#list-joined-private-archived-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads before this id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2378" column="12" declfile="include/dpp/cluster_sync_calls.h" declline="2378" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9a2345e6409379314b17651e3d317433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1afb8eae726b5ea68baff8c48d7fb835af" kindref="member">thread_map</ref></type>
        <definition>thread_map threads_get_private_archived_sync</definition>
        <argsstring>(snowflake channel_id, time_t before_timestamp, uint16_t limit)</argsstring>
        <name>threads_get_private_archived_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>before_timestamp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get private archived threads in a channel (Sorted by archive_timestamp in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae8336e48eaabaeb8df4d69a087982e82" kindref="member">dpp::cluster::threads_get_private_archived</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-private-archived-threads">https://discord.com/developers/docs/resources/channel#list-private-archived-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads archived before this timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2393" column="12" declfile="include/dpp/cluster_sync_calls.h" declline="2393" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8f2416efc41ff2d42e15a6436c892ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1afb8eae726b5ea68baff8c48d7fb835af" kindref="member">thread_map</ref></type>
        <definition>thread_map threads_get_public_archived_sync</definition>
        <argsstring>(snowflake channel_id, time_t before_timestamp, uint16_t limit)</argsstring>
        <name>threads_get_public_archived_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>before_timestamp</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get public archived threads in a channel (Sorted by archive_timestamp in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a2b93e8be30c7e954c27e19d8b7fa8170" kindref="member">dpp::cluster::threads_get_public_archived</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-public-archived-threads">https://discord.com/developers/docs/resources/channel#list-public-archived-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads archived before this timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2408" column="12" declfile="include/dpp/cluster_sync_calls.h" declline="2408" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a847982d8771848b3320ae01dcf00613a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1thread__member" kindref="compound">thread_member</ref></type>
        <definition>thread_member thread_member_get_sync</definition>
        <argsstring>(const snowflake thread_id, const snowflake user_id)</argsstring>
        <name>thread_member_get_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a thread member. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad39edec2f1389d1aa5bb6c09e4318b6a" kindref="member">dpp::cluster::thread_member_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#get-thread-member">https://discord.com/developers/docs/resources/channel#get-thread-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to get member for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the user to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1thread__member" kindref="compound">thread_member</ref> returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2422" column="15" declfile="include/dpp/cluster_sync_calls.h" declline="2422" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae202a0e3a374128dea543d389df3abc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a57e84724c41fed341bee0d653a06076a" kindref="member">thread_member_map</ref></type>
        <definition>thread_member_map thread_members_get_sync</definition>
        <argsstring>(snowflake thread_id)</argsstring>
        <name>thread_members_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Get members of a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a636b55f518a2e724eabf31453aa89abe" kindref="member">dpp::cluster::thread_members_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#list-thread-members">https://discord.com/developers/docs/resources/channel#list-thread-members</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to get members for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread_member_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2435" column="19" declfile="include/dpp/cluster_sync_calls.h" declline="2435" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5e026f9b934b8715d2d0fcd42026b1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1thread" kindref="compound">thread</ref></type>
        <definition>thread thread_create_in_forum_sync</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, const message &amp;msg, auto_archive_duration_t auto_archive_duration, uint16_t rate_limit_per_user, std::vector&lt; snowflake &gt; applied_tags={})</argsstring>
        <name>thread_create_in_forum_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a9ea85c1ebdea9ba69a289c812bd630f8" kindref="member">auto_archive_duration_t</ref></type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
          <declname>applied_tags</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a thread in a forum or media channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad96d8fcec4c69d82fd4f2fb85ddfa2bf" kindref="member">dpp::cluster::thread_create_in_forum</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#start-thread-in-forum-channel">https://discord.com/developers/docs/resources/channel#start-thread-in-forum-channel</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the forum thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Forum channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to start the thread with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration to automatically archive the thread after recent activity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>applied_tags</parametername>
</parameternamelist>
<parameterdescription>
<para>List of IDs of forum tags (<ref refid="structdpp_1_1forum__tag" kindref="compound">dpp::forum_tag</ref>) to apply to this thread </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2455" column="8" declfile="include/dpp/cluster_sync_calls.h" declline="2455" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9c9e0664dfa968c78d5032131fbd95d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1thread" kindref="compound">thread</ref></type>
        <definition>thread thread_create_sync</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, uint16_t auto_archive_duration, channel_type thread_type, bool invitable, uint16_t rate_limit_per_user)</argsstring>
        <name>thread_create_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a732e832861149a278f27ea7840b8e4ca" kindref="member">channel_type</ref></type>
          <declname>thread_type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invitable</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <briefdescription>
<para>Create a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0c41c2fada744b16b48d8a5538e19fc5" kindref="member">dpp::cluster::thread_create</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#start-thread-without-message">https://discord.com/developers/docs/resources/channel#start-thread-without-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration after which thread auto-archives. Can be set to - 60, 1440 (for boosted guilds can also be: 4320, 10080) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of thread - CHANNEL_PUBLIC_THREAD, CHANNEL_ANNOUNCEMENT_THREAD, CHANNEL_PRIVATE_THREAD </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invitable</parametername>
</parameternamelist>
<parameterdescription>
<para>whether non-moderators can add other non-moderators to a thread; only available when creating a private thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2475" column="8" declfile="include/dpp/cluster_sync_calls.h" declline="2475" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0c99c8acdf8c222f8447849b110c2991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1thread" kindref="compound">thread</ref></type>
        <definition>thread thread_edit_sync</definition>
        <argsstring>(const thread &amp;t)</argsstring>
        <name>thread_edit_sync</name>
        <param>
          <type>const <ref refid="classdpp_1_1thread" kindref="compound">thread</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Edit a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a2986f2f79b812b0a6d579f557d459aab" kindref="member">dpp::cluster::thread_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/threads#editing-deleting-threads">https://discord.com/developers/docs/topics/threads#editing-deleting-threads</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2490" column="8" declfile="include/dpp/cluster_sync_calls.h" declline="2490" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aaabebadaa9d9e560130383f6c137fa20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1thread" kindref="compound">thread</ref></type>
        <definition>thread thread_create_with_message_sync</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, snowflake message_id, uint16_t auto_archive_duration, uint16_t rate_limit_per_user)</argsstring>
        <name>thread_create_with_message_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>rate_limit_per_user</declname>
        </param>
        <briefdescription>
<para>Create a thread with a message (Discord: ID of a thread is same as message ID) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1adf113903aeca27e9994fb366486250d1" kindref="member">dpp::cluster::thread_create_with_message</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#start-thread-from-message">https://discord.com/developers/docs/resources/channel#start-thread-from-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>message to start thread with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration after which thread auto-archives. Can be set to - 60, 1440 (for boosted guilds can also be: 4320, 10080) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate_limit_per_user</parametername>
</parameternamelist>
<parameterdescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages, manage_thread, or manage_channel, are unaffected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2508" column="8" declfile="include/dpp/cluster_sync_calls.h" declline="2508" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4d4f3a36cc48c7ba3a7cbd80faa4bad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation thread_member_add_sync</definition>
        <argsstring>(snowflake thread_id, snowflake user_id)</argsstring>
        <name>thread_member_add_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Add a member to a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a905fa0c06477d9d9ecd4a536b54d21aa" kindref="member">dpp::cluster::thread_member_add</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#add-thread-member">https://discord.com/developers/docs/resources/channel#add-thread-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to add to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Member ID to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2522" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2522" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a076937e5ba367efe37ad424d0eb607f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation thread_member_remove_sync</definition>
        <argsstring>(snowflake thread_id, snowflake user_id)</argsstring>
        <name>thread_member_remove_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Remove a member from a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a754ae607b98b27d54f344db908836c46" kindref="member">dpp::cluster::thread_member_remove</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/channel#remove-thread-member">https://discord.com/developers/docs/resources/channel#remove-thread-member</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to remove from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Member ID to remove </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2536" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2536" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5d353fda82f221d6b50c0382b81af2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref></type>
        <definition>user current_user_edit_sync</definition>
        <argsstring>(const std::string &amp;nickname, const std::string &amp;image_blob=&quot;&quot;, const image_type type=i_png)</argsstring>
        <name>current_user_edit_sync</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>image_blob</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <briefdescription>
<para>Edit current (bot) user. </para>
        </briefdescription>
        <detaileddescription>
<para>Modifies the current member in a guild. Returns the updated <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> object on success. Fires a <computeroutput>Guild Member Update</computeroutput> Gateway event. <simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a114d7930f0a219ef974143b65134a2f8" kindref="member">dpp::cluster::current_user_edit</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#modify-current-user">https://discord.com/developers/docs/resources/user#modify-current-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>Avatar data to upload (NOTE: Very heavily rate limited!) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of image for avatar. It can be one of <computeroutput>i_gif</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>user returned object on completion </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1length__exception" kindref="compound">dpp::length_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Image data is larger than the maximum size of 256 kilobytes</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2555" column="6" declfile="include/dpp/cluster_sync_calls.h" declline="2555" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9415ab3a369fec24966bbd78a0e8dad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1application" kindref="compound">application</ref></type>
        <definition>application current_application_get_sync</definition>
        <argsstring>()</argsstring>
        <name>current_application_get_sync</name>
        <briefdescription>
<para>Get current (bot) application. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ac3dc39069aaaa492727f39b35edd957e" kindref="member">dpp::cluster::current_application_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/oauth2#get-current-bot-application-information">https://discord.com/developers/docs/topics/oauth2#get-current-bot-application-information</ulink> </para>
</simplesect>
<simplesect kind="return"><para>application returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2568" column="13" declfile="include/dpp/cluster_sync_calls.h" declline="2568" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ade2ed7a7dff856ad35728d7128da97b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref></type>
        <definition>user_identified current_user_get_sync</definition>
        <argsstring>()</argsstring>
        <name>current_user_get_sync</name>
        <briefdescription>
<para>Get current (bot) user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aad927e85ed6b99e9b05f4190f1b19cae" kindref="member">dpp::cluster::current_user_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-current-user">https://discord.com/developers/docs/resources/user#get-current-user</ulink> </para>
</simplesect>
<simplesect kind="return"><para><ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>The <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> to user with <computeroutput>dynamic_cast</computeroutput>.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2583" column="17" declfile="include/dpp/cluster_sync_calls.h" declline="2583" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af805ea7278c91a0e1d79b032f62548c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation current_user_set_voice_state_sync</definition>
        <argsstring>(snowflake guild_id, snowflake channel_id, bool suppress=false, time_t request_to_speak_timestamp=0)</argsstring>
        <name>current_user_set_voice_state_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>time_t</type>
          <declname>request_to_speak_timestamp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the bot&apos;s voice state on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Caveats</bold></para>
<para>There are currently several caveats for this endpoint:</para>
<para><itemizedlist>
<listitem><para><computeroutput>channel_id</computeroutput> must currently point to a stage channel.</para>
</listitem><listitem><para>current user must already have joined <computeroutput>channel_id</computeroutput>.</para>
</listitem><listitem><para>You must have the <computeroutput>MUTE_MEMBERS</computeroutput> permission to unsuppress yourself. You can always suppress yourself.</para>
</listitem><listitem><para>You must have the <computeroutput>REQUEST_TO_SPEAK</computeroutput> permission to request to speak. You can always clear your own request to speak.</para>
</listitem><listitem><para>You are able to set <computeroutput>request_to_speak_timestamp</computeroutput> to any present or future time.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad611ecc2a6231c4bc100e74c1f28ee75" kindref="member">dpp::cluster::current_user_set_voice_state</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-current-user-voice-state">https://discord.com/developers/docs/resources/guild#modify-current-user-voice-state</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to set voice state on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage channel to set voice state on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the user&apos;s audio should be suppressed, false if it should not </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_to_speak_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The time at which we requested to speak, or 0 to clear the request. The time set here must be the current time or in the future. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::logic_exception</parametername>
</parameternamelist>
<parameterdescription>
<para>You attempted to set a request_to_speak_timestamp in the past which is not the value of 0.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2611" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2611" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a07f42b39eeb853d35569e0404fe965a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation user_set_voice_state_sync</definition>
        <argsstring>(snowflake user_id, snowflake guild_id, snowflake channel_id, bool suppress=false)</argsstring>
        <name>user_set_voice_state_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Set a user&apos;s voice state on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>Caveats</bold></para>
<para>There are currently several caveats for this endpoint:</para>
<para><itemizedlist>
<listitem><para><computeroutput>channel_id</computeroutput> must currently point to a stage channel.</para>
</listitem><listitem><para>User must already have joined <computeroutput>channel_id</computeroutput>.</para>
</listitem><listitem><para>You must have the <computeroutput>MUTE_MEMBERS</computeroutput> permission. (Since suppression is the only thing that is available currently)</para>
</listitem><listitem><para>When unsuppressed, non-bot users will have their <computeroutput>request_to_speak_timestamp</computeroutput> set to the current time. Bot users will not.</para>
</listitem><listitem><para>When suppressed, the user will have their <computeroutput>request_to_speak_timestamp</computeroutput> removed.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a66c65f30625391586fd4cf6614b6a1df" kindref="member">dpp::cluster::user_set_voice_state</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#modify-user-voice-state">https://discord.com/developers/docs/resources/guild#modify-user-voice-state</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The user to set the voice state of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to set voice state on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage channel to set voice state on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the user&apos;s audio should be suppressed, false if it should not</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2638" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2638" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a665a81f6488e96e4b9687cb41677407d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1ad5f78f7b7bca070ac34c0267ca49013a" kindref="member">connection_map</ref></type>
        <definition>connection_map current_user_connections_get_sync</definition>
        <argsstring>()</argsstring>
        <name>current_user_connections_get_sync</name>
        <briefdescription>
<para>Get current user&apos;s connections (linked accounts, e.g. steam, xbox). This call requires the oauth2 <computeroutput>connections</computeroutput> scope and cannot be executed against a bot token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a75e1e5dd813d36fffd6b532ed1b31178" kindref="member">dpp::cluster::current_user_connections_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user-connections">https://discord.com/developers/docs/resources/user#get-user-connections</ulink> </para>
</simplesect>
<simplesect kind="return"><para>connection_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2652" column="16" declfile="include/dpp/cluster_sync_calls.h" declline="2652" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1acb1aafd9420be17385755602215212bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a0d9e1952e25391a3379ee3db2d930bf7" kindref="member">guild_map</ref></type>
        <definition>guild_map current_user_get_guilds_sync</definition>
        <argsstring>()</argsstring>
        <name>current_user_get_guilds_sync</name>
        <briefdescription>
<para>Get current (bot) user guilds. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a93c8fd5f22e0eae6bf357ad498b43f87" kindref="member">dpp::cluster::current_user_get_guilds</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-current-user-guilds">https://discord.com/developers/docs/resources/user#get-current-user-guilds</ulink> </para>
</simplesect>
<simplesect kind="return"><para>guild_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2664" column="11" declfile="include/dpp/cluster_sync_calls.h" declline="2664" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2471c9c6c18e0a1b195f089aa4ab8d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation current_user_leave_guild_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>current_user_leave_guild_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Leave a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4fd6cc6c6635e6e0a9bdddcc6cda0e97" kindref="member">dpp::cluster::current_user_leave_guild</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#leave-guild">https://discord.com/developers/docs/resources/user#leave-guild</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to leave </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2677" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2677" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0cc14588d1827a4f770a28ab618f1f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref></type>
        <definition>user_identified user_get_sync</definition>
        <argsstring>(snowflake user_id)</argsstring>
        <name>user_get_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a user by id, without using the cache. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a73483dbeb0f1946dc18b1d0a5331b0d0" kindref="member">dpp::cluster::user_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user">https://discord.com/developers/docs/resources/user#get-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>The <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> to user with <computeroutput>dynamic_cast</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>unless you want something special from <computeroutput><ref refid="classdpp_1_1user__identified" kindref="compound">dpp::user_identified</ref></computeroutput> or you&apos;ve turned off caching, you have no need to call this. Call <computeroutput><ref refid="namespacedpp_1aafb458435d5650149340555ecd43f93f" kindref="member">dpp::find_user</ref></computeroutput> instead that looks up the user in the cache rather than a REST call.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2695" column="17" declfile="include/dpp/cluster_sync_calls.h" declline="2695" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7b7e09ffc12f96e5e30d55278912a7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref></type>
        <definition>user_identified user_get_cached_sync</definition>
        <argsstring>(snowflake user_id)</argsstring>
        <name>user_get_cached_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get a user by id, checking in the cache first. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a00caec14273460343d60830dcb6bea9f" kindref="member">dpp::cluster::user_get_cached</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/user#get-user">https://discord.com/developers/docs/resources/user#get-user</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to retrieve </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>The <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> object is a subclass of <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> which contains further details if you have the oauth2 identify or email scopes. If you do not have these scopes, these fields are empty. You can safely convert a <ref refid="classdpp_1_1user__identified" kindref="compound">user_identified</ref> to user with <computeroutput>dynamic_cast</computeroutput>. </para>
</simplesect>
<simplesect kind="note"><para>If the user is found in the cache, special values set in <computeroutput><ref refid="classdpp_1_1user__identified" kindref="compound">dpp::user_identified</ref></computeroutput> will be undefined. This call should be used where you want to for example resolve a user who may no longer be in the bot&apos;s guilds, for something like a ban log message.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2713" column="17" declfile="include/dpp/cluster_sync_calls.h" declline="2713" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a60e18320d10d3a2d589d89f2841da9bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1ae90871830444cab0316109a1824fc0b8" kindref="member">voiceregion_map</ref></type>
        <definition>voiceregion_map get_voice_regions_sync</definition>
        <argsstring>()</argsstring>
        <name>get_voice_regions_sync</name>
        <briefdescription>
<para>Get all voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1af6d45a29b3976f7b623d92e70ab9a1bc" kindref="member">dpp::cluster::get_voice_regions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/voice#list-voice-regions">https://discord.com/developers/docs/resources/voice#list-voice-regions</ulink> </para>
</simplesect>
<simplesect kind="return"><para>voiceregion_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2725" column="17" declfile="include/dpp/cluster_sync_calls.h" declline="2725" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab4655897576aaaa7e9b3804b39eefb84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1ae90871830444cab0316109a1824fc0b8" kindref="member">voiceregion_map</ref></type>
        <definition>voiceregion_map guild_get_voice_regions_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>guild_get_voice_regions_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para>Voice regions per guild are somewhat deprecated in preference of per-channel voice regions. Returns a list of voice region objects for the guild. Unlike the similar /voice route, this returns VIP servers when the guild is VIP-enabled.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae5556385a69a408a268332f774ba6c3c" kindref="member">dpp::cluster::guild_get_voice_regions</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/guild#get-guild-voice-regions">https://discord.com/developers/docs/resources/guild#get-guild-voice-regions</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get voice regions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>voiceregion_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2743" column="17" declfile="include/dpp/cluster_sync_calls.h" declline="2743" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4d4735fdf32903ae005f410bf9899f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref></type>
        <definition>webhook create_webhook_sync</definition>
        <argsstring>(const class webhook &amp;w)</argsstring>
        <name>create_webhook_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Create a webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a634f650e53df2d3535131870985e0313" kindref="member">dpp::cluster::create_webhook</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#create-webhook">https://discord.com/developers/docs/resources/webhook#create-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2757" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2757" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa8f65945ec0cb6c01b8ac6e088aa88e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation delete_webhook_sync</definition>
        <argsstring>(snowflake webhook_id)</argsstring>
        <name>delete_webhook_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <briefdescription>
<para>Delete a webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1aa2f345c51a6a933a29e2e86d50d6a20e" kindref="member">dpp::cluster::delete_webhook</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook">https://discord.com/developers/docs/resources/webhook#delete-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2771" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2771" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af85d62cde3f92fb06a225a7ffe43a8d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation delete_webhook_message_sync</definition>
        <argsstring>(const class webhook &amp;wh, snowflake message_id, snowflake thread_id=0)</argsstring>
        <name>delete_webhook_message_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Delete webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a5d415cd3438b7d505415a8c183d57adb" kindref="member">dpp::cluster::delete_webhook_message</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook-message">https://discord.com/developers/docs/resources/webhook#delete-webhook-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to delete message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread the message is in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2787" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2787" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a171ed6000c31d17fee89633219cd5c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1confirmation" kindref="compound">confirmation</ref></type>
        <definition>confirmation delete_webhook_with_token_sync</definition>
        <argsstring>(snowflake webhook_id, const std::string &amp;token)</argsstring>
        <name>delete_webhook_with_token_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Delete webhook with token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a4556a4647c5fd1468fe6918a2f637984" kindref="member">dpp::cluster::delete_webhook_with_token</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token">https://discord.com/developers/docs/resources/webhook#delete-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token of webhook to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>confirmation returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2801" column="14" declfile="include/dpp/cluster_sync_calls.h" declline="2801" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a988f0b94132e9f604983f72d568aadd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref></type>
        <definition>webhook edit_webhook_sync</definition>
        <argsstring>(const class webhook &amp;wh)</argsstring>
        <name>edit_webhook_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <briefdescription>
<para>Edit webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method supports audit log reasons set by the <ref refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" kindref="member">cluster::set_audit_reason()</ref> method. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ad5039e83f20e5c321b78b319fe7608c0" kindref="member">dpp::cluster::edit_webhook</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#modify-webhook">https://discord.com/developers/docs/resources/webhook#modify-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2815" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2815" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad685e01bc28959f770522db54d7b1f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message edit_webhook_message_sync</definition>
        <argsstring>(const class webhook &amp;wh, const struct message &amp;m, snowflake thread_id=0)</argsstring>
        <name>edit_webhook_message_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Edit webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para>When the content field is edited, the mentions array in the message object will be reconstructed from scratch based on the new content. The allowed_mentions field of the edit request controls how this happens. If there is no explicit allowed_mentions in the edit request, the content will be parsed with default allowances, that is, without regard to whether or not an allowed_mentions was present in the request that originally created the message.</para>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a006039f6dfb56c6b49a9c9baec463563" kindref="member">dpp::cluster::edit_webhook_message</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#edit-webhook-message">https://discord.com/developers/docs/resources/webhook#edit-webhook-message</ulink> </para>
</simplesect>
<simplesect kind="note"><para>the attachments array must contain all attachments that should be present after edit, including retained and new attachments provided in the request body. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>New message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread the message is in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2837" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2837" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1abf835cf724797a64550f2eaf58b8cb64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref></type>
        <definition>webhook edit_webhook_with_token_sync</definition>
        <argsstring>(const class webhook &amp;wh)</argsstring>
        <name>edit_webhook_with_token_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <briefdescription>
<para>Edit webhook with token (token is encapsulated in the webhook object) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a40262f5c4ef4a56fe394e91faf0ac8e4" kindref="member">dpp::cluster::edit_webhook_with_token</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token">https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit (should include token) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2850" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2850" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a183ecf130a9c135b2c7e19ad5f9f6a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message execute_webhook_sync</definition>
        <argsstring>(const class webhook &amp;wh, const struct message &amp;m, bool wait=false, snowflake thread_id=0, const std::string &amp;thread_name=&quot;&quot;)</argsstring>
        <name>execute_webhook_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Execute webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a0417d872a41150d122901fd300a89190" kindref="member">dpp::cluster::execute_webhook</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#execute-webhook">https://discord.com/developers/docs/resources/webhook#execute-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to execute </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait</parametername>
</parameternamelist>
<parameterdescription>
<para>waits for server confirmation of message send before response, and returns the created message body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Send a message to the specified thread within a webhook&apos;s channel. The thread will automatically be unarchived </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of thread to create (requires the webhook channel to be a forum channel) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion </para>
</simplesect>
<simplesect kind="note"><para>If the webhook channel is a forum channel, you must provide either <computeroutput>thread_id</computeroutput> or <computeroutput>thread_name</computeroutput>. If <computeroutput>thread_id</computeroutput> is provided, the message will send in that thread. If <computeroutput>thread_name</computeroutput> is provided, a thread with that name will be created in the forum channel.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2869" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2869" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a44e63c98f4a1e1ab8fd8f4d0a0b1ed81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a1cb0cc074a1653521bab47f83498e9ca" kindref="member">webhook_map</ref></type>
        <definition>webhook_map get_channel_webhooks_sync</definition>
        <argsstring>(snowflake channel_id)</argsstring>
        <name>get_channel_webhooks_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Get channel webhooks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1ae58b1f27711b42e9aa8a21e34147429f" kindref="member">dpp::cluster::get_channel_webhooks</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-guild-webhooks">https://discord.com/developers/docs/resources/webhook#get-guild-webhooks</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to get webhooks for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2882" column="13" declfile="include/dpp/cluster_sync_calls.h" declline="2882" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a36d081c165e94ddb85dd183e6157199b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a1cb0cc074a1653521bab47f83498e9ca" kindref="member">webhook_map</ref></type>
        <definition>webhook_map get_guild_webhooks_sync</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>get_guild_webhooks_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Get guild webhooks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8d352afcbc0430ca11576386278da7d0" kindref="member">dpp::cluster::get_guild_webhooks</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-guild-webhooks">https://discord.com/developers/docs/resources/webhook#get-guild-webhooks</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get webhooks for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook_map returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2895" column="13" declfile="include/dpp/cluster_sync_calls.h" declline="2895" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae524a53b16e42816f94b2bee7ccdda18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref></type>
        <definition>webhook get_webhook_sync</definition>
        <argsstring>(snowflake webhook_id)</argsstring>
        <name>get_webhook_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <briefdescription>
<para>Get webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a40e140f1e2eda9632828bce461bc7338" kindref="member">dpp::cluster::get_webhook</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook">https://discord.com/developers/docs/resources/webhook#get-webhook</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2908" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2908" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a486f9206456b95f36c8229c10893e05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message get_webhook_message_sync</definition>
        <argsstring>(const class webhook &amp;wh, snowflake message_id, snowflake thread_id=0)</argsstring>
        <name>get_webhook_message_sync</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a8ff6d3aec04b3bc1ce06a3d077495994" kindref="member">dpp::cluster::get_webhook_message</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook-message">https://discord.com/developers/docs/resources/webhook#get-webhook-message</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to get the original message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The message ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread the message is in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2924" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2924" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae35b19024c40e544ba21edd4918a46c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref></type>
        <definition>webhook get_webhook_with_token_sync</definition>
        <argsstring>(snowflake webhook_id, const std::string &amp;token)</argsstring>
        <name>get_webhook_with_token_sync</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <briefdescription>
<para>Get webhook using token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classdpp_1_1cluster_1a770526895ed13e2dfb746decc3f0be67" kindref="member">dpp::cluster::get_webhook_with_token</ref> </para>
</simplesect>
<simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/resources/webhook#get-webhook-with-token">https://discord.com/developers/docs/resources/webhook#get-webhook-with-token</ulink> </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token of webhook </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook returned object on completion</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1rest__exception" kindref="compound">dpp::rest_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>upon failure to execute REST function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>This function is a blocking (synchronous) call and should only be used from within a separate thread. Avoid direct use of this function inside an event handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster_sync_calls.h" line="2938" column="9" declfile="include/dpp/cluster_sync_calls.h" declline="2938" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The cluster class represents a group of shards and a command queue for sending and receiving commands from discord via HTTP. You should usually instantiate a cluster object at the very least to make use of the library. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="17">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="6">
        <label>double</label>
      </node>
      <node id="16">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="17" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="2" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="8">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="9" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="10" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="10" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>event_router_t&lt;</label>
      </node>
      <node id="11">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="12" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="19">
        <label>condition_variable</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>time_t</label>
      </node>
      <node id="14">
        <label>uint16_t</label>
      </node>
      <node id="5">
        <label>uint32_t</label>
      </node>
      <node id="10">
        <label>uint64_t</label>
      </node>
      <node id="15">
        <label>uint8_t</label>
      </node>
      <node id="18">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/cluster.h" line="82" column="1" bodyfile="include/dpp/cluster.h" bodystart="82" bodyend="3605"/>
    <listofallmembers>
      <member refid="classdpp_1_1cluster_1ae66aa8feb8759ff76301aac34c97cc7e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>application_role_connection_get</name></member>
      <member refid="classdpp_1_1cluster_1a86b195c135689a71983f79400e106b15" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>application_role_connection_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1afa094e7895245b07195a3b4ec013af0b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>application_role_connection_update</name></member>
      <member refid="classdpp_1_1cluster_1a8f45c36a65e041ccb567999ba3e48d35" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>application_role_connection_update_sync</name></member>
      <member refid="classdpp_1_1cluster_1ac7d1f2dbbddfde9f7e7c06270c3e744f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>automod_rule_create</name></member>
      <member refid="classdpp_1_1cluster_1a468d967cca03ee11285475dcd27f8d4b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>automod_rule_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a39fb700f0bbc716f63d03aa50783759b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>automod_rule_delete</name></member>
      <member refid="classdpp_1_1cluster_1af711099a6ba904a113e2dae4184f7581" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>automod_rule_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1aafe2796940cd1429cab5471c168ef010" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>automod_rule_edit</name></member>
      <member refid="classdpp_1_1cluster_1a4bec2e8982df6c01912a4372f40e87ab" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>automod_rule_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1acb7e0e57232db6fa8365443d5868bec9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>automod_rule_get</name></member>
      <member refid="classdpp_1_1cluster_1a4b377cb13518e3b30a27e9cf55ffebd2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>automod_rule_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1af88b9b913287a87b2d69cf26ebcf6394" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>automod_rules_get</name></member>
      <member refid="classdpp_1_1cluster_1aac149559dd761ce056088787ed177d13" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>automod_rules_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a9fae28f81712be86530fe3314d166ad3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>cache_policy</name></member>
      <member refid="classdpp_1_1cluster_1a66df9163f111cec5a180d642f521660a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_create</name></member>
      <member refid="classdpp_1_1cluster_1ac5703c22c4a8e033984d6aadd730486c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a837aa702a92e98ef593381fb147d23fb" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_delete</name></member>
      <member refid="classdpp_1_1cluster_1ac335bec6c58c7161348b521aad154431" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_delete_permission</name></member>
      <member refid="classdpp_1_1cluster_1a69bb83b19b7e543be770c775eb3e177c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_delete_permission_sync</name></member>
      <member refid="classdpp_1_1cluster_1a4ba8a783fae43469dce6ecd7aaa0c4f6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a8ca7054e8447493eb1136f4972053b0f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit</name></member>
      <member refid="classdpp_1_1cluster_1a55c02ced51fff33b7b8c4832a9857e1e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a96e656be4a8ea8e87a3a4133dd3a07dc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a12ff26e2f64af361c1617d7974ed0c9e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit_permissions_sync</name></member>
      <member refid="classdpp_1_1cluster_1ac4d255775676f8683cbf8def8d0e3377" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit_permissions_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa005ff4940e700f034b01e197670837b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit_positions</name></member>
      <member refid="classdpp_1_1cluster_1a49661dd640641131e8e5258b58fb5cf7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit_positions_sync</name></member>
      <member refid="classdpp_1_1cluster_1a60453ac12acfdb8108f6f36f253ed960" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1a83fa90627b403c4489320b64d6e31c8c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_follow_news</name></member>
      <member refid="classdpp_1_1cluster_1a4fe79bb6586c6ab4102cbd54ebcf68b3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_follow_news_sync</name></member>
      <member refid="classdpp_1_1cluster_1a108f6f06b43709c8d47df5f94a3ca0a5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_get</name></member>
      <member refid="classdpp_1_1cluster_1aeded9b004af14d3d5aebd1481e812545" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a5e3f97577e5948896b38836fd293cefd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_invite_create</name></member>
      <member refid="classdpp_1_1cluster_1aa1b4e06cf773b0caf61efc79e9f5cd18" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_invite_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa03a0da5c8e6801dc56bda258265da04" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_invites_get</name></member>
      <member refid="classdpp_1_1cluster_1a9c0ee769b45fc809ea84ec20915d033f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_invites_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a553bfda3b4f1671e75c5713275b781bd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_pins_get</name></member>
      <member refid="classdpp_1_1cluster_1a6cfc3aa580dd523b6e357eebfd757159" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_pins_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1aff1ad5764f2878eec2e7cbed3a231bbe" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_typing</name></member>
      <member refid="classdpp_1_1cluster_1aac0f01d11e06168e68b0e798ef7ce61b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_typing</name></member>
      <member refid="classdpp_1_1cluster_1a80d14eeccb28776cd2995ffbac11d3c5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_typing_sync</name></member>
      <member refid="classdpp_1_1cluster_1a03addb17162e4ea346df1ece0f545813" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_typing_sync</name></member>
      <member refid="classdpp_1_1cluster_1a24e67431b79cc2c3d0f12d59afd5a1c8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channels_get</name></member>
      <member refid="classdpp_1_1cluster_1a041620de1941bc984992d390815cf927" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channels_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1af1e3f0868ece15373e81844dff719aa0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>clear_audit_reason</name></member>
      <member refid="classdpp_1_1cluster_1a50b5bea83641d9542df5c0ec7fa5b43c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>cluster</name></member>
      <member refid="classdpp_1_1cluster_1a6b0b523f89559b4ce204ca9ed9693d79" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>cluster</name></member>
      <member refid="classdpp_1_1cluster_1a2d957f52245734f6d44444af8380c952" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>cluster</name></member>
      <member refid="classdpp_1_1cluster_1a5155862c1d7267c7f4ee8781ff3e8d7f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>cluster_id</name></member>
      <member refid="classdpp_1_1cluster_1ace3b697dd0ec53534a007995fe684f91" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_application_role_connection_get</name></member>
      <member refid="classdpp_1_1cluster_1a5cacc22cd09b3ac04fa69624c4f55efc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_application_role_connection_update</name></member>
      <member refid="classdpp_1_1cluster_1a5f83a8e6f3d338d8cdd8c98259034e1b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_automod_rule_create</name></member>
      <member refid="classdpp_1_1cluster_1a4e64a07483d26c4b679a3430b8014785" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_automod_rule_delete</name></member>
      <member refid="classdpp_1_1cluster_1a968bba8ea7940c676f6e0d81d18d1a02" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_automod_rule_edit</name></member>
      <member refid="classdpp_1_1cluster_1ad4f2cbc5dd8334a248a4dfe1f2c3b30d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_automod_rule_get</name></member>
      <member refid="classdpp_1_1cluster_1a9a9d5107db333ac8d7c25fe22e1f2df0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_automod_rules_get</name></member>
      <member refid="classdpp_1_1cluster_1a7df54f6cdc7348bec9753ac36d4cbd01" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_create</name></member>
      <member refid="classdpp_1_1cluster_1a00ec3cadd3ad5dfef728afda609546c2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_delete</name></member>
      <member refid="classdpp_1_1cluster_1aee350ac6b4380feaabe333db5cfe2368" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_delete_permission</name></member>
      <member refid="classdpp_1_1cluster_1a6cdfebcfdb4430da482a5c6620eeafab" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_edit</name></member>
      <member refid="classdpp_1_1cluster_1a2d07a62d79ab2b92148f9f6baa9a6547" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_edit_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a7026a258c8fe01ccfd55b2dfc2d6c756" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_edit_permissions</name></member>
      <member refid="classdpp_1_1cluster_1ac54db21fbc4bcfca3d7aaa2bf7f404f0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_edit_positions</name></member>
      <member refid="classdpp_1_1cluster_1a6d2d574b2afde1845f902efc6d4d7d20" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_follow_news</name></member>
      <member refid="classdpp_1_1cluster_1aebd4fea6c8087065108610546d2d7ce8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_get</name></member>
      <member refid="classdpp_1_1cluster_1aa42692d4a1acee3126b4c917b73f9c1f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_invite_create</name></member>
      <member refid="classdpp_1_1cluster_1a566977c5d61d0596ce805e84a9dbe5b1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_invites_get</name></member>
      <member refid="classdpp_1_1cluster_1ad842325e9583a6b32c94865e139cedf6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_pins_get</name></member>
      <member refid="classdpp_1_1cluster_1a14d47f8eb8c59209b9c06ed67a6c5ccd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_typing</name></member>
      <member refid="classdpp_1_1cluster_1a3e51c984fc44e6347d9993e78292a7f0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channel_typing</name></member>
      <member refid="classdpp_1_1cluster_1a2845de229ea00966b0f00b674d54b6c5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_channels_get</name></member>
      <member refid="classdpp_1_1cluster_1a8519977f32198ee10ab34d9e51b7c602" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_create_dm_channel</name></member>
      <member refid="classdpp_1_1cluster_1a31e252fd495f4cd15044cfc6d4a8d67f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_create_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a508a09faff652dcf3683f5b732ce4f83" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_current_application_get</name></member>
      <member refid="classdpp_1_1cluster_1a6d32848095962bfcf68cfe9653c00257" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_current_user_connections_get</name></member>
      <member refid="classdpp_1_1cluster_1a177a60c698700b475384cd3084a190dd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_current_user_edit</name></member>
      <member refid="classdpp_1_1cluster_1a62487f93b551a69efd8ec017706097b2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_current_user_get</name></member>
      <member refid="classdpp_1_1cluster_1ab5f50a1379164c2c30f4e4ba9292a688" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_current_user_get_dms</name></member>
      <member refid="classdpp_1_1cluster_1aa97fd6e309cf09128bb5a6de9b92123f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_current_user_get_guilds</name></member>
      <member refid="classdpp_1_1cluster_1ab4e2464d8a0e2ee188fbba19e1c7bda4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_current_user_join_thread</name></member>
      <member refid="classdpp_1_1cluster_1a52c49f5a45904bfe3b7f1bae71299dbd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_current_user_leave_guild</name></member>
      <member refid="classdpp_1_1cluster_1a8328f64334d55de64b9b5356e2d766a1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_current_user_leave_thread</name></member>
      <member refid="classdpp_1_1cluster_1a3b3f06b2ec8bc3170b8fc7af47de28d4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_current_user_set_voice_state</name></member>
      <member refid="classdpp_1_1cluster_1a9cd4df063abb2a236b03c9e75b312e19" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_delete_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a8e7f8af35b10f7eb78a55eeeafc95bfe" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_delete_webhook_message</name></member>
      <member refid="classdpp_1_1cluster_1acb3631dd6ed2ed66a76eb9952deb1d7c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_delete_webhook_with_token</name></member>
      <member refid="classdpp_1_1cluster_1adfc26c3868c79c436fd8c5d03859d10e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_direct_message_create</name></member>
      <member refid="classdpp_1_1cluster_1ad58e2d7aa275757a0808ec748c879dba" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_edit_webhook</name></member>
      <member refid="classdpp_1_1cluster_1aeb21146f7896406d8d6172c6d7ad4b23" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_edit_webhook_message</name></member>
      <member refid="classdpp_1_1cluster_1a4e0ad166f697f18ebe934af146e066c9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_edit_webhook_with_token</name></member>
      <member refid="classdpp_1_1cluster_1aaaa2fda3f082539a1ce1f84830555a16" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_execute_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a0bc57cc401b552fec540971764ed0ce6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_gdm_add</name></member>
      <member refid="classdpp_1_1cluster_1af7bd07bead431c72b43cbdb18fe3188a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_gdm_remove</name></member>
      <member refid="classdpp_1_1cluster_1a1c09e2b72bcd1f6019bb8797628b8a3a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_get_channel_webhooks</name></member>
      <member refid="classdpp_1_1cluster_1a700ce06be7970ce81e2b895d9b70c340" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_get_gateway_bot</name></member>
      <member refid="classdpp_1_1cluster_1a3685d029b33131c282043ccaa1321a12" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_get_guild_webhooks</name></member>
      <member refid="classdpp_1_1cluster_1a4c78ebc439accbd999a74d4c7f73d5e3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_get_voice_regions</name></member>
      <member refid="classdpp_1_1cluster_1a29a7262bcf1c340ed34ddc70079eaaf8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_get_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a61c288df0c096c522db9b3822a3cbc0b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_get_webhook_message</name></member>
      <member refid="classdpp_1_1cluster_1aebed6516449a186f68ed8ec188166023" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_get_webhook_with_token</name></member>
      <member refid="classdpp_1_1cluster_1a336233c9d572ff34612fad878a741509" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_global_bulk_command_create</name></member>
      <member refid="classdpp_1_1cluster_1a78b5b5f78ea5025d15cef1b872fa4545" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_global_command_create</name></member>
      <member refid="classdpp_1_1cluster_1a9620a873cc12a1a6f58d9097230d9d44" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_global_command_delete</name></member>
      <member refid="classdpp_1_1cluster_1a02b342b184e976f1d2a241410494bb19" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_global_command_edit</name></member>
      <member refid="classdpp_1_1cluster_1a66cbf2830c4dcf6bd6917bb120cd52d2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_global_command_get</name></member>
      <member refid="classdpp_1_1cluster_1a7abb3438bc255c9707e5c5ade6f75885" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_global_commands_get</name></member>
      <member refid="classdpp_1_1cluster_1a4db668047415bf7a6681523d421d172d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_add_member</name></member>
      <member refid="classdpp_1_1cluster_1a8cb4793694731c788b439be31c455966" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_auditlog_get</name></member>
      <member refid="classdpp_1_1cluster_1a406e8ca352529a61ee11fd7cfcb127cb" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_ban_add</name></member>
      <member refid="classdpp_1_1cluster_1a89c29c9484a16717c92539d25c00bc8d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_ban_delete</name></member>
      <member refid="classdpp_1_1cluster_1a9daf4d7763bb3832bdfb2606388023f7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_begin_prune</name></member>
      <member refid="classdpp_1_1cluster_1ae54ed4aeb515d27b4b8d20bf7de78ef9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_bulk_command_create</name></member>
      <member refid="classdpp_1_1cluster_1a3ee777c60e4d399ed15c7eb1785a76e1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_bulk_command_edit_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a1eb6632b5f2d38cc69e1e48a6401873b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_command_create</name></member>
      <member refid="classdpp_1_1cluster_1ab64a996edd56b38bbaf912eb1524c3fd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_command_delete</name></member>
      <member refid="classdpp_1_1cluster_1a57bb591dd81bb49a8db97a2a63b45938" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_command_edit</name></member>
      <member refid="classdpp_1_1cluster_1a1064c352d1ae17883d8c8fd81b1dfa5a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_command_edit_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a65acd4ba1e5e0dfbea45040f3c899119" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_command_get</name></member>
      <member refid="classdpp_1_1cluster_1a2bfc0f5e50bc00585790f0bb42c33095" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_command_get_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a357bdcd8128e7a6993387f4edf8b47ec" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_commands_get</name></member>
      <member refid="classdpp_1_1cluster_1ae32039cc1ae9fd09428b73e991484028" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_commands_get_permissions</name></member>
      <member refid="classdpp_1_1cluster_1afc556903538e3b3dcf66cebd1abcf217" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_create</name></member>
      <member refid="classdpp_1_1cluster_1ad61625a41a1fc5dff29e976f3742ca3b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_create_from_template</name></member>
      <member refid="classdpp_1_1cluster_1a77e1f28445fb2ce3c52d940286e6c334" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_current_member_edit</name></member>
      <member refid="classdpp_1_1cluster_1a138cb826f27bb7cbd1b16bf146d75a38" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_delete</name></member>
      <member refid="classdpp_1_1cluster_1a56b6b7061df4463c399e8477149b9a63" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_delete_integration</name></member>
      <member refid="classdpp_1_1cluster_1a7e428ca24e5538ace5cb3090ccae818b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_edit</name></member>
      <member refid="classdpp_1_1cluster_1ae319d43427995972f3bdefea126b170a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_edit_member</name></member>
      <member refid="classdpp_1_1cluster_1aafdb4c8b67dbcdc965fc59196badf778" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_edit_onboarding</name></member>
      <member refid="classdpp_1_1cluster_1afcf4eb0bc71852fc965aa0e40baf79ad" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_edit_welcome_screen</name></member>
      <member refid="classdpp_1_1cluster_1a79f0146fd8d01101367d95ada0d2989b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_edit_widget</name></member>
      <member refid="classdpp_1_1cluster_1ac9bf5283f8e804dbcb6efabb9654593f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_emoji_create</name></member>
      <member refid="classdpp_1_1cluster_1aea1a32265a6c71c6779c161762e628d7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_emoji_delete</name></member>
      <member refid="classdpp_1_1cluster_1af45ab2952178ece3c5f99f35d6a0ee00" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_emoji_edit</name></member>
      <member refid="classdpp_1_1cluster_1aa6a6a7c234742add614b3bc71ccd8b2e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_emoji_get</name></member>
      <member refid="classdpp_1_1cluster_1a1875852bae2bd1bbbe4ed6f3a2b6ff94" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_emojis_get</name></member>
      <member refid="classdpp_1_1cluster_1afe21c07931f563d14ce5f44d3b4ee137" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_event_create</name></member>
      <member refid="classdpp_1_1cluster_1ad172f3adc0cf2a7d2c65a793efc40169" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_event_delete</name></member>
      <member refid="classdpp_1_1cluster_1a16befbe2f26b64f78765e47c00c3142b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_event_edit</name></member>
      <member refid="classdpp_1_1cluster_1aa47058d30b901b0969a689b227dbe067" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_event_get</name></member>
      <member refid="classdpp_1_1cluster_1af62754a3ec788f1f66e191d68d1c46ff" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_events_get</name></member>
      <member refid="classdpp_1_1cluster_1ad7484d84408c910c27fdb79a76f7b411" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_ban</name></member>
      <member refid="classdpp_1_1cluster_1a750c165decef57b3949186ebb635a7de" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_bans</name></member>
      <member refid="classdpp_1_1cluster_1ab59942062ef12766b18fa5c9525975da" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_integrations</name></member>
      <member refid="classdpp_1_1cluster_1a099af4c5e6c2a84f6f043fb93289bc06" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_invites</name></member>
      <member refid="classdpp_1_1cluster_1a7b1ff826ec10a4bee4f734d59434af08" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_member</name></member>
      <member refid="classdpp_1_1cluster_1a3a594d883a754955e5aa3dc8b77cf054" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_members</name></member>
      <member refid="classdpp_1_1cluster_1a7b67f5c628e29e46717e9e7aff26caad" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_onboarding</name></member>
      <member refid="classdpp_1_1cluster_1a89910305e620dc5e1d304e2abbf381c4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_prune_counts</name></member>
      <member refid="classdpp_1_1cluster_1a5797aad3312dff554a4a7a689c62ceef" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_vanity</name></member>
      <member refid="classdpp_1_1cluster_1aeeb491cf6cc246f9b2435d7127f87c16" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_voice_regions</name></member>
      <member refid="classdpp_1_1cluster_1ab738b3aa61bb5be18006b83d457ebd82" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_welcome_screen</name></member>
      <member refid="classdpp_1_1cluster_1ad9ff91da8be53d4eb243ee29a866ac36" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_get_widget</name></member>
      <member refid="classdpp_1_1cluster_1a634fe7ca599b28fe11fb51e3ca35faa9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_member_add_role</name></member>
      <member refid="classdpp_1_1cluster_1adbb138b90ed13cb2ee1c3fd9cbf32fd9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_member_delete</name></member>
      <member refid="classdpp_1_1cluster_1aa8611f02a1c12ae31a709774584962a3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_member_delete_role</name></member>
      <member refid="classdpp_1_1cluster_1a05afd677e76509f774113b7143957250" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_member_kick</name></member>
      <member refid="classdpp_1_1cluster_1a46045f3caf3ec9b8c430e69e8a6a17ac" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_member_move</name></member>
      <member refid="classdpp_1_1cluster_1ae68afcfec96acb91f85d761e702f6df6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_member_remove_role</name></member>
      <member refid="classdpp_1_1cluster_1a023353280af3c99e0922052519b9ab95" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_member_timeout</name></member>
      <member refid="classdpp_1_1cluster_1a1c16e8c08f2dc4678d7912df35bdead7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_modify_integration</name></member>
      <member refid="classdpp_1_1cluster_1a1129bbff55bfb004ea10763a94c7a524" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_search_members</name></member>
      <member refid="classdpp_1_1cluster_1a0b19904e0494bf086ac825696f023dfd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_set_nickname</name></member>
      <member refid="classdpp_1_1cluster_1af6138aa522979e0ba28c3cd4f4406ccf" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_sticker_create</name></member>
      <member refid="classdpp_1_1cluster_1af59fa884dbd2129bc9d44a2f4137657c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_sticker_delete</name></member>
      <member refid="classdpp_1_1cluster_1aa44ae4ff4a4fd8518b6a87f2114c9007" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_sticker_get</name></member>
      <member refid="classdpp_1_1cluster_1ac8694c18598e657f2bdb0c4a53a88298" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_sticker_modify</name></member>
      <member refid="classdpp_1_1cluster_1a6ee6b7a6c1a9d27c6d3a8bfe8cff8d9a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_stickers_get</name></member>
      <member refid="classdpp_1_1cluster_1a5686ca9c6bfce0ba888fb6e087ffc21a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_sync_integration</name></member>
      <member refid="classdpp_1_1cluster_1ac485af90315a6918702a39a916315fdd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_template_create</name></member>
      <member refid="classdpp_1_1cluster_1adf35d0956ffe08619d333ee2f2efe8a7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_template_delete</name></member>
      <member refid="classdpp_1_1cluster_1a7e81e0ae42f8c27c30b0847c66d48269" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_template_modify</name></member>
      <member refid="classdpp_1_1cluster_1a03dcbffa0d0a16b6da13928573042f26" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_template_sync</name></member>
      <member refid="classdpp_1_1cluster_1a4ebf7a5d247236a0a5a53d0a6769df95" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_guild_templates_get</name></member>
      <member refid="classdpp_1_1cluster_1afc5e0aa55bffa6b25b58f95bc90d46b3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_interaction_followup_create</name></member>
      <member refid="classdpp_1_1cluster_1af5007787195983a08991dd9c0448fa74" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_interaction_followup_delete</name></member>
      <member refid="classdpp_1_1cluster_1a51877cfa4ce3bf50c9e80c19c5a9fa9c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_interaction_followup_edit</name></member>
      <member refid="classdpp_1_1cluster_1ac5fcfd2ee6dfa534174d26a9d37442a8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_interaction_followup_edit_original</name></member>
      <member refid="classdpp_1_1cluster_1a4a625fe3d4a1cdf08a18088f2b0494e7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_interaction_followup_get</name></member>
      <member refid="classdpp_1_1cluster_1afae592de6d2b6c5b727cc54de59b7296" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_interaction_followup_get_original</name></member>
      <member refid="classdpp_1_1cluster_1a0823e4b3b4a9f4a3ddf91a08ac49e33b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_interaction_response_create</name></member>
      <member refid="classdpp_1_1cluster_1aa4aeb61237bd340c0985acc68285fd5c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_interaction_response_edit</name></member>
      <member refid="classdpp_1_1cluster_1aa7a24e632f5ecde036e90c6acdadb9b9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_interaction_response_get_original</name></member>
      <member refid="classdpp_1_1cluster_1ac8d38f7158778c6ea8fe1d73f0a6a89c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_invite_get</name></member>
      <member refid="classdpp_1_1cluster_1afce30a4142d06658831c3a3a77ad569a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_add_reaction</name></member>
      <member refid="classdpp_1_1cluster_1aa95d28ed80a7003e3d82c2b60e1023ce" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_add_reaction</name></member>
      <member refid="classdpp_1_1cluster_1ab9ad0d98f81e30ba95dd39729a2ce818" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_create</name></member>
      <member refid="classdpp_1_1cluster_1a3388597d41ade186238cf0c8e6a8a3d5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_crosspost</name></member>
      <member refid="classdpp_1_1cluster_1a6b8ae5f05c0d977316dc6984a6716331" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_delete</name></member>
      <member refid="classdpp_1_1cluster_1adbfb1941f1a3f2085d09d887d7088c7a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_delete_all_reactions</name></member>
      <member refid="classdpp_1_1cluster_1ac47a65323daa30e1b59d39e07299f5fd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_delete_all_reactions</name></member>
      <member refid="classdpp_1_1cluster_1ac32de08f127acf2a15e9154ead427f85" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_delete_bulk</name></member>
      <member refid="classdpp_1_1cluster_1ad7671216d76bee4b46cdbd4defa0df1f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_delete_own_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a0647f97f47b5dfdcc72919fbc0f29dfc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_delete_own_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a3e100ec63dcae86419e277a7fe332661" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_delete_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a90ce3c34eebc8e69b2c559018218e72b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_delete_reaction</name></member>
      <member refid="classdpp_1_1cluster_1ae2825ed106a5e50d4ffb0549767adf48" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_delete_reaction_emoji</name></member>
      <member refid="classdpp_1_1cluster_1ac02299ec8f190763445af530c8d2fca9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_delete_reaction_emoji</name></member>
      <member refid="classdpp_1_1cluster_1ac5693112552376203c41e003996def63" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_edit</name></member>
      <member refid="classdpp_1_1cluster_1a38b072f34751620ccde6630f5f2b6bcf" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_get</name></member>
      <member refid="classdpp_1_1cluster_1a1a1245482db3c66c7047f7f6d15d0b74" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_get_reactions</name></member>
      <member refid="classdpp_1_1cluster_1a4168b1026946a3d382ed89c686ace406" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_get_reactions</name></member>
      <member refid="classdpp_1_1cluster_1a8f781a40cc300d4054135147abe69c1b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_pin</name></member>
      <member refid="classdpp_1_1cluster_1a0af92a0fdbaba430fe51f5936a6f4f75" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_message_unpin</name></member>
      <member refid="classdpp_1_1cluster_1a10dca63f3bf462e40446b7b5ab650aff" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_messages_get</name></member>
      <member refid="classdpp_1_1cluster_1a6228894aee74714bbaef0c0b176b0178" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_nitro_sticker_get</name></member>
      <member refid="classdpp_1_1cluster_1a74773012e6fdf775013c324a800d73e1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_role_create</name></member>
      <member refid="classdpp_1_1cluster_1a561e03e319b741e7c93ad3716750dc51" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_role_delete</name></member>
      <member refid="classdpp_1_1cluster_1af5920a1075d203a9959cfbd968603dc8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_role_edit</name></member>
      <member refid="classdpp_1_1cluster_1a4ccce48e1a9388861b6359ef1dd77594" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_roles_edit_position</name></member>
      <member refid="classdpp_1_1cluster_1aa3bf7f040cae29cf185f84fa415ed9e9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_roles_get</name></member>
      <member refid="classdpp_1_1cluster_1ab960df57796742a4013c7a492f782ed8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_sleep</name></member>
      <member refid="classdpp_1_1cluster_1a89e989a8a4dceab8104a73d1a7a1d9a4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_stage_instance_delete</name></member>
      <member refid="classdpp_1_1cluster_1a36841035bc83febe57280a304482cd82" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_stage_instance_get</name></member>
      <member refid="classdpp_1_1cluster_1a1471308de099ad3fb4331aff4678193f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_sticker_packs_get</name></member>
      <member refid="classdpp_1_1cluster_1a315b340423ff4779631faac66a8daae9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_template_get</name></member>
      <member refid="classdpp_1_1cluster_1a151cdf7d3c7ae4e2b24de527d571b785" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_thread_create</name></member>
      <member refid="classdpp_1_1cluster_1ac0b77acf04f62842fb4966f28257dbcc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_thread_create_in_forum</name></member>
      <member refid="classdpp_1_1cluster_1a0f792b2617edeadb3268557cf514e898" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_thread_create_with_message</name></member>
      <member refid="classdpp_1_1cluster_1a133f5582ae4cf60c48beef60142dc300" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_thread_edit</name></member>
      <member refid="classdpp_1_1cluster_1a7fd804ce3515972a0f51d6ec2356505e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_thread_member_add</name></member>
      <member refid="classdpp_1_1cluster_1aa709614c092e9b67b26b901bc75ba141" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_thread_member_get</name></member>
      <member refid="classdpp_1_1cluster_1a64e020ff11bf6a4fdb07c2b35b3df5d3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_thread_member_remove</name></member>
      <member refid="classdpp_1_1cluster_1ae3f6bb8d85dda1d14ab99b1101936f58" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_thread_members_get</name></member>
      <member refid="classdpp_1_1cluster_1a7786d44081a5634f5c0edc633c7d984f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_threads_get_active</name></member>
      <member refid="classdpp_1_1cluster_1ae7e7bd3ba22b7a6aae04bc3bc053042f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_threads_get_joined_private_archived</name></member>
      <member refid="classdpp_1_1cluster_1a28a4326579fdefff6cf55666beaca8ef" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_threads_get_private_archived</name></member>
      <member refid="classdpp_1_1cluster_1a580da644a8f295093245814978eeadef" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_threads_get_public_archived</name></member>
      <member refid="classdpp_1_1cluster_1af16e1f67eb4ac92d8a2ae11aad7cd51b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_user_application_role_connection_get</name></member>
      <member refid="classdpp_1_1cluster_1a0b9bfa04e675ef90148da4110f9e6027" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_user_application_role_connection_update</name></member>
      <member refid="classdpp_1_1cluster_1a5524e88381051cded943e8f16be7ba17" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_user_get</name></member>
      <member refid="classdpp_1_1cluster_1a9c3a9a57736a4cacf44184ffbf482c87" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_user_get_cached</name></member>
      <member refid="classdpp_1_1cluster_1a246f4c285e228c759fa582f14813317c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>co_user_set_voice_state</name></member>
      <member refid="classdpp_1_1cluster_1a3334e0a3ee0cbf7e20a7a88e9b73f8df" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>compressed</name></member>
      <member refid="classdpp_1_1cluster_1aab0538838d054a0c80c07cd0556a894c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>create_dm_channel</name></member>
      <member refid="classdpp_1_1cluster_1a1b6203473027ccfb563a7da986467ca8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>create_dm_channel_sync</name></member>
      <member refid="classdpp_1_1cluster_1a634f650e53df2d3535131870985e0313" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>create_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a4d4735fdf32903ae005f410bf9899f12" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>create_webhook_sync</name></member>
      <member refid="classdpp_1_1cluster_1ac3dc39069aaaa492727f39b35edd957e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_application_get</name></member>
      <member refid="classdpp_1_1cluster_1a9415ab3a369fec24966bbd78a0e8dad5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_application_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a75e1e5dd813d36fffd6b532ed1b31178" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_connections_get</name></member>
      <member refid="classdpp_1_1cluster_1a665a81f6488e96e4b9687cb41677407d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_connections_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a114d7930f0a219ef974143b65134a2f8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_edit</name></member>
      <member refid="classdpp_1_1cluster_1a5d353fda82f221d6b50c0382b81af2f7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1aad927e85ed6b99e9b05f4190f1b19cae" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_get</name></member>
      <member refid="classdpp_1_1cluster_1a662fc0a998c62395f166da5e4a2acaf3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_get_dms</name></member>
      <member refid="classdpp_1_1cluster_1a129f52484acb39470f73e22508104910" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_get_dms_sync</name></member>
      <member refid="classdpp_1_1cluster_1a93c8fd5f22e0eae6bf357ad498b43f87" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_get_guilds</name></member>
      <member refid="classdpp_1_1cluster_1acb1aafd9420be17385755602215212bb" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_get_guilds_sync</name></member>
      <member refid="classdpp_1_1cluster_1ade2ed7a7dff856ad35728d7128da97b8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa62bc561994b7222712583e46cb68799" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_join_thread</name></member>
      <member refid="classdpp_1_1cluster_1aa03b55f7a28ea8d4d520c9d255c87e3b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_join_thread_sync</name></member>
      <member refid="classdpp_1_1cluster_1a4fd6cc6c6635e6e0a9bdddcc6cda0e97" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_leave_guild</name></member>
      <member refid="classdpp_1_1cluster_1a2471c9c6c18e0a1b195f089aa4ab8d23" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_leave_guild_sync</name></member>
      <member refid="classdpp_1_1cluster_1a3a313be1a4fd6bde99606047761c4518" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_leave_thread</name></member>
      <member refid="classdpp_1_1cluster_1acb305d660acf37bbccab5da34bb170b5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_leave_thread_sync</name></member>
      <member refid="classdpp_1_1cluster_1ad611ecc2a6231c4bc100e74c1f28ee75" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_set_voice_state</name></member>
      <member refid="classdpp_1_1cluster_1af805ea7278c91a0e1d79b032f62548c6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_set_voice_state_sync</name></member>
      <member refid="classdpp_1_1cluster_1ade2990d3e8a7f10094b806625a0bc545" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>default_gateway</name></member>
      <member refid="classdpp_1_1cluster_1aa2f345c51a6a933a29e2e86d50d6a20e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>delete_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a5d415cd3438b7d505415a8c183d57adb" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>delete_webhook_message</name></member>
      <member refid="classdpp_1_1cluster_1af85d62cde3f92fb06a225a7ffe43a8d2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>delete_webhook_message_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa8f65945ec0cb6c01b8ac6e088aa88e4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>delete_webhook_sync</name></member>
      <member refid="classdpp_1_1cluster_1a4556a4647c5fd1468fe6918a2f637984" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>delete_webhook_with_token</name></member>
      <member refid="classdpp_1_1cluster_1a171ed6000c31d17fee89633219cd5c0e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>delete_webhook_with_token_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa88bbdcc5005da82928497545e9455bc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>direct_message_create</name></member>
      <member refid="classdpp_1_1cluster_1a26bd2938ab89082fca3637b59a83d0c4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>direct_message_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1ab0d2c95628830a28f9abb09441914e40" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>discord_client</name></member>
      <member refid="classdpp_1_1cluster_1abc4e53e79731117ca95bca977baef820" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>discord_voice_client</name></member>
      <member refid="classdpp_1_1cluster_1a643e94b648db0e392f52e345c8bc3377" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>dm_channels</name></member>
      <member refid="classdpp_1_1cluster_1a66dc3cad1b49988c7656c92169c7b2bb" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>dm_list_lock</name></member>
      <member refid="classdpp_1_1cluster_1ad5039e83f20e5c321b78b319fe7608c0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>edit_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a006039f6dfb56c6b49a9c9baec463563" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>edit_webhook_message</name></member>
      <member refid="classdpp_1_1cluster_1ad685e01bc28959f770522db54d7b1f0a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>edit_webhook_message_sync</name></member>
      <member refid="classdpp_1_1cluster_1a988f0b94132e9f604983f72d568aadd6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>edit_webhook_sync</name></member>
      <member refid="classdpp_1_1cluster_1a40262f5c4ef4a56fe394e91faf0ac8e4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>edit_webhook_with_token</name></member>
      <member refid="classdpp_1_1cluster_1abf835cf724797a64550f2eaf58b8cb64" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>edit_webhook_with_token_sync</name></member>
      <member refid="classdpp_1_1cluster_1a0417d872a41150d122901fd300a89190" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>execute_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a183ecf130a9c135b2c7e19ad5f9f6a3f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>execute_webhook_sync</name></member>
      <member refid="classdpp_1_1cluster_1ab9aec491f4116fa33aeabf1e614051f0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>gdm_add</name></member>
      <member refid="classdpp_1_1cluster_1aa0e11a2d335d101bd9832a1bc1169aa5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>gdm_add_sync</name></member>
      <member refid="classdpp_1_1cluster_1a0d130c81079f3b55c440710f5ea0470e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>gdm_remove</name></member>
      <member refid="classdpp_1_1cluster_1a5c7f2b0fe5e158c6998ea60b1ee0aacf" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>gdm_remove_sync</name></member>
      <member refid="classdpp_1_1cluster_1ab7a2958625740b4a6fde6643042c5f7e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_audit_reason</name></member>
      <member refid="classdpp_1_1cluster_1ae58b1f27711b42e9aa8a21e34147429f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_channel_webhooks</name></member>
      <member refid="classdpp_1_1cluster_1a44e63c98f4a1e1ab8fd8f4d0a0b1ed81" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_channel_webhooks_sync</name></member>
      <member refid="classdpp_1_1cluster_1ae6164d5543b7594731a980da9b0b2088" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_dm_channel</name></member>
      <member refid="classdpp_1_1cluster_1a68f16d04f100a0159683cba96e8c0a6c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_gateway_bot</name></member>
      <member refid="classdpp_1_1cluster_1a2686c9d5fb863f7c254e05c306d7d153" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_gateway_bot_sync</name></member>
      <member refid="classdpp_1_1cluster_1a8d352afcbc0430ca11576386278da7d0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_guild_webhooks</name></member>
      <member refid="classdpp_1_1cluster_1a36d081c165e94ddb85dd183e6157199b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_guild_webhooks_sync</name></member>
      <member refid="classdpp_1_1cluster_1aaf4dd99670856e7efed749e53e96fa7c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_raw_rest</name></member>
      <member refid="classdpp_1_1cluster_1a77a590b138e5a832faba65cc8de449c4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_rest</name></member>
      <member refid="classdpp_1_1cluster_1a5c677c0d5c059e87cc01ce598d49487d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_shard</name></member>
      <member refid="classdpp_1_1cluster_1af4d6195862e6d25c644902631a0b34d1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_shards</name></member>
      <member refid="classdpp_1_1cluster_1af6d45a29b3976f7b623d92e70ab9a1bc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_voice_regions</name></member>
      <member refid="classdpp_1_1cluster_1a60e18320d10d3a2d589d89f2841da9bd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_voice_regions_sync</name></member>
      <member refid="classdpp_1_1cluster_1a40e140f1e2eda9632828bce461bc7338" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a8ff6d3aec04b3bc1ce06a3d077495994" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_webhook_message</name></member>
      <member refid="classdpp_1_1cluster_1a486f9206456b95f36c8229c10893e05d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_webhook_message_sync</name></member>
      <member refid="classdpp_1_1cluster_1ae524a53b16e42816f94b2bee7ccdda18" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_webhook_sync</name></member>
      <member refid="classdpp_1_1cluster_1a770526895ed13e2dfb746decc3f0be67" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_webhook_with_token</name></member>
      <member refid="classdpp_1_1cluster_1ae35b19024c40e544ba21edd4918a46c4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_webhook_with_token_sync</name></member>
      <member refid="classdpp_1_1cluster_1a6bbdec2006aa6a44a6448986a32f0dc4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_bulk_command_create</name></member>
      <member refid="classdpp_1_1cluster_1a1ac19d1cb177d67408309d0cdc35fedb" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_bulk_command_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a11bccddf1068abb215bd6e69ba30b76b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_create</name></member>
      <member refid="classdpp_1_1cluster_1aa80cee43dfab51b80eaa56c9518a5902" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a6efaf2b6ce4557b5a7b039d89f956e3e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_delete</name></member>
      <member refid="classdpp_1_1cluster_1aa1359fe28bc8be1b707c7bc29c7a53ba" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a53e89466c1d02fd7f350bca69bf03d59" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_edit</name></member>
      <member refid="classdpp_1_1cluster_1af0bd069670dc9c7a2fd87591a02d6434" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1a398a2b72a5cc084333e3fb5ce1f83727" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_get</name></member>
      <member refid="classdpp_1_1cluster_1abb035c6be650c05f6f847d2b22643d53" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a8a8cadcdde42fcfa8d29c0c4fd0bec5b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_commands_get</name></member>
      <member refid="classdpp_1_1cluster_1a26c76ebb9724cd5490b26f86bebc244c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_commands_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a19819f7f2f2f3badecc1e29a928f2690" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_add_member</name></member>
      <member refid="classdpp_1_1cluster_1a4066c8f1e67919da1580a4c128032879" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_add_member_sync</name></member>
      <member refid="classdpp_1_1cluster_1aac1d1a95eac3a6c38370083abbba9d67" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_auditlog_get</name></member>
      <member refid="classdpp_1_1cluster_1ad232b426b23439c48debd9f4327802b7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_auditlog_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a00fe9bf79228a671d618e9fb27b5684a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_ban_add</name></member>
      <member refid="classdpp_1_1cluster_1a5b5e472841d9122aa7ac8373ecd02e45" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_ban_add_sync</name></member>
      <member refid="classdpp_1_1cluster_1a77f277230e3cd4d34eac3d2d9838f6d7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_ban_delete</name></member>
      <member refid="classdpp_1_1cluster_1a381e6103f73e667bd42fc7b8f01117f3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_ban_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a68d13c11179006d5271c1a398df58bc2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_begin_prune</name></member>
      <member refid="classdpp_1_1cluster_1a9199f4f2112559032957d59937a13544" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_begin_prune_sync</name></member>
      <member refid="classdpp_1_1cluster_1a392bb1f732d92fe4b9d8eacdbf4d3ffe" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_bulk_command_create</name></member>
      <member refid="classdpp_1_1cluster_1ae323eef41c836adfaf03a3d49bfe7dfe" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_bulk_command_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a0dcccabdbf1b3fb41e29145f80aaecb6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_bulk_command_edit_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a8b9690c1f70fcc0604c62c42af6b6401" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_bulk_command_edit_permissions_sync</name></member>
      <member refid="classdpp_1_1cluster_1a6e4a1a241299bcd1b5f6bfd69ae1ead9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_create</name></member>
      <member refid="classdpp_1_1cluster_1ae23edb71f27122a372f38d62cbc7d69b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a210e7585068339c47e71b8ff3d219958" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_delete</name></member>
      <member refid="classdpp_1_1cluster_1ad4aeba78271a566f4ef2c55ca91e4f78" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1afbf6872567ddc76148f8537e5b53c192" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_edit</name></member>
      <member refid="classdpp_1_1cluster_1af7c607ba6c25317d4cf86fea933259ce" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_edit_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a2d3684312c2fa0b0157b01de22b4e515" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_edit_permissions_sync</name></member>
      <member refid="classdpp_1_1cluster_1a58bd59adea01fe5b7a5b5f8ec105278a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1ad33f299b64e188e935184a32ab8515f1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_get</name></member>
      <member refid="classdpp_1_1cluster_1a69ebf194c8bb078ce6998080b552c9ad" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_get_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a75a93adb582262f8436f8ba5ad9d05fb" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_get_permissions_sync</name></member>
      <member refid="classdpp_1_1cluster_1a9b9f4f19415e847d3c6d6d6bf436bbbc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a01623d7535dc359905990e710ae3b5e9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_commands_get</name></member>
      <member refid="classdpp_1_1cluster_1ab7e992a10e120846d39a7d7d3c048ef9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_commands_get_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a944a2780e88312e85782ef5e76cac1b5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_commands_get_permissions_sync</name></member>
      <member refid="classdpp_1_1cluster_1ae07608af71753db6d0d094ecb095c097" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_commands_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a8e7f40eadf7748bcf35f67d152c3462c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_create</name></member>
      <member refid="classdpp_1_1cluster_1a3124bdcf2432f3880f78914037f9e87e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_create_from_template</name></member>
      <member refid="classdpp_1_1cluster_1abd034a34d7428cd43d6f3891cb8f828a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_create_from_template_sync</name></member>
      <member refid="classdpp_1_1cluster_1ac20fa35c137c48987aceb48f023e3e2e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1ab55ebdf053917a35368be4d86237af33" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_current_member_edit</name></member>
      <member refid="classdpp_1_1cluster_1aed140ef08751aa3fbca1ecaa78a95c87" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_current_member_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1a9b0fccd64f8d21340fe20642d9fdb1e9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_delete</name></member>
      <member refid="classdpp_1_1cluster_1ab4ed64619f058ac4b71a90066e7aac73" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_delete_integration</name></member>
      <member refid="classdpp_1_1cluster_1a5704ecc3212ed418b36d6f4fa8b4ab02" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_delete_integration_sync</name></member>
      <member refid="classdpp_1_1cluster_1a1b63d41d834a4223bad56d528fde1b70" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a54e2174822bb1796a541f849d568664c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit</name></member>
      <member refid="classdpp_1_1cluster_1ad793626d2733715381c3c5c440f31bd0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_member</name></member>
      <member refid="classdpp_1_1cluster_1a5014eb727a1b771fb769a2e8fd42a225" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_member_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa31987df09d132a45b2d0f5b719df9e8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_onboarding</name></member>
      <member refid="classdpp_1_1cluster_1a6bc508cf375c7375cf53262982dc46bb" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_onboarding_sync</name></member>
      <member refid="classdpp_1_1cluster_1ab0a20f6a371ed8915654c50de208162b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1a077a0f54778632d4a76794f53075b341" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_welcome_screen</name></member>
      <member refid="classdpp_1_1cluster_1a15a6633362b4d0c9da740cea46df4ec3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_welcome_screen_sync</name></member>
      <member refid="classdpp_1_1cluster_1ae97d98927594cee1821c4ff318eb9561" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_widget</name></member>
      <member refid="classdpp_1_1cluster_1a649e4c0a19992e9c3f6ff297ed006911" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_widget_sync</name></member>
      <member refid="classdpp_1_1cluster_1a8bea7e9ba3d487e9a6b2fe747c98e9e1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_create</name></member>
      <member refid="classdpp_1_1cluster_1a5239aad651cb9b6d1d4692867b79367e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a55b6d9100c34ea5bbbe37d3ba5089be3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_delete</name></member>
      <member refid="classdpp_1_1cluster_1ab9232aa15c656ec0bb91350fb4b79f14" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a7461e2fa96c4bf77468226ffb25744ea" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_edit</name></member>
      <member refid="classdpp_1_1cluster_1a17b209858949bb0b4c079f44972cd85b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1ada721a222fb3a42a1a1bb6d93dfcc745" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_get</name></member>
      <member refid="classdpp_1_1cluster_1aed360fe893fb2aceacbb1160de0de77b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1ad66ab98a72eb1ba8d2686fcaa1eb49db" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emojis_get</name></member>
      <member refid="classdpp_1_1cluster_1a83a297526f214d56547bf17e3ef0280e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emojis_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a360bf7b9dd6b27774be3706a1176f8f3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_event_create</name></member>
      <member refid="classdpp_1_1cluster_1a6d3a0ffeffd167c57099d98e202b6c25" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_event_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a513c773562fbd9997141c5b317be8087" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_event_delete</name></member>
      <member refid="classdpp_1_1cluster_1a1748760125e3f9829f2d49e8e5c3f983" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_event_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a338867a84983e985b77829f0d9ccb34c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_event_edit</name></member>
      <member refid="classdpp_1_1cluster_1a964ab2b864033d0992f8fa01eb6603e8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_event_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1a5b8c168682519ee125ed0a48239c08ef" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_event_get</name></member>
      <member refid="classdpp_1_1cluster_1ab71e5419bee86ee4afec0870e0ce8a54" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_event_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a09f6a78b9b2ad6218ed1b8c7b044013a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_event_users_get</name></member>
      <member refid="classdpp_1_1cluster_1ae8554f93aed5fb84162af41c997fc1e3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_events_get</name></member>
      <member refid="classdpp_1_1cluster_1aade42f057ced1493a3c7c59f39659844" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_events_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a6a003669770549d25a951810bff0153e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get</name></member>
      <member refid="classdpp_1_1cluster_1ad871d30ed11d0799da4a831ede8a7d95" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_ban</name></member>
      <member refid="classdpp_1_1cluster_1a9810b52f5a6cdb45b3e8ba20066e4f08" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_ban_sync</name></member>
      <member refid="classdpp_1_1cluster_1ac7fe3385e506ea073076bc4fb57f06c3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_bans</name></member>
      <member refid="classdpp_1_1cluster_1a7c9b4971f52b184c3604ea9e12943479" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_bans_sync</name></member>
      <member refid="classdpp_1_1cluster_1a43cba3bd187f9b28dcaed5b4f4ed5bda" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_integrations</name></member>
      <member refid="classdpp_1_1cluster_1a9eaa26f60bb494c8b7494b611f54dbae" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_integrations_sync</name></member>
      <member refid="classdpp_1_1cluster_1a93c0e07243611419141305da123c859a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_invites</name></member>
      <member refid="classdpp_1_1cluster_1a7e224a9dbbb971e0e365db9428780881" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_invites_sync</name></member>
      <member refid="classdpp_1_1cluster_1a99e8227f11ef33cd2d9cc3abef46adfd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_member</name></member>
      <member refid="classdpp_1_1cluster_1a1f78587049cac058d4d4dcb63f8ab987" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_member_sync</name></member>
      <member refid="classdpp_1_1cluster_1a6b24baba4de9d38f7d9a7cea2f71a545" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_members</name></member>
      <member refid="classdpp_1_1cluster_1aa94fc2c644808aa8ca570fbd24ffe209" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_members_sync</name></member>
      <member refid="classdpp_1_1cluster_1a7a6352ff9824bf2a5fdd3e41b8da8155" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_onboarding</name></member>
      <member refid="classdpp_1_1cluster_1a56260b496f9653e5e46ce16f0143bc2c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_onboarding_sync</name></member>
      <member refid="classdpp_1_1cluster_1a3ecd82c6169107c9c944356f19abba9e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_preview</name></member>
      <member refid="classdpp_1_1cluster_1aad296f07bd5b9f900dcedbf88c464e09" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_prune_counts</name></member>
      <member refid="classdpp_1_1cluster_1a6fef8b393d4a36c5415a4c36338d8489" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_prune_counts_sync</name></member>
      <member refid="classdpp_1_1cluster_1ad1332e45cc89e871009e840c25145df5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_vanity</name></member>
      <member refid="classdpp_1_1cluster_1ac002c4fdeaeac6da804fcb8ec1b42811" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_vanity_sync</name></member>
      <member refid="classdpp_1_1cluster_1ae5556385a69a408a268332f774ba6c3c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_voice_regions</name></member>
      <member refid="classdpp_1_1cluster_1ab4655897576aaaa7e9b3804b39eefb84" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_voice_regions_sync</name></member>
      <member refid="classdpp_1_1cluster_1a864553916e3ddee27517b092de35fd12" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_welcome_screen</name></member>
      <member refid="classdpp_1_1cluster_1a525a3d910d58fea05286438857cfa00d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_welcome_screen_sync</name></member>
      <member refid="classdpp_1_1cluster_1a57626c7a0e06aee1c362b986e44030c2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_widget</name></member>
      <member refid="classdpp_1_1cluster_1a34bfc464bcb65b888bca02995c6daf1c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_widget_sync</name></member>
      <member refid="classdpp_1_1cluster_1aeffb7f4f32ca342886a79692ed8fb416" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_add_role</name></member>
      <member refid="classdpp_1_1cluster_1a71e5cd442880ff73b4cc4bd4bf2ac346" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_add_role_sync</name></member>
      <member refid="classdpp_1_1cluster_1a40788ea66fddce18336fb53ff8a2a6b1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_delete</name></member>
      <member refid="classdpp_1_1cluster_1a98e8223a62f31bb716c326ff59f67576" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_delete_role</name></member>
      <member refid="classdpp_1_1cluster_1aa2e1667b47f46137b0abf1a994821da8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_delete_role_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa8221744be81a0696a8124467e6145a8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a8d4b8738bf9ba45254582ce16d14e22d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_kick</name></member>
      <member refid="classdpp_1_1cluster_1a20d3638fb222bd91aa9c2ad460b30b29" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_kick_sync</name></member>
      <member refid="classdpp_1_1cluster_1ac673fb500731954ad50e90de70b2fd03" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_move</name></member>
      <member refid="classdpp_1_1cluster_1abf8cf09e2e52018299f14f71ca1da5c0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_move_sync</name></member>
      <member refid="classdpp_1_1cluster_1a4e310334b84b6711119fe20a340ddc85" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_remove_role</name></member>
      <member refid="classdpp_1_1cluster_1a0393db5997c2d6acd5e7de306e5ace09" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_remove_role_sync</name></member>
      <member refid="classdpp_1_1cluster_1a9afda69f8c99365001ec349f8dc70388" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_timeout</name></member>
      <member refid="classdpp_1_1cluster_1a22ce81e0f2204d4217ac284a9163b8a2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_timeout_sync</name></member>
      <member refid="classdpp_1_1cluster_1a0cc29438d9f4a8a42e5f5d44ce44c6db" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_modify_integration</name></member>
      <member refid="classdpp_1_1cluster_1a88210140e34d8a771b95298179542a1d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_modify_integration_sync</name></member>
      <member refid="classdpp_1_1cluster_1a52cc92ce052d063854e0372539e4d9ee" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_search_members</name></member>
      <member refid="classdpp_1_1cluster_1a33520747ebe8e62b47bbc177bc15d09d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_search_members_sync</name></member>
      <member refid="classdpp_1_1cluster_1a4a8074b289fee0f43d7eafb2bc6ae5c7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_set_nickname</name></member>
      <member refid="classdpp_1_1cluster_1a4f9206883af01ce3253b5909bf3153d5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_set_nickname_sync</name></member>
      <member refid="classdpp_1_1cluster_1ae09c9ae57529d89455ed7f3481d629cc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sticker_create</name></member>
      <member refid="classdpp_1_1cluster_1ad11a96461c8490210e82c4eec2951cae" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sticker_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa93a97a167922bb0a40c6489a928d4fa" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sticker_delete</name></member>
      <member refid="classdpp_1_1cluster_1ab054c959a6a0528d12380093fec98c4a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sticker_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1ac7a2d335385b4689e7489d0eaf4475fe" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sticker_get</name></member>
      <member refid="classdpp_1_1cluster_1ac116541a0983b35acf418bdd0086581d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sticker_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a1686a4d8a5a9b01f58c4768b33145b4b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sticker_modify</name></member>
      <member refid="classdpp_1_1cluster_1a76b109dc386e49977b4003eb47b88073" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sticker_modify_sync</name></member>
      <member refid="classdpp_1_1cluster_1adccd1468d3f031c5bc786fdbd087d0a2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_stickers_get</name></member>
      <member refid="classdpp_1_1cluster_1a7665fd32a1c71218bd6fed3e69b3ad9d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_stickers_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a4bef071b931d0ca71b45ee0d8bf3a96c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sync_integration</name></member>
      <member refid="classdpp_1_1cluster_1a59b4ba9bc83e41b336b8e93f972d4cd3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sync_integration_sync</name></member>
      <member refid="classdpp_1_1cluster_1a38db2ce96431b742e98cabf8170a84d7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_create</name></member>
      <member refid="classdpp_1_1cluster_1ab6efbc6878f3e599de0ea4a60ffc6e5f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a8527d66d4e1b2996c495d1196c6af718" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_delete</name></member>
      <member refid="classdpp_1_1cluster_1acabbe3b11bfece6a47b95d375d721cac" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a5db4327a5ad614adc419db6ff7b7bc17" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_modify</name></member>
      <member refid="classdpp_1_1cluster_1a90f939be4b880a2ee5ff099aaa90cd72" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_modify_sync</name></member>
      <member refid="classdpp_1_1cluster_1af115bd1c7fe12eba1c12d90d5971d10b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_sync</name></member>
      <member refid="classdpp_1_1cluster_1a4a07438d33153ee88588315cd4b1b838" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_sync_sync</name></member>
      <member refid="classdpp_1_1cluster_1a1faa321ede15b209c789ea1155a3d356" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_templates_get</name></member>
      <member refid="classdpp_1_1cluster_1acc12378fb3059bff6906c8be0bc1f10e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_templates_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a239af1e13449c85658fb37e6589745a0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>intents</name></member>
      <member refid="classdpp_1_1cluster_1a90096bfbf3b4469eb51f35f74604e902" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_create</name></member>
      <member refid="classdpp_1_1cluster_1a9b2db5193a9f78bde481df6534f08b7c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1ab0877de7e9587e932b4655681ca634db" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_delete</name></member>
      <member refid="classdpp_1_1cluster_1af5501b3f1ed610d5eaa30cebc0d272a0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a4038261414555dcebc8b78e96b121265" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_edit</name></member>
      <member refid="classdpp_1_1cluster_1ae26c81bfce6baf63926232c81e89db9e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_edit_original</name></member>
      <member refid="classdpp_1_1cluster_1a7b265e0f1882449d56b26ebca4aa082d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_edit_original_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa197615b5c740215ed856e1cc4b06d6c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1af92385c3dff6752ecdac1126b67c2f4a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_get</name></member>
      <member refid="classdpp_1_1cluster_1ae3edfe1883e2fe2cd1bcfeab28e5124e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_get_original</name></member>
      <member refid="classdpp_1_1cluster_1ae43de72e98352b598c79fd2fce50945a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_get_original_sync</name></member>
      <member refid="classdpp_1_1cluster_1ace22dacf579bc1ed987aee6e2e3f2fb4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_followup_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a61e03d7c6a19f6a652d3a80b1a8157ca" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_response_create</name></member>
      <member refid="classdpp_1_1cluster_1a52a10719c16f7e7a15191a58ef62f5a8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_response_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a983ac4283ea7ee5261475ec232a2c1bf" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_response_edit</name></member>
      <member refid="classdpp_1_1cluster_1a6701dcaad8e58149e44fc6555b1124d0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_response_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1a7c1ab9427b77d2a251f8ce0dda1596d3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_response_get_original</name></member>
      <member refid="classdpp_1_1cluster_1a6cd1ca58728f8b24b30c2981963b583b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_response_get_original_sync</name></member>
      <member refid="classdpp_1_1cluster_1a1279fd6e3b1bd609c4dc85b6c3fc3631" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>invite_delete</name></member>
      <member refid="classdpp_1_1cluster_1a6dbddcf4f753ced02d8ec693dcaf583c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>invite_get</name></member>
      <member refid="classdpp_1_1cluster_1a7d80b50f5803c20d1163226dcda05427" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>invite_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a32ce7fc13658a25e2faeadcd36282b0b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>last_identify</name></member>
      <member refid="classdpp_1_1cluster_1a13689440c9cc80279d415c563a6363c0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>log</name></member>
      <member refid="classdpp_1_1cluster_1ad80e4df300e69988d163d61c14e540ab" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>maxclusters</name></member>
      <member refid="classdpp_1_1cluster_1ad31317a40181f6864646c8758871b495" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>me</name></member>
      <member refid="classdpp_1_1cluster_1adbee89fb3c2967fe5df3deee7876199c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_add_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a189db8e638496e15542de95d747b1cf8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_add_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a7b6a92b9a8937b5f4e8974ad3b82940a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_add_reaction_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa451af6e4bfb6cb6864e7225c788a3ee" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_add_reaction_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa6ae3dc32ebc2dd14264962710d35af7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_create</name></member>
      <member refid="classdpp_1_1cluster_1a798ae7bfe0fe06d93a70fde240a52514" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1ab67f05b1b4b4bd3ea97a6bafc3b7151d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_crosspost</name></member>
      <member refid="classdpp_1_1cluster_1a6e94df1c101df8ef23a83037a90aa9e5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_crosspost_sync</name></member>
      <member refid="classdpp_1_1cluster_1a3aa3ef912199ea0ebac49dfe1cf5cd2f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete</name></member>
      <member refid="classdpp_1_1cluster_1a8bab4c3df83ddf8a7c81504a2107afe7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_all_reactions</name></member>
      <member refid="classdpp_1_1cluster_1a91fd6f5978046b8fae78a11ddb7137c5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_all_reactions</name></member>
      <member refid="classdpp_1_1cluster_1a66d92a3e0e148a66c0522d3c29c94776" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_all_reactions_sync</name></member>
      <member refid="classdpp_1_1cluster_1abf713b9478f3d256d3a113721e3bb218" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_all_reactions_sync</name></member>
      <member refid="classdpp_1_1cluster_1a945ff67bd26bdb38e74192389a660cb1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_bulk</name></member>
      <member refid="classdpp_1_1cluster_1a6c36ad5bd3b5ea099bd025e9ad09bda8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_bulk_sync</name></member>
      <member refid="classdpp_1_1cluster_1aee40a0e598714c898630c65119003d01" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_own_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a8883a23158a30995acd4f95a955ebd07" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_own_reaction</name></member>
      <member refid="classdpp_1_1cluster_1ad2d0a0325976bc550d0ffe69c49d6dcd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_own_reaction_sync</name></member>
      <member refid="classdpp_1_1cluster_1aebf1364bb0f89ca44471879815a3894d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_own_reaction_sync</name></member>
      <member refid="classdpp_1_1cluster_1ae30a16651849e78cee9030ceb07f9f28" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a4dba919144ae71cc32653ec19283c935" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a9879e447c31abfd6672b31e752b159ed" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_reaction_emoji</name></member>
      <member refid="classdpp_1_1cluster_1a36fc5115ae69378547f38f04ae435fc2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_reaction_emoji</name></member>
      <member refid="classdpp_1_1cluster_1aa9e800a8a24b01122f8a6443c0bd213f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_reaction_emoji_sync</name></member>
      <member refid="classdpp_1_1cluster_1ae0d344a190676f6dfd2f9e724396a1a9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_reaction_emoji_sync</name></member>
      <member refid="classdpp_1_1cluster_1a115c405b3cfd386bb376ae7e000e6b79" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_reaction_sync</name></member>
      <member refid="classdpp_1_1cluster_1a175f2bcebce29c907d7fb4018bec6b06" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_reaction_sync</name></member>
      <member refid="classdpp_1_1cluster_1a5883ba9a11a360bcd0e2b0e79f99a448" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a173ff389feb4f48ac67a8c037081b2d5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_edit</name></member>
      <member refid="classdpp_1_1cluster_1ad6d12710877b058e6f159c53f3c34c49" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1a9d3b0f7c3dae4ecb1980cabe8f10ccd7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_get</name></member>
      <member refid="classdpp_1_1cluster_1ab05fea3d6c298d5f2371704084383f8f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_get_reactions</name></member>
      <member refid="classdpp_1_1cluster_1a06083a6cacaf7c4e41884cfb2a1078ab" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_get_reactions</name></member>
      <member refid="classdpp_1_1cluster_1ad2fcdba22e610a3eb35f95fff3a257c6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_get_reactions_sync</name></member>
      <member refid="classdpp_1_1cluster_1aa066a0654588a9bec98e81e268641212" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_get_reactions_sync</name></member>
      <member refid="classdpp_1_1cluster_1adfd84a3dcf55fbbecf72fe0b412d7dcd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a0530fdfa85085ad367a6666386968ac4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_pin</name></member>
      <member refid="classdpp_1_1cluster_1ab25380f93d6a7f1c25b39b6f073639be" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_pin_sync</name></member>
      <member refid="classdpp_1_1cluster_1aaf055f95bc7ce80ff06cff9956bddca5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_unpin</name></member>
      <member refid="classdpp_1_1cluster_1ab678ce2a5961a13562e37ff9d1ddc174" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_unpin_sync</name></member>
      <member refid="classdpp_1_1cluster_1ad471be0405745e32f130a2bfcd371c73" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>messages_get</name></member>
      <member refid="classdpp_1_1cluster_1a795ac11245e689599fb24f9e5a6a060d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>messages_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1ac8f279f9245bbfe35888f213b011d3a4" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>next_timer</name></member>
      <member refid="classdpp_1_1cluster_1a115a49075ceb1817f1e81fc9388bf65e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>nitro_sticker_get</name></member>
      <member refid="classdpp_1_1cluster_1ad5636998161cc4ebdf4b6fb5040f9e7f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>nitro_sticker_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a7418aa521c49af80822039b013d8d004" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>numshards</name></member>
      <member refid="classdpp_1_1cluster_1a101e35b584bd6979581f5df890215591" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_autocomplete</name></member>
      <member refid="classdpp_1_1cluster_1a9990d03329fdf86d06d3c02dd7811abd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_automod_rule_create</name></member>
      <member refid="classdpp_1_1cluster_1a9fb807aef20371e52faee77b90f613b7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_automod_rule_delete</name></member>
      <member refid="classdpp_1_1cluster_1a7928124576bd703870f2e5ffd0ac54ca" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_automod_rule_execute</name></member>
      <member refid="classdpp_1_1cluster_1a341edb94f9eab763c6375f94a4fd22f7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_automod_rule_update</name></member>
      <member refid="classdpp_1_1cluster_1af9409347218d270da0aeb22b0a27c38d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_button_click</name></member>
      <member refid="classdpp_1_1cluster_1a486fb3aa72ebe2784c514af965681516" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_channel_create</name></member>
      <member refid="classdpp_1_1cluster_1adcf4188adae294f4cb41c615e6329e3f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_channel_delete</name></member>
      <member refid="classdpp_1_1cluster_1a730da835772cd7b6e638cd359e86209d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_channel_pins_update</name></member>
      <member refid="classdpp_1_1cluster_1a5e299f9ff6447aba04af39abcdc085b4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_channel_update</name></member>
      <member refid="classdpp_1_1cluster_1ac8f54e4a67895d916c58bd277e486a64" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_form_submit</name></member>
      <member refid="classdpp_1_1cluster_1aadcbe6998c78bb1e88c76adc8b1cf0dd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_audit_log_entry_create</name></member>
      <member refid="classdpp_1_1cluster_1adc62294deed1a73261ba43400f942380" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_ban_add</name></member>
      <member refid="classdpp_1_1cluster_1ae5f02344b6d8d4cc56ff45ecc0a7602b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_ban_remove</name></member>
      <member refid="classdpp_1_1cluster_1a60711e8b9aec2f10c6941f306ea4b041" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_create</name></member>
      <member refid="classdpp_1_1cluster_1a951fe0695fd7cb33e844ebe45f08f96a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_delete</name></member>
      <member refid="classdpp_1_1cluster_1ac488322b8dddd93bdedbd9a402f9ed48" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_emojis_update</name></member>
      <member refid="classdpp_1_1cluster_1a4b5b51f674af02f3267f9b5e2289384d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_integrations_update</name></member>
      <member refid="classdpp_1_1cluster_1a4bd01f0d6e1eb6e93a027da031aaa25f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_join_request_delete</name></member>
      <member refid="classdpp_1_1cluster_1a569b9b46ab3783060e766e3fec8ee988" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_member_add</name></member>
      <member refid="classdpp_1_1cluster_1a2c9c2b72ba158f44b440cc9b213cf2cf" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_member_remove</name></member>
      <member refid="classdpp_1_1cluster_1aec757095f2c6cde6289b54ca34aef590" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_member_update</name></member>
      <member refid="classdpp_1_1cluster_1a4b9985f3b1b3a0c2dc73a1d7e1cc4cea" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_members_chunk</name></member>
      <member refid="classdpp_1_1cluster_1a414e7ea80bc310b87de98ec0290fe01a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_role_create</name></member>
      <member refid="classdpp_1_1cluster_1a09f109e81abcecc3d2d5b4b82d025167" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_role_delete</name></member>
      <member refid="classdpp_1_1cluster_1a2bbda872563869ac5f7635ac92455139" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_role_update</name></member>
      <member refid="classdpp_1_1cluster_1a03466c9bfef2755e7b21080262c55a31" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_scheduled_event_create</name></member>
      <member refid="classdpp_1_1cluster_1a34d7f734fcd46ca75540f2415f87a120" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_scheduled_event_delete</name></member>
      <member refid="classdpp_1_1cluster_1a791e9056b3a582028acd2428ef927f54" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_scheduled_event_update</name></member>
      <member refid="classdpp_1_1cluster_1ab55ea1d5f856ada2e80b024d8fc24385" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_scheduled_event_user_add</name></member>
      <member refid="classdpp_1_1cluster_1a44af186f16be598e2c00b33c820ae408" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_scheduled_event_user_remove</name></member>
      <member refid="classdpp_1_1cluster_1a30c43c83869e2323a22ce6cce800d86b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_stickers_update</name></member>
      <member refid="classdpp_1_1cluster_1adc23584464efef5b50e2abdbe2624268" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_update</name></member>
      <member refid="classdpp_1_1cluster_1ab6c7d069cb8dfc85a8709193df28c967" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_integration_create</name></member>
      <member refid="classdpp_1_1cluster_1a01164d68b98b1d36f35dc7c4407a4a5e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_integration_delete</name></member>
      <member refid="classdpp_1_1cluster_1adfb0f58a46e4826be34a472af902df37" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_integration_update</name></member>
      <member refid="classdpp_1_1cluster_1aaaac4fce048efff1be42965c82235b3e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_interaction_create</name></member>
      <member refid="classdpp_1_1cluster_1a827a4da0154d6d94dc85da5f2e87f40c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_invite_create</name></member>
      <member refid="classdpp_1_1cluster_1a94f440b6655ecbb126b336449cc5fedf" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_invite_delete</name></member>
      <member refid="classdpp_1_1cluster_1ab840686c7cd2e15f4a66ab64f62e106b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_log</name></member>
      <member refid="classdpp_1_1cluster_1a7ac8efe14c2889c76b35df7f41f5a460" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_context_menu</name></member>
      <member refid="classdpp_1_1cluster_1a1a632b3c2c8d3ff3a47372ffa770acf5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_create</name></member>
      <member refid="classdpp_1_1cluster_1a62128522527265f6844c4adf28989936" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_delete</name></member>
      <member refid="classdpp_1_1cluster_1a9f1c5e2c3426315e5460bdb93d188ef8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_delete_bulk</name></member>
      <member refid="classdpp_1_1cluster_1a815256513aa6b26822dc943875486db7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_reaction_add</name></member>
      <member refid="classdpp_1_1cluster_1a952873511790b7f4c2fc64cc9ee47055" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_reaction_remove</name></member>
      <member refid="classdpp_1_1cluster_1ae305ae4ce622f6120692aa07d5ae9da9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_reaction_remove_all</name></member>
      <member refid="classdpp_1_1cluster_1af66effcc6ea9bbb1c1f489a98f332cb0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_reaction_remove_emoji</name></member>
      <member refid="classdpp_1_1cluster_1a9a5f587275c656d4f76b52161bba5ec9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_update</name></member>
      <member refid="classdpp_1_1cluster_1a8d818aab0b0355256b5ade9fb221cade" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_presence_update</name></member>
      <member refid="classdpp_1_1cluster_1aa006f45139c81be7705a4dc67e4da242" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_ready</name></member>
      <member refid="classdpp_1_1cluster_1a9513c83c7b8c0ea8da1ad757329f5666" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_resumed</name></member>
      <member refid="classdpp_1_1cluster_1a2b040265e217148f7dd9dbf36630e763" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_select_click</name></member>
      <member refid="classdpp_1_1cluster_1a540047f8a4795e12c5468ce91ee121b6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_slashcommand</name></member>
      <member refid="classdpp_1_1cluster_1a420f1cfb65bb234cc7f616b35420cad1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_stage_instance_create</name></member>
      <member refid="classdpp_1_1cluster_1a609fe17e552b68a35c3c61423c9f3b58" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_stage_instance_delete</name></member>
      <member refid="classdpp_1_1cluster_1a446a90c6c006fb9da1e30af7f5d81a89" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_stage_instance_update</name></member>
      <member refid="classdpp_1_1cluster_1ae3f2d6cbe1aa08646e2a336cee5fc4d8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_create</name></member>
      <member refid="classdpp_1_1cluster_1ac70d87fd2bb537704eb4b1fbfb8f4917" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_delete</name></member>
      <member refid="classdpp_1_1cluster_1a8b3ebda7442ce09c4e02f1afe3147d0f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_list_sync</name></member>
      <member refid="classdpp_1_1cluster_1a24a275e75860e6f8e5cd1eeda30d273b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_member_update</name></member>
      <member refid="classdpp_1_1cluster_1aff3be9ba4b94fecb564e9843f82a9486" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_members_update</name></member>
      <member refid="classdpp_1_1cluster_1ab0dc630ee245e508e520376ee24dfd70" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_update</name></member>
      <member refid="classdpp_1_1cluster_1a8ab9838915bb37a34b08c2300c3b99f0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_typing_start</name></member>
      <member refid="classdpp_1_1cluster_1a7798d46a55b89e79d7674430f76f1baa" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_user_context_menu</name></member>
      <member refid="classdpp_1_1cluster_1a832e978df105033f7d3ea8ca0d0573cb" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_user_update</name></member>
      <member refid="classdpp_1_1cluster_1a4b702b26b73692e0aab0743f4ed07ef9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_buffer_send</name></member>
      <member refid="classdpp_1_1cluster_1ad0a97571a6609c6c6a7fb4393972eaed" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_client_disconnect</name></member>
      <member refid="classdpp_1_1cluster_1a64e8359d2f739a06f9a522c340ac38f5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_client_speaking</name></member>
      <member refid="classdpp_1_1cluster_1a8f2f865ac3492196a8167a319261ffb6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_ready</name></member>
      <member refid="classdpp_1_1cluster_1a67227dd1f0d393d8a43c8b481c1fbbbe" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_receive</name></member>
      <member refid="classdpp_1_1cluster_1aece6405e1cde23b7dcf3a9043e477f91" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_receive_combined</name></member>
      <member refid="classdpp_1_1cluster_1a1b1388af7672f9eb4ad12de0419204fd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_server_update</name></member>
      <member refid="classdpp_1_1cluster_1a571d473f65f67265878fa4ba0e405f2f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_state_update</name></member>
      <member refid="classdpp_1_1cluster_1adaad9d9e5d575b9d68eea94f5fcf0245" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_track_marker</name></member>
      <member refid="classdpp_1_1cluster_1aec3fff428675781140071d95f06f1694" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_user_talking</name></member>
      <member refid="classdpp_1_1cluster_1a45a46efdbb7a7b952bb113f8400ea110" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_webhooks_update</name></member>
      <member refid="classdpp_1_1cluster_1adfece237b42b8a0ab4d81c000e159fd6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>operator=</name></member>
      <member refid="classdpp_1_1cluster_1a17780ca53ef05b8d66df90185eb51a04" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>operator=</name></member>
      <member refid="classdpp_1_1cluster_1aebf7330c120e96cbcefe304572c65c30" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>post_rest</name></member>
      <member refid="classdpp_1_1cluster_1a3c540c26342e8238a76b8ac252f7f262" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>post_rest_multipart</name></member>
      <member refid="classdpp_1_1cluster_1a24896cc48e0c7bcafae0db762ea725d8" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>raw_rest</name></member>
      <member refid="classdpp_1_1cluster_1a156fe68358c421111e690f553c4e4f52" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>request</name></member>
      <member refid="classdpp_1_1cluster_1a550e3f1bf003f129a04c6acc0fcaa914" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>rest</name></member>
      <member refid="classdpp_1_1cluster_1a6161f8d412b2e81a06594f727684a260" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>rest_ping</name></member>
      <member refid="classdpp_1_1cluster_1a849017410297379997601daac5e99ce1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>role_create</name></member>
      <member refid="classdpp_1_1cluster_1a8fa5c60e4a435244d30e2fea4bbc3dca" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>role_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1a6d4cdab9c22eefdeba0d28105c006b2b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>role_delete</name></member>
      <member refid="classdpp_1_1cluster_1ab7fe97b155a1139d5cd93a473e03c3e9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>role_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1ab6bc6ef9b6f1ef9aa5b9c1391ccedbf5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>role_edit</name></member>
      <member refid="classdpp_1_1cluster_1a95decd52461e3be9c15d94d6ee5defbd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>role_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1a3549d2ebe52210d7b98adeb766b968b1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>roles_edit_position</name></member>
      <member refid="classdpp_1_1cluster_1ab4f1d985f90ff65362e687978abef6cc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>roles_edit_position_sync</name></member>
      <member refid="classdpp_1_1cluster_1a884dbb70619fcf92b06577dea8093219" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>roles_get</name></member>
      <member refid="classdpp_1_1cluster_1a4e9bb5386f8edd51c6f8c34653d74ac3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>roles_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1adbcc02c388c197cf7050551ef89aeefe" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>set_audit_reason</name></member>
      <member refid="classdpp_1_1cluster_1af675c512fd018d72b6c96a042acb542f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>set_default_gateway</name></member>
      <member refid="classdpp_1_1cluster_1a3fc501cc0ebb334d09a7f4bb1ea6b3e6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>set_dm_channel</name></member>
      <member refid="classdpp_1_1cluster_1a9b67c9455ac0378712e4c0fd0ba7f2a9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>set_presence</name></member>
      <member refid="classdpp_1_1cluster_1a056e4191c03dd210c2a410b6599a0bf9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>set_websocket_protocol</name></member>
      <member refid="classdpp_1_1cluster_1a0846d3ebce4cb2c346ef4947683cf058" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>shards</name></member>
      <member refid="classdpp_1_1cluster_1a3ace7f63d2a8571b6f586e2ac1ac3d0c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>shutdown</name></member>
      <member refid="classdpp_1_1cluster_1ac62b4564e7512125f0b30377b5c7319a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>stage_instance_create</name></member>
      <member refid="classdpp_1_1cluster_1a2b4391d87cad53c95e869400534fbd2e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>stage_instance_delete</name></member>
      <member refid="classdpp_1_1cluster_1a3de0179783edd7785ee4a21d192571f4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>stage_instance_delete_sync</name></member>
      <member refid="classdpp_1_1cluster_1a720ea171f6c432a2ba0cc897fcc61475" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>stage_instance_edit</name></member>
      <member refid="classdpp_1_1cluster_1a1edd6ac5d8553b4823465bebadfaa9af" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>stage_instance_get</name></member>
      <member refid="classdpp_1_1cluster_1a7620cfb5b51cf091b5c2d4ed6cc19884" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>stage_instance_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a40e99d13e1380eccd30d13123014594f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>start</name></member>
      <member refid="classdpp_1_1cluster_1a9b12c3db92a110916052b0c1b260299d" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>start_time</name></member>
      <member refid="classdpp_1_1cluster_1a2a87a674519512fbf96b59f9b9cb8bb5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>start_timer</name></member>
      <member refid="classdpp_1_1cluster_1ae64421a4b2402238feb0536639009c18" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>sticker_packs_get</name></member>
      <member refid="classdpp_1_1cluster_1a34eaca67acfb23c14ac444a83f1d47c7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>sticker_packs_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a065dbc305d760d94f4ce0867f64777a3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>stop_timer</name></member>
      <member refid="classdpp_1_1cluster_1a52366e37144b166c6a2c773e14992b21" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>template_get</name></member>
      <member refid="classdpp_1_1cluster_1a0c79f31f217eb4d22c2f5192d562c241" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>template_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a43e11def2111a4fc38db65d4d0b104e6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>terminating</name></member>
      <member refid="classdpp_1_1cluster_1a0c41c2fada744b16b48d8a5538e19fc5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_create</name></member>
      <member refid="classdpp_1_1cluster_1ad96d8fcec4c69d82fd4f2fb85ddfa2bf" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_create_in_forum</name></member>
      <member refid="classdpp_1_1cluster_1a5e026f9b934b8715d2d0fcd42026b1ed" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_create_in_forum_sync</name></member>
      <member refid="classdpp_1_1cluster_1a9c9e0664dfa968c78d5032131fbd95d4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_create_sync</name></member>
      <member refid="classdpp_1_1cluster_1adf113903aeca27e9994fb366486250d1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_create_with_message</name></member>
      <member refid="classdpp_1_1cluster_1aaabebadaa9d9e560130383f6c137fa20" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_create_with_message_sync</name></member>
      <member refid="classdpp_1_1cluster_1a2986f2f79b812b0a6d579f557d459aab" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_edit</name></member>
      <member refid="classdpp_1_1cluster_1a0c99c8acdf8c222f8447849b110c2991" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_edit_sync</name></member>
      <member refid="classdpp_1_1cluster_1a905fa0c06477d9d9ecd4a536b54d21aa" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_member_add</name></member>
      <member refid="classdpp_1_1cluster_1a4d4f3a36cc48c7ba3a7cbd80faa4bad4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_member_add_sync</name></member>
      <member refid="classdpp_1_1cluster_1ad39edec2f1389d1aa5bb6c09e4318b6a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_member_get</name></member>
      <member refid="classdpp_1_1cluster_1a847982d8771848b3320ae01dcf00613a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_member_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a754ae607b98b27d54f344db908836c46" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_member_remove</name></member>
      <member refid="classdpp_1_1cluster_1a076937e5ba367efe37ad424d0eb607f4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_member_remove_sync</name></member>
      <member refid="classdpp_1_1cluster_1a636b55f518a2e724eabf31453aa89abe" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_members_get</name></member>
      <member refid="classdpp_1_1cluster_1ae202a0e3a374128dea543d389df3abc3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_members_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1aefa49b6113343575dbc9dd2e40112847" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>threads_get_active</name></member>
      <member refid="classdpp_1_1cluster_1a475723bbcca444b9de7ddee04a202617" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>threads_get_active_sync</name></member>
      <member refid="classdpp_1_1cluster_1a0d0c3894cd560fa7871f22d7cfb8f591" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>threads_get_joined_private_archived</name></member>
      <member refid="classdpp_1_1cluster_1ac14ada29643bb656707e563f4276d8f6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>threads_get_joined_private_archived_sync</name></member>
      <member refid="classdpp_1_1cluster_1ae8336e48eaabaeb8df4d69a087982e82" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>threads_get_private_archived</name></member>
      <member refid="classdpp_1_1cluster_1a9a2345e6409379314b17651e3d317433" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>threads_get_private_archived_sync</name></member>
      <member refid="classdpp_1_1cluster_1a2b93e8be30c7e954c27e19d8b7fa8170" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>threads_get_public_archived</name></member>
      <member refid="classdpp_1_1cluster_1a8f2416efc41ff2d42e15a6436c892ac6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>threads_get_public_archived_sync</name></member>
      <member refid="classdpp_1_1cluster_1a5c4de3765be2073c0c39cc1c16481f83" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>tick_timers</name></member>
      <member refid="classdpp_1_1cluster_1a68804071670257a06ffe64c973265753" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>timer_list</name></member>
      <member refid="classdpp_1_1cluster_1a39020c02b1a38a2abd412e651543d0b5" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>timer_reschedule</name></member>
      <member refid="classdpp_1_1cluster_1a644b186bc4b386a8313e3c5dce456c4e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>token</name></member>
      <member refid="classdpp_1_1cluster_1af12b5b33ea156bde9977796858066a6b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>uptime</name></member>
      <member refid="classdpp_1_1cluster_1a3f3fc4fdfc918f7383773bda717134bd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_application_role_connection_get</name></member>
      <member refid="classdpp_1_1cluster_1a8deaf03e2a8577c6083bb6fc09887c5b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_application_role_connection_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1ac6426506b0175419913b157ad9f10f71" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_application_role_connection_update</name></member>
      <member refid="classdpp_1_1cluster_1a2ef2ef7842ed20dee035d2179e53ab3c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_application_role_connection_update_sync</name></member>
      <member refid="classdpp_1_1cluster_1a73483dbeb0f1946dc18b1d0a5331b0d0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_get</name></member>
      <member refid="classdpp_1_1cluster_1a00caec14273460343d60830dcb6bea9f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_get_cached</name></member>
      <member refid="classdpp_1_1cluster_1a7b7e09ffc12f96e5e30d55278912a7dc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_get_cached_sync</name></member>
      <member refid="classdpp_1_1cluster_1a0cc14588d1827a4f770a28ab618f1f55" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_get_sync</name></member>
      <member refid="classdpp_1_1cluster_1a66c65f30625391586fd4cf6614b6a1df" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_set_voice_state</name></member>
      <member refid="classdpp_1_1cluster_1a07f42b39eeb853d35569e0404fe965a1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_set_voice_state_sync</name></member>
      <member refid="classdpp_1_1cluster_1ae10466db79966215a799fc2a30010551" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>ws_mode</name></member>
      <member refid="classdpp_1_1cluster_1a6e6c0859b49fdb91edb74e6b16a87521" prot="public" virt="virtual"><scope>dpp::cluster</scope><name>~cluster</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
