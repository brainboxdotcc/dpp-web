<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1emoji" kind="class" language="C++" prot="public">
    <compoundname>dpp::emoji</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; emoji &gt;</basecompoundref>
    <includes local="no">emoji.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1emoji_1aa022607f3828123364721c6420b57f2f" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::emoji::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Flags for the emoji from <ref refid="namespacedpp_1a79e9b19c1aa69ef048c79d37801b947c" kindref="member">dpp::emoji_flags</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="66" column="9" bodyfile="include/dpp/emoji.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1emoji_1aa67cddbafe111c20f8d2810b3a837417" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::emoji::image_data</definition>
        <argsstring></argsstring>
        <name>image_data</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Image data for the emoji if uploading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="70" column="13" bodyfile="include/dpp/emoji.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1emoji_1a54f464b7094256975294cfd3ed9efcc1" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::emoji::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>Emoji name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="58" column="13" bodyfile="include/dpp/emoji.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1emoji_1a9032a433eae36211c7d3730543dea0db" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::emoji::user_id</definition>
        <argsstring></argsstring>
        <name>user_id</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>User id who uploaded the emoji. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="62" column="11" bodyfile="include/dpp/emoji.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1emoji_1a38985ff0fe5e74c4d6d9579783a6c36a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::emoji::emoji</definition>
        <argsstring>()=default</argsstring>
        <name>emoji</name>
        <briefdescription>
<para>Construct a new emoji object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a644a37d023d852ebd389da650647335f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::emoji::emoji</definition>
        <argsstring>(const emoji &amp;rhs)=default</argsstring>
        <name>emoji</name>
        <param>
          <type>const <ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor, copies another emoji&apos;s data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a2fb4faa1f825d684682415e2d632c83b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::emoji::emoji</definition>
        <argsstring>(const std::string_view name, const snowflake id=0, const uint8_t flags=0)</argsstring>
        <name>emoji</name>
        <param>
          <type>const std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct a new emoji object with name, ID and flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The emoji&apos;s name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID, if it has one (unicode does not) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji flags (emoji_flags) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a4cdb99e68841e0fee741112ceaa769ac" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::emoji::emoji</definition>
        <argsstring>(emoji &amp;&amp;rhs) noexcept=default</argsstring>
        <name>emoji</name>
        <param>
          <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor, moves another emoji&apos;s data to this. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a3915efb5902bf48e25ece566ae089292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::emoji::~emoji</definition>
        <argsstring>() override=default</argsstring>
        <name>~emoji</name>
        <briefdescription>
<para>Destroy the emoji object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1aba9bd2ad04be21fc6e5b02200694f055" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string dpp::emoji::build_json</definition>
        <argsstring>(bool with_id=false) const override</argsstring>
        <name>build_json</name>
        <reimplements refid="structdpp_1_1json__interface_1a287c22f692ee3d25b6f9b320ff35baa1">build_json</reimplements>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build the json for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>include the id in the JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string json data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="142" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a01f1788797bbf2bde2b8856f50c280f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
        <definition>emoji &amp; dpp::emoji::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Read class values from json object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="134" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a180ce7e313d6ac86277798012e3b7ece" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::emoji::format</definition>
        <argsstring>() const</argsstring>
        <name>format</name>
        <briefdescription>
<para>Format to name if unicode, name:id if has id or a:name:id if animated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Formatted name for reactions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="191" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="56" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a772e74a4a2e929d7ccc4c242f932a8af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::emoji::get_mention</definition>
        <argsstring>() const</argsstring>
        <name>get_mention</name>
        <briefdescription>
<para>Get the mention/ping for the emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string mention </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="198" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1aeb06ea76e01f0ed0f83a2ccd62534fc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::emoji::get_url</definition>
        <argsstring>(uint16_t size=0, const image_type format=i_png, bool prefer_animated=true) const</argsstring>
        <name>get_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
          <defval><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>prefer_animated</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Get the custom emoji url. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the emoji in pixels. It can be any power of two between 16 and 4096, otherwise the default sized emoji is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format to use for the emoji. It can be one of <computeroutput>i_webp</computeroutput>, <computeroutput>i_jpg</computeroutput>, <computeroutput>i_png</computeroutput> or <computeroutput>i_gif</computeroutput>. When passing <computeroutput>i_gif</computeroutput>, it returns an empty string for non-animated emojis. Consider using the <computeroutput>prefer_animated</computeroutput> parameter instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefer_animated</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether you prefer gif format. If true, it&apos;ll return gif format whenever the emoji is available as animated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string emoji url or an empty string, if the id is not set </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="211" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a0ae9784ca14fe91f695d88e5734058ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::emoji::is_animated</definition>
        <argsstring>() const</argsstring>
        <name>is_animated</name>
        <briefdescription>
<para>Emoji is animated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true Is animated </para>
</simplesect>
<simplesect kind="return"><para>false Is noy animated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="166" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1aa9447aeb490efc316f85363bb2b60220" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::emoji::is_available</definition>
        <argsstring>() const</argsstring>
        <name>is_available</name>
        <briefdescription>
<para>Is available. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true Is available </para>
</simplesect>
<simplesect kind="return"><para>false Is unavailable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="174" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1ae92572e9263cf62cc3e1cc826d98f5ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::emoji::is_managed</definition>
        <argsstring>() const</argsstring>
        <name>is_managed</name>
        <briefdescription>
<para>Emoji is managed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true Is managed </para>
</simplesect>
<simplesect kind="return"><para>false Is not managed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="158" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1afb0fd2592f901c60d505bc4ac5226e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
        <definition>emoji &amp; dpp::emoji::load_image</definition>
        <argsstring>(std::string_view image_blob, const image_type type)</argsstring>
        <name>load_image</name>
        <param>
          <type>std::string_view</type>
          <declname>image_blob</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Load an image into the object as base64. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>Image binary data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of image. It can be one of <computeroutput>i_gif</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji&amp; Reference to self </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1length__exception" kindref="compound">dpp::length_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Image content exceeds discord maximum of 256 kilobytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="184" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="74" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1aad01d1822fa26f77d58aa1c7be16bcc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
        <definition>emoji &amp; dpp::emoji::operator=</definition>
        <argsstring>(const emoji &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator, copies another emoji&apos;s data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="110" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a610860eb9e44a858f3fa8443904bf9c9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
        <definition>emoji &amp; dpp::emoji::operator=</definition>
        <argsstring>(emoji &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move constructor, moves another emoji&apos;s data to this. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="117" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="65" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1emoji_1a8e664abe1d5e91ea6b34677cf2206fcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::emoji::requires_colons</definition>
        <argsstring>() const</argsstring>
        <name>requires_colons</name>
        <briefdescription>
<para>Emoji requires colons. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true Requires colons </para>
</simplesect>
<simplesect kind="return"><para>false Does not require colons </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="150" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classdpp_1_1emoji_1af7b9842f19079eadb7a0f0ecd78bc95a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string dpp::emoji::get_mention</definition>
        <argsstring>(std::string_view name, snowflake id, bool is_animated=false)</argsstring>
        <name>get_mention</name>
        <param>
          <type>std::string_view</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_animated</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a mentionable emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the emoji. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the emoji. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_animated</parametername>
</parameternamelist>
<parameterdescription>
<para>is emoji animated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The formatted mention of the emoji. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/emoji.h" line="126" column="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an emoji for a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::emoji</label>
        <link refid="classdpp_1_1emoji"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; emoji &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; emoji &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::emoji</label>
        <link refid="classdpp_1_1emoji"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>image_data</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; emoji &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; emoji &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="9">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/emoji.h" line="53" column="1" bodyfile="include/dpp/emoji.h" bodystart="53" bodyend="212"/>
    <listofallmembers>
      <member refid="classdpp_1_1emoji_1aba9bd2ad04be21fc6e5b02200694f055" prot="public" virt="virtual"><scope>dpp::emoji</scope><name>build_json</name></member>
      <member refid="classdpp_1_1emoji_1a38985ff0fe5e74c4d6d9579783a6c36a" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>emoji</name></member>
      <member refid="classdpp_1_1emoji_1a2fb4faa1f825d684682415e2d632c83b" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>emoji</name></member>
      <member refid="classdpp_1_1emoji_1a644a37d023d852ebd389da650647335f" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>emoji</name></member>
      <member refid="classdpp_1_1emoji_1a4cdb99e68841e0fee741112ceaa769ac" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>emoji</name></member>
      <member refid="classdpp_1_1emoji_1a01f1788797bbf2bde2b8856f50c280f5" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1emoji_1aa022607f3828123364721c6420b57f2f" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>flags</name></member>
      <member refid="classdpp_1_1emoji_1a180ce7e313d6ac86277798012e3b7ece" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>format</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1emoji_1af7b9842f19079eadb7a0f0ecd78bc95a" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>get_mention</name></member>
      <member refid="classdpp_1_1emoji_1a772e74a4a2e929d7ccc4c242f932a8af" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>get_mention</name></member>
      <member refid="classdpp_1_1emoji_1aeb06ea76e01f0ed0f83a2ccd62534fc3" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>get_url</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>id</name></member>
      <member refid="classdpp_1_1emoji_1aa67cddbafe111c20f8d2810b3a837417" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>image_data</name></member>
      <member refid="classdpp_1_1emoji_1a0ae9784ca14fe91f695d88e5734058ad" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>is_animated</name></member>
      <member refid="classdpp_1_1emoji_1aa9447aeb490efc316f85363bb2b60220" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>is_available</name></member>
      <member refid="classdpp_1_1emoji_1ae92572e9263cf62cc3e1cc826d98f5ad" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>is_managed</name></member>
      <member refid="classdpp_1_1emoji_1afb0fd2592f901c60d505bc4ac5226e49" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>load_image</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>managed</name></member>
      <member refid="classdpp_1_1emoji_1a54f464b7094256975294cfd3ed9efcc1" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>name</name></member>
      <member refid="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1emoji_1aad01d1822fa26f77d58aa1c7be16bcc0" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>operator=</name></member>
      <member refid="classdpp_1_1emoji_1a610860eb9e44a858f3fa8443904bf9c9" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>operator==</name></member>
      <member refid="classdpp_1_1emoji_1a8e664abe1d5e91ea6b34677cf2206fcc" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>requires_colons</name></member>
      <member refid="classdpp_1_1emoji_1a9032a433eae36211c7d3730543dea0db" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>user_id</name></member>
      <member refid="classdpp_1_1emoji_1a3915efb5902bf48e25ece566ae089292" prot="public" virt="non-virtual"><scope>dpp::emoji</scope><name>~emoji</name></member>
      <member refid="structdpp_1_1json__interface_1a8fea07be649b8bb166c28c5a7daccf53" prot="protected" virt="non-virtual"><scope>dpp::emoji</scope><name>~json_interface</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::emoji</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
