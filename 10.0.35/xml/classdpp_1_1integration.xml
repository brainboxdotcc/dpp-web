<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1integration" kind="class" language="C++" prot="public">
    <compoundname>dpp::integration</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; integration &gt;</basecompoundref>
    <includes local="no">integration.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1integration_1ae8710261ae5df4827289269059d710a5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; integration &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; integration &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="classdpp_1_1integration" kindref="compound">integration</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="148" column="13" bodyfile="include/dpp/integration.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1integration_1a35e765183c8a9dca7e4dc6e6067c9efc" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1integration__account" kindref="compound">integration_account</ref></type>
        <definition>integration_account dpp::integration::account</definition>
        <argsstring></argsstring>
        <name>account</name>
        <briefdescription>
<para>Integration account information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="208" column="21" bodyfile="include/dpp/integration.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1integration_1ab3283de104da19b3371cf86adecc4ebb" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1integration__app" kindref="compound">integration_app</ref></type>
        <definition>integration_app dpp::integration::app</definition>
        <argsstring></argsstring>
        <name>app</name>
        <briefdescription>
<para>The bot/OAuth2 application for discord integrations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="227" column="17" bodyfile="include/dpp/integration.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1integration_1ab2e8e43972c73f7fcebf0040b6f81850" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::integration::expire_grace_period</definition>
        <argsstring></argsstring>
        <name>expire_grace_period</name>
        <briefdescription>
<para>The grace period (in days) before expiring subscribers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This is not provided for discord bot integrations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="198" column="10" bodyfile="include/dpp/integration.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1integration_1a7c893562842d2b67762bb44d7879d18a" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::integration::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
<para>Integration flags from <ref refid="namespacedpp_1a5ca6af921218321ff8f2f8640f5b2dd0" kindref="member">dpp::integration_flags</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="184" column="9" bodyfile="include/dpp/integration.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1integration_1ad8d55dcc91a62699c28d81b6f9c177f0" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::integration::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Integration name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="174" column="13" bodyfile="include/dpp/integration.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1integration_1a9039b472313750dc5700680fc98f8927" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::integration::role_id</definition>
        <argsstring></argsstring>
        <name>role_id</name>
        <briefdescription>
<para>ID that this integration uses for &quot;subscribers&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This is not provided for discord bot integrations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="191" column="11" bodyfile="include/dpp/integration.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1integration_1af0c9dcf0b64b1c11aa2f21e14dd24a17" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::integration::scopes</definition>
        <argsstring></argsstring>
        <name>scopes</name>
        <briefdescription>
<para>The scopes the application has been authorized for. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="232" column="13" bodyfile="include/dpp/integration.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1integration_1a6226522574b38e03a4cb2df9ddc7dbba" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::integration::subscriber_count</definition>
        <argsstring></argsstring>
        <name>subscriber_count</name>
        <briefdescription>
<para>How many subscribers this integration has. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This is not provided for discord bot integrations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="222" column="10" bodyfile="include/dpp/integration.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1integration_1adc4d5078e65f35a398d4d43c88870812" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::integration::synced_at</definition>
        <argsstring></argsstring>
        <name>synced_at</name>
        <briefdescription>
<para>When this integration was last synced. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This is not provided for discord bot integrations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="215" column="8" bodyfile="include/dpp/integration.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1integration_1ad2ddea4d9651a07beb959ee745d43db1" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1ae1540b4171f114c35864c752ef00f94f" kindref="member">integration_type</ref></type>
        <definition>integration_type dpp::integration::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>Integration type (twitch, youtube, discord, or guild_subscription). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="179" column="18" bodyfile="include/dpp/integration.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1integration_1a83ac415b6591535fa85a37ddb2397baa" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref></type>
        <definition>user dpp::integration::user_obj</definition>
        <argsstring></argsstring>
        <name>user_obj</name>
        <briefdescription>
<para>User for this integration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="203" column="6" bodyfile="include/dpp/integration.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1integration_1a84bff796a5c93b8f4e6cbf62312a3285" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1integration" kindref="compound">integration</ref> &amp;</type>
        <definition>integration &amp; dpp::integration::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="162" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1integration_1a1a8c2849892bb9b48db2f874ad2596e3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>virtual json dpp::integration::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a json from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Add ID to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON of the object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="168" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1integration_1a20e94fa7dad14b30b905854379de1258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::integration::integration</definition>
        <argsstring>()</argsstring>
        <name>integration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1integration_1a7132ef9a2ab58a12ea681b3afe6fe552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::integration::~integration</definition>
        <argsstring>()=default</argsstring>
        <name>~integration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; integration  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1integration_1a71c1fe98428f12efef492f8469c9c68c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::integration::emoticons_enabled</definition>
        <argsstring>() const</argsstring>
        <name>emoticons_enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Are emoticons enabled for this integration? <simplesect kind="warning"><para>This is not provided for discord bot integrations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="244" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1integration_1aa8c768b223e8eb219c7ffe99f13f0a07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::integration::expiry_kicks_user</definition>
        <argsstring>() const</argsstring>
        <name>expiry_kicks_user</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Will the user be kicked if their subscription runs out to the integration? If false, the integration will simply remove the role that is specified by <computeroutput>role_id</computeroutput>. <simplesect kind="warning"><para>This is not provided for discord bot integrations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="269" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1integration" kindref="compound">integration</ref> &amp;</type>
        <definition>integration  &amp; dpp::json_interface&lt; integration  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1integration_1aa326f15ba2eea7d29f9ab20945d1b56d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::integration::is_enabled</definition>
        <argsstring>() const</argsstring>
        <name>is_enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the integration enabled? <simplesect kind="warning"><para>This is not provided for discord bot integrations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="250" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1integration_1a71170ae6931ae33969ae9352be724778" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::integration::is_revoked</definition>
        <argsstring>() const</argsstring>
        <name>is_revoked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Has this integration been revoked? <simplesect kind="warning"><para>This is not provided for discord bot integrations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="262" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1integration_1a32fff1ec90aea8ce08d481c0f0957ebb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::integration::is_syncing</definition>
        <argsstring>() const</argsstring>
        <name>is_syncing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the integration syncing? <simplesect kind="warning"><para>This is not provided for discord bot integrations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/integration.h" line="256" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; integration  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an integration on a guild, e.g. a connection to twitch. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::integration</label>
        <link refid="classdpp_1_1integration"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; integration &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; integration &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::integration</label>
        <link refid="classdpp_1_1integration"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>role_id</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>expire_grace_period</edgelabel>
          <edgelabel>subscriber_count</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>user_obj</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>account</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>synced_at</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>app</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>scopes</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::integration_account</label>
        <link refid="structdpp_1_1integration__account"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>dpp::integration_app</label>
        <link refid="structdpp_1_1integration__app"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>icon</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>bot</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="4" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>integration_type</label>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; integration &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; integration &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>vector&lt;</label>
      </node>
      <node id="17">
        <label>time_t</label>
      </node>
      <node id="15">
        <label>uint16_t</label>
      </node>
      <node id="11">
        <label>uint32_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="10">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/integration.h" line="154" column="1" bodyfile="include/dpp/integration.h" bodystart="154" bodyend="270"/>
    <listofallmembers>
      <member refid="classdpp_1_1integration_1a35e765183c8a9dca7e4dc6e6067c9efc" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>account</name></member>
      <member refid="classdpp_1_1integration_1ab3283de104da19b3371cf86adecc4ebb" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>app</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>build_json</name></member>
      <member refid="classdpp_1_1integration_1a71c1fe98428f12efef492f8469c9c68c" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>emoticons_enabled</name></member>
      <member refid="classdpp_1_1integration_1ab2e8e43972c73f7fcebf0040b6f81850" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>expire_grace_period</name></member>
      <member refid="classdpp_1_1integration_1aa8c768b223e8eb219c7ffe99f13f0a07" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>expiry_kicks_user</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1integration_1a84bff796a5c93b8f4e6cbf62312a3285" prot="protected" virt="non-virtual"><scope>dpp::integration</scope><name>fill_from_json_impl</name></member>
      <member refid="classdpp_1_1integration_1a7c893562842d2b67762bb44d7879d18a" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>flags</name></member>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>id</name></member>
      <member refid="classdpp_1_1integration_1a20e94fa7dad14b30b905854379de1258" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>integration</name></member>
      <member refid="classdpp_1_1integration_1aa326f15ba2eea7d29f9ab20945d1b56d" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>is_enabled</name></member>
      <member refid="classdpp_1_1integration_1a71170ae6931ae33969ae9352be724778" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>is_revoked</name></member>
      <member refid="classdpp_1_1integration_1a32fff1ec90aea8ce08d481c0f0957ebb" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>is_syncing</name></member>
      <member refid="classdpp_1_1integration_1ae8710261ae5df4827289269059d710a5" prot="protected" virt="non-virtual"><scope>dpp::integration</scope><name>json_interface&lt; integration &gt;</name></member>
      <member refid="classdpp_1_1managed_1a49ce0d7fdbeab770ec46be27771c2285" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1aa3ee436836ab0e2bf4f842c2c2bc3b52" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a198b514f7e6a2b26734fd2dad85f481d" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1ac7a876ad1764b89f0568a1f1bc6bf640" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>managed</name></member>
      <member refid="classdpp_1_1integration_1ad8d55dcc91a62699c28d81b6f9c177f0" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>name</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1a48b542729f1352f93f1c60950986517f" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a4a4be34febb174eaee3c0964d0bf1e21" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>operator==</name></member>
      <member refid="classdpp_1_1integration_1a9039b472313750dc5700680fc98f8927" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>role_id</name></member>
      <member refid="classdpp_1_1integration_1af0c9dcf0b64b1c11aa2f21e14dd24a17" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>scopes</name></member>
      <member refid="classdpp_1_1integration_1a6226522574b38e03a4cb2df9ddc7dbba" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>subscriber_count</name></member>
      <member refid="classdpp_1_1integration_1adc4d5078e65f35a398d4d43c88870812" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>synced_at</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>to_json</name></member>
      <member refid="classdpp_1_1integration_1a1a8c2849892bb9b48db2f874ad2596e3" prot="protected" virt="virtual"><scope>dpp::integration</scope><name>to_json_impl</name></member>
      <member refid="classdpp_1_1integration_1ad2ddea4d9651a07beb959ee745d43db1" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>type</name></member>
      <member refid="classdpp_1_1integration_1a83ac415b6591535fa85a37ddb2397baa" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>user_obj</name></member>
      <member refid="classdpp_1_1integration_1a7132ef9a2ab58a12ea681b3afe6fe552" prot="public" virt="non-virtual"><scope>dpp::integration</scope><name>~integration</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::integration</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
