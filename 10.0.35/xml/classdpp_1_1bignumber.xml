<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1bignumber" kind="class" language="C++" prot="public">
    <compoundname>dpp::bignumber</compoundname>
    <includes local="no">bignum.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1bignumber_1aef88acb42d4a82dc543ff5270c69f7e3" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; openssl_bignum &gt;</type>
        <definition>std::shared_ptr&lt;openssl_bignum&gt; dpp::bignumber::ssl_bn</definition>
        <argsstring></argsstring>
        <name>ssl_bn</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
<para>Internal opaque struct to contain OpenSSL things. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/bignum.h" line="50" column="17" bodyfile="include/dpp/bignum.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1bignumber_1aa1db5d3d5dce166f182b2da591f7004e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::bignumber::bignumber</definition>
        <argsstring>()=default</argsstring>
        <name>bignumber</name>
        <briefdescription>
<para>Construct a new bignumber object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/bignum.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1bignumber_1a20ea7c898a60a24e854fb5b202298ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::bignumber::bignumber</definition>
        <argsstring>(const std::string &amp;number_string)</argsstring>
        <name>bignumber</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>number_string</declname>
        </param>
        <briefdescription>
<para>Parse a std::string of an arbitrary length number into a bignumber. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>number_string</parametername>
</parameternamelist>
<parameterdescription>
<para>string representation of a number. The number must be an integer, and can be positive or negative. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Prefixing number_string with 0x will parse it as hexadecimal. This is not case sensitive. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/bignum.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1bignumber_1a922a2de70e336ec76d20dfc72950ff20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::bignumber::bignumber</definition>
        <argsstring>(std::vector&lt; uint64_t &gt; bits)</argsstring>
        <name>bignumber</name>
        <param>
          <type>std::vector&lt; uint64_t &gt;</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Build a bignumber from a vector of 64 bit values. The values are accepted in &quot;reverse order&quot;, so the first vector entry at index 0 is the leftmost 64 bits of the bignum. The vector can be any arbitrary length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of 64 bit values which represent the number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/bignum.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1bignumber_1a1ae739c6efff033ab01e46635ba004ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::bignumber::~bignumber</definition>
        <argsstring>()=default</argsstring>
        <name>~bignumber</name>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/bignum.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1bignumber_1a6143b31a5316dd69c553862d61a740da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint64_t &gt;</type>
        <definition>std::vector&lt; uint64_t &gt; dpp::bignumber::get_binary</definition>
        <argsstring>() const</argsstring>
        <name>get_binary</name>
        <briefdescription>
<para>Get the array of 64 bit values that represents the bignumber. This is what we should use to store bignumbers in memory, not this bignumber class itself, as the bignumber class instantiates OpenSSL structs and takes significantly more ram than just a vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Vector of 64 bit values representing the bignumber </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/bignum.h" line="98" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1bignumber_1afc549f17451dad0c21640407e4de7826" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::bignumber::get_number</definition>
        <argsstring>(bool hex=false) const</argsstring>
        <name>get_number</name>
        <param>
          <type>bool</type>
          <declname>hex</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the string representation of the bignumber. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hex</parametername>
</parameternamelist>
<parameterdescription>
<para>If false (the default) the number is returned in decimal, else if this parameter is true, it will be returned as hex (without leading &apos;0x&apos;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String representation of bignumber </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/bignum.h" line="88" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An arbitrary length integer number. Officially, the Discord documentation says that permission values can be any arbitrary number of digits. At time of writing there are only 50 bits of permissions, but this is set to grow larger and potentially past 64 bits. They will continue to send this data as a huge single integer at that point, because this is obviously sensible. /s. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classdpp_1_1bignumber" kindref="compound">dpp::bignumber</ref> uses OpenSSL BN_* under the hood, as we include openssl anyway for HTTPS. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="include/dpp/bignum.h" line="46" column="1" bodyfile="include/dpp/bignum.h" bodystart="46" bodyend="99"/>
    <listofallmembers>
      <member refid="classdpp_1_1bignumber_1aa1db5d3d5dce166f182b2da591f7004e" prot="public" virt="non-virtual"><scope>dpp::bignumber</scope><name>bignumber</name></member>
      <member refid="classdpp_1_1bignumber_1a20ea7c898a60a24e854fb5b202298ede" prot="public" virt="non-virtual"><scope>dpp::bignumber</scope><name>bignumber</name></member>
      <member refid="classdpp_1_1bignumber_1a922a2de70e336ec76d20dfc72950ff20" prot="public" virt="non-virtual"><scope>dpp::bignumber</scope><name>bignumber</name></member>
      <member refid="classdpp_1_1bignumber_1a6143b31a5316dd69c553862d61a740da" prot="public" virt="non-virtual"><scope>dpp::bignumber</scope><name>get_binary</name></member>
      <member refid="classdpp_1_1bignumber_1afc549f17451dad0c21640407e4de7826" prot="public" virt="non-virtual"><scope>dpp::bignumber</scope><name>get_number</name></member>
      <member refid="classdpp_1_1bignumber_1aef88acb42d4a82dc543ff5270c69f7e3" prot="private" virt="non-virtual"><scope>dpp::bignumber</scope><name>ssl_bn</name></member>
      <member refid="classdpp_1_1bignumber_1a1ae739c6efff033ab01e46635ba004ae" prot="public" virt="non-virtual"><scope>dpp::bignumber</scope><name>~bignumber</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
