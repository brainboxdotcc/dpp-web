<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1prune" kind="struct" language="C++" prot="public">
    <compoundname>dpp::prune</compoundname>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; prune &gt;</basecompoundref>
    <includes local="no">prune.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdpp_1_1prune_1a329288fd2e94f8ce45e85880e21d4e19" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; prune &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; prune &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/prune.h" line="33" column="17" bodyfile="include/dpp/prune.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1prune_1a948f8af4cf30f7e0a35978e36e1d3601" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::prune::compute_prune_count</definition>
        <argsstring></argsstring>
        <name>compute_prune_count</name>
        <briefdescription>
<para>True if the count of pruneable users should be returned. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Discord recommend not using this on big guilds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/prune.h" line="69" column="6" bodyfile="include/dpp/prune.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1prune_1a981d093ed62361879e862c6e4b98556a" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::prune::days</definition>
        <argsstring></argsstring>
        <name>days</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Number of days to include in the prune. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/prune.h" line="58" column="10" bodyfile="include/dpp/prune.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1prune_1a83cf2b149716078a0379f97b2c47526c" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::prune::include_roles</definition>
        <argsstring></argsstring>
        <name>include_roles</name>
        <briefdescription>
<para>Roles to include in the prune (empty to include everyone). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/prune.h" line="63" column="13" bodyfile="include/dpp/prune.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structdpp_1_1prune_1a720c4dc7dffd9750f976c4fef105691c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &amp;</type>
        <definition>prune &amp; dpp::prune::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill this object from json. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON object to fill from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/prune.h" line="41" column="7"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1prune_1a599a32b1de234acc39b339ed5eec5447" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>virtual json dpp::prune::to_json_impl</definition>
        <argsstring>(bool with_prune_count=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_prune_count</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build JSON from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_prune_count</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the prune count boolean is to be set in the built JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON of the prune object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/prune.h" line="47" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1prune_1a5efc2615239ba18ff3bb7f2b86623374" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::prune::~prune</definition>
        <argsstring>()=default</argsstring>
        <name>~prune</name>
        <briefdescription>
<para>Destroy this prune object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/prune.h" line="53" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; prune  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &amp;</type>
        <definition>prune  &amp; dpp::json_interface&lt; prune  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1prune_1ae517322018f4dd7c1e400388163c90b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>json dpp::prune::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build JSON from this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the prune count boolean is to be set in the built JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON of the prune object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/prune.h" line="77" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines a request to count prunable users, or start a prune operation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="1">
        <label>dpp::prune</label>
        <link refid="structdpp_1_1prune"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; prune &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; prune &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>bool</label>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="1">
        <label>dpp::prune</label>
        <link refid="structdpp_1_1prune"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>days</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>include_roles</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>compute_prune_count</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; prune &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; prune &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>vector&lt;</label>
      </node>
      <node id="4">
        <label>uint32_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/prune.h" line="33" column="1" bodyfile="include/dpp/prune.h" bodystart="33" bodyend="78"/>
    <listofallmembers>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::prune</scope><name>build_json</name></member>
      <member refid="structdpp_1_1prune_1a948f8af4cf30f7e0a35978e36e1d3601" prot="public" virt="non-virtual"><scope>dpp::prune</scope><name>compute_prune_count</name></member>
      <member refid="structdpp_1_1prune_1a981d093ed62361879e862c6e4b98556a" prot="public" virt="non-virtual"><scope>dpp::prune</scope><name>days</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::prune</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1prune_1a720c4dc7dffd9750f976c4fef105691c" prot="protected" virt="non-virtual"><scope>dpp::prune</scope><name>fill_from_json_impl</name></member>
      <member refid="structdpp_1_1prune_1a83cf2b149716078a0379f97b2c47526c" prot="public" virt="non-virtual"><scope>dpp::prune</scope><name>include_roles</name></member>
      <member refid="structdpp_1_1prune_1a329288fd2e94f8ce45e85880e21d4e19" prot="protected" virt="non-virtual"><scope>dpp::prune</scope><name>json_interface&lt; prune &gt;</name></member>
      <member refid="structdpp_1_1prune_1ae517322018f4dd7c1e400388163c90b2" prot="public" virt="non-virtual"><scope>dpp::prune</scope><name>to_json</name></member>
      <member refid="structdpp_1_1prune_1a599a32b1de234acc39b339ed5eec5447" prot="protected" virt="virtual"><scope>dpp::prune</scope><name>to_json_impl</name></member>
      <member refid="structdpp_1_1prune_1a5efc2615239ba18ff3bb7f2b86623374" prot="public" virt="virtual"><scope>dpp::prune</scope><name>~prune</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
