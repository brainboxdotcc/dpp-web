<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1utility_1_1iconhash" kind="struct" language="C++" prot="public">
    <compoundname>dpp::utility::iconhash</compoundname>
    <includes local="no">utility.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1utility_1_1iconhash_1a185b30a583970f0ba298ab0429e29d91" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::utility::iconhash::first</definition>
        <argsstring></argsstring>
        <name>first</name>
        <briefdescription>
<para>High 64 bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="122" column="10" bodyfile="include/dpp/utility.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1utility_1_1iconhash_1ac78956497078b93d5510d493a4d23172" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::utility::iconhash::second</definition>
        <argsstring></argsstring>
        <name>second</name>
        <briefdescription>
<para>Low 64 bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="123" column="10" bodyfile="include/dpp/utility.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1utility_1_1iconhash_1a9cc13a59cf1049a84cea6ee3405bd4ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::utility::iconhash::iconhash</definition>
        <argsstring>()</argsstring>
        <name>iconhash</name>
        <briefdescription>
<para>Construct a new iconhash object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="128" column="1" bodyfile="src/dpp/utility.cpp" bodystart="117" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1iconhash_1a409fbe2ae53e12f6a1517436494b96e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::utility::iconhash::iconhash</definition>
        <argsstring>(const std::string &amp;hash)</argsstring>
        <name>iconhash</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Construct a new iconhash object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>String hash to construct from. Must contain a 32 character hex string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::length_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the provided string is not exactly 32 characters long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="139" column="1" bodyfile="src/dpp/utility.cpp" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1iconhash_1aa341e55d1bb792a5a2592cc064cb91f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">iconhash</ref> &amp;</type>
        <definition>iconhash &amp; dpp::utility::iconhash::operator=</definition>
        <argsstring>(const std::string &amp;assignment)</argsstring>
        <name>operator=</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>assignment</declname>
        </param>
        <briefdescription>
<para>Assign from std::string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>assignment</parametername>
</parameternamelist>
<parameterdescription>
<para>string to assign from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::length_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the provided string is not exactly 32 characters long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="149" column="10" bodyfile="src/dpp/utility.cpp" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1iconhash_1ac675809d00cef53ef6887ef7ffcd095c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::utility::iconhash::set</definition>
        <argsstring>(const std::string &amp;hash)</argsstring>
        <name>set</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Change value of iconhash object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>String hash to change to. Must contain a 32 character hex string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::length_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the provided string is not exactly 32 characters long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="160" column="6" bodyfile="src/dpp/utility.cpp" bodystart="120" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1iconhash_1aeba3e70afad0497f8e9aa1493704a77b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::utility::iconhash::to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <briefdescription>
<para>Convert iconhash back to 32 character string value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string Hash value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="168" column="13" bodyfile="src/dpp/utility.cpp" bodystart="147" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Store a 128 bit icon hash (profile picture, server icon etc) as a 128 bit binary value made of two uint64_t. Has a constructor to build one from a string, and a method to fetch the value back in string form. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="2" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/utility.h" line="120" column="1" bodyfile="include/dpp/utility.h" bodystart="120" bodyend="169"/>
    <listofallmembers>
      <member refid="structdpp_1_1utility_1_1iconhash_1a185b30a583970f0ba298ab0429e29d91" prot="public" virt="non-virtual"><scope>dpp::utility::iconhash</scope><name>first</name></member>
      <member refid="structdpp_1_1utility_1_1iconhash_1a9cc13a59cf1049a84cea6ee3405bd4ea" prot="public" virt="non-virtual"><scope>dpp::utility::iconhash</scope><name>iconhash</name></member>
      <member refid="structdpp_1_1utility_1_1iconhash_1a409fbe2ae53e12f6a1517436494b96e4" prot="public" virt="non-virtual"><scope>dpp::utility::iconhash</scope><name>iconhash</name></member>
      <member refid="structdpp_1_1utility_1_1iconhash_1aa341e55d1bb792a5a2592cc064cb91f3" prot="public" virt="non-virtual"><scope>dpp::utility::iconhash</scope><name>operator=</name></member>
      <member refid="structdpp_1_1utility_1_1iconhash_1ac78956497078b93d5510d493a4d23172" prot="public" virt="non-virtual"><scope>dpp::utility::iconhash</scope><name>second</name></member>
      <member refid="structdpp_1_1utility_1_1iconhash_1ac675809d00cef53ef6887ef7ffcd095c" prot="public" virt="non-virtual"><scope>dpp::utility::iconhash</scope><name>set</name></member>
      <member refid="structdpp_1_1utility_1_1iconhash_1aeba3e70afad0497f8e9aa1493704a77b" prot="public" virt="non-virtual"><scope>dpp::utility::iconhash</scope><name>to_string</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
