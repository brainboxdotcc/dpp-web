<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1role" kind="class" language="C++" prot="public">
    <compoundname>dpp::role</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">role.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1role_1ada5cb5675b012b2cf55d285d5b233df3" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::role::bot_id</definition>
        <argsstring></argsstring>
        <name>bot_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bot id if any (e.g. role is a bot&apos;s role created when it was invited) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="92" column="11" bodyfile="include/dpp/role.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a42f8b747f7a04cd1022ce3bc42e6a05b" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::role::colour</definition>
        <argsstring></argsstring>
        <name>colour</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role colour </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="82" column="10" bodyfile="include/dpp/role.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a67fa7fe9f3650b5783cf4f5d2ed37de0" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::role::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role flags from <ref refid="namespacedpp_1a0dc77b8a509bf5337322d02e93e96c2e" kindref="member">dpp::role_flags</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="88" column="9" bodyfile="include/dpp/role.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ab831d734d6cfe3a88c54bb91b0f578ea" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::role::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild id </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="80" column="11" bodyfile="include/dpp/role.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unique ID of object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discord.h" line="44" column="11" bodyfile="include/dpp/discord.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1aa44718ae47c00bcf2008366218646572" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::role::integration_id</definition>
        <argsstring></argsstring>
        <name>integration_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integration id if any (e.g. role is a bot&apos;s role created when it was invited) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="90" column="11" bodyfile="include/dpp/role.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a6451e41576902faa14d0394d47d19934" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::role::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role name </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="78" column="13" bodyfile="include/dpp/role.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ab1dc3dc9a99e540de875910d91e52f50" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::role::permissions</definition>
        <argsstring></argsstring>
        <name>permissions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role permissions bitmask values from <ref refid="namespacedpp_1a0bb678a7eb060b6f35ad38e6f4ee0002" kindref="member">dpp::role_permissions</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="86" column="10" bodyfile="include/dpp/role.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a08996823fc9ba1eb8c95b1e2e855d958" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::role::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role position </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="84" column="9" bodyfile="include/dpp/role.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1role_1aa23013a7a7d7c03c4ef44d6e6fc02baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::role::role</definition>
        <argsstring>()</argsstring>
        <name>role</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a1cd275ca1aa52763e05b78a8a3443476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::role::~role</definition>
        <argsstring>()</argsstring>
        <name>~role</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a704dd3aee9a7b3687f1556442144f62b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::role::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a json string from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the ID is to be included in the json text </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The json of the role </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="111" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a5352cd2a40c1c2c430ec9448bd45723f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::fill_from_json</definition>
        <argsstring>(snowflake guild_id, nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacenlohmann_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref> *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill this role from json. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the guild id to place in the json </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The json data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="105" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0e2683fd21c1743132eb29f8155c12a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_add_reactions</definition>
        <argsstring>() const</argsstring>
        <name>has_add_reactions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the add reactions permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="132" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a3ffcaced8369d47cc3f954fa0978c40c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_administrator</definition>
        <argsstring>() const</argsstring>
        <name>has_administrator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the administrator permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="126" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a848a39ba5ff6b5c42c3246d041582d00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_attach_files</definition>
        <argsstring>() const</argsstring>
        <name>has_attach_files</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the attach files permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="150" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac8eaec9aac9633c7d05cb208da7fc4d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_ban_members</definition>
        <argsstring>() const</argsstring>
        <name>has_ban_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the ban members permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="124" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a2b158e7e37bb66c17a4ed412a71f7222" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_change_nickname</definition>
        <argsstring>() const</argsstring>
        <name>has_change_nickname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the change nickname permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="172" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0be98542c2299aa41829d69bf348b54d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_connect</definition>
        <argsstring>() const</argsstring>
        <name>has_connect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the connect voice permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="160" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a7005a2a951c2917edb6f5ce189093234" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_create_instant_invite</definition>
        <argsstring>() const</argsstring>
        <name>has_create_instant_invite</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has create instant invite permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="120" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0a197983ea6fc5047c7873d804f7646a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_deafen_members</definition>
        <argsstring>() const</argsstring>
        <name>has_deafen_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the deafen members permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="166" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae1dc87323b6ab2e499fee7c8bfa69d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_embed_links</definition>
        <argsstring>() const</argsstring>
        <name>has_embed_links</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the embed links permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="148" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a7b76518e70c32391bbae2c80439a2a76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_kick_members</definition>
        <argsstring>() const</argsstring>
        <name>has_kick_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the kick members permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="122" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9630315e9c31cb53335e077140497ad7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_channels</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage channels permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="128" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0540ccfbbd74713595fc97bc0360a8e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_emojis</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_emojis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage emojis permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="180" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ad1de8e0ce44138225e9e7620b0834cb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_guild</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_guild</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage guild permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="130" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a1a28c7f8685b1c0287067665aecf6efb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_messages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage messages permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="146" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a80c8b573fc16edfd685294e0326b38d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_nicknames</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_nicknames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage nicknames permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="174" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0b2cf553aab82c6a6a388c3f6e3c240d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_roles</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_roles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage roles permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="176" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9ac39f8c39f870603f0e9d9760159ef9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_webhooks</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_webhooks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the manage webhooks permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="178" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aed437137a98c1f99d28942070c8ccf0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_mention_everyone</definition>
        <argsstring>() const</argsstring>
        <name>has_mention_everyone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the mention @everyone and @here permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="154" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac9605d0d14e4fff0c0848e08682c6da5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_move_members</definition>
        <argsstring>() const</argsstring>
        <name>has_move_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the move members permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="168" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a504ae68edc2bfe1c21ffdb6745c1194c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_mute_members</definition>
        <argsstring>() const</argsstring>
        <name>has_mute_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the mute members permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="164" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a640358a9aa6e34c0e0b16020af176e55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_priority_speaker</definition>
        <argsstring>() const</argsstring>
        <name>has_priority_speaker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the priority speaker permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="136" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac5f664643c59d7e24271bb790735c68f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_read_message_history</definition>
        <argsstring>() const</argsstring>
        <name>has_read_message_history</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the read message history permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="152" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a31d923d5f1020215b836db355991870b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_send_messages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the send messages permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="142" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1af54ea9f64ea035675a26b0d8e8b356f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_tts_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_send_tts_messages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the send TTS messages permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="144" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a92ce258f420bce887cc9c92ad006fe06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_speak</definition>
        <argsstring>() const</argsstring>
        <name>has_speak</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the speak permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="162" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae6173507d17a12012cf46da70929a49e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_stream</definition>
        <argsstring>() const</argsstring>
        <name>has_stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the stream permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="138" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a363303c06726e049586b8ae4f3f6375e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_external_emojis</definition>
        <argsstring>() const</argsstring>
        <name>has_use_external_emojis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the use external emojis permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="156" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9ffd7c58994f9c3e0a38245462eb6766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_vad</definition>
        <argsstring>() const</argsstring>
        <name>has_use_vad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has use voice activity detection permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="170" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a600d347d4f491ba32969a76d9d0cf3c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_audit_log</definition>
        <argsstring>() const</argsstring>
        <name>has_view_audit_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the view audit log permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="134" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1acbe56d5d1d54e9fea3a6b7acd66ef888" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_channel</definition>
        <argsstring>() const</argsstring>
        <name>has_view_channel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the view channel permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="140" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac71887da3f920e070d1fa743ea000d1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_guild_insights</definition>
        <argsstring>() const</argsstring>
        <name>has_view_guild_insights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has the view guild insights permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="158" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae0cb040c022f08d210c885012bf47919" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_hoisted</definition>
        <argsstring>() const</argsstring>
        <name>is_hoisted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if the role is hoisted </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="114" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a479bc27fe486bb70dd3fc1376df3c5b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_managed</definition>
        <argsstring>() const</argsstring>
        <name>is_managed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if the role is managed (belongs to a bot or application) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="118" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a1d5a026fa3773f52b9c2cee6c590509f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_mentionable</definition>
        <argsstring>() const</argsstring>
        <name>is_mentionable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if the role is mentionable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="116" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a role within a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::role</label>
        <link refid="classdpp_1_1role"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::role</label>
        <link refid="classdpp_1_1role"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>bot_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>integration_id</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>colour</edgelabel>
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>position</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>uint32_t</label>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
      <node id="7">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/role.h" line="75" column="1" bodyfile="include/dpp/role.h" bodystart="75" bodyend="181"/>
    <listofallmembers>
      <member refid="classdpp_1_1role_1ada5cb5675b012b2cf55d285d5b233df3" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>bot_id</name></member>
      <member refid="classdpp_1_1role_1a704dd3aee9a7b3687f1556442144f62b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>build_json</name></member>
      <member refid="classdpp_1_1role_1a42f8b747f7a04cd1022ce3bc42e6a05b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>colour</name></member>
      <member refid="classdpp_1_1role_1a5352cd2a40c1c2c430ec9448bd45723f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1role_1a67fa7fe9f3650b5783cf4f5d2ed37de0" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>flags</name></member>
      <member refid="classdpp_1_1role_1ab831d734d6cfe3a88c54bb91b0f578ea" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1role_1a0e2683fd21c1743132eb29f8155c12a2" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_add_reactions</name></member>
      <member refid="classdpp_1_1role_1a3ffcaced8369d47cc3f954fa0978c40c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_administrator</name></member>
      <member refid="classdpp_1_1role_1a848a39ba5ff6b5c42c3246d041582d00" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_attach_files</name></member>
      <member refid="classdpp_1_1role_1ac8eaec9aac9633c7d05cb208da7fc4d9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_ban_members</name></member>
      <member refid="classdpp_1_1role_1a2b158e7e37bb66c17a4ed412a71f7222" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_change_nickname</name></member>
      <member refid="classdpp_1_1role_1a0be98542c2299aa41829d69bf348b54d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_connect</name></member>
      <member refid="classdpp_1_1role_1a7005a2a951c2917edb6f5ce189093234" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_create_instant_invite</name></member>
      <member refid="classdpp_1_1role_1a0a197983ea6fc5047c7873d804f7646a" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_deafen_members</name></member>
      <member refid="classdpp_1_1role_1ae1dc87323b6ab2e499fee7c8bfa69d58" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_embed_links</name></member>
      <member refid="classdpp_1_1role_1a7b76518e70c32391bbae2c80439a2a76" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_kick_members</name></member>
      <member refid="classdpp_1_1role_1a9630315e9c31cb53335e077140497ad7" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_channels</name></member>
      <member refid="classdpp_1_1role_1a0540ccfbbd74713595fc97bc0360a8e7" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_emojis</name></member>
      <member refid="classdpp_1_1role_1ad1de8e0ce44138225e9e7620b0834cb0" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_guild</name></member>
      <member refid="classdpp_1_1role_1a1a28c7f8685b1c0287067665aecf6efb" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_messages</name></member>
      <member refid="classdpp_1_1role_1a80c8b573fc16edfd685294e0326b38d2" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_nicknames</name></member>
      <member refid="classdpp_1_1role_1a0b2cf553aab82c6a6a388c3f6e3c240d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_roles</name></member>
      <member refid="classdpp_1_1role_1a9ac39f8c39f870603f0e9d9760159ef9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_webhooks</name></member>
      <member refid="classdpp_1_1role_1aed437137a98c1f99d28942070c8ccf0f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_mention_everyone</name></member>
      <member refid="classdpp_1_1role_1ac9605d0d14e4fff0c0848e08682c6da5" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_move_members</name></member>
      <member refid="classdpp_1_1role_1a504ae68edc2bfe1c21ffdb6745c1194c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_mute_members</name></member>
      <member refid="classdpp_1_1role_1a640358a9aa6e34c0e0b16020af176e55" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_priority_speaker</name></member>
      <member refid="classdpp_1_1role_1ac5f664643c59d7e24271bb790735c68f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_read_message_history</name></member>
      <member refid="classdpp_1_1role_1a31d923d5f1020215b836db355991870b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_messages</name></member>
      <member refid="classdpp_1_1role_1af54ea9f64ea035675a26b0d8e8b356f5" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_tts_messages</name></member>
      <member refid="classdpp_1_1role_1a92ce258f420bce887cc9c92ad006fe06" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_speak</name></member>
      <member refid="classdpp_1_1role_1ae6173507d17a12012cf46da70929a49e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_stream</name></member>
      <member refid="classdpp_1_1role_1a363303c06726e049586b8ae4f3f6375e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_external_emojis</name></member>
      <member refid="classdpp_1_1role_1a9ffd7c58994f9c3e0a38245462eb6766" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_vad</name></member>
      <member refid="classdpp_1_1role_1a600d347d4f491ba32969a76d9d0cf3c3" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_audit_log</name></member>
      <member refid="classdpp_1_1role_1acbe56d5d1d54e9fea3a6b7acd66ef888" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_channel</name></member>
      <member refid="classdpp_1_1role_1ac71887da3f920e070d1fa743ea000d1c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_guild_insights</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>id</name></member>
      <member refid="classdpp_1_1role_1aa44718ae47c00bcf2008366218646572" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>integration_id</name></member>
      <member refid="classdpp_1_1role_1ae0cb040c022f08d210c885012bf47919" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_hoisted</name></member>
      <member refid="classdpp_1_1role_1a479bc27fe486bb70dd3fc1376df3c5b9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_managed</name></member>
      <member refid="classdpp_1_1role_1a1d5a026fa3773f52b9c2cee6c590509f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_mentionable</name></member>
      <member refid="classdpp_1_1managed_1a31ef760e6aff5631cdaf8425daaf7e6a" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>managed</name></member>
      <member refid="classdpp_1_1role_1a6451e41576902faa14d0394d47d19934" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>name</name></member>
      <member refid="classdpp_1_1role_1ab1dc3dc9a99e540de875910d91e52f50" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>permissions</name></member>
      <member refid="classdpp_1_1role_1a08996823fc9ba1eb8c95b1e2e855d958" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>position</name></member>
      <member refid="classdpp_1_1role_1aa23013a7a7d7c03c4ef44d6e6fc02baa" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>role</name></member>
      <member refid="classdpp_1_1managed_1a68f95fa01f17991b35920e38df9f7fe9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>~managed</name></member>
      <member refid="classdpp_1_1role_1a1cd275ca1aa52763e05b78a8a3443476" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>~role</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
