<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1message" kind="struct" language="C++" prot="public">
    <compoundname>dpp::message</compoundname>
    <includes local="no">message.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1message_1a7c1e0cc707a4168b75945da0d31105a0" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::message::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>id of the message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="519" column="17" bodyfile="include/dpp/message.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1adceaf61877eede79f0ebeb14efa74b5e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::message::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>id of the channel the message was sent in </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="521" column="17" bodyfile="include/dpp/message.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a5e75f7cd8a7e952e6621c520627d5b84" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::message::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: id of the guild the message was sent in </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="523" column="17" bodyfile="include/dpp/message.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a35c14f04382266b29c4ca076b4e0f9e0" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref> *</type>
        <definition>user* dpp::message::author</definition>
        <argsstring></argsstring>
        <name>author</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the author of this message (not guaranteed to be a valid user) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="525" column="5" bodyfile="include/dpp/message.h" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a646a196b3a61b11abab16261eaa1e8c3" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> *</type>
        <definition>guild_member* dpp::message::member</definition>
        <argsstring></argsstring>
        <name>member</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: member properties for this message&apos;s author </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="527" column="13" bodyfile="include/dpp/message.h" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1acb17877db423d2ac4b103a67e1ae2ff6" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message::content</definition>
        <argsstring></argsstring>
        <name>content</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>contents of the message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="529" column="12" bodyfile="include/dpp/message.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ab9cb60fc35159bfa604164c5574a4957" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref> &gt;</type>
        <definition>std::vector&lt;dpp::component&gt; dpp::message::components</definition>
        <argsstring></argsstring>
        <name>components</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>message components </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="531" column="13" bodyfile="include/dpp/message.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a9991c58453a1deb7b785a6b7457372f2" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::message::sent</definition>
        <argsstring></argsstring>
        <name>sent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when this message was sent </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="533" column="7" bodyfile="include/dpp/message.h" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a94f1f6750ca95e4bb66f069d9b4b3a54" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::message::edited</definition>
        <argsstring></argsstring>
        <name>edited</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when this message was edited (may be 0 if never edited) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="535" column="7" bodyfile="include/dpp/message.h" bodystart="535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a8f4ab5546606db3ea4bcdb41b60a5dba" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::message::tts</definition>
        <argsstring></argsstring>
        <name>tts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether this was a TTS message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="537" column="5" bodyfile="include/dpp/message.h" bodystart="537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a499cacfe6a270dca773fc7f91718ac70" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::message::mention_everyone</definition>
        <argsstring></argsstring>
        <name>mention_everyone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether this message mentions everyone </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="539" column="8" bodyfile="include/dpp/message.h" bodystart="539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a96f97a2ade23d3f58b221f98c60d9950" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::message::mentions</definition>
        <argsstring></argsstring>
        <name>mentions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>users specifically mentioned in the message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="541" column="12" bodyfile="include/dpp/message.h" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a1f9fbfe4171cdc02306dc505583b7ed9" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::message::mention_roles</definition>
        <argsstring></argsstring>
        <name>mention_roles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>roles specifically mentioned in this message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="543" column="13" bodyfile="include/dpp/message.h" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ae161a71904462eab6bdd539f4ff32332" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::message::mention_channels</definition>
        <argsstring></argsstring>
        <name>mention_channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: channels specifically mentioned in this message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="545" column="13" bodyfile="include/dpp/message.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1aa59a613a4ee0bab7f9a5ea18fe7edea7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1attachment" kindref="compound">attachment</ref> &gt;</type>
        <definition>std::vector&lt;attachment&gt; dpp::message::attachments</definition>
        <argsstring></argsstring>
        <name>attachments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>any attached files </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="547" column="13" bodyfile="include/dpp/message.h" bodystart="547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a9c0eb22ba371ead6d960bdf7c9838b6e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &gt;</type>
        <definition>std::vector&lt;embed&gt; dpp::message::embeds</definition>
        <argsstring></argsstring>
        <name>embeds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>zero or more <ref refid="structdpp_1_1embed" kindref="compound">dpp::embed</ref> objects </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="549" column="13" bodyfile="include/dpp/message.h" bodystart="549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1af6c6ea9f1319adde40d068a2e9b230e7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1reaction" kindref="compound">reaction</ref> &gt;</type>
        <definition>std::vector&lt;reaction&gt; dpp::message::reactions</definition>
        <argsstring></argsstring>
        <name>reactions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: reactions to the message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="551" column="13" bodyfile="include/dpp/message.h" bodystart="551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1afaaf4f44ce0631c49c15088b033d25e6" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message::nonce</definition>
        <argsstring></argsstring>
        <name>nonce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: used for validating a message was sent </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="553" column="12" bodyfile="include/dpp/message.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a029932133e0a6aea2afdea5f2d98146e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::message::pinned</definition>
        <argsstring></argsstring>
        <name>pinned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether this message is pinned </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="555" column="5" bodyfile="include/dpp/message.h" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ad1033bc27c5c1436c2e321d1be1d65ed" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::message::webhook_id</definition>
        <argsstring></argsstring>
        <name>webhook_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optional: if the message is generated by a webhook, its id will be here otherwise the field will be 0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="557" column="10" bodyfile="include/dpp/message.h" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a16fca6ff4595e0fcab2305205eb54626" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::message::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="559" column="8" bodyfile="include/dpp/message.h" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a9f158cde13b3916c9823b18865b24f41" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message::filename</definition>
        <argsstring></argsstring>
        <name>filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Name of file to upload (for use server-side in discord&apos;s url) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="562" column="12" bodyfile="include/dpp/message.h" bodystart="562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a020ceaaad56ff4af60e2325a3cb9fbc7" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message::filecontent</definition>
        <argsstring></argsstring>
        <name>filecontent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>File content to upload (raw binary) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="565" column="12" bodyfile="include/dpp/message.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a2ed7eaf6f5ff69a94fcb4912c0c795c2" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::message::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Message type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="568" column="8" bodyfile="include/dpp/message.h" bodystart="568" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1message_1a717067505cfc5f5dcf05459c216c9756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>()</argsstring>
        <name>message</name>
        <briefdescription>
<para>Construct a new message object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="573" column="1" bodyfile="src/dpp/message.cpp" bodystart="144" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a21466e050ee9c0646392ccf5940bb62a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(snowflake channel_id, const std::string &amp;content, message_type type=mt_default)</argsstring>
        <name>message</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bc" kindref="member">message_type</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bcac7573c73d464b30ffd2fee74f8618152" kindref="member">mt_default</ref></defval>
        </param>
        <briefdescription>
<para>Construct a new message object with a channel and content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send the message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="582" column="1" bodyfile="src/dpp/message.cpp" bodystart="150" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a0e71afdc706c7ae83934ddfd8c2ffc38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(snowflake channel_id, const embed &amp;_embed)</argsstring>
        <name>message</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
          <declname>_embed</declname>
        </param>
        <briefdescription>
<para>Construct a new message object with a channel and content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send the message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_embed</parametername>
</parameternamelist>
<parameterdescription>
<para>An embed to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="590" column="1" bodyfile="src/dpp/message.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a45a0883a10a19e933fbba682aba212f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(const std::string &amp;content, message_type type=mt_default)</argsstring>
        <name>message</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bc" kindref="member">message_type</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bcac7573c73d464b30ffd2fee74f8618152" kindref="member">mt_default</ref></defval>
        </param>
        <briefdescription>
<para>Construct a new message object with content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="598" column="1" bodyfile="src/dpp/message.cpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ae28ee933cde939ecd82ee7def78aff69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type><ref refid="namespacenlohmann_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref> *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill this object from json. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON object to fill from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="604" column="9" bodyfile="src/dpp/message.cpp" bodystart="462" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1afad5f16566640b47321333d5ee5526ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::message::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build JSON from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the ID is to be included in the built JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON text of the message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="610" column="13" bodyfile="src/dpp/message.cpp" bodystart="341" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1acd532877b68dcd3f1713fd6df9045ed2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_crossposted</definition>
        <argsstring>() const</argsstring>
        <name>is_crossposted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="612" column="6" bodyfile="src/dpp/message.cpp" bodystart="432" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a03ce860de6231985a823f8ce2dd2dd8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_crosspost</definition>
        <argsstring>() const</argsstring>
        <name>is_crosspost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="613" column="6" bodyfile="src/dpp/message.cpp" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ade17fb77debb971918af8434b0f7477c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::supress_embeds</definition>
        <argsstring>() const</argsstring>
        <name>supress_embeds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="614" column="6" bodyfile="src/dpp/message.cpp" bodystart="441" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a0f22f044046ebc8bdc7d35e950baca25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_source_message_deleted</definition>
        <argsstring>() const</argsstring>
        <name>is_source_message_deleted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="615" column="6" bodyfile="src/dpp/message.cpp" bodystart="445" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ad164b78c5ee2dc8a8237d1ec7a0d863f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_urgent</definition>
        <argsstring>() const</argsstring>
        <name>is_urgent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="616" column="6" bodyfile="src/dpp/message.cpp" bodystart="449" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a6d8e17c0e9066eb044b241355d0a3efb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_ephemeral</definition>
        <argsstring>() const</argsstring>
        <name>is_ephemeral</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="617" column="6" bodyfile="src/dpp/message.cpp" bodystart="453" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a25d4b0fbfcc698a74fa4f2b71796e874" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_loading</definition>
        <argsstring>() const</argsstring>
        <name>is_loading</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="618" column="6" bodyfile="src/dpp/message.cpp" bodystart="457" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a85dbf0b4a0b294eac34ec49feb1d4540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::add_component</definition>
        <argsstring>(const component &amp;c)</argsstring>
        <name>add_component</name>
        <param>
          <type>const <ref refid="classdpp_1_1component" kindref="compound">component</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="620" column="9" bodyfile="src/dpp/message.cpp" bodystart="156" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a9ff92caceb655fa1f89710445a24c107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::add_embed</definition>
        <argsstring>(const embed &amp;e)</argsstring>
        <name>add_embed</name>
        <param>
          <type>const <ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="621" column="9" bodyfile="src/dpp/message.cpp" bodystart="162" bodyend="166"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents messages sent and received on Discord. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="14">
        <label>bool</label>
      </node>
      <node id="11">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="5" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="2" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::message</label>
        <link refid="structdpp_1_1message"/>
        <childnode refid="2" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>id</edgelabel>
          <edgelabel>webhook_id</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>author</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>content</edgelabel>
          <edgelabel>filecontent</edgelabel>
          <edgelabel>filename</edgelabel>
          <edgelabel>nonce</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>attachments</edgelabel>
          <edgelabel>components</edgelabel>
          <edgelabel>embeds</edgelabel>
          <edgelabel>mention_channels</edgelabel>
          <edgelabel>mention_roles</edgelabel>
          <edgelabel>mentions</edgelabel>
          <edgelabel>reactions</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>edited</edgelabel>
          <edgelabel>sent</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mention_everyone</edgelabel>
          <edgelabel>pinned</edgelabel>
          <edgelabel>tts</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="2" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>vector&lt;</label>
      </node>
      <node id="13">
        <label>time_t</label>
      </node>
      <node id="7">
        <label>uint16_t</label>
      </node>
      <node id="9">
        <label>uint32_t</label>
      </node>
      <node id="2">
        <label>uint64_t</label>
      </node>
      <node id="10">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/message.h" line="517" column="1" bodyfile="include/dpp/message.h" bodystart="517" bodyend="622"/>
    <listofallmembers>
      <member refid="structdpp_1_1message_1a85dbf0b4a0b294eac34ec49feb1d4540" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>add_component</name></member>
      <member refid="structdpp_1_1message_1a9ff92caceb655fa1f89710445a24c107" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>add_embed</name></member>
      <member refid="structdpp_1_1message_1aa59a613a4ee0bab7f9a5ea18fe7edea7" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>attachments</name></member>
      <member refid="structdpp_1_1message_1a35c14f04382266b29c4ca076b4e0f9e0" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>author</name></member>
      <member refid="structdpp_1_1message_1afad5f16566640b47321333d5ee5526ca" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>build_json</name></member>
      <member refid="structdpp_1_1message_1adceaf61877eede79f0ebeb14efa74b5e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>channel_id</name></member>
      <member refid="structdpp_1_1message_1ab9cb60fc35159bfa604164c5574a4957" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>components</name></member>
      <member refid="structdpp_1_1message_1acb17877db423d2ac4b103a67e1ae2ff6" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>content</name></member>
      <member refid="structdpp_1_1message_1a94f1f6750ca95e4bb66f069d9b4b3a54" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>edited</name></member>
      <member refid="structdpp_1_1message_1a9c0eb22ba371ead6d960bdf7c9838b6e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>embeds</name></member>
      <member refid="structdpp_1_1message_1a020ceaaad56ff4af60e2325a3cb9fbc7" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>filecontent</name></member>
      <member refid="structdpp_1_1message_1a9f158cde13b3916c9823b18865b24f41" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>filename</name></member>
      <member refid="structdpp_1_1message_1ae28ee933cde939ecd82ee7def78aff69" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1message_1a16fca6ff4595e0fcab2305205eb54626" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>flags</name></member>
      <member refid="structdpp_1_1message_1a5e75f7cd8a7e952e6621c520627d5b84" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>guild_id</name></member>
      <member refid="structdpp_1_1message_1a7c1e0cc707a4168b75945da0d31105a0" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>id</name></member>
      <member refid="structdpp_1_1message_1a03ce860de6231985a823f8ce2dd2dd8d" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_crosspost</name></member>
      <member refid="structdpp_1_1message_1acd532877b68dcd3f1713fd6df9045ed2" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_crossposted</name></member>
      <member refid="structdpp_1_1message_1a6d8e17c0e9066eb044b241355d0a3efb" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_ephemeral</name></member>
      <member refid="structdpp_1_1message_1a25d4b0fbfcc698a74fa4f2b71796e874" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_loading</name></member>
      <member refid="structdpp_1_1message_1a0f22f044046ebc8bdc7d35e950baca25" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_source_message_deleted</name></member>
      <member refid="structdpp_1_1message_1ad164b78c5ee2dc8a8237d1ec7a0d863f" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_urgent</name></member>
      <member refid="structdpp_1_1message_1a646a196b3a61b11abab16261eaa1e8c3" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>member</name></member>
      <member refid="structdpp_1_1message_1ae161a71904462eab6bdd539f4ff32332" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mention_channels</name></member>
      <member refid="structdpp_1_1message_1a499cacfe6a270dca773fc7f91718ac70" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mention_everyone</name></member>
      <member refid="structdpp_1_1message_1a1f9fbfe4171cdc02306dc505583b7ed9" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mention_roles</name></member>
      <member refid="structdpp_1_1message_1a96f97a2ade23d3f58b221f98c60d9950" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mentions</name></member>
      <member refid="structdpp_1_1message_1a717067505cfc5f5dcf05459c216c9756" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a21466e050ee9c0646392ccf5940bb62a" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a0e71afdc706c7ae83934ddfd8c2ffc38" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a45a0883a10a19e933fbba682aba212f6" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1afaaf4f44ce0631c49c15088b033d25e6" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>nonce</name></member>
      <member refid="structdpp_1_1message_1a029932133e0a6aea2afdea5f2d98146e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>pinned</name></member>
      <member refid="structdpp_1_1message_1af6c6ea9f1319adde40d068a2e9b230e7" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>reactions</name></member>
      <member refid="structdpp_1_1message_1a9991c58453a1deb7b785a6b7457372f2" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>sent</name></member>
      <member refid="structdpp_1_1message_1ade17fb77debb971918af8434b0f7477c" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>supress_embeds</name></member>
      <member refid="structdpp_1_1message_1a8f4ab5546606db3ea4bcdb41b60a5dba" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>tts</name></member>
      <member refid="structdpp_1_1message_1a2ed7eaf6f5ff69a94fcb4912c0c795c2" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>type</name></member>
      <member refid="structdpp_1_1message_1ad1033bc27c5c1436c2e321d1be1d65ed" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>webhook_id</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
