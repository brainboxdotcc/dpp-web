<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1exception" kind="class" language="C++" prot="public">
    <compoundname>dpp::exception</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::exception</basecompoundref>
    <derivedcompoundref refid="classdpp_1_1cache__exception" prot="public" virt="non-virtual">dpp::cache_exception</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1connection__exception" prot="public" virt="non-virtual">dpp::connection_exception</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1file__exception" prot="public" virt="non-virtual">dpp::file_exception</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1length__exception" prot="public" virt="non-virtual">dpp::length_exception</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1logic__exception" prot="public" virt="non-virtual">dpp::logic_exception</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1parse__exception" prot="public" virt="non-virtual">dpp::parse_exception</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1rest__exception" prot="public" virt="non-virtual">dpp::rest_exception</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1voice__exception" prot="public" virt="non-virtual">dpp::voice_exception</derivedcompoundref>
    <includes local="no">exception.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1exception_1a95b63eb01e1d8ea5fc8a0d13b1be7167" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1aacfd9dabf035bd86026220ba73d36ba1" kindref="member">exception_error_code</ref></type>
        <definition>exception_error_code dpp::exception::error_code</definition>
        <argsstring></argsstring>
        <name>error_code</name>
        <briefdescription>
<para>Exception error code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="397" column="22" bodyfile="include/dpp/exception.h" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1exception_1ac033c933ff59daf22d4ea121303e11b9" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::exception::msg</definition>
        <argsstring></argsstring>
        <name>msg</name>
        <briefdescription>
<para>Exception message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="392" column="13" bodyfile="include/dpp/exception.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1exception_1a82a21aa6228b4c8e2ead7c45128cd9b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::exception</definition>
        <argsstring>()=default</argsstring>
        <name>exception</name>
        <briefdescription>
<para>Construct a new exception object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1ac2a498ef5a2deb592bd6dee52b4a1881" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::exception</definition>
        <argsstring>(const char *what)</argsstring>
        <name>exception</name>
        <param>
          <type>const char *</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Construct a new exception object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>reason message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="413" column="10" bodyfile="include/dpp/exception.h" bodystart="413" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1a369458d8db837316c84256bfed913426" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::exception</definition>
        <argsstring>(const char *what, size_t len)</argsstring>
        <name>exception</name>
        <param>
          <type>const char *</type>
          <declname>what</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Construct a new exception object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>reason message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of reason message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="429" column="1" bodyfile="include/dpp/exception.h" bodystart="429" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1a1e8f1486c898e2ab6c513c7844221a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::exception</definition>
        <argsstring>(const exception &amp;)=default</argsstring>
        <name>exception</name>
        <param>
          <type>const <ref refid="classdpp_1_1exception" kindref="compound">exception</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Construct a new exception object (copy constructor) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="464" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1aa59a84a3a233186cc130fc9e8ff8a271" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::exception</definition>
        <argsstring>(const std::string &amp;what)</argsstring>
        <name>exception</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Construct a new exception object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>reason message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="436" column="10" bodyfile="include/dpp/exception.h" bodystart="436" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1a269a23dc033395e0266a6c3c41b9ffb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::exception</definition>
        <argsstring>(exception &amp;&amp;)=default</argsstring>
        <name>exception</name>
        <param>
          <type><ref refid="classdpp_1_1exception" kindref="compound">exception</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para>Construct a new exception object (move constructor) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1a7867e60b3fd670c46207882473479f2f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::exception</definition>
        <argsstring>(exception_error_code code, const char *what)</argsstring>
        <name>exception</name>
        <param>
          <type><ref refid="namespacedpp_1aacfd9dabf035bd86026220ba73d36ba1" kindref="member">exception_error_code</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Construct a new exception object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>reason message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="421" column="10" bodyfile="include/dpp/exception.h" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1a911beed4d86b938c782e137acee973ec" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::exception</definition>
        <argsstring>(exception_error_code code, const std::string &amp;what)</argsstring>
        <name>exception</name>
        <param>
          <type><ref refid="namespacedpp_1aacfd9dabf035bd86026220ba73d36ba1" kindref="member">exception_error_code</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Construct a new exception object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>reason message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="444" column="10" bodyfile="include/dpp/exception.h" bodystart="444" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1a4fe759e0ced7d5cbdf9aafdf64b1d80a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::exception</definition>
        <argsstring>(exception_error_code code, std::string &amp;&amp;what)</argsstring>
        <name>exception</name>
        <param>
          <type><ref refid="namespacedpp_1aacfd9dabf035bd86026220ba73d36ba1" kindref="member">exception_error_code</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Construct a new exception object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>reason message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="459" column="10" bodyfile="include/dpp/exception.h" bodystart="459" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1a0365ae0f3b8cfbf193d08b427e79271f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::exception</definition>
        <argsstring>(std::string &amp;&amp;what)</argsstring>
        <name>exception</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>what</declname>
        </param>
        <briefdescription>
<para>Construct a new exception object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para>reason message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="451" column="10" bodyfile="include/dpp/exception.h" bodystart="451" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1afe7dc4002e1d4c812192f5afb4bed1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::exception::~exception</definition>
        <argsstring>() override=default</argsstring>
        <name>~exception</name>
        <briefdescription>
<para>Destroy the exception object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1a33e02b5616dd5e375b38aa7edfa93002" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacedpp_1aacfd9dabf035bd86026220ba73d36ba1" kindref="member">exception_error_code</ref></type>
        <definition>exception_error_code dpp::exception::code</definition>
        <argsstring>() const noexcept</argsstring>
        <name>code</name>
        <briefdescription>
<para>Get exception code. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>exception_error_code error code </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="502" column="23" bodyfile="include/dpp/exception.h" bodystart="502" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1exception_1a010588e4eec074c113ff36c82dde74f9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * dpp::exception::what</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>what</name>
        <briefdescription>
<para>Get exception message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const char* error message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/exception.h" line="495" column="13" bodyfile="include/dpp/exception.h" bodystart="495" bodyend="495"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref> class derives from std::exception and supports some other ways of passing in error details such as via std::string. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::cache_exception</label>
        <link refid="classdpp_1_1cache__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::connection_exception</label>
        <link refid="classdpp_1_1connection__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::exception</label>
        <link refid="classdpp_1_1exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>dpp::file_exception</label>
        <link refid="classdpp_1_1file__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>dpp::invalid_token_exception</label>
        <link refid="classdpp_1_1invalid__token__exception"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>dpp::length_exception</label>
        <link refid="classdpp_1_1length__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>dpp::logic_exception</label>
        <link refid="classdpp_1_1logic__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>dpp::parse_exception</label>
        <link refid="classdpp_1_1parse__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>dpp::rest_exception</label>
        <link refid="classdpp_1_1rest__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>dpp::voice_exception</label>
        <link refid="classdpp_1_1voice__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::exception</label>
        <link refid="classdpp_1_1exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>msg</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>error_code</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>exception_error_code</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>std::exception</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/dpp/exception.h" line="386" column="1" bodyfile="include/dpp/exception.h" bodystart="387" bodyend="504"/>
    <listofallmembers>
      <member refid="classdpp_1_1exception_1a33e02b5616dd5e375b38aa7edfa93002" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>code</name></member>
      <member refid="classdpp_1_1exception_1a95b63eb01e1d8ea5fc8a0d13b1be7167" prot="protected" virt="non-virtual"><scope>dpp::exception</scope><name>error_code</name></member>
      <member refid="classdpp_1_1exception_1a82a21aa6228b4c8e2ead7c45128cd9b7" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>exception</name></member>
      <member refid="classdpp_1_1exception_1ac2a498ef5a2deb592bd6dee52b4a1881" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>exception</name></member>
      <member refid="classdpp_1_1exception_1a7867e60b3fd670c46207882473479f2f" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>exception</name></member>
      <member refid="classdpp_1_1exception_1a369458d8db837316c84256bfed913426" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>exception</name></member>
      <member refid="classdpp_1_1exception_1aa59a84a3a233186cc130fc9e8ff8a271" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>exception</name></member>
      <member refid="classdpp_1_1exception_1a911beed4d86b938c782e137acee973ec" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>exception</name></member>
      <member refid="classdpp_1_1exception_1a0365ae0f3b8cfbf193d08b427e79271f" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>exception</name></member>
      <member refid="classdpp_1_1exception_1a4fe759e0ced7d5cbdf9aafdf64b1d80a" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>exception</name></member>
      <member refid="classdpp_1_1exception_1a1e8f1486c898e2ab6c513c7844221a9f" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>exception</name></member>
      <member refid="classdpp_1_1exception_1a269a23dc033395e0266a6c3c41b9ffb0" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>exception</name></member>
      <member refid="classdpp_1_1exception_1ac033c933ff59daf22d4ea121303e11b9" prot="protected" virt="non-virtual"><scope>dpp::exception</scope><name>msg</name></member>
      <member refid="classdpp_1_1exception_1a010588e4eec074c113ff36c82dde74f9" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>what</name></member>
      <member refid="classdpp_1_1exception_1afe7dc4002e1d4c812192f5afb4bed1d7" prot="public" virt="non-virtual"><scope>dpp::exception</scope><name>~exception</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
