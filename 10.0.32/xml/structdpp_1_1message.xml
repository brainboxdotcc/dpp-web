<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1message" kind="struct" language="C++" prot="public">
    <compoundname>dpp::message</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; message &gt;</basecompoundref>
    <includes local="no">message.h</includes>
    <innerclass refid="structdpp_1_1message_1_1allowed__ref" prot="public">dpp::message::allowed_ref</innerclass>
    <innerclass refid="structdpp_1_1message_1_1message__interaction__struct" prot="public">dpp::message::message_interaction_struct</innerclass>
    <innerclass refid="structdpp_1_1message_1_1message__ref" prot="public">dpp::message::message_ref</innerclass>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdpp_1_1message_1a53ed67dcfeca36062c9474983dd21e86" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; message &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; message &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="structdpp_1_1message" kindref="compound">message</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2028" column="13" bodyfile="include/dpp/message.h" bodystart="2036" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1message_1adceaf61877eede79f0ebeb14efa74b5e" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::message::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>ID of the channel the message was sent in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2057" column="11" bodyfile="include/dpp/message.h" bodystart="2057" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a5e75f7cd8a7e952e6621c520627d5b84" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::message::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>Optional: ID of the guild the message was sent in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2062" column="11" bodyfile="include/dpp/message.h" bodystart="2062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a52a72433af88991ef84af21f0dfeba29" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref></type>
        <definition>user dpp::message::author</definition>
        <argsstring></argsstring>
        <name>author</name>
        <briefdescription>
<para>The author of this message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This is not guaranteed to be a valid user. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2069" column="6" bodyfile="include/dpp/message.h" bodystart="2069" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a550f3dc37e4b55cccc2e78d90fc047fb" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref></type>
        <definition>guild_member dpp::message::member</definition>
        <argsstring></argsstring>
        <name>member</name>
        <briefdescription>
<para>Optional: member properties for this message&apos;s author. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2074" column="14" bodyfile="include/dpp/message.h" bodystart="2074" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1acb17877db423d2ac4b103a67e1ae2ff6" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message::content</definition>
        <argsstring></argsstring>
        <name>content</name>
        <briefdescription>
<para>Contents of the message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2079" column="13" bodyfile="include/dpp/message.h" bodystart="2079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ab9cb60fc35159bfa604164c5574a4957" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref> &gt;</type>
        <definition>std::vector&lt;dpp::component&gt; dpp::message::components</definition>
        <argsstring></argsstring>
        <name>components</name>
        <briefdescription>
<para>Message components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2084" column="13" bodyfile="include/dpp/message.h" bodystart="2084" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a9991c58453a1deb7b785a6b7457372f2" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::message::sent</definition>
        <argsstring></argsstring>
        <name>sent</name>
        <briefdescription>
<para>When this message was sent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2089" column="8" bodyfile="include/dpp/message.h" bodystart="2089" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a94f1f6750ca95e4bb66f069d9b4b3a54" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::message::edited</definition>
        <argsstring></argsstring>
        <name>edited</name>
        <briefdescription>
<para>When this message was edited. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This may be 0 if never edited. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2096" column="8" bodyfile="include/dpp/message.h" bodystart="2096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ae9fd7563e8fcc9f3379f8d642a48945a" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; <ref refid="classdpp_1_1user" kindref="compound">user</ref>, <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;user, guild_member&gt; &gt; dpp::message::mentions</definition>
        <argsstring></argsstring>
        <name>mentions</name>
        <briefdescription>
<para>Users specifically mentioned in the message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2101" column="13" bodyfile="include/dpp/message.h" bodystart="2101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a1f9fbfe4171cdc02306dc505583b7ed9" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::message::mention_roles</definition>
        <argsstring></argsstring>
        <name>mention_roles</name>
        <briefdescription>
<para>Roles specifically mentioned in this message (only IDs currently). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2106" column="13" bodyfile="include/dpp/message.h" bodystart="2106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1adcc2146a8b07c51a68ab314c548efa5b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &gt;</type>
        <definition>std::vector&lt;channel&gt; dpp::message::mention_channels</definition>
        <argsstring></argsstring>
        <name>mention_channels</name>
        <briefdescription>
<para>Channels mentioned in the message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Not all types supported.</para>
</simplesect>
<simplesect kind="note"><para>Discord: Only textual channels that are visible to everyone in a lurkable guild will ever be included. Only crossposted messages (via Channel Following) currently include mention_channels at all. (includes ID, Guild ID, Type, Name). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2116" column="13" bodyfile="include/dpp/message.h" bodystart="2116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1aa59a613a4ee0bab7f9a5ea18fe7edea7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1attachment" kindref="compound">attachment</ref> &gt;</type>
        <definition>std::vector&lt;attachment&gt; dpp::message::attachments</definition>
        <argsstring></argsstring>
        <name>attachments</name>
        <briefdescription>
<para>Any attached files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2121" column="13" bodyfile="include/dpp/message.h" bodystart="2121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a9c0eb22ba371ead6d960bdf7c9838b6e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &gt;</type>
        <definition>std::vector&lt;embed&gt; dpp::message::embeds</definition>
        <argsstring></argsstring>
        <name>embeds</name>
        <briefdescription>
<para>Up to 10 <ref refid="structdpp_1_1embed" kindref="compound">dpp::embed</ref> objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2126" column="13" bodyfile="include/dpp/message.h" bodystart="2126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1af6c6ea9f1319adde40d068a2e9b230e7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1reaction" kindref="compound">reaction</ref> &gt;</type>
        <definition>std::vector&lt;reaction&gt; dpp::message::reactions</definition>
        <argsstring></argsstring>
        <name>reactions</name>
        <briefdescription>
<para>Optional: reactions to the message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2131" column="13" bodyfile="include/dpp/message.h" bodystart="2131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1afaaf4f44ce0631c49c15088b033d25e6" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::message::nonce</definition>
        <argsstring></argsstring>
        <name>nonce</name>
        <briefdescription>
<para>Optional: Used for validating a message was sent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2136" column="13" bodyfile="include/dpp/message.h" bodystart="2136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ad1033bc27c5c1436c2e321d1be1d65ed" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::message::webhook_id</definition>
        <argsstring></argsstring>
        <name>webhook_id</name>
        <briefdescription>
<para>Optional: Webhook ID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the message is generated by a webhook, its ID will be here. Otherwise, the field will be 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2143" column="11" bodyfile="include/dpp/message.h" bodystart="2143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a8ab53932e4cf4fa00d021a5ca3f4b906" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &gt;</type>
        <definition>std::vector&lt;sticker&gt; dpp::message::stickers</definition>
        <argsstring></argsstring>
        <name>stickers</name>
        <briefdescription>
<para>Partial stickers. Only id, name and format_type are filled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2148" column="13" bodyfile="include/dpp/message.h" bodystart="2148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ad43914d349da800a674deb6fc246f05e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1message__file__data" kindref="compound">message_file_data</ref> &gt;</type>
        <definition>std::vector&lt;message_file_data&gt; dpp::message::file_data</definition>
        <argsstring></argsstring>
        <name>file_data</name>
        <briefdescription>
<para>An array of file data to use for uploading files. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>You should use <ref refid="structdpp_1_1message_1ae85400249d50c40d261cb8ad749a7108" kindref="member">dpp::message::add_file</ref> to add data to this! </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2155" column="13" bodyfile="include/dpp/message.h" bodystart="2155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1adc283f0458df6fb0fc966c9f5040c19e" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structdpp_1_1message_1_1message__ref" kindref="compound">dpp::message::message_ref</ref></type>
        <definition>struct dpp::message::message_ref dpp::message::message_reference</definition>
        <argsstring></argsstring>
        <name>message_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2185" column="19"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a3edb689340a48083ac43f050690bd673" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1message__snapshot" kindref="compound">message_snapshot</ref>&lt; <ref refid="structdpp_1_1message" kindref="compound">message</ref> &gt;</type>
        <definition>message_snapshot&lt;message&gt; dpp::message::message_snapshots</definition>
        <argsstring></argsstring>
        <name>message_snapshots</name>
        <briefdescription>
<para>Message snapshots for a forwarded message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2190" column="18" bodyfile="include/dpp/message.h" bodystart="2190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ab61c894afe6b0f7655b3908217878e68" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structdpp_1_1message_1_1message__interaction__struct" kindref="compound">dpp::message::message_interaction_struct</ref></type>
        <definition>struct dpp::message::message_interaction_struct dpp::message::interaction</definition>
        <argsstring></argsstring>
        <name>interaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2215" column="13"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a389f295110a630b2e3f076013b617111" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structdpp_1_1message_1_1allowed__ref" kindref="compound">dpp::message::allowed_ref</ref></type>
        <definition>struct dpp::message::allowed_ref dpp::message::allowed_mentions</definition>
        <argsstring></argsstring>
        <name>allowed_mentions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2250" column="18"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a832bbd66e9a0caeaa003c119c9c91d29" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::message::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
<para>The cluster which created this message object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2255" column="15" bodyfile="include/dpp/message.h" bodystart="2255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ad4aa6594661e1527815364ad5b33b96b" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bc" kindref="member">message_type</ref></type>
        <definition>message_type dpp::message::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>Message type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2260" column="14" bodyfile="include/dpp/message.h" bodystart="2260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1ad2a0d774c691424e802f7f108d7c04c2" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::message::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
<para>Flags made from <ref refid="namespacedpp_1ad0f89d72815d4d483f689baa5cca5107" kindref="member">dpp::message_flags</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2265" column="10" bodyfile="include/dpp/message.h" bodystart="2265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a029932133e0a6aea2afdea5f2d98146e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::message::pinned</definition>
        <argsstring></argsstring>
        <name>pinned</name>
        <briefdescription>
<para>Whether this message is pinned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2270" column="6" bodyfile="include/dpp/message.h" bodystart="2270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a8f4ab5546606db3ea4bcdb41b60a5dba" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::message::tts</definition>
        <argsstring></argsstring>
        <name>tts</name>
        <briefdescription>
<para>Whether this was a TTS message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2275" column="6" bodyfile="include/dpp/message.h" bodystart="2275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a499cacfe6a270dca773fc7f91718ac70" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::message::mention_everyone</definition>
        <argsstring></argsstring>
        <name>mention_everyone</name>
        <briefdescription>
<para>Whether this message mentions everyone. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2280" column="6" bodyfile="include/dpp/message.h" bodystart="2280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1message_1a786fc15343f5ac10c3bcd88c3e5d1d4c" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="structdpp_1_1poll" kindref="compound">poll</ref> &gt;</type>
        <definition>std::optional&lt;poll&gt; dpp::message::attached_poll</definition>
        <argsstring></argsstring>
        <name>attached_poll</name>
        <briefdescription>
<para>Optional poll attached to this message. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2285" column="15" bodyfile="include/dpp/message.h" bodystart="2285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structdpp_1_1message_1ae05eb6c8bf162498c988629c780a82a6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2042" column="16" bodyfile="include/dpp/message.h" bodystart="2042" bodyend="2044"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a1abeeaa362865c95be6f6dbe549b8cb0" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>json dpp::message::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a JSON from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if an ID is to be included in the JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2050" column="13" bodyfile="include/dpp/message.h" bodystart="2050" bodyend="2052"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1message_1a717067505cfc5f5dcf05459c216c9756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>()</argsstring>
        <name>message</name>
        <briefdescription>
<para>Construct a new message object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ab24159b47f496af758358a180d1e7c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(const message &amp;m)=default</argsstring>
        <name>message</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a214e13b1db63fb7304b3314ef651f8bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(message &amp;&amp;m)=default</argsstring>
        <name>message</name>
        <param>
          <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a656487248fe1e16ba79930a2078a964d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(class cluster *o)</argsstring>
        <name>message</name>
        <param>
          <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Construct a new message object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Owning cluster, passed down to various things such as <ref refid="structdpp_1_1attachment" kindref="compound">dpp::attachment</ref>. Owning cluster is optional (can be nullptr) and if nulled, will prevent some functions such as <ref refid="structdpp_1_1attachment_1a2f1e46240f30afbcfc6e51bb49b7ebc1" kindref="member">attachment::download</ref> from functioning (they will throw, if used) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ae19a71fdd0dd03228d7b9fa420911ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(snowflake channel_id, std::string_view content, message_type type=mt_default)</argsstring>
        <name>message</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bc" kindref="member">message_type</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bcac7573c73d464b30ffd2fee74f8618152" kindref="member">mt_default</ref></defval>
        </param>
        <briefdescription>
<para>Construct a new message object with a channel and content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send the message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the message. It will be truncated to the maximum length of 4000 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1aca9a4bc73e7f598f0450967a9cb8570f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(const embed &amp;_embed)</argsstring>
        <name>message</name>
        <param>
          <type>const <ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
          <declname>_embed</declname>
        </param>
        <briefdescription>
<para>Construct a new message object with content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_embed</parametername>
</parameternamelist>
<parameterdescription>
<para>An embed to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a0e71afdc706c7ae83934ddfd8c2ffc38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(snowflake channel_id, const embed &amp;_embed)</argsstring>
        <name>message</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
          <declname>_embed</declname>
        </param>
        <briefdescription>
<para>Construct a new message object with a channel and content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel to send the message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_embed</parametername>
</parameternamelist>
<parameterdescription>
<para>An embed to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a49afcc8b39c7662e2b3bc0213a752853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::message</definition>
        <argsstring>(std::string_view content, message_type type=mt_default)</argsstring>
        <name>message</name>
        <param>
          <type>std::string_view</type>
          <declname>content</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bc" kindref="member">message_type</ref></type>
          <declname>type</declname>
          <defval><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bcac7573c73d464b30ffd2fee74f8618152" kindref="member">mt_default</ref></defval>
        </param>
        <briefdescription>
<para>Construct a new message object with content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the message. It will be truncated to the maximum length of 4000 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to create </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a39c4a350ef0d11be1f167d1be48db615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::message::~message</definition>
        <argsstring>() override=default</argsstring>
        <name>~message</name>
        <briefdescription>
<para>Destroy the message object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1adcedcceded5e47efaa574642827beca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::operator=</definition>
        <argsstring>(const message &amp;m)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Copy a message object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2355" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a1d503169213d056d3dc7700de10b2440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::operator=</definition>
        <argsstring>(message &amp;&amp;m)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Move a message object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to move </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2363" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ad0e05fa5152eab67b35da29e1d7dbc2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_reference</definition>
        <argsstring>(snowflake _message_id, snowflake _guild_id=0, snowflake _channel_id=0, bool fail_if_not_exists=false, message_ref_type type=mrt_default)</argsstring>
        <name>set_reference</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>_message_id</declname>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>_guild_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>_channel_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fail_if_not_exists</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a1c541a98114325f4c6c0f138887a8eac" kindref="member">message_ref_type</ref></type>
          <declname>type</declname>
          <defval>mrt_default</defval>
        </param>
        <briefdescription>
<para>Set the original message reference for replies/crossposts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>message id to reply to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>guild id to reply to (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>channel id to reply to (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fail_if_not_exists</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the message send should fail if these values are invalid (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reference </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2375" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a8f359efd4da1030a66ec5238b495844f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_allowed_mentions</definition>
        <argsstring>(bool _parse_users=false, bool _parse_roles=false, bool _parse_everyone=false, bool _replied_user=false, const std::vector&lt; snowflake &gt; &amp;users={}, const std::vector&lt; snowflake &gt; &amp;roles={})</argsstring>
        <name>set_allowed_mentions</name>
        <param>
          <type>bool</type>
          <declname>_parse_users</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>_parse_roles</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>_parse_everyone</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>_replied_user</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt; &amp;</type>
          <declname>users</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt; &amp;</type>
          <declname>roles</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Set the allowed mentions object for pings on the message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_parse_users</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to parse users in the message content or embeds, default false </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_parse_roles</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to parse roles in the message content or embeds, default false </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_parse_everyone</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not to parse everyone/here in the message content or embeds, default false </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_replied_user</parametername>
</parameternamelist>
<parameterdescription>
<para>if set to true and this is a reply, then ping the user we reply to, default false </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>users</parametername>
</parameternamelist>
<parameterdescription>
<para>list of user ids to allow pings for, default an empty vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roles</parametername>
</parameternamelist>
<parameterdescription>
<para>list of role ids to allow pings for, default an empty vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2388" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a03cd35fe267a9cf6b88656668055c181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::fill_from_json</definition>
        <argsstring>(nlohmann::json *j, cache_policy_t cp)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structdpp_1_1cache__policy__t" kindref="compound">cache_policy_t</ref></type>
          <declname>cp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill this object from json. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON object to fill from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cp</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache policy for user records, whether or not we cache users when a message is received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2398" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ad4d12f89b617144b52da679ee19dd21c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>virtual json dpp::message::to_json</definition>
        <argsstring>(bool with_id, bool is_interaction_response) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_interaction_response</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build JSON from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the ID is to be included in the built JSON </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_interaction_response</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true if this message is intended to be included in an interaction response. This will exclude some fields that are not valid in interactions at this time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON text of the message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2406" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1acd532877b68dcd3f1713fd6df9045ed2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_crossposted</definition>
        <argsstring>() const</argsstring>
        <name>is_crossposted</name>
        <briefdescription>
<para>Returns true if the message was crossposted to other servers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if crossposted </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2413" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a03ce860de6231985a823f8ce2dd2dd8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_crosspost</definition>
        <argsstring>() const</argsstring>
        <name>is_crosspost</name>
        <briefdescription>
<para>Returns true if posted from other servers announcement channel via webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if posted from other server </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2420" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ae6f7c8c7061f1b53da8c43e59d79d040" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::suppress_embeds</definition>
        <argsstring>() const</argsstring>
        <name>suppress_embeds</name>
        <briefdescription>
<para>True if embeds have been removed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if embeds removed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2427" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a045f98f4239c78a95d9b4ee77493971a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::suppress_embeds</definition>
        <argsstring>(bool suppress)</argsstring>
        <name>suppress_embeds</name>
        <param>
          <type>bool</type>
          <declname>suppress</declname>
        </param>
        <briefdescription>
<para>Set whether embeds should be suppressed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>suppress</parametername>
</parameternamelist>
<parameterdescription>
<para>whether embeds should be suppressed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2435" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a0f22f044046ebc8bdc7d35e950baca25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_source_message_deleted</definition>
        <argsstring>() const</argsstring>
        <name>is_source_message_deleted</name>
        <briefdescription>
<para>True if source message was deleted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if source message deleted </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2442" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ad164b78c5ee2dc8a8237d1ec7a0d863f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_urgent</definition>
        <argsstring>() const</argsstring>
        <name>is_urgent</name>
        <briefdescription>
<para>True if urgent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if urgent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2449" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a9b05e57f76d9c2e656d86f45bf8a5230" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::has_thread</definition>
        <argsstring>() const</argsstring>
        <name>has_thread</name>
        <briefdescription>
<para>True if has thread attached. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has thread attached </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2456" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a6d8e17c0e9066eb044b241355d0a3efb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_ephemeral</definition>
        <argsstring>() const</argsstring>
        <name>is_ephemeral</name>
        <briefdescription>
<para>True if ephemeral (visible only to issuer of a slash command) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ephemeral </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2463" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a25d4b0fbfcc698a74fa4f2b71796e874" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_loading</definition>
        <argsstring>() const</argsstring>
        <name>is_loading</name>
        <briefdescription>
<para>True if loading. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if loading </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2470" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ae9536a55dec58329df2dc83ac29c242e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_thread_mention_failed</definition>
        <argsstring>() const</argsstring>
        <name>is_thread_mention_failed</name>
        <briefdescription>
<para>Returns true if this message failed to mention some roles and add their members to the thread. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this message failed to mention some roles and add their members to the thread </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2477" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ae65726dbbd34f0b70c7b63116d7a7c5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::suppress_notifications</definition>
        <argsstring>() const</argsstring>
        <name>suppress_notifications</name>
        <briefdescription>
<para>True if the message will not trigger push and desktop notifications. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if notifications suppressed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2484" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1aa7d2ee420f88841ef69410fc02a2f90f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_voice_message</definition>
        <argsstring>() const</argsstring>
        <name>is_voice_message</name>
        <briefdescription>
<para>True if the message is a voice message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if voice message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2491" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a85dbf0b4a0b294eac34ec49feb1d4540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::add_component</definition>
        <argsstring>(const component &amp;c)</argsstring>
        <name>add_component</name>
        <param>
          <type>const <ref refid="classdpp_1_1component" kindref="compound">component</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Add a component (button) to message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>component to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2499" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a9ff92caceb655fa1f89710445a24c107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::add_embed</definition>
        <argsstring>(const embed &amp;e)</argsstring>
        <name>add_embed</name>
        <param>
          <type>const <ref refid="structdpp_1_1embed" kindref="compound">embed</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Add an embed to message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>embed to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2507" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a9f3f938e687d01c1cd21ce51edf513ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::add_sticker</definition>
        <argsstring>(const sticker &amp;s)</argsstring>
        <name>add_sticker</name>
        <param>
          <type>const <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Add a sticker to this message. </para>
        </briefdescription>
        <detaileddescription>
<para>As of writing this, a message can only contain up to 3 stickers <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>sticker to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2516" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a21943f452317e1b4cc8a324c21fe661b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::add_sticker</definition>
        <argsstring>(const snowflake &amp;id)</argsstring>
        <name>add_sticker</name>
        <param>
          <type>const <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Add a sticker to this message. </para>
        </briefdescription>
        <detaileddescription>
<para>As of writing this, a message can only contain up to 3 stickers <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the sticker to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2525" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a88f3b1fa926f7b2b524f7b58369b10ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_flags</definition>
        <argsstring>(uint16_t f)</argsstring>
        <name>set_flags</name>
        <param>
          <type>uint16_t</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Set the flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>flags to set from <ref refid="namespacedpp_1ad0f89d72815d4d483f689baa5cca5107" kindref="member">dpp::message_flags</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2533" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ada2f9404e7dbb12b3de0a382c3733587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_type</definition>
        <argsstring>(message_type t)</argsstring>
        <name>set_type</name>
        <param>
          <type><ref refid="namespacedpp_1acd7f41dcc93c1cf48514d2b123e4d8bc" kindref="member">message_type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set the message type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>type to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2541" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a3f84137e4c2a4a2a70b9770f94cf7984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_filename</definition>
        <argsstring>(std::string_view fn)</argsstring>
        <name>set_filename</name>
        <param>
          <type>std::string_view</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Set the filename of the last file in list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>filename </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000038"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="structdpp_1_1message_1ae85400249d50c40d261cb8ad749a7108" kindref="member">message::add_file</ref> instead </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2550" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a03eee3a8225a6fa92fa486f683f434c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_file_content</definition>
        <argsstring>(std::string_view fc)</argsstring>
        <name>set_file_content</name>
        <param>
          <type>std::string_view</type>
          <declname>fc</declname>
        </param>
        <briefdescription>
<para>Set the file content of the last file in list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>raw file content </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000039"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="structdpp_1_1message_1ae85400249d50c40d261cb8ad749a7108" kindref="member">message::add_file</ref> instead </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2559" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ae85400249d50c40d261cb8ad749a7108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::add_file</definition>
        <argsstring>(std::string_view filename, std::string_view filecontent, std::string_view filemimetype=&quot;&quot;)</argsstring>
        <name>add_file</name>
        <param>
          <type>std::string_view</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>filecontent</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>filemimetype</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Add a file to the message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>filename </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filecontent</parametername>
</parameternamelist>
<parameterdescription>
<para>raw file content </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filemimetype</parametername>
</parameternamelist>
<parameterdescription>
<para>optional mime type of the file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2569" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a5533af9fbf06198d72b3768d6f266d32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_content</definition>
        <argsstring>(std::string_view c)</argsstring>
        <name>set_content</name>
        <param>
          <type>std::string_view</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Set the message content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>message content. It will be truncated to the maximum length of 4000 UTF-8 characters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2577" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a587f5433b73fb7fbffe4b50ce9dd69f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_channel_id</definition>
        <argsstring>(snowflake _channel_id)</argsstring>
        <name>set_channel_id</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>_channel_id</declname>
        </param>
        <briefdescription>
<para>Set the channel id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>channel id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2585" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1aedfe51cc0ce0cc38a3b8e0dbeb530964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_guild_id</definition>
        <argsstring>(snowflake _guild_id)</argsstring>
        <name>set_guild_id</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>_guild_id</declname>
        </param>
        <briefdescription>
<para>Set the channel id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>channel id </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>message&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2593" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a96b7fd5ad473c2b4213bdbc541de2a0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::is_dm</definition>
        <argsstring>() const</argsstring>
        <name>is_dm</name>
        <briefdescription>
<para>Returns true if the message is from a DM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if message is a DM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2600" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1abf316357d0fb594c6785f753daa182aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::has_remix_attachment</definition>
        <argsstring>() const</argsstring>
        <name>has_remix_attachment</name>
        <briefdescription>
<para>Returns true if message has remixed attachment. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if message has remixed attachment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2607" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1ab1f065195992aad72a8645376aa35104" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::message::get_url</definition>
        <argsstring>() const</argsstring>
        <name>get_url</name>
        <briefdescription>
<para>Returns URL to message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>string of URL to message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2614" column="13"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1aaa845f092b809eee3314f909c07e0046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message &amp; dpp::message::set_poll</definition>
        <argsstring>(const poll &amp;p)</argsstring>
        <name>set_poll</name>
        <param>
          <type>const <ref refid="structdpp_1_1poll" kindref="compound">poll</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Convenience method to set the poll. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>message&amp; Self reference for method chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2621" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a64a6e7767d993f98d3342443d6d61ac4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1poll" kindref="compound">poll</ref> &amp;</type>
        <definition>const poll &amp; dpp::message::get_poll</definition>
        <argsstring>() const</argsstring>
        <name>get_poll</name>
        <briefdescription>
<para>Convenience method to get the poll attached to this message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_optional_access</parametername>
</parameternamelist>
<parameterdescription>
<para>if <ref refid="structdpp_1_1message_1a0132a16c404db3c094df2f2cbbb8bcbc" kindref="member">has_poll()</ref> == false </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const poll&amp; Poll attached to this object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2629" column="13"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1message_1a0132a16c404db3c094df2f2cbbb8bcbc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::message::has_poll</definition>
        <argsstring>() const noexcept</argsstring>
        <name>has_poll</name>
        <briefdescription>
<para>Method to check if the message has a poll. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Whether the message has a poll </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="2636" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
        <definition>message  &amp; dpp::json_interface&lt; message  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; message  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; message  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents messages sent and received on Discord. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::message</label>
        <link refid="structdpp_1_1message"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; message &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; message &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21">
        <label>bool</label>
      </node>
      <node id="28">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="26">
        <label>double</label>
      </node>
      <node id="27">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="28" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="9" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::message</label>
        <link refid="structdpp_1_1message"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>webhook_id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>author</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>content</edgelabel>
          <edgelabel>nonce</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>attachments</edgelabel>
          <edgelabel>components</edgelabel>
          <edgelabel>embeds</edgelabel>
          <edgelabel>file_data</edgelabel>
          <edgelabel>mention_channels</edgelabel>
          <edgelabel>mention_roles</edgelabel>
          <edgelabel>mentions</edgelabel>
          <edgelabel>reactions</edgelabel>
          <edgelabel>stickers</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>edited</edgelabel>
          <edgelabel>sent</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>message_reference</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>message_snapshots</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>interaction</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>allowed_mentions</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>mention_everyone</edgelabel>
          <edgelabel>pinned</edgelabel>
          <edgelabel>tts</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>attached_poll</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>dpp::message::allowed_ref</label>
        <link refid="structdpp_1_1message_1_1allowed__ref"/>
        <childnode refid="21" relation="usage">
          <edgelabel>parse_everyone</edgelabel>
          <edgelabel>parse_roles</edgelabel>
          <edgelabel>parse_users</edgelabel>
          <edgelabel>replied_user</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>roles</edgelabel>
          <edgelabel>users</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>dpp::message::message_interaction_struct</label>
        <link refid="structdpp_1_1message_1_1message__interaction__struct"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>dpp::message::message_ref</label>
        <link refid="structdpp_1_1message_1_1message__ref"/>
        <childnode refid="20" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>fail_if_not_exists</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="4" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>event_router_t&lt;</label>
      </node>
      <node id="16">
        <label>dpp::json_interface&lt; guild_member &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; guild_member &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; message &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; message &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>message_ref_type</label>
      </node>
      <node id="22">
        <label>message_snapshot&lt;</label>
      </node>
      <node id="32">
        <label>message_type</label>
      </node>
      <node id="10">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="30">
        <label>condition_variable</label>
      </node>
      <node id="33">
        <label>optional&lt;</label>
      </node>
      <node id="9">
        <label>std::string</label>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>vector&lt;</label>
      </node>
      <node id="18">
        <label>time_t</label>
      </node>
      <node id="13">
        <label>uint16_t</label>
      </node>
      <node id="12">
        <label>uint32_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="14">
        <label>uint8_t</label>
      </node>
      <node id="29">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/message.h" line="2034" column="1" bodyfile="include/dpp/message.h" bodystart="2034" bodyend="2637"/>
    <listofallmembers>
      <member refid="structdpp_1_1message_1a85dbf0b4a0b294eac34ec49feb1d4540" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>add_component</name></member>
      <member refid="structdpp_1_1message_1a9ff92caceb655fa1f89710445a24c107" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>add_embed</name></member>
      <member refid="structdpp_1_1message_1ae85400249d50c40d261cb8ad749a7108" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>add_file</name></member>
      <member refid="structdpp_1_1message_1a9f3f938e687d01c1cd21ce51edf513ce" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>add_sticker</name></member>
      <member refid="structdpp_1_1message_1a21943f452317e1b4cc8a324c21fe661b" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>add_sticker</name></member>
      <member refid="structdpp_1_1message_1a389f295110a630b2e3f076013b617111" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>allowed_mentions</name></member>
      <member refid="structdpp_1_1message_1a786fc15343f5ac10c3bcd88c3e5d1d4c" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>attached_poll</name></member>
      <member refid="structdpp_1_1message_1aa59a613a4ee0bab7f9a5ea18fe7edea7" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>attachments</name></member>
      <member refid="structdpp_1_1message_1a52a72433af88991ef84af21f0dfeba29" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>author</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>build_json</name></member>
      <member refid="structdpp_1_1message_1adceaf61877eede79f0ebeb14efa74b5e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>channel_id</name></member>
      <member refid="structdpp_1_1message_1ab9cb60fc35159bfa604164c5574a4957" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>components</name></member>
      <member refid="structdpp_1_1message_1acb17877db423d2ac4b103a67e1ae2ff6" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>content</name></member>
      <member refid="structdpp_1_1message_1a94f1f6750ca95e4bb66f069d9b4b3a54" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>edited</name></member>
      <member refid="structdpp_1_1message_1a9c0eb22ba371ead6d960bdf7c9838b6e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>embeds</name></member>
      <member refid="structdpp_1_1message_1ad43914d349da800a674deb6fc246f05e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>file_data</name></member>
      <member refid="structdpp_1_1message_1a03cd35fe267a9cf6b88656668055c181" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual" ambiguityscope="json_interface&lt; message &gt;::"><scope>dpp::message</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1message_1ae05eb6c8bf162498c988629c780a82a6" prot="protected" virt="non-virtual"><scope>dpp::message</scope><name>fill_from_json_impl</name></member>
      <member refid="structdpp_1_1message_1ad2a0d774c691424e802f7f108d7c04c2" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>flags</name></member>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>get_creation_time</name></member>
      <member refid="structdpp_1_1message_1a64a6e7767d993f98d3342443d6d61ac4" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>get_poll</name></member>
      <member refid="structdpp_1_1message_1ab1f065195992aad72a8645376aa35104" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>get_url</name></member>
      <member refid="structdpp_1_1message_1a5e75f7cd8a7e952e6621c520627d5b84" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>guild_id</name></member>
      <member refid="structdpp_1_1message_1a0132a16c404db3c094df2f2cbbb8bcbc" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>has_poll</name></member>
      <member refid="structdpp_1_1message_1abf316357d0fb594c6785f753daa182aa" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>has_remix_attachment</name></member>
      <member refid="structdpp_1_1message_1a9b05e57f76d9c2e656d86f45bf8a5230" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>has_thread</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>id</name></member>
      <member refid="structdpp_1_1message_1ab61c894afe6b0f7655b3908217878e68" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>interaction</name></member>
      <member refid="structdpp_1_1message_1a03ce860de6231985a823f8ce2dd2dd8d" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_crosspost</name></member>
      <member refid="structdpp_1_1message_1acd532877b68dcd3f1713fd6df9045ed2" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_crossposted</name></member>
      <member refid="structdpp_1_1message_1a96b7fd5ad473c2b4213bdbc541de2a0e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_dm</name></member>
      <member refid="structdpp_1_1message_1a6d8e17c0e9066eb044b241355d0a3efb" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_ephemeral</name></member>
      <member refid="structdpp_1_1message_1a25d4b0fbfcc698a74fa4f2b71796e874" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_loading</name></member>
      <member refid="structdpp_1_1message_1a0f22f044046ebc8bdc7d35e950baca25" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_source_message_deleted</name></member>
      <member refid="structdpp_1_1message_1ae9536a55dec58329df2dc83ac29c242e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_thread_mention_failed</name></member>
      <member refid="structdpp_1_1message_1ad164b78c5ee2dc8a8237d1ec7a0d863f" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_urgent</name></member>
      <member refid="structdpp_1_1message_1aa7d2ee420f88841ef69410fc02a2f90f" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>is_voice_message</name></member>
      <member refid="structdpp_1_1message_1a53ed67dcfeca36062c9474983dd21e86" prot="protected" virt="non-virtual"><scope>dpp::message</scope><name>json_interface&lt; message &gt;</name></member>
      <member refid="classdpp_1_1managed_1a49ce0d7fdbeab770ec46be27771c2285" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1aa3ee436836ab0e2bf4f842c2c2bc3b52" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a198b514f7e6a2b26734fd2dad85f481d" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1ac7a876ad1764b89f0568a1f1bc6bf640" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>managed</name></member>
      <member refid="structdpp_1_1message_1a550f3dc37e4b55cccc2e78d90fc047fb" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>member</name></member>
      <member refid="structdpp_1_1message_1adcc2146a8b07c51a68ab314c548efa5b" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mention_channels</name></member>
      <member refid="structdpp_1_1message_1a499cacfe6a270dca773fc7f91718ac70" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mention_everyone</name></member>
      <member refid="structdpp_1_1message_1a1f9fbfe4171cdc02306dc505583b7ed9" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mention_roles</name></member>
      <member refid="structdpp_1_1message_1ae9fd7563e8fcc9f3379f8d642a48945a" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>mentions</name></member>
      <member refid="structdpp_1_1message_1a717067505cfc5f5dcf05459c216c9756" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1ab24159b47f496af758358a180d1e7c81" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a214e13b1db63fb7304b3314ef651f8bc" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a656487248fe1e16ba79930a2078a964d" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1ae19a71fdd0dd03228d7b9fa420911ee9" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1aca9a4bc73e7f598f0450967a9cb8570f" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a0e71afdc706c7ae83934ddfd8c2ffc38" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1a49afcc8b39c7662e2b3bc0213a752853" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message</name></member>
      <member refid="structdpp_1_1message_1adc283f0458df6fb0fc966c9f5040c19e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message_reference</name></member>
      <member refid="structdpp_1_1message_1a3edb689340a48083ac43f050690bd673" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>message_snapshots</name></member>
      <member refid="structdpp_1_1message_1afaaf4f44ce0631c49c15088b033d25e6" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>nonce</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>operator!=</name></member>
      <member refid="structdpp_1_1message_1adcedcceded5e47efaa574642827beca7" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>operator=</name></member>
      <member refid="structdpp_1_1message_1a1d503169213d056d3dc7700de10b2440" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a48b542729f1352f93f1c60950986517f" prot="public" virt="non-virtual" ambiguityscope="dpp::managed::"><scope>dpp::message</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a4a4be34febb174eaee3c0964d0bf1e21" prot="public" virt="non-virtual" ambiguityscope="dpp::managed::"><scope>dpp::message</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>operator==</name></member>
      <member refid="structdpp_1_1message_1a832bbd66e9a0caeaa003c119c9c91d29" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>owner</name></member>
      <member refid="structdpp_1_1message_1a029932133e0a6aea2afdea5f2d98146e" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>pinned</name></member>
      <member refid="structdpp_1_1message_1af6c6ea9f1319adde40d068a2e9b230e7" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>reactions</name></member>
      <member refid="structdpp_1_1message_1a9991c58453a1deb7b785a6b7457372f2" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>sent</name></member>
      <member refid="structdpp_1_1message_1a8f359efd4da1030a66ec5238b495844f" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_allowed_mentions</name></member>
      <member refid="structdpp_1_1message_1a587f5433b73fb7fbffe4b50ce9dd69f8" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_channel_id</name></member>
      <member refid="structdpp_1_1message_1a5533af9fbf06198d72b3768d6f266d32" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_content</name></member>
      <member refid="structdpp_1_1message_1a03eee3a8225a6fa92fa486f683f434c6" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_file_content</name></member>
      <member refid="structdpp_1_1message_1a3f84137e4c2a4a2a70b9770f94cf7984" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_filename</name></member>
      <member refid="structdpp_1_1message_1a88f3b1fa926f7b2b524f7b58369b10ad" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_flags</name></member>
      <member refid="structdpp_1_1message_1aedfe51cc0ce0cc38a3b8e0dbeb530964" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_guild_id</name></member>
      <member refid="structdpp_1_1message_1aaa845f092b809eee3314f909c07e0046" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_poll</name></member>
      <member refid="structdpp_1_1message_1ad0e05fa5152eab67b35da29e1d7dbc2c" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_reference</name></member>
      <member refid="structdpp_1_1message_1ada2f9404e7dbb12b3de0a382c3733587" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>set_type</name></member>
      <member refid="structdpp_1_1message_1a8ab53932e4cf4fa00d021a5ca3f4b906" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>stickers</name></member>
      <member refid="structdpp_1_1message_1ae6f7c8c7061f1b53da8c43e59d79d040" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>suppress_embeds</name></member>
      <member refid="structdpp_1_1message_1a045f98f4239c78a95d9b4ee77493971a" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>suppress_embeds</name></member>
      <member refid="structdpp_1_1message_1ae65726dbbd34f0b70c7b63116d7a7c5c" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>suppress_notifications</name></member>
      <member refid="structdpp_1_1message_1ad4d12f89b617144b52da679ee19dd21c" prot="public" virt="virtual"><scope>dpp::message</scope><name>to_json</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual" ambiguityscope="json_interface&lt; message &gt;::"><scope>dpp::message</scope><name>to_json</name></member>
      <member refid="structdpp_1_1message_1a1abeeaa362865c95be6f6dbe549b8cb0" prot="protected" virt="non-virtual"><scope>dpp::message</scope><name>to_json_impl</name></member>
      <member refid="structdpp_1_1message_1a8f4ab5546606db3ea4bcdb41b60a5dba" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>tts</name></member>
      <member refid="structdpp_1_1message_1ad4aa6594661e1527815364ad5b33b96b" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>type</name></member>
      <member refid="structdpp_1_1message_1ad1033bc27c5c1436c2e321d1be1d65ed" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>webhook_id</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::message</scope><name>~managed</name></member>
      <member refid="structdpp_1_1message_1a39c4a350ef0d11be1f167d1be48db615" prot="public" virt="non-virtual"><scope>dpp::message</scope><name>~message</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
