<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1utility_1_1image__data" kind="struct" language="C++" prot="public">
    <compoundname>dpp::utility::image_data</compoundname>
    <includes local="no">utility.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1utility_1_1image__data_1a2a54dca08985afe1b55f427088743967" prot="public" static="no" mutable="no">
        <type>std::unique_ptr&lt; std::byte[]&gt;</type>
        <definition>std::unique_ptr&lt;std::byte[]&gt; dpp::utility::image_data::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Data in bytes of the image. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="337" column="17" bodyfile="include/dpp/utility.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1utility_1_1image__data_1a4afddcbd5d64a3609e61dd785d8cb966" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::utility::image_data::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Size of the data in bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="342" column="10" bodyfile="include/dpp/utility.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1utility_1_1image__data_1ac25e6404e258da6dd583ab8e71b2649b" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref></type>
        <definition>image_type dpp::utility::image_data::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Type of the image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="349" column="12" bodyfile="include/dpp/utility.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1af36acc26e03aeff56f2457b5e4c6c533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::utility::image_data::image_data</definition>
        <argsstring>()=default</argsstring>
        <name>image_data</name>
        <briefdescription>
<para>Construct an empty image. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1acaf93081cc297f4d444984305835e0fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::utility::image_data::image_data</definition>
        <argsstring>(const image_data &amp;rhs)</argsstring>
        <name>image_data</name>
        <param>
          <type>const <ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy an image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Image to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1a5408a57935375b69d892ac8a0b1c2532" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dpp::utility::image_data::image_data</definition>
        <argsstring>(image_data &amp;&amp;rhs) noexcept=default</argsstring>
        <name>image_data</name>
        <param>
          <type><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move an image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Image to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1a0243a42b5b79106823565a4f9a054ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::utility::image_data::image_data</definition>
        <argsstring>(image_type format, const std::byte *bytes, uint32_t byte_size)</argsstring>
        <name>image_data</name>
        <param>
          <type><ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>const std::byte *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byte_size</declname>
        </param>
        <briefdescription>
<para>Construct from byte buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of the image </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Image size in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1a414b2210afd26eb519e0a164da3edfd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::utility::image_data::image_data</definition>
        <argsstring>(image_type format, std::string_view bytes)</argsstring>
        <name>image_data</name>
        <param>
          <type><ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Construct from string buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data in a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1a564d0dbfd98bbf88bdd8b4f2c4e57066" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::utility::image_data::base64_encode</definition>
        <argsstring>() const</argsstring>
        <name>base64_encode</name>
        <briefdescription>
<para>Encode to base64. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string New string with the image data encoded in base64 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="427" column="13"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1af0508cbe6e52c30ac0e98a95d9c1f7b6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::utility::image_data::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Check if this is an empty image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Whether the image is empty or not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="450" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1a9f6645ae333bc75200a3f39f57ea2838" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::utility::image_data::get_file_extension</definition>
        <argsstring>() const</argsstring>
        <name>get_file_extension</name>
        <briefdescription>
<para>Get the file extension. </para>
        </briefdescription>
        <detaileddescription>
<para>Alias for <ref refid="namespacedpp_1_1utility_1ada68aa2fde414885eec777031c5cf768" kindref="member">file_extension</ref> <simplesect kind="return"><para>std::string File extension e.g. <computeroutput>.png</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="435" column="13"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1a829d0a147be49ba213f44e9a63451334" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::utility::image_data::get_mime_type</definition>
        <argsstring>() const</argsstring>
        <name>get_mime_type</name>
        <briefdescription>
<para>Get the mime type. </para>
        </briefdescription>
        <detaileddescription>
<para>Alias for <ref refid="namespacedpp_1_1utility_1a3c2eaf5d14e3c80965b990119dd6c624" kindref="member">mime_type</ref> <simplesect kind="return"><para>std::string File mime type e.g. &quot;image/png&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="443" column="13"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1ab7544650ecbcb2605db851e99e2023d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;</type>
        <definition>image_data &amp; dpp::utility::image_data::operator=</definition>
        <argsstring>(const image_data &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy an image data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Image to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="395" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1a727aee9988c9115c1f4f087bba1f19c1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;</type>
        <definition>image_data &amp; dpp::utility::image_data::operator=</definition>
        <argsstring>(image_data &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structdpp_1_1utility_1_1image__data" kindref="compound">image_data</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move an image data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Image to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="403" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1ab046e715240cd12e353906a4dba3d2b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::utility::image_data::set</definition>
        <argsstring>(image_type format, const std::byte *bytes, uint32_t byte_size)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>const std::byte *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>byte_size</declname>
        </param>
        <briefdescription>
<para>Set image data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format of the image </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of the image </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Image size in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="420" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1a2e0c835cc8260562034b7f7f6a61af8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::utility::image_data::set</definition>
        <argsstring>(image_type format, std::string_view bytes)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="namespacedpp_1ab4fba082389f572d696d97404a2bcb31" kindref="member">image_type</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Set image data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Image format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data of the image </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="411" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1utility_1_1image__data_1a15fbf501af2d15710dedd36f9d8947c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>json dpp::utility::image_data::to_nullable_json</definition>
        <argsstring>() const</argsstring>
        <name>to_nullable_json</name>
        <briefdescription>
<para>Build a data URI scheme suitable for sending to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/reference#image-data">https://discord.com/developers/docs/reference#image-data</ulink> </para>
</simplesect>
<simplesect kind="return"><para>The data URI scheme as a json or null if empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="458" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Image to be received or sent to API calls. </para>
    </briefdescription>
    <detaileddescription>
<para>This class is carefully crafted to be 16 bytes, this is why we use a ptr + 4 byte size instead of a vector. We want this class to be substitutable with iconhash in data structures. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::utility::image_data</label>
        <link refid="structdpp_1_1utility_1_1image__data"/>
        <childnode refid="2" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>size</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>image_type</label>
      </node>
      <node id="2">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="3">
        <label>uint32_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/utility.h" line="333" column="1" bodyfile="include/dpp/utility.h" bodystart="333" bodyend="459"/>
    <listofallmembers>
      <member refid="structdpp_1_1utility_1_1image__data_1a564d0dbfd98bbf88bdd8b4f2c4e57066" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>base64_encode</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1a2a54dca08985afe1b55f427088743967" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>data</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1af0508cbe6e52c30ac0e98a95d9c1f7b6" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>empty</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1a9f6645ae333bc75200a3f39f57ea2838" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>get_file_extension</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1a829d0a147be49ba213f44e9a63451334" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>get_mime_type</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1af36acc26e03aeff56f2457b5e4c6c533" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>image_data</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1acaf93081cc297f4d444984305835e0fd" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>image_data</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1a5408a57935375b69d892ac8a0b1c2532" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>image_data</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1a414b2210afd26eb519e0a164da3edfd0" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>image_data</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1a0243a42b5b79106823565a4f9a054ed4" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>image_data</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1ab7544650ecbcb2605db851e99e2023d1" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>operator=</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1a727aee9988c9115c1f4f087bba1f19c1" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>operator=</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1a2e0c835cc8260562034b7f7f6a61af8b" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>set</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1ab046e715240cd12e353906a4dba3d2b1" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>set</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1a4afddcbd5d64a3609e61dd785d8cb966" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>size</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1a15fbf501af2d15710dedd36f9d8947c4" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>to_nullable_json</name></member>
      <member refid="structdpp_1_1utility_1_1image__data_1ac25e6404e258da6dd583ab8e71b2649b" prot="public" virt="non-virtual"><scope>dpp::utility::image_data</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
