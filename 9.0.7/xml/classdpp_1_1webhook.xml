<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1webhook" kind="class" language="C++" prot="public">
    <compoundname>dpp::webhook</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">webhook.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1webhook_1a2b988a9005bc38b8eebd99dabdf1ecbe" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::webhook::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>the type of the webhook </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="41" column="9" bodyfile="include/dpp/webhook.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1webhook_1aeb4a3c383260167ef6a05fe2e31f2e75" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::webhook::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>Optional: the guild id this webhook is for. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="42" column="11" bodyfile="include/dpp/webhook.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1webhook_1ae553e70e26e0062648d0280aa74eaed0" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::webhook::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>the channel id this webhook is for </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="43" column="11" bodyfile="include/dpp/webhook.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1webhook_1ad83876476eeaec943e4abf3411dfb840" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::webhook::user_id</definition>
        <argsstring></argsstring>
        <name>user_id</name>
        <briefdescription>
<para>Optional: the user this webhook was created by (not returned when getting a webhook with its token) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="44" column="11" bodyfile="include/dpp/webhook.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1webhook_1af982ac0a68dd3f81fcb267a713d338f3" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::webhook::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>the default name of the webhook (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="45" column="13" bodyfile="include/dpp/webhook.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1webhook_1a905a15aff7538542766b7f57a9dd7110" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::webhook::avatar</definition>
        <argsstring></argsstring>
        <name>avatar</name>
        <briefdescription>
<para>the default avatar of the webhook (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="46" column="13" bodyfile="include/dpp/webhook.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1webhook_1a1500f11e74b9a859f0cd0c4cf9d135b0" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::webhook::token</definition>
        <argsstring></argsstring>
        <name>token</name>
        <briefdescription>
<para>Optional: the secure token of the webhook (returned for Incoming Webhooks) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="47" column="13" bodyfile="include/dpp/webhook.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1webhook_1af37345950a45e0b0b15b345625f26c85" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::webhook::application_id</definition>
        <argsstring></argsstring>
        <name>application_id</name>
        <briefdescription>
<para>the bot/OAuth2 application that created this webhook (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="48" column="11" bodyfile="include/dpp/webhook.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1webhook_1ade12623a3521f4d7d68f11c26ab79a5b" prot="public" static="no" mutable="no">
        <type>std::string *</type>
        <definition>std::string* dpp::webhook::image_data</definition>
        <argsstring></argsstring>
        <name>image_data</name>
        <briefdescription>
<para>base64 encoded image data if uploading a new image </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="49" column="13" bodyfile="include/dpp/webhook.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unique ID of object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discord.h" line="44" column="11" bodyfile="include/dpp/discord.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1webhook_1a7144cd4b090eaa5a22687230cf2d6bd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::webhook::webhook</definition>
        <argsstring>()</argsstring>
        <name>webhook</name>
        <briefdescription>
<para>Construct a new webhook object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="54" column="1" bodyfile="src/dpp/webhook.cpp" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1webhook_1aa5f6e90d2be315fd438b827e25447a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::webhook::~webhook</definition>
        <argsstring>()</argsstring>
        <name>~webhook</name>
        <briefdescription>
<para>Destroy the webhook object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="59" column="1" bodyfile="src/dpp/webhook.cpp" bodystart="35" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1webhook_1a4f1b04636a0847a3de8e0513d203f1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
        <definition>webhook &amp; dpp::webhook::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill in object from json data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="67" column="9" bodyfile="src/dpp/webhook.cpp" bodystart="41" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1webhook_1a4469bc7456617e0697feaa9a407a7be7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::webhook::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build JSON string from object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Include the ID of the webhook in the json </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string JSON encoded object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="75" column="13" bodyfile="src/dpp/webhook.cpp" bodystart="58" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1webhook_1a1ce7edac375941837b9f2e8279ea7443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
        <definition>webhook &amp; dpp::webhook::load_image</definition>
        <argsstring>(const std::string &amp;image_blob, const image_type type)</argsstring>
        <name>load_image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>image_blob</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Base64 encode image data and allocate it to image_data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>Binary image data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Image type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>webhook&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/webhook.h" line="84" column="9" bodyfile="src/dpp/webhook.cpp" bodystart="78" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a discord webhook. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::webhook</label>
        <link refid="classdpp_1_1webhook"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::webhook</label>
        <link refid="classdpp_1_1webhook"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>application_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>image_data</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
      <node id="4">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/webhook.h" line="39" column="1" bodyfile="include/dpp/webhook.h" bodystart="39" bodyend="85"/>
    <listofallmembers>
      <member refid="classdpp_1_1webhook_1af37345950a45e0b0b15b345625f26c85" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>application_id</name></member>
      <member refid="classdpp_1_1webhook_1a905a15aff7538542766b7f57a9dd7110" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>avatar</name></member>
      <member refid="classdpp_1_1webhook_1a4469bc7456617e0697feaa9a407a7be7" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>build_json</name></member>
      <member refid="classdpp_1_1webhook_1ae553e70e26e0062648d0280aa74eaed0" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>channel_id</name></member>
      <member refid="classdpp_1_1webhook_1a4f1b04636a0847a3de8e0513d203f1f8" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1webhook_1aeb4a3c383260167ef6a05fe2e31f2e75" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>id</name></member>
      <member refid="classdpp_1_1webhook_1ade12623a3521f4d7d68f11c26ab79a5b" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>image_data</name></member>
      <member refid="classdpp_1_1webhook_1a1ce7edac375941837b9f2e8279ea7443" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>load_image</name></member>
      <member refid="classdpp_1_1managed_1a3e2b7d69e7313d84aff23cadf9ba9a6a" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>managed</name></member>
      <member refid="classdpp_1_1webhook_1af982ac0a68dd3f81fcb267a713d338f3" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>name</name></member>
      <member refid="classdpp_1_1webhook_1a1500f11e74b9a859f0cd0c4cf9d135b0" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>token</name></member>
      <member refid="classdpp_1_1webhook_1a2b988a9005bc38b8eebd99dabdf1ecbe" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>type</name></member>
      <member refid="classdpp_1_1webhook_1ad83876476eeaec943e4abf3411dfb840" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>user_id</name></member>
      <member refid="classdpp_1_1webhook_1a7144cd4b090eaa5a22687230cf2d6bd3" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>webhook</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::webhook</scope><name>~managed</name></member>
      <member refid="classdpp_1_1webhook_1aa5f6e90d2be315fd438b827e25447a36" prot="public" virt="non-virtual"><scope>dpp::webhook</scope><name>~webhook</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
