<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1request__queue" kind="class" language="C++" prot="public">
    <compoundname>dpp::request_queue</compoundname>
    <includes local="no">queues.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1request__queue_1afc5bd2c27798f38630d996d1666dbbca" prot="private" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::request_queue::creator</definition>
        <argsstring></argsstring>
        <name>creator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The cluster that owns this <ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="228" column="15" bodyfile="include/dpp/queues.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1aca09e205a264d822cc94c01b9dc057fc" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex dpp::request_queue::in_mutex</definition>
        <argsstring></argsstring>
        <name>in_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mutexes for thread safety </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="230" column="12" bodyfile="include/dpp/queues.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a752d76a042faea10a5cc080787e5d89f" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex dpp::request_queue::out_mutex</definition>
        <argsstring></argsstring>
        <name>out_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="231" column="12" bodyfile="include/dpp/queues.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1aec6d4566eb6b683a13a87612b01fa6a3" prot="private" static="no" mutable="no">
        <type>std::thread *</type>
        <definition>std::thread* dpp::request_queue::in_thread</definition>
        <argsstring></argsstring>
        <name>in_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>In and out threads </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="233" column="13" bodyfile="include/dpp/queues.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a28bdbc2d87929deda263ce8bfc0c1231" prot="private" static="no" mutable="no">
        <type>std::thread *</type>
        <definition>std::thread* dpp::request_queue::out_thread</definition>
        <argsstring></argsstring>
        <name>out_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="234" column="13" bodyfile="include/dpp/queues.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1adb1de27950315b417ca5369442982474" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="structdpp_1_1bucket__t" kindref="compound">bucket_t</ref> &gt;</type>
        <definition>std::map&lt;std::string, bucket_t&gt; dpp::request_queue::buckets</definition>
        <argsstring></argsstring>
        <name>buckets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ratelimit bucket counters </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="236" column="10" bodyfile="include/dpp/queues.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1af96e872986a6844f4735b0c2da1e43b1" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::vector&lt; <ref refid="classdpp_1_1http__request" kindref="compound">http_request</ref> * &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::vector&lt;http_request*&gt; &gt; dpp::request_queue::requests_in</definition>
        <argsstring></argsstring>
        <name>requests_in</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Queue of requests to be made </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="238" column="10" bodyfile="include/dpp/queues.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1ade3ecfd45592dfcea06e6e9de9b70583" prot="private" static="no" mutable="no">
        <type>std::queue&lt; std::pair&lt; <ref refid="structdpp_1_1http__request__completion__t" kindref="compound">http_request_completion_t</ref> *, <ref refid="classdpp_1_1http__request" kindref="compound">http_request</ref> * &gt; &gt;</type>
        <definition>std::queue&lt;std::pair&lt;http_request_completion_t*, http_request*&gt; &gt; dpp::request_queue::responses_out</definition>
        <argsstring></argsstring>
        <name>responses_out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Completed requests queue </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="240" column="12" bodyfile="include/dpp/queues.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a9f22c2c802a90fddf160d13ffd0020e9" prot="private" static="no" mutable="no">
        <type>std::multimap&lt; time_t, std::pair&lt; <ref refid="structdpp_1_1http__request__completion__t" kindref="compound">http_request_completion_t</ref> *, <ref refid="classdpp_1_1http__request" kindref="compound">http_request</ref> * &gt; &gt;</type>
        <definition>std::multimap&lt;time_t, std::pair&lt;http_request_completion_t*, http_request*&gt; &gt; dpp::request_queue::responses_to_delete</definition>
        <argsstring></argsstring>
        <name>responses_to_delete</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Completed requests to delete </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="242" column="15" bodyfile="include/dpp/queues.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a7fd6a3d04141f1d227d1253fa414b1fd" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::request_queue::terminating</definition>
        <argsstring></argsstring>
        <name>terminating</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set to true if the threads should terminate </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="245" column="6" bodyfile="include/dpp/queues.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a72a95ae8742f8d76d69ffbf63993b383" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::request_queue::globally_ratelimited</definition>
        <argsstring></argsstring>
        <name>globally_ratelimited</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if globally rate limited - makes the entire request thread wait </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="247" column="6" bodyfile="include/dpp/queues.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a4570a2b18fe55011495f956f807db8ef" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::request_queue::globally_limited_for</definition>
        <argsstring></argsstring>
        <name>globally_limited_for</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>How many seconds we are globally rate limited for, if globally_ratelimited is true </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="249" column="10" bodyfile="include/dpp/queues.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a9601f19768f92156e38dff4b4b8065da" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int dpp::request_queue::in_queue_port</definition>
        <argsstring></argsstring>
        <name>in_queue_port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ports for notifications of request completion. Why are we using sockets here instead of std::condition_variable? Because in the future we will want to notify across clusters of completion and state, and we can&apos;t do this across processes with condition variables. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="256" column="5" bodyfile="include/dpp/queues.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a071327479b81c2c5f98c2c2bf1e3125f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int dpp::request_queue::out_queue_port</definition>
        <argsstring></argsstring>
        <name>out_queue_port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="257" column="5" bodyfile="include/dpp/queues.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a9cf9232a8e61e10a9d940ec9fe7b38f1" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int dpp::request_queue::in_queue_listen_sock</definition>
        <argsstring></argsstring>
        <name>in_queue_listen_sock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="258" column="5" bodyfile="include/dpp/queues.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a854d6f1a7d9575c123b3ce10e32f6682" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int dpp::request_queue::in_queue_connect_sock</definition>
        <argsstring></argsstring>
        <name>in_queue_connect_sock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="259" column="5" bodyfile="include/dpp/queues.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a1343856c133b25cbaee1d99897ef5fff" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int dpp::request_queue::out_queue_listen_sock</definition>
        <argsstring></argsstring>
        <name>out_queue_listen_sock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="260" column="5" bodyfile="include/dpp/queues.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1request__queue_1a2af0796c0022f49f228a1376cc2422c8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int dpp::request_queue::out_queue_connect_sock</definition>
        <argsstring></argsstring>
        <name>out_queue_connect_sock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="261" column="5" bodyfile="include/dpp/queues.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1request__queue_1a88f8d5a05b3f235c07ccccd8bef10a2c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::request_queue::in_loop</definition>
        <argsstring>()</argsstring>
        <name>in_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread loop functions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="264" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1request__queue_1a63acf79e2ab7a915f3ba59f1bdebe758" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::request_queue::out_loop</definition>
        <argsstring>()</argsstring>
        <name>out_loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="265" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1request__queue_1ac90e4a0fab29368c3eb416447b58ab23" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::request_queue::emit_in_queue_signal</definition>
        <argsstring>()</argsstring>
        <name>emit_in_queue_signal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notify request thread of a new request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="268" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1request__queue_1ab1010e814b9888a7bce5b4b3966aed77" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::request_queue::emit_out_queue_signal</definition>
        <argsstring>()</argsstring>
        <name>emit_out_queue_signal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notify completion thread of new completed request </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="271" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1request__queue_1ad2fd85ef74eb9f7cc91897ba2d3f6957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::request_queue::request_queue</definition>
        <argsstring>(class cluster *owner)</argsstring>
        <name>request_queue</name>
        <param>
          <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>The creating cluster </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1request__queue_1a5ccaae72d03d626852be0a0d3c6b86dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::request_queue::~request_queue</definition>
        <argsstring>()</argsstring>
        <name>~request_queue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1request__queue_1a59e2169cb34083a6de526d4eafb99fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::request_queue::post_request</definition>
        <argsstring>(http_request *req)</argsstring>
        <name>post_request</name>
        <param>
          <type><ref refid="classdpp_1_1http__request" kindref="compound">http_request</ref> *</type>
          <declname>req</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Put a <ref refid="classdpp_1_1http__request" kindref="compound">http_request</ref> into the request queue. You should ALWAYS &quot;new&quot; an object to pass to here <ndash/> don&apos;t submit an object that&apos;s on the stack! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>req</parametername>
</parameternamelist>
<parameterdescription>
<para>request to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="285" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> class manages rate limits and marshalls HTTP requests that have been built as <ref refid="classdpp_1_1http__request" kindref="compound">http_request</ref> objects. </para>
    </briefdescription>
    <detaileddescription>
<para>It ensures asynchronous delivery of events and queueing of requests.</para>
<para>It will spawn two threads, one to make outbound HTTP requests and push the returned results into a queue, and the second to call the callback methods with these results. They are separated so that if the user decides to take a long time processing a reply in their callback it won&apos;t affect when other requests are sent, and if a HTTP request takes a long time due to latency, it won&apos;t hold up user processing.</para>
<para>There is usually only one <ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> object in each <ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref>, which is used internally for the various REST methods such as sending messages. </para>
    </detaileddescription>
    <location file="include/dpp/queues.h" line="225" column="1" bodyfile="include/dpp/queues.h" bodystart="225" bodyend="286"/>
    <listofallmembers>
      <member refid="classdpp_1_1request__queue_1adb1de27950315b417ca5369442982474" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>buckets</name></member>
      <member refid="classdpp_1_1request__queue_1afc5bd2c27798f38630d996d1666dbbca" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>creator</name></member>
      <member refid="classdpp_1_1request__queue_1ac90e4a0fab29368c3eb416447b58ab23" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>emit_in_queue_signal</name></member>
      <member refid="classdpp_1_1request__queue_1ab1010e814b9888a7bce5b4b3966aed77" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>emit_out_queue_signal</name></member>
      <member refid="classdpp_1_1request__queue_1a4570a2b18fe55011495f956f807db8ef" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>globally_limited_for</name></member>
      <member refid="classdpp_1_1request__queue_1a72a95ae8742f8d76d69ffbf63993b383" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>globally_ratelimited</name></member>
      <member refid="classdpp_1_1request__queue_1a88f8d5a05b3f235c07ccccd8bef10a2c" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>in_loop</name></member>
      <member refid="classdpp_1_1request__queue_1aca09e205a264d822cc94c01b9dc057fc" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>in_mutex</name></member>
      <member refid="classdpp_1_1request__queue_1a854d6f1a7d9575c123b3ce10e32f6682" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>in_queue_connect_sock</name></member>
      <member refid="classdpp_1_1request__queue_1a9cf9232a8e61e10a9d940ec9fe7b38f1" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>in_queue_listen_sock</name></member>
      <member refid="classdpp_1_1request__queue_1a9601f19768f92156e38dff4b4b8065da" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>in_queue_port</name></member>
      <member refid="classdpp_1_1request__queue_1aec6d4566eb6b683a13a87612b01fa6a3" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>in_thread</name></member>
      <member refid="classdpp_1_1request__queue_1a63acf79e2ab7a915f3ba59f1bdebe758" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>out_loop</name></member>
      <member refid="classdpp_1_1request__queue_1a752d76a042faea10a5cc080787e5d89f" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>out_mutex</name></member>
      <member refid="classdpp_1_1request__queue_1a2af0796c0022f49f228a1376cc2422c8" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>out_queue_connect_sock</name></member>
      <member refid="classdpp_1_1request__queue_1a1343856c133b25cbaee1d99897ef5fff" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>out_queue_listen_sock</name></member>
      <member refid="classdpp_1_1request__queue_1a071327479b81c2c5f98c2c2bf1e3125f" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>out_queue_port</name></member>
      <member refid="classdpp_1_1request__queue_1a28bdbc2d87929deda263ce8bfc0c1231" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>out_thread</name></member>
      <member refid="classdpp_1_1request__queue_1a59e2169cb34083a6de526d4eafb99fd0" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>post_request</name></member>
      <member refid="classdpp_1_1request__queue_1ad2fd85ef74eb9f7cc91897ba2d3f6957" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>request_queue</name></member>
      <member refid="classdpp_1_1request__queue_1af96e872986a6844f4735b0c2da1e43b1" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>requests_in</name></member>
      <member refid="classdpp_1_1request__queue_1ade3ecfd45592dfcea06e6e9de9b70583" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>responses_out</name></member>
      <member refid="classdpp_1_1request__queue_1a9f22c2c802a90fddf160d13ffd0020e9" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>responses_to_delete</name></member>
      <member refid="classdpp_1_1request__queue_1a7fd6a3d04141f1d227d1253fa414b1fd" prot="private" virt="non-virtual"><scope>dpp::request_queue</scope><name>terminating</name></member>
      <member refid="classdpp_1_1request__queue_1a5ccaae72d03d626852be0a0d3c6b86dd" prot="public" virt="non-virtual"><scope>dpp::request_queue</scope><name>~request_queue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
