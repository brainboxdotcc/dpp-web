<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1websocket__client" kind="class" language="C++" prot="public">
    <compoundname>dpp::websocket_client</compoundname>
    <basecompoundref refid="classdpp_1_1ssl__client" prot="public" virt="non-virtual">dpp::ssl_client</basecompoundref>
    <derivedcompoundref refid="classdpp_1_1discord__client" prot="public" virt="non-virtual">dpp::discord_client</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1discord__voice__client" prot="public" virt="non-virtual">dpp::discord_voice_client</derivedcompoundref>
    <includes local="no">wsclient.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1a81d3d2f7c4ad7ca01777131d8131b294" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::websocket_client::key</definition>
        <argsstring></argsstring>
        <name>key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connection key used in the HTTP headers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="60" column="13" bodyfile="include/dpp/wsclient.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1ad7337ca3851942c1457b95d71da5f790" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1af0e6c1fc5986facd4bb63a152ffa6057" kindref="member">ws_state</ref></type>
        <definition>ws_state dpp::websocket_client::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current websocket state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="63" column="10" bodyfile="include/dpp/wsclient.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1ab39bac55d55ee3af9046a5b7957caf1c" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::websocket_client::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Path part of URL for websocket </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="66" column="13" bodyfile="include/dpp/wsclient.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1ad5d64b39f3946a9ce3801a2ffabeeca4" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; dpp::websocket_client::HTTPHeaders</definition>
        <argsstring></argsstring>
        <name>HTTPHeaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HTTP headers received on connecting/upgrading </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="69" column="10" bodyfile="include/dpp/wsclient.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1websocket__client_1aa851724333720b7d727526d609ddf0fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::websocket_client::parseheader</definition>
        <argsstring>(std::string &amp;buffer)</argsstring>
        <name>parseheader</name>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse headers for a websocket frame from the buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to operate on. Will modify the string removing completed items from the head of the queue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="74" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ad0bd6044f3bac18094579f65d2c64efa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::websocket_client::unpack</definition>
        <argsstring>(std::string &amp;buffer, uint32_t offset, bool first=true)</argsstring>
        <name>unpack</name>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack a frame and pass completed frames up the stack. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to operate on. Gets modified to remove completed frames on the head of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset to start at (reserved for future use) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>True if is the first element (reserved for future use) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="81" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1aca5e31802b8e3448c3e8878dc95548d8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::websocket_client::FillHeader</definition>
        <argsstring>(unsigned char *outbuf, size_t sendlength, ws_opcode opcode)</argsstring>
        <name>FillHeader</name>
        <param>
          <type>unsigned char *</type>
          <declname>outbuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sendlength</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a27a655378b0676c4444b32079c19d667" kindref="member">ws_opcode</ref></type>
          <declname>opcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill a header for outbound messages <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The raw frame to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sendlength</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the data to encapsulate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>the ws_opcode to send in the header </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="88" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ac072f4206de55d925e1d4d4017592362" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::websocket_client::HandlePingPong</definition>
        <argsstring>(bool ping, const std::string &amp;payload)</argsstring>
        <name>HandlePingPong</name>
        <param>
          <type>bool</type>
          <declname>ping</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle ping and pong requests. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ping</parametername>
</parameternamelist>
<parameterdescription>
<para>True if this is a ping, false if it is a pong </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>The ping payload, to be returned as-is for a ping </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="94" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ae34e803f32da59b03376ffbcfc64d1be" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::Connect</definition>
        <argsstring>()</argsstring>
        <name>Connect</name>
        <reimplements refid="classdpp_1_1ssl__client_1ab334fef99a32a008cf37a302dca46f7a">Connect</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(Re)connect </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="99" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ad699ad1f6cefc29a1868fdfca530c550" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1af0e6c1fc5986facd4bb63a152ffa6057" kindref="member">ws_state</ref></type>
        <definition>ws_state dpp::websocket_client::GetState</definition>
        <argsstring>()</argsstring>
        <name>GetState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get websocket state <simplesect kind="return"><para>websocket state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="104" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a809b342e343bd370141ba25a5e90cf64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::websocket_client::websocket_client</definition>
        <argsstring>(const std::string &amp;hostname, const std::string &amp;port=&quot;443&quot;, const std::string &amp;urlpath=&quot;&quot;)</argsstring>
        <name>websocket_client</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>port</declname>
          <defval>&quot;443&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>urlpath</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect to a specific websocket server. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>Hostname to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Port to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>urlpath</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL path components of the HTTP request to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="113" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1af199b9a67d71397879d85c69f680a61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::websocket_client::~websocket_client</definition>
        <argsstring>()</argsstring>
        <name>~websocket_client</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="116" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a66ca960ed3dddc37340ecc5d32ff0e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::write</definition>
        <argsstring>(const std::string &amp;data)</argsstring>
        <name>write</name>
        <reimplements refid="classdpp_1_1ssl__client_1acdfd527a84156e918dc93420ed0d45b8">write</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write to websocket. Encapsulates data in frames if the status is CONNECTED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="123" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1aac9224e26db7b8589fcf9ba312752ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::websocket_client::handle_buffer</definition>
        <argsstring>(std::string &amp;buffer)</argsstring>
        <name>handle_buffer</name>
        <reimplements refid="classdpp_1_1ssl__client_1a0100372dd4c32d9faddaf69fffda7cfc">handle_buffer</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Processes incoming frames from the SSL socket input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents. Can modify this value removing the head elements when processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="130" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a1f21cc8fce27ad72e9414dc9d0acd4d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <reimplements refid="classdpp_1_1ssl__client_1ae85df4b13fa64d701fb09f2bf44f100e">close</reimplements>
        <briefdescription>
<para>Close websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="135" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a5a125272ceedc4283e98a51378eb61c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::websocket_client::HandleFrame</definition>
        <argsstring>(const std::string &amp;buffer)</argsstring>
        <name>HandleFrame</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a245e208c4ad9234784ce59004ad53910">HandleFrame</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1ab9a592d4b1402fc8d8fa0273b6229b3e">HandleFrame</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Receives raw frame content only without headers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the frame was successfully handled. False if no valid frame is in the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="143" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a4fb6ab4b4b977a937a03149fe285e2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::Error</definition>
        <argsstring>(uint32_t errorcode)</argsstring>
        <name>Error</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a07cb136e79ee8b4c0ade07c40288a82a">Error</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a1c9e3844eef43cb3ee4fb3cb75eab330">Error</reimplementedby>
        <param>
          <type>uint32_t</type>
          <declname>errorcode</declname>
        </param>
        <briefdescription>
<para>Called upon error frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errorcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code from the websocket server </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="150" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a07ad6e7b32cfe760976d90409d5c47ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::one_second_timer</definition>
        <argsstring>()</argsstring>
        <name>one_second_timer</name>
        <reimplements refid="classdpp_1_1ssl__client_1a5028e720508fcb82533ce838dcea5f2e">one_second_timer</reimplements>
        <reimplementedby refid="classdpp_1_1discord__client_1ae020ca512624a8ef554344a796268936">one_second_timer</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1ad13b56d904850d77205924d43697f0e4">one_second_timer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fires every second from the underlying socket I/O loop, used for sending webscocket pings </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="153" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1aad4da6489c8f08030ca49c060a23740a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::get_bytes_out</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total bytes sent </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="87" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1afa5d5654ce0b631d07045088ef347418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::get_bytes_in</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_in</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total bytes received </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="90" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1abf247ed0871e89e6a319c95841a315bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::get_cipher</definition>
        <argsstring>()</argsstring>
        <name>get_cipher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get SSL cipher name </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="93" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::read_loop</definition>
        <argsstring>()</argsstring>
        <name>read_loop</name>
        <briefdescription>
<para>Nonblocking I/O loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="132" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a945ccd04f376174a64c0cceffca3bbcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::ssl_client::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const</argsstring>
        <name>log</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a9a7beefc8a761885205fc1a8d0e0954f">log</reimplementedby>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>severity of log message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="162" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1ae0e5e0799448bf29506bfcc21168d3fa" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input buffer received from openssl </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="46" column="13" bodyfile="include/dpp/sslclient.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a1f9600d4fd902c74c6d8b748c359eecc" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::obuffer</definition>
        <argsstring></argsstring>
        <name>obuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output buffer for sending to openssl </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="49" column="13" bodyfile="include/dpp/sslclient.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a1486b3df6780a842552442a25634fcc9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::nonblocking</definition>
        <argsstring></argsstring>
        <name>nonblocking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if in nonblocking mode. The socket switches to nonblocking mode once ReadLoop is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="54" column="6" bodyfile="include/dpp/sslclient.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a0b6edcf258bcc2153a1b39b5f01403f4" prot="protected" static="no" mutable="no">
        <type>SOCKET</type>
        <definition>SOCKET dpp::ssl_client::sfd</definition>
        <argsstring></argsstring>
        <name>sfd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw file descriptor of connection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="57" column="8" bodyfile="include/dpp/sslclient.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a2398ebb5fe51346ca7e97ec162327c4e" prot="protected" static="no" mutable="no">
        <type>opensslcontext *</type>
        <definition>opensslcontext* dpp::ssl_client::ssl</definition>
        <argsstring></argsstring>
        <name>ssl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Openssl opaque contexts </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="60" column="16" bodyfile="include/dpp/sslclient.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a5fc2e7836da5485216419bbf17e49428" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::cipher</definition>
        <argsstring></argsstring>
        <name>cipher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SSL cipher in use </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="63" column="13" bodyfile="include/dpp/sslclient.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a61f0bbeefa25de686ac93887afa65895" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_client::last_tick</definition>
        <argsstring></argsstring>
        <name>last_tick</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For timers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="66" column="8" bodyfile="include/dpp/sslclient.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a9aab17086711ef6777a01ee0974b5ce8" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::hostname</definition>
        <argsstring></argsstring>
        <name>hostname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hostname connected to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="69" column="13" bodyfile="include/dpp/sslclient.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a53cda56d5d61e3371bd7be2424e7ff07" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Port connected to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="72" column="13" bodyfile="include/dpp/sslclient.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a8022a8002cfc6f394016546168ef4085" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::bytes_out</definition>
        <argsstring></argsstring>
        <name>bytes_out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bytes out </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="75" column="10" bodyfile="include/dpp/sslclient.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a7b3bbb4e6a9e271c8f19736b36b71d5d" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::bytes_in</definition>
        <argsstring></argsstring>
        <name>bytes_in</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bytes in </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="78" column="10" bodyfile="include/dpp/sslclient.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1ad2b75ebfaeb8bbe40741a1ad95e58c56" prot="public" static="no" mutable="no">
        <type>std::function&lt; int()&gt;</type>
        <definition>std::function&lt;int()&gt; dpp::ssl_client::custom_readable_fd</definition>
        <argsstring></argsstring>
        <name>custom_readable_fd</name>
        <briefdescription>
<para>Attaching an additional file descriptor to this function will send notifications when there is data to read. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Only hook this if you NEED it as it can increase CPU usage of the thread! Returning -1 means that you don&apos;t want to be notified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="101" column="15" bodyfile="include/dpp/sslclient.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a32a0f4e6e46da398d77b33e55e3d4ced" prot="public" static="no" mutable="no">
        <type>std::function&lt; int()&gt;</type>
        <definition>std::function&lt;int()&gt; dpp::ssl_client::custom_writeable_fd</definition>
        <argsstring></argsstring>
        <name>custom_writeable_fd</name>
        <briefdescription>
<para>Attaching an additional file descriptor to this function will send notifications when you are able to write to the socket. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Only hook this if you NEED it as it can increase CPU usage of the thread! You should toggle this to -1 when you do not have anything to write otherwise it&apos;ll keep triggering repeatedly (it is level triggered). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="110" column="15" bodyfile="include/dpp/sslclient.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1aaf27074007db73b13663ab985f2221e8" prot="public" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; dpp::ssl_client::custom_readable_ready</definition>
        <argsstring></argsstring>
        <name>custom_readable_ready</name>
        <briefdescription>
<para>This event will be called when you can read from the custom fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="115" column="15" bodyfile="include/dpp/sslclient.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a5eac615119a5068c1634e3729752ddb6" prot="public" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; dpp::ssl_client::custom_writeable_ready</definition>
        <argsstring></argsstring>
        <name>custom_writeable_ready</name>
        <briefdescription>
<para>This event will be called when you can write to a custom fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="120" column="15" bodyfile="include/dpp/sslclient.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a websocket client based on the SSL client. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
      </node>
      <node id="1">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>SOCKET</label>
      </node>
      <node id="5">
        <label>bool</label>
      </node>
      <node id="2">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="3" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
          <edgelabel>custom_writeable_ready</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>opensslcontext *</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="10">
        <label>function&lt;</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>time_t</label>
      </node>
      <node id="9">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/wsclient.h" line="57" column="1" bodyfile="include/dpp/wsclient.h" bodystart="58" bodyend="154"/>
    <listofallmembers>
      <member refid="classdpp_1_1ssl__client_1ae0e5e0799448bf29506bfcc21168d3fa" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>buffer</name></member>
      <member refid="classdpp_1_1ssl__client_1a7b3bbb4e6a9e271c8f19736b36b71d5d" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>bytes_in</name></member>
      <member refid="classdpp_1_1ssl__client_1a8022a8002cfc6f394016546168ef4085" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>bytes_out</name></member>
      <member refid="classdpp_1_1ssl__client_1a5fc2e7836da5485216419bbf17e49428" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>cipher</name></member>
      <member refid="classdpp_1_1websocket__client_1a1f21cc8fce27ad72e9414dc9d0acd4d0" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>close</name></member>
      <member refid="classdpp_1_1websocket__client_1ae34e803f32da59b03376ffbcfc64d1be" prot="protected" virt="virtual"><scope>dpp::websocket_client</scope><name>Connect</name></member>
      <member refid="classdpp_1_1ssl__client_1ad2b75ebfaeb8bbe40741a1ad95e58c56" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>custom_readable_fd</name></member>
      <member refid="classdpp_1_1ssl__client_1aaf27074007db73b13663ab985f2221e8" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>custom_readable_ready</name></member>
      <member refid="classdpp_1_1ssl__client_1a32a0f4e6e46da398d77b33e55e3d4ced" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>custom_writeable_fd</name></member>
      <member refid="classdpp_1_1ssl__client_1a5eac615119a5068c1634e3729752ddb6" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>custom_writeable_ready</name></member>
      <member refid="classdpp_1_1websocket__client_1a4fb6ab4b4b977a937a03149fe285e2cd" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>Error</name></member>
      <member refid="classdpp_1_1websocket__client_1aca5e31802b8e3448c3e8878dc95548d8" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>FillHeader</name></member>
      <member refid="classdpp_1_1ssl__client_1afa5d5654ce0b631d07045088ef347418" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_bytes_in</name></member>
      <member refid="classdpp_1_1ssl__client_1aad4da6489c8f08030ca49c060a23740a" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_bytes_out</name></member>
      <member refid="classdpp_1_1ssl__client_1abf247ed0871e89e6a319c95841a315bd" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_cipher</name></member>
      <member refid="classdpp_1_1websocket__client_1ad699ad1f6cefc29a1868fdfca530c550" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>GetState</name></member>
      <member refid="classdpp_1_1websocket__client_1aac9224e26db7b8589fcf9ba312752ca8" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>handle_buffer</name></member>
      <member refid="classdpp_1_1websocket__client_1a5a125272ceedc4283e98a51378eb61c3" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>HandleFrame</name></member>
      <member refid="classdpp_1_1websocket__client_1ac072f4206de55d925e1d4d4017592362" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>HandlePingPong</name></member>
      <member refid="classdpp_1_1ssl__client_1a9aab17086711ef6777a01ee0974b5ce8" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>hostname</name></member>
      <member refid="classdpp_1_1websocket__client_1ad5d64b39f3946a9ce3801a2ffabeeca4" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>HTTPHeaders</name></member>
      <member refid="classdpp_1_1websocket__client_1a81d3d2f7c4ad7ca01777131d8131b294" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>key</name></member>
      <member refid="classdpp_1_1ssl__client_1a61f0bbeefa25de686ac93887afa65895" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>last_tick</name></member>
      <member refid="classdpp_1_1ssl__client_1a945ccd04f376174a64c0cceffca3bbcd" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>log</name></member>
      <member refid="classdpp_1_1ssl__client_1a1486b3df6780a842552442a25634fcc9" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>nonblocking</name></member>
      <member refid="classdpp_1_1ssl__client_1a1f9600d4fd902c74c6d8b748c359eecc" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>obuffer</name></member>
      <member refid="classdpp_1_1websocket__client_1a07ad6e7b32cfe760976d90409d5c47ae" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>one_second_timer</name></member>
      <member refid="classdpp_1_1websocket__client_1aa851724333720b7d727526d609ddf0fc" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>parseheader</name></member>
      <member refid="classdpp_1_1websocket__client_1ab39bac55d55ee3af9046a5b7957caf1c" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>path</name></member>
      <member refid="classdpp_1_1ssl__client_1a53cda56d5d61e3371bd7be2424e7ff07" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>port</name></member>
      <member refid="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>read_loop</name></member>
      <member refid="classdpp_1_1ssl__client_1a0b6edcf258bcc2153a1b39b5f01403f4" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>sfd</name></member>
      <member refid="classdpp_1_1ssl__client_1a2398ebb5fe51346ca7e97ec162327c4e" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>ssl</name></member>
      <member refid="classdpp_1_1ssl__client_1a67656fe3b8717d784ff0bdf02290a4f3" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>ssl_client</name></member>
      <member refid="classdpp_1_1websocket__client_1ad7337ca3851942c1457b95d71da5f790" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>state</name></member>
      <member refid="classdpp_1_1websocket__client_1ad0bd6044f3bac18094579f65d2c64efa" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>unpack</name></member>
      <member refid="classdpp_1_1websocket__client_1a809b342e343bd370141ba25a5e90cf64" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>websocket_client</name></member>
      <member refid="classdpp_1_1websocket__client_1a66ca960ed3dddc37340ecc5d32ff0e1c" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>write</name></member>
      <member refid="classdpp_1_1ssl__client_1a892b774dc3832123c829d4f3bcef693a" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>~ssl_client</name></member>
      <member refid="classdpp_1_1websocket__client_1af199b9a67d71397879d85c69f680a61a" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>~websocket_client</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
