<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1dtemplate" kind="class" language="C++" prot="public">
    <compoundname>dpp::dtemplate</compoundname>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; dtemplate &gt;</basecompoundref>
    <includes local="no">dtemplate.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1dtemplate_1a7848f6a254844157a5faed450e512b23" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; dtemplate &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; dtemplate &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="classdpp_1_1dtemplate" kindref="compound">dtemplate</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="113" column="28" bodyfile="include/dpp/dtemplate.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1afd09c5cd9ada37b0b3dc4f8c4570d25e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::dtemplate::code</definition>
        <argsstring></argsstring>
        <name>code</name>
        <briefdescription>
<para>Template code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="56" column="13" bodyfile="include/dpp/dtemplate.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1ae8a2dbdf16476136623a112a76119b97" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::dtemplate::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Template name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="61" column="13" bodyfile="include/dpp/dtemplate.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a3b48f9a642e8bcca21c75679c50ce413" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::dtemplate::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>Template description. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="66" column="13" bodyfile="include/dpp/dtemplate.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a0086e48d5206046a581b1deb9105668c" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::dtemplate::usage_count</definition>
        <argsstring></argsstring>
        <name>usage_count</name>
        <briefdescription>
<para>Usage counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="71" column="10" bodyfile="include/dpp/dtemplate.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a88f8fea4271892bcf825fda8fbe3dba8" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::dtemplate::creator_id</definition>
        <argsstring></argsstring>
        <name>creator_id</name>
        <briefdescription>
<para>User ID of creator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="76" column="11" bodyfile="include/dpp/dtemplate.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a756fa7c16105d1ec41154b8ea8151ab6" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::dtemplate::created_at</definition>
        <argsstring></argsstring>
        <name>created_at</name>
        <briefdescription>
<para>Creation date/time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="82" column="8" bodyfile="include/dpp/dtemplate.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a2470428709c07fd34b0654f3d0cacf15" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::dtemplate::updated_at</definition>
        <argsstring></argsstring>
        <name>updated_at</name>
        <briefdescription>
<para>Last update date/time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="87" column="8" bodyfile="include/dpp/dtemplate.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a4ec6536f11f56d2cb001dc76e9bd9ceb" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::dtemplate::source_guild_id</definition>
        <argsstring></argsstring>
        <name>source_guild_id</name>
        <briefdescription>
<para>Guild id the template is created from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="92" column="11" bodyfile="include/dpp/dtemplate.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dtemplate_1a457edbe0f739d80640807571875cdc5a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::dtemplate::is_dirty</definition>
        <argsstring></argsstring>
        <name>is_dirty</name>
        <briefdescription>
<para>True if needs synchronising. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="97" column="6" bodyfile="include/dpp/dtemplate.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1dtemplate_1af1646520662fa6a26d4a539eac258fe6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1dtemplate" kindref="compound">dtemplate</ref> &amp;</type>
        <definition>dtemplate &amp; dpp::dtemplate::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="42" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1dtemplate_1a00c95ed2e546791747acaf0640aae2da" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>json dpp::dtemplate::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build the JSON for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Add ID to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>json JSON content </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="50" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1dtemplate_1a2dbcc0cbb9b829f95f93bf59ed416812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::dtemplate::dtemplate</definition>
        <argsstring>()</argsstring>
        <name>dtemplate</name>
        <briefdescription>
<para>Construct a new dtemplate object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1dtemplate_1a2d9d0617218d8be51ca2a6e67ee940fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::dtemplate::~dtemplate</definition>
        <argsstring>()=default</argsstring>
        <name>~dtemplate</name>
        <briefdescription>
<para>Destroy the dtemplate object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dtemplate.h" line="107" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1dtemplate" kindref="compound">dtemplate</ref> &amp;</type>
        <definition>dtemplate  &amp; dpp::json_interface&lt; dtemplate  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; dtemplate  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; dtemplate  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a guild template. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::dtemplate</label>
        <link refid="classdpp_1_1dtemplate"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; dtemplate &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; dtemplate &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="10">
        <label>bool</label>
      </node>
      <node id="1">
        <label>dpp::dtemplate</label>
        <link refid="classdpp_1_1dtemplate"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>code</edgelabel>
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>usage_count</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>creator_id</edgelabel>
          <edgelabel>source_guild_id</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>created_at</edgelabel>
          <edgelabel>updated_at</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>is_dirty</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="7">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="8" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; dtemplate &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; dtemplate &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>time_t</label>
      </node>
      <node id="6">
        <label>uint32_t</label>
      </node>
      <node id="8">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dtemplate.h" line="34" column="1" bodyfile="include/dpp/dtemplate.h" bodystart="34" bodyend="108"/>
    <listofallmembers>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>build_json</name></member>
      <member refid="classdpp_1_1dtemplate_1afd09c5cd9ada37b0b3dc4f8c4570d25e" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>code</name></member>
      <member refid="classdpp_1_1dtemplate_1a756fa7c16105d1ec41154b8ea8151ab6" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>created_at</name></member>
      <member refid="classdpp_1_1dtemplate_1a88f8fea4271892bcf825fda8fbe3dba8" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>creator_id</name></member>
      <member refid="classdpp_1_1dtemplate_1a3b48f9a642e8bcca21c75679c50ce413" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>description</name></member>
      <member refid="classdpp_1_1dtemplate_1a2dbcc0cbb9b829f95f93bf59ed416812" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>dtemplate</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1dtemplate_1af1646520662fa6a26d4a539eac258fe6" prot="protected" virt="non-virtual"><scope>dpp::dtemplate</scope><name>fill_from_json_impl</name></member>
      <member refid="classdpp_1_1dtemplate_1a457edbe0f739d80640807571875cdc5a" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>is_dirty</name></member>
      <member refid="classdpp_1_1dtemplate_1a7848f6a254844157a5faed450e512b23" prot="protected" virt="non-virtual"><scope>dpp::dtemplate</scope><name>json_interface&lt; dtemplate &gt;</name></member>
      <member refid="classdpp_1_1dtemplate_1ae8a2dbdf16476136623a112a76119b97" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>name</name></member>
      <member refid="classdpp_1_1dtemplate_1a4ec6536f11f56d2cb001dc76e9bd9ceb" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>source_guild_id</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>to_json</name></member>
      <member refid="classdpp_1_1dtemplate_1a00c95ed2e546791747acaf0640aae2da" prot="protected" virt="non-virtual"><scope>dpp::dtemplate</scope><name>to_json_impl</name></member>
      <member refid="classdpp_1_1dtemplate_1a2470428709c07fd34b0654f3d0cacf15" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>updated_at</name></member>
      <member refid="classdpp_1_1dtemplate_1a0086e48d5206046a581b1deb9105668c" prot="public" virt="non-virtual"><scope>dpp::dtemplate</scope><name>usage_count</name></member>
      <member refid="classdpp_1_1dtemplate_1a2d9d0617218d8be51ca2a6e67ee940fd" prot="public" virt="virtual"><scope>dpp::dtemplate</scope><name>~dtemplate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
