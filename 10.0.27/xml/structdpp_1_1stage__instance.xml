<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1stage__instance" kind="struct" language="C++" prot="public">
    <compoundname>dpp::stage_instance</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; stage_instance &gt;</basecompoundref>
    <includes local="no">stage_instance.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdpp_1_1stage__instance_1ac6a2fd7580147abd26e20e27daf1e565" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; stage_instance &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; stage_instance &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stage_instance.h" line="89" column="28" bodyfile="include/dpp/stage_instance.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1stage__instance_1ac78c5c60945f082d1b42ba3c81b43217" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::stage_instance::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>The guild id of the associated Stage channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stage_instance.h" line="67" column="11" bodyfile="include/dpp/stage_instance.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1stage__instance_1a21bda7ddd059504607abca421e747c94" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::stage_instance::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>The id of the associated Stage channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stage_instance.h" line="69" column="11" bodyfile="include/dpp/stage_instance.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1stage__instance_1ae373539ed2656ca14f306cb00465158a" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::stage_instance::topic</definition>
        <argsstring></argsstring>
        <name>topic</name>
        <briefdescription>
<para>The topic of the Stage instance (1-120 characters) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stage_instance.h" line="71" column="13" bodyfile="include/dpp/stage_instance.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1stage__instance_1ae198d6dba53766e0375c1705165ddca7" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a29954c9dfc5a906346177226d036a418" kindref="member">stage_privacy_level</ref></type>
        <definition>stage_privacy_level dpp::stage_instance::privacy_level</definition>
        <argsstring></argsstring>
        <name>privacy_level</name>
        <briefdescription>
<para>The privacy level of the Stage instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stage_instance.h" line="73" column="21" bodyfile="include/dpp/stage_instance.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1stage__instance_1aae76dc45493e1430bfdd6473d773de1f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::stage_instance::discoverable_disabled</definition>
        <argsstring></argsstring>
        <name>discoverable_disabled</name>
        <briefdescription>
<para>Whether or not Stage Discovery is disabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stage_instance.h" line="75" column="6" bodyfile="include/dpp/stage_instance.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structdpp_1_1stage__instance_1a1bfdf0874fb6ebaefe542227e6eac4bd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref> &amp;</type>
        <definition>stage_instance &amp; dpp::stage_instance::fill_from_json_impl</definition>
        <argsstring>(const nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>const nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Serialise a <ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref> object rom json. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref>&amp; a reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stage_instance.h" line="55" column="17"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1stage__instance_1a779965e6e7fc722e7d461df2a7f925d2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>virtual json dpp::stage_instance::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build json for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>include ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>json Json of this object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stage_instance.h" line="63" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1stage__instance_1a5ef48a926a1e604a0bcf8f53d27521c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::stage_instance::stage_instance</definition>
        <argsstring>()</argsstring>
        <name>stage_instance</name>
        <briefdescription>
<para>Create a <ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stage_instance.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1stage__instance_1a88af3a5f8cead59a98c9ae7a695695a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::stage_instance::~stage_instance</definition>
        <argsstring>()=default</argsstring>
        <name>~stage_instance</name>
        <briefdescription>
<para>Destroy the <ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stage_instance.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1stage__instance" kindref="compound">stage_instance</ref> &amp;</type>
        <definition>stage_instance  &amp; dpp::json_interface&lt; stage_instance  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="43" column="3" bodyfile="include/dpp/json_interface.h" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; stage_instance  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="55" column="6" bodyfile="include/dpp/json_interface.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; stage_instance  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="67" column="13" bodyfile="include/dpp/json_interface.h" bodystart="67" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A stage instance. Stage instances are like a conference facility, with moderators/speakers and listeners. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::stage_instance</label>
        <link refid="structdpp_1_1stage__instance"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; stage_instance &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; stage_instance &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="10">
        <label>bool</label>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::stage_instance</label>
        <link refid="structdpp_1_1stage__instance"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>topic</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>privacy_level</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>discoverable_disabled</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; stage_instance &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; stage_instance &gt;</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>stage_privacy_level</label>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/stage_instance.h" line="46" column="1" bodyfile="include/dpp/stage_instance.h" bodystart="46" bodyend="86"/>
    <listofallmembers>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>build_json</name></member>
      <member refid="structdpp_1_1stage__instance_1a21bda7ddd059504607abca421e747c94" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>channel_id</name></member>
      <member refid="structdpp_1_1stage__instance_1aae76dc45493e1430bfdd6473d773de1f" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>discoverable_disabled</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1stage__instance_1a1bfdf0874fb6ebaefe542227e6eac4bd" prot="protected" virt="non-virtual"><scope>dpp::stage_instance</scope><name>fill_from_json_impl</name></member>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>get_creation_time</name></member>
      <member refid="structdpp_1_1stage__instance_1ac78c5c60945f082d1b42ba3c81b43217" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>id</name></member>
      <member refid="structdpp_1_1stage__instance_1ac6a2fd7580147abd26e20e27daf1e565" prot="protected" virt="non-virtual"><scope>dpp::stage_instance</scope><name>json_interface&lt; stage_instance &gt;</name></member>
      <member refid="classdpp_1_1managed_1a49ce0d7fdbeab770ec46be27771c2285" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1aa3ee436836ab0e2bf4f842c2c2bc3b52" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a198b514f7e6a2b26734fd2dad85f481d" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1ac7a876ad1764b89f0568a1f1bc6bf640" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1a48b542729f1352f93f1c60950986517f" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a4a4be34febb174eaee3c0964d0bf1e21" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>operator==</name></member>
      <member refid="structdpp_1_1stage__instance_1ae198d6dba53766e0375c1705165ddca7" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>privacy_level</name></member>
      <member refid="structdpp_1_1stage__instance_1a5ef48a926a1e604a0bcf8f53d27521c3" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>stage_instance</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>to_json</name></member>
      <member refid="structdpp_1_1stage__instance_1a779965e6e7fc722e7d461df2a7f925d2" prot="protected" virt="virtual"><scope>dpp::stage_instance</scope><name>to_json_impl</name></member>
      <member refid="structdpp_1_1stage__instance_1ae373539ed2656ca14f306cb00465158a" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>topic</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::stage_instance</scope><name>~managed</name></member>
      <member refid="structdpp_1_1stage__instance_1a88af3a5f8cead59a98c9ae7a695695a7" prot="public" virt="non-virtual"><scope>dpp::stage_instance</scope><name>~stage_instance</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
