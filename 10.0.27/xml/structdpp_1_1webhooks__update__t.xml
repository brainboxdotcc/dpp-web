<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1webhooks__update__t" kind="struct" language="C++" prot="public">
    <compoundname>dpp::webhooks_update_t</compoundname>
    <basecompoundref refid="structdpp_1_1event__dispatch__t" prot="public" virt="non-virtual">dpp::event_dispatch_t</basecompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a6cd7044ce4450c62ccd77f5f223ac9d6" prot="public" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool dpp::event_dispatch_t::cancelled</definition>
        <argsstring></argsstring>
        <name>cancelled</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Whether the event was cancelled using <ref refid="structdpp_1_1event__dispatch__t_1a54af3a0990fe041d4f5e8ad897367f7f" kindref="member">cancel_event()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="94" column="14" bodyfile="include/dpp/dispatcher.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a9ef98cebb9c0a5ab75a4362d1b40fb71" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>discord_client* dpp::event_dispatch_t::from</definition>
        <argsstring></argsstring>
        <name>from</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Shard the event came from. Note that for some events, notably voice events, this may be nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="89" column="16" bodyfile="include/dpp/dispatcher.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Raw event data. If you are using json on your websocket, this will contain json, and if you are using ETF as your websocket protocol, it will contain raw ETF data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="83" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1webhooks__update__t_1a39a25531b301ffc214ddd17a7b3475f3" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> *</type>
        <definition>channel* dpp::webhooks_update_t::webhook_channel</definition>
        <argsstring></argsstring>
        <name>webhook_channel</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>channel where webhooks are being updated </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1408" column="9" bodyfile="include/dpp/dispatcher.h" bodystart="1408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1webhooks__update__t_1ab4ff84fc65e90fe97fa0526d0976f7ae" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> *</type>
        <definition>guild* dpp::webhooks_update_t::webhook_guild</definition>
        <argsstring></argsstring>
        <name>webhook_guild</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>guild where webhooks are being updated </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1403" column="7" bodyfile="include/dpp/dispatcher.h" bodystart="1403" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1a54af3a0990fe041d4f5e8ad897367f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>event_dispatch_t &amp; dpp::event_dispatch_t::cancel_event</definition>
        <argsstring>()</argsstring>
        <name>cancel_event</name>
        <briefdescription>
<para>Cancels the event in progress. Any other attached lambdas for this event after this one are not called. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This will modify the event object in a non-thread-safe manner. </para>
</simplesect>
<simplesect kind="return"><para>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref>&amp; reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="168" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1a5afbcd36109734ad0fca14ec848b73b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>const event_dispatch_t &amp; dpp::event_dispatch_t::cancel_event</definition>
        <argsstring>() const</argsstring>
        <name>cancel_event</name>
        <briefdescription>
<para>Cancels the event in progress. Any other attached lambdas for this event after this one are not called. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This will modify the event object in a non-thread-safe manner. </para>
</simplesect>
<simplesect kind="return"><para>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref>&amp; reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="160" column="24"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1webhooks__update__t_1ad761e8dec36073665f520aaa13fbe6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::event_dispatch_t::event_dispatch_t</definition>
        <argsstring>()=default</argsstring>
        <name>event_dispatch_t</name>
        <briefdescription>
<para>Construct a new <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1webhooks__update__t_1ae250d3a1ee0ad2e90ad075e1aead5478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::event_dispatch_t::event_dispatch_t</definition>
        <argsstring>(const event_dispatch_t &amp;rhs)=default</argsstring>
        <name>event_dispatch_t</name>
        <param>
          <type>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object to copy from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1webhooks__update__t_1af32126d4ed56366b4413c84b272383b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::event_dispatch_t::event_dispatch_t</definition>
        <argsstring>(discord_client *client, const std::string &amp;raw)</argsstring>
        <name>event_dispatch_t</name>
        <param>
          <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on. May be a nullptr, e.g. for voice events </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event data as JSON or ETF </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1webhooks__update__t_1a4d5c139c862c5ed02227b1e9ffc38095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::event_dispatch_t::event_dispatch_t</definition>
        <argsstring>(discord_client *client, std::string &amp;&amp;raw)</argsstring>
        <name>event_dispatch_t</name>
        <param>
          <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on. May be a nullptr, e.g. for voice events </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event data as JSON or ETF </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1webhooks__update__t_1aae35038ecb874c46e355fac3863615d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::event_dispatch_t::event_dispatch_t</definition>
        <argsstring>(event_dispatch_t &amp;&amp;rhs)=default</argsstring>
        <name>event_dispatch_t</name>
        <param>
          <type><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1aca2880114f69b7ba62eb5137824c1432" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::event_dispatch_t::is_cancelled</definition>
        <argsstring>() const</argsstring>
        <name>is_cancelled</name>
        <briefdescription>
<para>Returns true if the event is cancelled. Note that event cancellation is a thread local state, and not stored in the object (because object which can be cancelled is <computeroutput>const</computeroutput> during the event, and cannot itself contain the changeable state). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the event is cancelled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="176" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1webhooks__update__t_1a2500c6d9987fbfc509fd0a960b1968e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>event_dispatch_t &amp; dpp::event_dispatch_t::operator=</definition>
        <argsstring>(const event_dispatch_t &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy another <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to copy from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1webhooks__update__t_1a4645c2cc7dfe1def0b936d5726f7b8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>event_dispatch_t &amp; dpp::event_dispatch_t::operator=</definition>
        <argsstring>(event_dispatch_t &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move from another <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1398" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Webhooks update. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
      <node id="1">
        <label>dpp::webhooks_update_t</label>
        <link refid="structdpp_1_1webhooks__update__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="42">
        <label>K</label>
      </node>
      <node id="43">
        <label>T</label>
      </node>
      <node id="58">
        <label>auto_archive_duration_t</label>
      </node>
      <node id="8">
        <label>bool</label>
      </node>
      <node id="27">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="59">
        <label>default_forum_sort_order_t</label>
      </node>
      <node id="49">
        <label>default_message_notification_t</label>
      </node>
      <node id="17">
        <label>double</label>
      </node>
      <node id="26">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="27" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>dpp::channel</label>
        <link refid="classdpp_1_1channel"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
        <childnode refid="56" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>rtc_region</edgelabel>
          <edgelabel>topic</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>available_tags</edgelabel>
          <edgelabel>permission_overwrites</edgelabel>
          <edgelabel>recipients</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>default_reaction</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>icon</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>last_message_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>parent_id</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>last_pin_timestamp</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>bitrate</edgelabel>
          <edgelabel>default_thread_rate_limit_per_user</edgelabel>
          <edgelabel>flags</edgelabel>
          <edgelabel>position</edgelabel>
          <edgelabel>rate_limit_per_user</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>default_auto_archive_duration</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>default_sort_order</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>user_limit</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="3" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ready</edgelabel>
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>reconnects</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
          <edgelabel>last_heartbeat_ack</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>resume_gateway_url</edgelabel>
          <edgelabel>sessionid</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>protocol</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="3" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>from</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>cancelled</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>vanity_url_code</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>channels</edgelabel>
          <edgelabel>emojis</edgelabel>
          <edgelabel>roles</edgelabel>
          <edgelabel>threads</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>voice_members</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>members</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>welcome_screen</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>banner</edgelabel>
          <edgelabel>discovery_splash</edgelabel>
          <edgelabel>icon</edgelabel>
          <edgelabel>splash</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>afk_channel_id</edgelabel>
          <edgelabel>application_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>public_updates_channel_id</edgelabel>
          <edgelabel>rules_channel_id</edgelabel>
          <edgelabel>safety_alerts_channel_id</edgelabel>
          <edgelabel>system_channel_id</edgelabel>
          <edgelabel>widget_channel_id</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>max_members</edgelabel>
          <edgelabel>max_presences</edgelabel>
          <edgelabel>member_count</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>flags_extra</edgelabel>
          <edgelabel>premium_subscription_count</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>afk_timeout</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>max_video_channel_users</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>default_message_notifications</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>premium_tier</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>verification_level</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>explicit_content_filter</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>mfa_level</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>nsfw_level</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="19">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="20" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>dpp::permission</label>
        <link refid="classdpp_1_1permission"/>
        <childnode refid="12" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="12" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="3" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>keepalive</edgelabel>
          <edgelabel>make_new</edgelabel>
          <edgelabel>nonblocking</edgelabel>
          <edgelabel>plaintext</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>custom_readable_ready</edgelabel>
          <edgelabel>custom_writeable_ready</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>dpp::utility::icon</label>
        <link refid="structdpp_1_1utility_1_1icon"/>
        <childnode refid="47" relation="usage">
          <edgelabel>hash_or_data</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="12" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::webhooks_update_t</label>
        <link refid="structdpp_1_1webhooks__update__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>webhook_guild</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>webhook_channel</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>dpp::welcome_screen</label>
        <link refid="structdpp_1_1welcome__screen"/>
        <childnode refid="45" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>welcome_channels</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>event_router_t&lt;</label>
      </node>
      <node id="48">
        <label>guild_afk_timeout_t</label>
      </node>
      <node id="52">
        <label>guild_explicit_content_t</label>
      </node>
      <node id="54">
        <label>guild_nsfw_level_t</label>
      </node>
      <node id="50">
        <label>guild_premium_tier_t</label>
      </node>
      <node id="9">
        <label>int</label>
      </node>
      <node id="56">
        <label>dpp::json_interface&lt; channel &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; channel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>dpp::json_interface&lt; guild &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; guild &gt;</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>dpp::json_interface&lt; guild_member &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; guild_member &gt;</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>dpp::json_interface&lt; welcome_screen &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; welcome_screen &gt;</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>mfa_level_t</label>
      </node>
      <node id="10">
        <label>openssl_connection *</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="29">
        <label>condition_variable</label>
      </node>
      <node id="13">
        <label>function&lt; dpp::socket()&gt;</label>
      </node>
      <node id="14">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="37">
        <label>map&lt;</label>
      </node>
      <node id="32">
        <label>std::shared_mutex</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>native_handle_type</label>
      </node>
      <node id="41">
        <label>std::unordered_map&lt; K, T &gt;</label>
        <childnode refid="42" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>unordered_map&lt;</label>
      </node>
      <node id="47">
        <label>variant&lt;</label>
      </node>
      <node id="36">
        <label>vector&lt;</label>
      </node>
      <node id="11">
        <label>time_t</label>
      </node>
      <node id="24">
        <label>uint16_t</label>
      </node>
      <node id="16">
        <label>uint32_t</label>
      </node>
      <node id="12">
        <label>uint64_t</label>
      </node>
      <node id="25">
        <label>uint8_t</label>
      </node>
      <node id="38">
        <label>std::unordered_map&lt; snowflake, guild_member &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="41" relation="template-instance">
          <edgelabel>&lt; snowflake, guild_member &gt;</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>verification_level_t</label>
      </node>
      <node id="28">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dispatcher.h" line="1396" column="1" bodyfile="include/dpp/dispatcher.h" bodystart="1396" bodyend="1409"/>
    <listofallmembers>
      <member refid="structdpp_1_1event__dispatch__t_1a5afbcd36109734ad0fca14ec848b73b7" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>cancel_event</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a54af3a0990fe041d4f5e8ad897367f7f" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>cancel_event</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a6cd7044ce4450c62ccd77f5f223ac9d6" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>cancelled</name></member>
      <member refid="structdpp_1_1webhooks__update__t_1ad761e8dec36073665f520aaa13fbe6dc" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1webhooks__update__t_1ae250d3a1ee0ad2e90ad075e1aead5478" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1webhooks__update__t_1aae35038ecb874c46e355fac3863615d0" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1webhooks__update__t_1af32126d4ed56366b4413c84b272383b7" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1webhooks__update__t_1a4d5c139c862c5ed02227b1e9ffc38095" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a9ef98cebb9c0a5ab75a4362d1b40fb71" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>from</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1aca2880114f69b7ba62eb5137824c1432" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>is_cancelled</name></member>
      <member refid="structdpp_1_1webhooks__update__t_1a2500c6d9987fbfc509fd0a960b1968e9" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>operator=</name></member>
      <member refid="structdpp_1_1webhooks__update__t_1a4645c2cc7dfe1def0b936d5726f7b8db" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>operator=</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>raw_event</name></member>
      <member refid="structdpp_1_1webhooks__update__t_1a39a25531b301ffc214ddd17a7b3475f3" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>webhook_channel</name></member>
      <member refid="structdpp_1_1webhooks__update__t_1ab4ff84fc65e90fe97fa0526d0976f7ae" prot="public" virt="non-virtual"><scope>dpp::webhooks_update_t</scope><name>webhook_guild</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a2bed0468ebf80c46bf6ee2407afa2cfd" prot="public" virt="virtual"><scope>dpp::webhooks_update_t</scope><name>~event_dispatch_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
