<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="install-windows-clion-vcpkg" kind="page">
    <compoundname>install-windows-clion-vcpkg</compoundname>
    <title>Building a Discord Bot using CLion &amp; VCPKG (Windows)</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>This page is for <bold>Windows only</bold>. If you want to use CLion on Linux, look to use <ref refid="build-a-discord-bot-linux-clion" kindref="compound">this page</ref>. Like always with windows, we highly recommends you use the <ulink url="https://github.com/brainboxdotcc/windows-bot-template/">pre-made Visual Studio template</ulink>. This tutorial also assumes you have installed D++ via VCPKG already. If you haven&apos;t, look at <ref refid="install-vcpkg" kindref="compound">this page</ref>.</para>
</simplesect>
</para>
<sect3 id="install-windows-clion-vcpkg_1autotoc_md163">
<title>Changing Toolchains</title>
<para><simplesect kind="note"><para>If you have already configured your toolchain to use anything <bold>but</bold> MinGW64, then you can skip to the next section. Otherwise, it is <bold>critical</bold> that you follow along with this section. It should also be noted that you <bold>need</bold> Visual Studio for this.</para>
</simplesect>
Head on over to <computeroutput>File &gt; Settings</computeroutput> (Ctrl+Alt+S), then navigate to <computeroutput>Build, Execution, Deployment &gt; Toolchains</computeroutput>.</para>
<para>If there is a Visual Studio toolchain there, drag it to the top of the list. This will make the Visual Studio toolchain the default toolchain.</para>
<para><image type="html" name="clionvstoolchain.png"></image>
</para>
<para>If you don&apos;t have the Visual Studio toolchain, you can hit the plus symbol above the list of toolchains and add a toolchain. This is also how you can add WSL as a toolchain!</para>
<para><image type="html" name="clionvstoolchain2.png"></image>
</para>
<para>From there, you need to drag it to the top (if it didn&apos;t already add at the top) to ensure it&apos;s the default toolchain.</para>
</sect3>
<sect3 id="install-windows-clion-vcpkg_1autotoc_md164">
<title>Using VCPKG with CLion</title>
<para>To use vcpkg in CLion, add the following line to your CMake options in the settings (Located under <computeroutput>Settings &gt; Build, Execution, Deployment &gt; CMake</computeroutput>) <programlisting filename=".cmd"><codeline><highlight class="normal">-DCMAKE_TOOLCHAIN_FILE=path_to_vcpkg_root_folder/scripts/buildsystems/vcpkg.cmake</highlight></codeline>
</programlisting> For example, if your root folder is <computeroutput>C:/vcpkg/</computeroutput> then the CMake option will be: <programlisting filename=".cmd"><codeline><highlight class="normal">-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="install-windows-clion-vcpkg_1autotoc_md165">
<title>Making a test application.</title>
<para>Open your <computeroutput>main.cpp</computeroutput> file and then copy and paste the following <ref refid="firstbot" kindref="compound">example program</ref> in. Then, set your bot token (see <ref refid="creating-a-bot-application" kindref="compound">Creating a Bot Token</ref>). Here&apos;s how your <computeroutput>main.cpp</computeroutput> file should look:</para>
<para><programlisting filename="firstbot.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;dpp/dpp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>BOT_TOKEN<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;add<sp/>your<sp/>token<sp/>here&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref><sp/>bot(BOT_TOKEN);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_log(<ref refid="namespacedpp_1_1utility_1a8c2cc04bb80ffd287b376d5977899277" kindref="member">dpp::utility::cout_logger</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_slashcommand([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1slashcommand__t" kindref="compound">dpp::slashcommand_t</ref>&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.<ref refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" kindref="member">command</ref>.<ref refid="classdpp_1_1interaction_1aabbb8d58d708128098516ed443d5c140" kindref="member">get_command_name</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ping&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event.reply(</highlight><highlight class="stringliteral">&quot;Pong!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_ready([&amp;bot](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1ready__t" kindref="compound">dpp::ready_t</ref>&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dpp::run_once&lt;struct<sp/>register_bot_commands&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bot.global_command_create(<ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref>(</highlight><highlight class="stringliteral">&quot;ping&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Ping<sp/>pong!&quot;</highlight><highlight class="normal">,<sp/>bot.me.id));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.start(<ref refid="namespacedpp_1af447e04d0490cd4a9de085e4a758faa4a155f7db65696b4c09b5fcc41787e4726" kindref="member">dpp::st_wait</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>If everything went well, you should now have a functioning bot! If not, feel free to ask us on the D++ <ulink url="https://discord.gg/dpp">discord server</ulink>.</para>
</sect3>
<sect3 id="install-windows-clion-vcpkg_1autotoc_md166">
<title>Troubleshooting</title>
<para>If you see a message like <computeroutput>Detecting C compiler ABI info - failed</computeroutput> or something along the lines of <computeroutput>&quot;cl.exe&quot; is not able to compile a simple test program</computeroutput>, then try to reinstall <computeroutput>Windows Build Tools</computeroutput> along with the <computeroutput>Windows SDK</computeroutput> from the Visual Studio Installer. </para>
</sect3>
    </detaileddescription>
    <location file="docpages/make_a_bot/clion_windows.md"/>
  </compounddef>
</doxygen>
