<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="user-applications" kind="page">
    <compoundname>user-applications</compoundname>
    <title>Creating User Apps</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="user-applications_1autotoc_md115">
<title>What are User Apps?</title>
<para>A user app is a bot (application) which can be attached to a user&apos;s profile via oauth, rather than being invited to a guild via oauth. This is a relatively new feature on Discord, and will allow you to have your bot to act like a utility for the user, so regardless of what guild they are in, or if they are in a DM with someone else, they have access to your bot&apos;s commands and can issue them, potentially letting all users in that guild, or all users in the DM, see the replies from your slash commands.</para>
<para><simplesect kind="warning"><para>Do not confuse User Apps with <bold>User Bots</bold>. User Apps are a new and very well supported feature, whereas <bold>User Bots</bold> means connecting a user&apos;s token as a bot, and is prohibited by the Discord TOS!</para>
</simplesect>
</para>
</sect1>
<sect1 id="user-applications_1autotoc_md116">
<title>Building the invite</title>
<para>To get started, you will need to configure your bot so that it will accept a user app invite. This is done via the <ulink url="https://discord.com/developers">discord developer portal</ulink>.</para>
<para>Click on your bot in the list of bots, and then choose <bold>Installation</bold> from the left hand menu. You must enable <bold>User Install</bold> if it is not already enabled.</para>
<para>Drop down the choices for <bold>Install link</bold> and change this to <bold>Discord Provided Link</bold>. The second box should auto-fill with an invite link. Note that this invite link will likely only show the <bold>client_id</bold> value. For default install settings for <bold>User Install</bold>, choose the only possible option, <bold>applications.commands</bold> and for the <bold>Guild Install</bold> section, choose the scopes <bold>applications.commands</bold> and <bold>bot</bold> as at least the bare minimum. You should also set the permissions your bot will use if it is invited to a guild.</para>
<para><simplesect kind="note"><para>The permissions you pick in the Guild Install box only apply if your bot is invited to a guild, not for a user app!</para>
</simplesect>
If you have entered all the settings correctly the screen should look like the one below (except the <bold>Administrator</bold> permission - don&apos;t use this, enter actual permissions!):</para>
<para><image type="html" name="user_apps_1.png"></image>
</para>
</sect1>
<sect1 id="user-applications_1autotoc_md117">
<title>Inviting the application</title>
<para>You can now invite your bot to your profile. Follow the invite link at the top of the screen by clicking <bold>copy</bold> and pasting it into a web browser. You will be prompted to either add the bot to your profile, or to a guild, as shown below. Choose to add the bot to your profile:</para>
<para><image type="html" name="user_apps_2.png"></image>
</para>
<para>You may be prompted to prove you are not a robot (you aren&apos;t a robot, right? ðŸ¤–). Afterwards, the bot will be successfully added to your profile:</para>
<para><image type="html" name="user_apps_3.png"></image>
</para>
</sect1>
<sect1 id="user-applications_1autotoc_md118">
<title>Creating the program</title>
<para>From this point on, right now, your bot will do nothing as you haven&apos;t added any code yet to make it operate as a user app. This comes next. Below is an example bot with one user application command.</para>
<para>There are several important things to note in this program:</para>
<para><itemizedlist>
<listitem><para>When adding a new slash command, you must use the <ref refid="classdpp_1_1slashcommand_1a4f9ea168b2308c409de2a0ef91a958ec" kindref="member">dpp::slashcommand::set_interaction_contexts</ref> function to set where this command is visible. You can specify any one of three possible values to be added to the vector:<itemizedlist>
<listitem><para><ref refid="namespacedpp_1aae430aca529d808c16a22954928b3896a3629f190a192f8b29d375e02a0061dd8" kindref="member">dpp::itc_guild</ref>: A standard slash command, visible in guild channels</para>
</listitem><listitem><para><ref refid="namespacedpp_1aae430aca529d808c16a22954928b3896a8217d72fa2d1d32d0030027d53732152" kindref="member">dpp::itc_bot_dm</ref>: A standard slash command, accessible in DMs with the bot (this replaces the functionality of <ref refid="classdpp_1_1slashcommand_1acb868504a7b3b7d5cdaf6848ae785ad6" kindref="member">dpp::slashcommand::set_dm_permission</ref>)</para>
</listitem><listitem><para><ref refid="namespacedpp_1aae430aca529d808c16a22954928b3896aaa37c2739be25aa73960f594949b85c2" kindref="member">dpp::itc_private_channel</ref>: A user application command, visible anywhere to the user who added it to their profile.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>When responding to the slash command, most things remain the same, except of course if you reply to a user app command most things relating to the guild will be uninitialised default values. This is because there is no guild to reference.</para>
</listitem><listitem><para>You can use <ref refid="classdpp_1_1interaction_1ae8022b4e58f5bafcf28427a4cdac71ed" kindref="member">dpp::interaction::is_user_app_interaction()</ref> to determine if the interaction is initiated from a user app command, or a guild command. <ref refid="classdpp_1_1interaction_1a98d337ebf0ecef5d263098c4a1cd5d7a" kindref="member">dpp::interaction::is_guild_interaction()</ref> does the inverse.</para>
</listitem><listitem><para>Calling <ref refid="classdpp_1_1interaction_1a6f042eba33c6d6ff14b612c0bf46fab3" kindref="member">dpp::interaction::get_authorizing_integration_owner()</ref> with the parameter value <ref refid="namespacedpp_1a772599e8a351acf3a1d4e0267ca15158a9601746fb7bd857786fc2729836e1211" kindref="member">dpp::ait_user_install</ref> will give you the <ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref> ID of the user who has the app added to their profile, if a user is currently executing a user app command. If you call this function when not in a user app context, you will get an uninitialised snowflake value instead.</para>
</listitem></itemizedlist>
</para>
<sect2 id="user-applications_1autotoc_md119">
<title>Example Program</title>
<para><programlisting filename="user_apps.cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;dpp/dpp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref><sp/>bot(</highlight><highlight class="stringliteral">&quot;token&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_log(<ref refid="namespacedpp_1_1utility_1a8c2cc04bb80ffd287b376d5977899277" kindref="member">dpp::utility::cout_logger</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.on_ready([&amp;bot](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>event)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dpp::run_once&lt;struct<sp/>boot_t&gt;())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bot.global_bulk_command_create({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdpp_1_1slashcommand" kindref="compound">dpp::slashcommand</ref>(</highlight><highlight class="stringliteral">&quot;userapp&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>user<sp/>app<sp/>command&quot;</highlight><highlight class="normal">,<sp/>bot.me.id)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classdpp_1_1slashcommand_1a4f9ea168b2308c409de2a0ef91a958ec" kindref="member">set_interaction_contexts</ref>({<ref refid="namespacedpp_1aae430aca529d808c16a22954928b3896a3629f190a192f8b29d375e02a0061dd8" kindref="member">dpp::itc_guild</ref>,<sp/><ref refid="namespacedpp_1aae430aca529d808c16a22954928b3896a8217d72fa2d1d32d0030027d53732152" kindref="member">dpp::itc_bot_dm</ref>,<sp/><ref refid="namespacedpp_1aae430aca529d808c16a22954928b3896aaa37c2739be25aa73960f594949b85c2" kindref="member">dpp::itc_private_channel</ref>})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.register_command(</highlight><highlight class="stringliteral">&quot;userapp&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdpp_1_1slashcommand__t" kindref="compound">dpp::slashcommand_t</ref>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.<ref refid="structdpp_1_1interaction__create__t_1a34f374b358f8d2d49fa93bfe5a2c0493" kindref="member">reply</ref>(</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>`/userapp`<sp/>command.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.<ref refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" kindref="member">command</ref>.<ref refid="classdpp_1_1interaction_1ae8022b4e58f5bafcf28427a4cdac71ed" kindref="member">is_user_app_interaction</ref>()<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Executing<sp/>as<sp/>a<sp/>user<sp/>interaction<sp/>owned<sp/>by<sp/>user:<sp/>&lt;@&quot;</highlight><highlight class="normal"><sp/>+<sp/>e.<ref refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" kindref="member">command</ref>.<ref refid="classdpp_1_1interaction_1a6f042eba33c6d6ff14b612c0bf46fab3" kindref="member">get_authorizing_integration_owner</ref>(<ref refid="namespacedpp_1a772599e8a351acf3a1d4e0267ca15158a9601746fb7bd857786fc2729836e1211" kindref="member">dpp::ait_user_install</ref>).<ref refid="classdpp_1_1snowflake_1a6231d024d2ab5d3123d456a90bb24b33" kindref="member">str</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Executing<sp/>as<sp/>a<sp/>guild<sp/>interaction<sp/>on<sp/>guild<sp/>id<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>e.<ref refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" kindref="member">command</ref>.<ref refid="classdpp_1_1interaction_1a6301d14a86e9b51b656ef589c2e39009" kindref="member">guild_id</ref>.<ref refid="classdpp_1_1snowflake_1a6231d024d2ab5d3123d456a90bb24b33" kindref="member">str</ref>()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bot.start(<ref refid="namespacedpp_1af447e04d0490cd4a9de085e4a758faa4a155f7db65696b4c09b5fcc41787e4726" kindref="member">dpp::st_wait</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="user-applications_1autotoc_md120">
<title>Testing</title>
<para>If all goes to plan, your new command will be accessible everywhere!</para>
<para><image type="html" name="user_apps_4.png"></image>
 </para>
</sect1>
    </detaileddescription>
    <location file="docpages/example_programs/interactions_and_components/user_apps.md"/>
  </compounddef>
</doxygen>
