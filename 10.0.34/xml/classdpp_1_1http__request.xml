<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1http__request" kind="class" language="C++" prot="public">
    <compoundname>dpp::http_request</compoundname>
    <includes local="no">queues.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1http__request_1a12922296092235b17ac7408824b87d8b" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1ae3249e99494d04bb4be50341f474621e" kindref="member">http_completion_event</ref></type>
        <definition>http_completion_event dpp::http_request::complete_handler</definition>
        <argsstring></argsstring>
        <name>complete_handler</name>
        <briefdescription>
<para>Completion callback. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="223" column="23" bodyfile="include/dpp/queues.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1a11692126b1bed5e583a8844007be7be4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::http_request::completed</definition>
        <argsstring></argsstring>
        <name>completed</name>
        <briefdescription>
<para>True if request has been made. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="228" column="6" bodyfile="include/dpp/queues.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1a123a4de946395b4d21b57156269b23d3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::http_request::non_discord</definition>
        <argsstring></argsstring>
        <name>non_discord</name>
        <briefdescription>
<para>True for requests that are not going to discord (rate limits code skipped). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="233" column="6" bodyfile="include/dpp/queues.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1http__request_1a31cf6b360a893292435ea56b8d6a94c6" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::http_request::endpoint</definition>
        <argsstring></argsstring>
        <name>endpoint</name>
        <briefdescription>
<para>Endpoint name e.g. /api/users. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="239" column="13" bodyfile="include/dpp/queues.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1a9d1ca5488bf190a37a485a856b75fda9" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::http_request::file_content</definition>
        <argsstring></argsstring>
        <name>file_content</name>
        <briefdescription>
<para>Upload file contents (binary). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="269" column="13" bodyfile="include/dpp/queues.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1ad4e814071e0b9e7483976b5283aca161" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::http_request::file_mimetypes</definition>
        <argsstring></argsstring>
        <name>file_mimetypes</name>
        <briefdescription>
<para>Upload file mime types. application/octet-stream if unspecified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="275" column="13" bodyfile="include/dpp/queues.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1a734b0df9c63a7b8298511504c64e6a1c" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::http_request::file_name</definition>
        <argsstring></argsstring>
        <name>file_name</name>
        <briefdescription>
<para>Upload file name (server side). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="264" column="13" bodyfile="include/dpp/queues.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1a6717d11da20292e2dc77826def3aaef3" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">http_method</ref></type>
        <definition>http_method dpp::http_request::method</definition>
        <argsstring></argsstring>
        <name>method</name>
        <briefdescription>
<para>HTTP method for request. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="254" column="13" bodyfile="include/dpp/queues.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1aedac6464c95174507a322861191ccc02" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::http_request::mimetype</definition>
        <argsstring></argsstring>
        <name>mimetype</name>
        <briefdescription>
<para>Request mime type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="280" column="13" bodyfile="include/dpp/queues.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1a349ce3f41c300aeac915d38f8f1d8642" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::http_request::parameters</definition>
        <argsstring></argsstring>
        <name>parameters</name>
        <briefdescription>
<para>Major and minor parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="244" column="13" bodyfile="include/dpp/queues.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1adab1976475788ca96b5b52349367a322" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::http_request::postdata</definition>
        <argsstring></argsstring>
        <name>postdata</name>
        <briefdescription>
<para>Postdata for POST and PUT. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="249" column="13" bodyfile="include/dpp/queues.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1af9f824dd084100d0a2704ccba05f77f3" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::http_request::protocol</definition>
        <argsstring></argsstring>
        <name>protocol</name>
        <briefdescription>
<para>HTTP protocol. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="295" column="13" bodyfile="include/dpp/queues.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1a96bc944a868341d97772beca88f02ac0" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::http_request::reason</definition>
        <argsstring></argsstring>
        <name>reason</name>
        <briefdescription>
<para>Audit log reason for Discord requests, if non-empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="259" column="13" bodyfile="include/dpp/queues.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1a7248f6e47440f670e2a9adbfb50022bc" prot="public" static="no" mutable="no">
        <type>std::multimap&lt; std::string, std::string &gt;</type>
        <definition>std::multimap&lt;std::string, std::string&gt; dpp::http_request::req_headers</definition>
        <argsstring></argsstring>
        <name>req_headers</name>
        <briefdescription>
<para>Request headers (non-discord requests only). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="285" column="15" bodyfile="include/dpp/queues.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1http__request_1ad504dae645a77b338bc6a14e5dd44a7d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::http_request::waiting</definition>
        <argsstring></argsstring>
        <name>waiting</name>
        <briefdescription>
<para>Waiting for rate limit to expire. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="290" column="6" bodyfile="include/dpp/queues.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1http__request_1a301bd2f8ac5bb5d11e750f964648aa3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::http_request::http_request</definition>
        <argsstring>(const std::string &amp;_endpoint, const std::string &amp;_parameters, http_completion_event completion, const std::string &amp;_postdata=&quot;&quot;, http_method method=m_get, const std::string &amp;audit_reason=&quot;&quot;, const std::string &amp;filename=&quot;&quot;, const std::string &amp;filecontent=&quot;&quot;, const std::string &amp;filemimetype=&quot;&quot;, const std::string &amp;http_protocol=&quot;1.1&quot;)</argsstring>
        <name>http_request</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>_endpoint</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_parameters</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1ae3249e99494d04bb4be50341f474621e" kindref="member">http_completion_event</ref></type>
          <declname>completion</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_postdata</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">http_method</ref></type>
          <declname>method</declname>
          <defval><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88a1c5397a2ab65a9b09e466d3e7cf5a82e" kindref="member">m_get</ref></defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>audit_reason</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filecontent</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filemimetype</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_protocol</declname>
          <defval>&quot;1.1&quot;</defval>
        </param>
        <briefdescription>
<para>Constructor. When constructing one of these objects it should be passed to <ref refid="classdpp_1_1request__queue_1a78a3adde76b2c5ddb6c06b36d00a9646" kindref="member">request_queue::post_request()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The API endpoint, e.g. /api/guilds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Major and minor parameters for the endpoint e.g. a user id or guild id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>completion</parametername>
</parameternamelist>
<parameterdescription>
<para>completion event to call when done </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_postdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to send in POST and PUT requests </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>The HTTP method to use from <ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">dpp::http_method</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>audit_reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Audit log reason to send, empty to send none </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename (server side) of any uploaded file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filecontent</parametername>
</parameternamelist>
<parameterdescription>
<para>The binary content of any uploaded file for the request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filemimetype</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME type of any uploaded file for the request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP protocol </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__request_1a7146bfdfe4a82ae13556cc6b541cb61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::http_request::http_request</definition>
        <argsstring>(const std::string &amp;_endpoint, const std::string &amp;_parameters, http_completion_event completion, const std::string &amp;_postdata=&quot;&quot;, http_method method=m_get, const std::string &amp;audit_reason=&quot;&quot;, const std::vector&lt; std::string &gt; &amp;filename={}, const std::vector&lt; std::string &gt; &amp;filecontent={}, const std::vector&lt; std::string &gt; &amp;filemimetypes={}, const std::string &amp;http_protocol=&quot;1.1&quot;)</argsstring>
        <name>http_request</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>_endpoint</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_parameters</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1ae3249e99494d04bb4be50341f474621e" kindref="member">http_completion_event</ref></type>
          <declname>completion</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_postdata</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">http_method</ref></type>
          <declname>method</declname>
          <defval><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88a1c5397a2ab65a9b09e466d3e7cf5a82e" kindref="member">m_get</ref></defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>audit_reason</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>filename</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>filecontent</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>filemimetypes</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_protocol</declname>
          <defval>&quot;1.1&quot;</defval>
        </param>
        <briefdescription>
<para>Constructor. When constructing one of these objects it should be passed to <ref refid="classdpp_1_1request__queue_1a78a3adde76b2c5ddb6c06b36d00a9646" kindref="member">request_queue::post_request()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The API endpoint, e.g. /api/guilds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Major and minor parameters for the endpoint e.g. a user id or guild id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>completion</parametername>
</parameternamelist>
<parameterdescription>
<para>completion event to call when done </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_postdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to send in POST and PUT requests </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>The HTTP method to use from <ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">dpp::http_method</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>audit_reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Audit log reason to send, empty to send none </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename (server side) of any uploaded file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filecontent</parametername>
</parameternamelist>
<parameterdescription>
<para>The binary content of any uploaded file for the request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filemimetypes</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIME type of any uploaded file for the request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP protocol </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__request_1a581bddd3af516b4463d327659318f536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::http_request::http_request</definition>
        <argsstring>(const std::string &amp;_url, http_completion_event completion, http_method method=m_get, const std::string &amp;_postdata=&quot;&quot;, const std::string &amp;_mimetype=&quot;text/plain&quot;, const std::multimap&lt; std::string, std::string &gt; &amp;_headers={}, const std::string &amp;http_protocol=&quot;1.1&quot;, time_t _request_timeout=5)</argsstring>
        <name>http_request</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>_url</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1ae3249e99494d04bb4be50341f474621e" kindref="member">http_completion_event</ref></type>
          <declname>completion</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">http_method</ref></type>
          <declname>method</declname>
          <defval><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88a1c5397a2ab65a9b09e466d3e7cf5a82e" kindref="member">m_get</ref></defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_postdata</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_mimetype</declname>
          <defval>&quot;text/plain&quot;</defval>
        </param>
        <param>
          <type>const std::multimap&lt; std::string, std::string &gt; &amp;</type>
          <declname>_headers</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_protocol</declname>
          <defval>&quot;1.1&quot;</defval>
        </param>
        <param>
          <type>time_t</type>
          <declname>_request_timeout</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
<para>Constructor. When constructing one of these objects it should be passed to <ref refid="classdpp_1_1request__queue_1a78a3adde76b2c5ddb6c06b36d00a9646" kindref="member">request_queue::post_request()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_url</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw HTTP url </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>completion</parametername>
</parameternamelist>
<parameterdescription>
<para>completion event to call when done </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>The HTTP method to use from <ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">dpp::http_method</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_postdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to send in POST and PUT requests </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_mimetype</parametername>
</parameternamelist>
<parameterdescription>
<para>POST data mime type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_headers</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP headers to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP protocol </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_request_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>How many seconds before the connection is considered failed if not finished </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__request_1a94d82f10c9922b400b1dd5b8459a6691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::http_request::~http_request</definition>
        <argsstring>()</argsstring>
        <name>~http_request</name>
        <briefdescription>
<para>Destroy the http request object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__request_1a6f350d4340fe77e224783091607f63eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::http_request::complete</definition>
        <argsstring>(const http_request_completion_t &amp;c)</argsstring>
        <name>complete</name>
        <param>
          <type>const <ref refid="structdpp_1_1http__request__completion__t" kindref="compound">http_request_completion_t</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Call the completion callback, if the request is complete. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>callback to call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="356" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__request_1af5e8977dbdb5659457f931cbb1676216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::http_request::DPP_DEPRECATED</definition>
        <argsstring>(&quot;Please now use dpp::cluster::request_timeout&quot;) time_t request_timeout</argsstring>
        <name>DPP_DEPRECATED</name>
        <param>
          <type>&quot;Please now use <ref refid="classdpp_1_1cluster_1a7ab5b992db2b53f80cc466deffec96b8" kindref="member">dpp::cluster::request_timeout</ref>&quot;</type>
        </param>
        <briefdescription>
<para>How many seconds before the connection is considered failed if not finished. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000246"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Please now use <ref refid="classdpp_1_1cluster_1a7ab5b992db2b53f80cc466deffec96b8" kindref="member">dpp::cluster::request_timeout</ref> </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__request_1ab5f1688d8b657f6d0f0a4dd8df7b8731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::http_request::is_completed</definition>
        <argsstring>()</argsstring>
        <name>is_completed</name>
        <briefdescription>
<para>Returns true if the request is complete. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="365" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1http__request_1a3693b97e3f58505fa4187a86eecaaa39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1http__request__completion__t" kindref="compound">http_request_completion_t</ref></type>
        <definition>http_request_completion_t dpp::http_request::run</definition>
        <argsstring>(class cluster *owner)</argsstring>
        <name>run</name>
        <param>
          <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>owner</declname>
        </param>
        <briefdescription>
<para>Execute the HTTP request and mark the request complete. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>creating cluster </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/queues.h" line="362" column="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A HTTP request. </para>
    </briefdescription>
    <detaileddescription>
<para>You should instantiate one of these objects via its constructor, and pass a pointer to it into an instance of <ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref>. Although you can directly call the <ref refid="classdpp_1_1http__request_1a3693b97e3f58505fa4187a86eecaaa39" kindref="member">run()</ref> method of the object and it will make a HTTP call, be aware that if you do this, it will be a <bold>BLOCKING call</bold> (not asynchronous) and will not respect rate limits, as both of these functions are managed by the <ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> class. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="7">
        <label>bool</label>
      </node>
      <node id="1">
        <label>dpp::http_request</label>
        <link refid="classdpp_1_1http__request"/>
        <childnode refid="2" relation="usage">
          <edgelabel>endpoint</edgelabel>
          <edgelabel>mimetype</edgelabel>
          <edgelabel>parameters</edgelabel>
          <edgelabel>postdata</edgelabel>
          <edgelabel>protocol</edgelabel>
          <edgelabel>reason</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>method</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>file_content</edgelabel>
          <edgelabel>file_mimetypes</edgelabel>
          <edgelabel>file_name</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>req_headers</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>waiting</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>http_method</label>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="6">
        <label>multimap&lt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>vector&lt;</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/queues.h" line="219" column="1" bodyfile="include/dpp/queues.h" bodystart="219" bodyend="366"/>
    <listofallmembers>
      <member refid="classdpp_1_1http__request_1a6f350d4340fe77e224783091607f63eb" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>complete</name></member>
      <member refid="classdpp_1_1http__request_1a12922296092235b17ac7408824b87d8b" prot="private" virt="non-virtual"><scope>dpp::http_request</scope><name>complete_handler</name></member>
      <member refid="classdpp_1_1http__request_1a11692126b1bed5e583a8844007be7be4" prot="private" virt="non-virtual"><scope>dpp::http_request</scope><name>completed</name></member>
      <member refid="classdpp_1_1http__request_1af5e8977dbdb5659457f931cbb1676216" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>DPP_DEPRECATED</name></member>
      <member refid="classdpp_1_1http__request_1a31cf6b360a893292435ea56b8d6a94c6" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>endpoint</name></member>
      <member refid="classdpp_1_1http__request_1a9d1ca5488bf190a37a485a856b75fda9" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>file_content</name></member>
      <member refid="classdpp_1_1http__request_1ad4e814071e0b9e7483976b5283aca161" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>file_mimetypes</name></member>
      <member refid="classdpp_1_1http__request_1a734b0df9c63a7b8298511504c64e6a1c" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>file_name</name></member>
      <member refid="classdpp_1_1http__request_1a301bd2f8ac5bb5d11e750f964648aa3c" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>http_request</name></member>
      <member refid="classdpp_1_1http__request_1a7146bfdfe4a82ae13556cc6b541cb61a" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>http_request</name></member>
      <member refid="classdpp_1_1http__request_1a581bddd3af516b4463d327659318f536" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>http_request</name></member>
      <member refid="classdpp_1_1http__request_1ab5f1688d8b657f6d0f0a4dd8df7b8731" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>is_completed</name></member>
      <member refid="classdpp_1_1http__request_1a6717d11da20292e2dc77826def3aaef3" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>method</name></member>
      <member refid="classdpp_1_1http__request_1aedac6464c95174507a322861191ccc02" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>mimetype</name></member>
      <member refid="classdpp_1_1http__request_1a123a4de946395b4d21b57156269b23d3" prot="private" virt="non-virtual"><scope>dpp::http_request</scope><name>non_discord</name></member>
      <member refid="classdpp_1_1http__request_1a349ce3f41c300aeac915d38f8f1d8642" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>parameters</name></member>
      <member refid="classdpp_1_1http__request_1adab1976475788ca96b5b52349367a322" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>postdata</name></member>
      <member refid="classdpp_1_1http__request_1af9f824dd084100d0a2704ccba05f77f3" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>protocol</name></member>
      <member refid="classdpp_1_1http__request_1a96bc944a868341d97772beca88f02ac0" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>reason</name></member>
      <member refid="classdpp_1_1http__request_1a7248f6e47440f670e2a9adbfb50022bc" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>req_headers</name></member>
      <member refid="classdpp_1_1http__request_1a3693b97e3f58505fa4187a86eecaaa39" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>run</name></member>
      <member refid="classdpp_1_1http__request_1ad504dae645a77b338bc6a14e5dd44a7d" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>waiting</name></member>
      <member refid="classdpp_1_1http__request_1a94d82f10c9922b400b1dd5b8459a6691" prot="public" virt="non-virtual"><scope>dpp::http_request</scope><name>~http_request</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
