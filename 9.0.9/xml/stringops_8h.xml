<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="stringops_8h" kind="file" language="C++">
    <compoundname>stringops.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">locale</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="1">
        <label>stringops.h</label>
        <link refid="stringops_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>iomanip</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>locale</label>
      </node>
      <node id="6">
        <label>sstream</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="stringops_8h_1a82332eb72c63452b2c62a6b86e514204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Comma</definition>
        <argsstring>(T value)</argsstring>
        <name>Comma</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Add commas to a string (or dots) based on current locale server-side. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of numeric value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string number with commas added </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stringops.h" line="103" column="24" bodyfile="include/dpp/stringops.h" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="stringops_8h_1a33fa26eff29b36745d988af1052e00c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T from_string</definition>
        <argsstring>(const std::string &amp;s, std::ios_base &amp;(*f)(std::ios_base &amp;))</argsstring>
        <name>from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::ios_base &amp;(*)(std::ios_base &amp;)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Convert any value from a string to another type using stringstream. The optional second parameter indicates the format of the input string, e.g. std::dec for decimal, std::hex for hex, std::oct for octal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type to convert to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>String to convert from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Numeric base, e.g. <computeroutput>std::dec</computeroutput> or <computeroutput>std::hex</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T Returned numeric value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stringops.h" line="121" column="15" bodyfile="include/dpp/stringops.h" bodystart="121" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="stringops_8h_1aea74b6d377e037ed7c1b47acde68f7c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint64_t</type>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t from_string</definition>
        <argsstring>(const std::string &amp;s, std::ios_base &amp;(*f)(std::ios_base &amp;))</argsstring>
        <name>from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::ios_base &amp;(*)(std::ios_base &amp;)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stringops.h" line="129" column="21" bodyfile="include/dpp/stringops.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="stringops_8h_1a3efb2d6697c544df496c09e14fb003bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint32_t</type>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t from_string</definition>
        <argsstring>(const std::string &amp;s, std::ios_base &amp;(*f)(std::ios_base &amp;))</argsstring>
        <name>from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::ios_base &amp;(*)(std::ios_base &amp;)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stringops.h" line="134" column="21" bodyfile="include/dpp/stringops.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="stringops_8h_1a50a020ec73929e8f8cb424a939ddbc5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int from_string</definition>
        <argsstring>(const std::string &amp;s, std::ios_base &amp;(*f)(std::ios_base &amp;))</argsstring>
        <name>from_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::ios_base &amp;(*)(std::ios_base &amp;)</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stringops.h" line="139" column="16" bodyfile="include/dpp/stringops.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="stringops_8h_1af2ab78d76b1e2c8915900e877c0eb49c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::basic_string&lt; T &gt;</type>
        <definition>std::basic_string&lt; T &gt; lowercase</definition>
        <argsstring>(const std::basic_string&lt; T &gt; &amp;s)</argsstring>
        <name>lowercase</name>
        <param>
          <type>const std::basic_string&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Convert a string to lowercase using tolower() </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>String to lowercase </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::basic_string&lt;T&gt; lowercased string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stringops.h" line="40" column="31" bodyfile="include/dpp/stringops.h" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="stringops_8h_1a141800ae9340c3d923a1730918046a56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string ltrim</definition>
        <argsstring>(std::string s)</argsstring>
        <name>ltrim</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>trim from beginning of string (left) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to trim </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string trimmed string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stringops.h" line="79" column="20" bodyfile="include/dpp/stringops.h" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="stringops_8h_1a4b478def7dfcd119f55fb59c9ee4382a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rtrim</definition>
        <argsstring>(std::string s)</argsstring>
        <name>rtrim</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>trim from end of string (right) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>String to trim </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string trimmed string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stringops.h" line="67" column="20" bodyfile="include/dpp/stringops.h" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="stringops_8h_1a9de43e600ebc3a0f919582b007c25322" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string trim</definition>
        <argsstring>(std::string s)</argsstring>
        <name>trim</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Trim from both ends of string (right then left) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to trim </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string trimmed string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stringops.h" line="91" column="20" bodyfile="include/dpp/stringops.h" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="stringops_8h_1aaa4acc4ff4e08ab5cf379ed6351dcf53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::basic_string&lt; T &gt;</type>
        <definition>std::basic_string&lt; T &gt; uppercase</definition>
        <argsstring>(const std::basic_string&lt; T &gt; &amp;s)</argsstring>
        <name>uppercase</name>
        <param>
          <type>const std::basic_string&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Convert a string to uppercase using toupper() </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>String to uppercase </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::basic_string&lt;T&gt; uppercased string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/stringops.h" line="54" column="31" bodyfile="include/dpp/stringops.h" bodystart="54" bodyend="59"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/dpp/stringops.h"/>
  </compounddef>
</doxygen>
