<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1dispatcher" kind="class" language="C++" prot="public">
    <compoundname>dpp::dispatcher</compoundname>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1abe9360d2e501ae40d513bf2a737758b8" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1application__command__create__t" kindref="compound">application_command_create_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const application_command_create_t&amp; event)&gt; dpp::dispatcher::application_command_create</definition>
        <argsstring></argsstring>
        <name>application_command_create</name>
        <briefdescription>
<para>Event handler function pointer for guild member remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="958" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="958" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1adeda9731343cd06bd13b6aaf716082f3" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1application__command__delete__t" kindref="compound">application_command_delete_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const application_command_delete_t&amp; event)&gt; dpp::dispatcher::application_command_delete</definition>
        <argsstring></argsstring>
        <name>application_command_delete</name>
        <briefdescription>
<para>Event handler function pointer for application command delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="950" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="950" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a1f4cdfa198a3aa8cbbbf3f6bd5ffd447" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1application__command__update__t" kindref="compound">application_command_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const application_command_update_t&amp; event)&gt; dpp::dispatcher::application_command_update</definition>
        <argsstring></argsstring>
        <name>application_command_update</name>
        <briefdescription>
<para>Event handler function pointer for application command update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1054" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a95261b35417e81c65e9046eca9f0d57c" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1button__click__t" kindref="compound">button_click_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const button_click_t&amp; event)&gt; dpp::dispatcher::button_click</definition>
        <argsstring></argsstring>
        <name>button_click</name>
        <briefdescription>
<para>Event handler function pointer for button click event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="922" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ac82562a94e2bca3629f6e0d7ad9868e2" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1channel__create__t" kindref="compound">channel_create_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const channel_create_t&amp; event)&gt; dpp::dispatcher::channel_create</definition>
        <argsstring></argsstring>
        <name>channel_create</name>
        <briefdescription>
<para>Event handler function pointer for guild channel create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="990" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a941fe0c8a4f52c1bf82c34a5c38d86b2" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1channel__delete__t" kindref="compound">channel_delete_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const channel_delete_t&amp; event)&gt; dpp::dispatcher::channel_delete</definition>
        <argsstring></argsstring>
        <name>channel_delete</name>
        <briefdescription>
<para>Event handler function pointer for channel delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="934" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a8a65cd0820a545d14b01324cf1508bc7" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1channel__pins__update__t" kindref="compound">channel_pins_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const channel_pins_update_t&amp; event)&gt; dpp::dispatcher::channel_pins_update</definition>
        <argsstring></argsstring>
        <name>channel_pins_update</name>
        <briefdescription>
<para>Event handler function pointer for channel pins update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1010" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1010" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ad4a6151ce96b42aef5d3ceb6d9f55ee5" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1channel__update__t" kindref="compound">channel_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const channel_update_t&amp; event)&gt; dpp::dispatcher::channel_update</definition>
        <argsstring></argsstring>
        <name>channel_update</name>
        <briefdescription>
<para>Event handler function pointer for channel update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="938" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a171442fd458ad1a423ac48e44f269e20" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__ban__add__t" kindref="compound">guild_ban_add_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_ban_add_t&amp; event)&gt; dpp::dispatcher::guild_ban_add</definition>
        <argsstring></argsstring>
        <name>guild_ban_add</name>
        <briefdescription>
<para>Event handler function pointer for guild ban add event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1074" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1074" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a3cc9e992868216001c607d0473425795" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__ban__remove__t" kindref="compound">guild_ban_remove_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_ban_remove_t&amp; event)&gt; dpp::dispatcher::guild_ban_remove</definition>
        <argsstring></argsstring>
        <name>guild_ban_remove</name>
        <briefdescription>
<para>Event handler function pointer for guild ban remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1078" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a1f70d6226670de148013d4ad7281afe9" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__create__t" kindref="compound">guild_create_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_create_t&amp; event)&gt; dpp::dispatcher::guild_create</definition>
        <argsstring></argsstring>
        <name>guild_create</name>
        <briefdescription>
<para>Event handler function pointer for guild create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="986" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a8403bfd35d479d62884057b5561ebb6a" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__delete__t" kindref="compound">guild_delete_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_delete_t&amp; event)&gt; dpp::dispatcher::guild_delete</definition>
        <argsstring></argsstring>
        <name>guild_delete</name>
        <briefdescription>
<para>Event handler function pointer for guild delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="930" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ac63839af90854dbe6a9fbb801075d862" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__emojis__update__t" kindref="compound">guild_emojis_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_emojis_update_t&amp; event)&gt; dpp::dispatcher::guild_emojis_update</definition>
        <argsstring></argsstring>
        <name>guild_emojis_update</name>
        <briefdescription>
<para>Event handler function pointer for guild emojis update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1022" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1022" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a866a5a142d35804453929dcc153435d6" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__integrations__update__t" kindref="compound">guild_integrations_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_integrations_update_t&amp; event)&gt; dpp::dispatcher::guild_integrations_update</definition>
        <argsstring></argsstring>
        <name>guild_integrations_update</name>
        <briefdescription>
<para>Event handler function pointer for guild integrations update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1046" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a9e95a46331f7dadc12210bee432a49e6" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__join__request__delete__t" kindref="compound">guild_join_request_delete_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_join_request_delete_t&amp; event)&gt; dpp::dispatcher::guild_join_request_delete</definition>
        <argsstring></argsstring>
        <name>guild_join_request_delete</name>
        <briefdescription>
<para>Event handler function pointer for guild join request delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1138" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a4a862f7dcddef43cc9b5bfe06d6577bb" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__member__add__t" kindref="compound">guild_member_add_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_member_add_t&amp; event)&gt; dpp::dispatcher::guild_member_add</definition>
        <argsstring></argsstring>
        <name>guild_member_add</name>
        <briefdescription>
<para>Event handler function pointer for guild member add event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1034" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1034" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a99f8ce259906ef7912c8509ad3ff70ac" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__member__remove__t" kindref="compound">guild_member_remove_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_member_remove_t&amp; event)&gt; dpp::dispatcher::guild_member_remove</definition>
        <argsstring></argsstring>
        <name>guild_member_remove</name>
        <briefdescription>
<para>Event handler function pointer for guild member remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="954" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ac2521b114ee75a9d4f0aa36f9aba63f2" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__member__update__t" kindref="compound">guild_member_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_member_update_t&amp; event)&gt; dpp::dispatcher::guild_member_update</definition>
        <argsstring></argsstring>
        <name>guild_member_update</name>
        <briefdescription>
<para>Event handler function pointer for guild member update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1050" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1050" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a299d7f48d2cadf09b389850ee115fc5e" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__members__chunk__t" kindref="compound">guild_members_chunk_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_members_chunk_t&amp; event)&gt; dpp::dispatcher::guild_members_chunk</definition>
        <argsstring></argsstring>
        <name>guild_members_chunk</name>
        <briefdescription>
<para>Event handler function pointer for guild members chunk event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="978" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="978" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ac698fd6fd317a93f4d1feb7e8710ee4f" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__role__create__t" kindref="compound">guild_role_create_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_role_create_t&amp; event)&gt; dpp::dispatcher::guild_role_create</definition>
        <argsstring></argsstring>
        <name>guild_role_create</name>
        <briefdescription>
<para>Event handler function pointer for guild role create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="966" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="966" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ae134fc0cbe3f4537ce557f72571c8eed" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__role__delete__t" kindref="compound">guild_role_delete_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_role_delete_t&amp; event)&gt; dpp::dispatcher::guild_role_delete</definition>
        <argsstring></argsstring>
        <name>guild_role_delete</name>
        <briefdescription>
<para>Event handler function pointer for guild role delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1006" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a276a38f9d9e9a89c55f07c2c20a7ea9c" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__role__update__t" kindref="compound">guild_role_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_role_update_t&amp; event)&gt; dpp::dispatcher::guild_role_update</definition>
        <argsstring></argsstring>
        <name>guild_role_update</name>
        <briefdescription>
<para>Event handler function pointer for guild role update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1002" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a0fbab68118106ac916dc8ce2d5ffd825" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__update__t" kindref="compound">guild_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_update_t&amp; event)&gt; dpp::dispatcher::guild_update</definition>
        <argsstring></argsstring>
        <name>guild_update</name>
        <briefdescription>
<para>Event handler function pointer for guild update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1042" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1042" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a9156aeb607b633a0beafb0754840bde2" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1integration__create__t" kindref="compound">integration_create_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const integration_create_t&amp; event)&gt; dpp::dispatcher::integration_create</definition>
        <argsstring></argsstring>
        <name>integration_create</name>
        <briefdescription>
<para>Event handler function pointer for integration create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1082" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1082" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a32054b6807a7abcd456fd8f7ad17f4c3" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1integration__delete__t" kindref="compound">integration_delete_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const integration_delete_t&amp; event)&gt; dpp::dispatcher::integration_delete</definition>
        <argsstring></argsstring>
        <name>integration_delete</name>
        <briefdescription>
<para>Event handler function pointer for integration delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1090" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a650bafe23ae42306008046f8cf3de2a5" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1integration__update__t" kindref="compound">integration_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const integration_update_t&amp; event)&gt; dpp::dispatcher::integration_update</definition>
        <argsstring></argsstring>
        <name>integration_update</name>
        <briefdescription>
<para>Event handler function pointer for integration update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1086" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a40072713dd30b8e37200d3ec91a1d1b2" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1interaction__create__t" kindref="compound">interaction_create_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const interaction_create_t&amp; event)&gt; dpp::dispatcher::interaction_create</definition>
        <argsstring></argsstring>
        <name>interaction_create</name>
        <briefdescription>
<para>Event handler function pointer for interaction create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="918" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a811c8990061c5ce56d221f767ec0576d" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1invite__create__t" kindref="compound">invite_create_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const invite_create_t&amp; event)&gt; dpp::dispatcher::invite_create</definition>
        <argsstring></argsstring>
        <name>invite_create</name>
        <briefdescription>
<para>Event handler function pointer for invite create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1058" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1058" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1acff8bbb12c4d123fbd0b57fb3b48962a" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1invite__delete__t" kindref="compound">invite_delete_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const invite_delete_t&amp; event)&gt; dpp::dispatcher::invite_delete</definition>
        <argsstring></argsstring>
        <name>invite_delete</name>
        <briefdescription>
<para>Event handler function pointer for invite delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1038" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1038" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aa3e934f108231fa426cbcd1956e72b1c" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1log__t" kindref="compound">log_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const log_t&amp; event)&gt; dpp::dispatcher::log</definition>
        <argsstring></argsstring>
        <name>log</name>
        <briefdescription>
<para>Event handler function pointer for log event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="902" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="902" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a8a74c97a762054030a2423c01d3010de" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1message__create__t" kindref="compound">message_create_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const message_create_t&amp; event)&gt; dpp::dispatcher::message_create</definition>
        <argsstring></argsstring>
        <name>message_create</name>
        <briefdescription>
<para>Event handler function pointer for message create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1070" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1070" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ae8816e6679fff4b73ccffa8fa46caa08" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1message__delete__t" kindref="compound">message_delete_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const message_delete_t&amp; event)&gt; dpp::dispatcher::message_delete</definition>
        <argsstring></argsstring>
        <name>message_delete</name>
        <briefdescription>
<para>Event handler function pointer for message delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="946" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ace33de42639a464557e525450a5835b7" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1message__delete__bulk__t" kindref="compound">message_delete_bulk_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const message_delete_bulk_t&amp; event)&gt; dpp::dispatcher::message_delete_bulk</definition>
        <argsstring></argsstring>
        <name>message_delete_bulk</name>
        <briefdescription>
<para>Event handler function pointer for message delete bulk event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="998" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="998" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a67f34ecc15f698db28f340d8801f6685" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__add__t" kindref="compound">message_reaction_add_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const message_reaction_add_t&amp; event)&gt; dpp::dispatcher::message_reaction_add</definition>
        <argsstring></argsstring>
        <name>message_reaction_add</name>
        <briefdescription>
<para>Event handler function pointer for message reaction add event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="974" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a101b1939b506bbb33d711e50c46bf391" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__t" kindref="compound">message_reaction_remove_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const message_reaction_remove_t&amp; event)&gt; dpp::dispatcher::message_reaction_remove</definition>
        <argsstring></argsstring>
        <name>message_reaction_remove</name>
        <briefdescription>
<para>Event handler function pointer for message reaction remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="982" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a7ddbf5711d20ac6de1638f8a1392f70a" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__all__t" kindref="compound">message_reaction_remove_all_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const message_reaction_remove_all_t&amp; event)&gt; dpp::dispatcher::message_reaction_remove_all</definition>
        <argsstring></argsstring>
        <name>message_reaction_remove_all</name>
        <briefdescription>
<para>Event handler function pointer for message reaction remove all event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1014" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a2ee8b4cb141a7c23acfae0c758027486" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__emoji__t" kindref="compound">message_reaction_remove_emoji_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const message_reaction_remove_emoji_t&amp; event)&gt; dpp::dispatcher::message_reaction_remove_emoji</definition>
        <argsstring></argsstring>
        <name>message_reaction_remove_emoji</name>
        <briefdescription>
<para>Event handler function pointer for message reaction remove emoji event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="994" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="994" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aff7db3b3fd784e67a460a67147f2c315" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1message__update__t" kindref="compound">message_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const message_update_t&amp; event)&gt; dpp::dispatcher::message_update</definition>
        <argsstring></argsstring>
        <name>message_update</name>
        <briefdescription>
<para>Event handler function pointer for message update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1062" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a21e0bbce14f6aba7065eeb20dcf4ae8d" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1presence__update__t" kindref="compound">presence_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const presence_update_t&amp; event)&gt; dpp::dispatcher::presence_update</definition>
        <argsstring></argsstring>
        <name>presence_update</name>
        <briefdescription>
<para>Event handler function pointer for presence update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1026" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1026" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a65719ce2641b1ab281f499ea116bc137" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1ready__t" kindref="compound">ready_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const ready_t&amp; event)&gt; dpp::dispatcher::ready</definition>
        <argsstring></argsstring>
        <name>ready</name>
        <briefdescription>
<para>Event handler function pointer for ready event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="942" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="942" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a95bc992af2a7efc1c1c524eeab354990" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1resumed__t" kindref="compound">resumed_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const resumed_t&amp; event)&gt; dpp::dispatcher::resumed</definition>
        <argsstring></argsstring>
        <name>resumed</name>
        <briefdescription>
<para>Event handler function pointer for resumed event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="962" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a071ef2f5586d7879dbb17d9b1757d38a" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1select__click__t" kindref="compound">select_click_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const select_click_t&amp; event)&gt; dpp::dispatcher::select_click</definition>
        <argsstring></argsstring>
        <name>select_click</name>
        <briefdescription>
<para>Event handler function pointer for button click event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="926" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aa405a83fbbbd434010b838b443d61897" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__create__t" kindref="compound">stage_instance_create_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const stage_instance_create_t&amp; event)&gt; dpp::dispatcher::stage_instance_create</definition>
        <argsstring></argsstring>
        <name>stage_instance_create</name>
        <briefdescription>
<para>Event handler function pointer for stage instance create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1142" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a83540a056df758f8e9847c1bc8d9ba06" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__delete__t" kindref="compound">stage_instance_delete_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const stage_instance_delete_t&amp; event)&gt; dpp::dispatcher::stage_instance_delete</definition>
        <argsstring></argsstring>
        <name>stage_instance_delete</name>
        <briefdescription>
<para>Event handler function pointer for stage instance delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1150" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a7f08bc02a16493e03e7fc3bed3526a0e" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__update__t" kindref="compound">stage_instance_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const stage_instance_update_t&amp; event)&gt; dpp::dispatcher::stage_instance_update</definition>
        <argsstring></argsstring>
        <name>stage_instance_update</name>
        <briefdescription>
<para>Event handler function pointer for stage instance update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1146" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a9bd685c0f0e60a75d65a231d1e4193cd" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__stickers__update__t" kindref="compound">guild_stickers_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const guild_stickers_update_t&amp; event)&gt; dpp::dispatcher::stickers_update</definition>
        <argsstring></argsstring>
        <name>stickers_update</name>
        <briefdescription>
<para>Event handler function pointer for guild sticker update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1154" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1afbfed5c7753f5d0314d17bef0f475960" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__create__t" kindref="compound">thread_create_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const thread_create_t&amp; event)&gt; dpp::dispatcher::thread_create</definition>
        <argsstring></argsstring>
        <name>thread_create</name>
        <briefdescription>
<para>Event handler function pointer for thread create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1094" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1094" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a80f4cf2b1a6d240d1519126705147412" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__delete__t" kindref="compound">thread_delete_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const thread_delete_t&amp; event)&gt; dpp::dispatcher::thread_delete</definition>
        <argsstring></argsstring>
        <name>thread_delete</name>
        <briefdescription>
<para>Event handler function pointer for thread delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1102" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a488948f48942387f07d6309b73dd5b90" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__list__sync__t" kindref="compound">thread_list_sync_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const thread_list_sync_t&amp; event)&gt; dpp::dispatcher::thread_list_sync</definition>
        <argsstring></argsstring>
        <name>thread_list_sync</name>
        <briefdescription>
<para>Event handler function pointer for thread list sync event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1106" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a2659e0d04b3b48bdb2791bfbc6846251" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__member__update__t" kindref="compound">thread_member_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const thread_member_update_t&amp; event)&gt; dpp::dispatcher::thread_member_update</definition>
        <argsstring></argsstring>
        <name>thread_member_update</name>
        <briefdescription>
<para>Event handler function pointer for thread member update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1110" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ad81162505ece86a36403f76687ca4607" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__members__update__t" kindref="compound">thread_members_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const thread_members_update_t&amp; event)&gt; dpp::dispatcher::thread_members_update</definition>
        <argsstring></argsstring>
        <name>thread_members_update</name>
        <briefdescription>
<para>Event handler function pointer for thread members update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1114" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a6e92ecb7f9bfe0feb7feb7f3f2cfa99c" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__update__t" kindref="compound">thread_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const thread_update_t&amp; event)&gt; dpp::dispatcher::thread_update</definition>
        <argsstring></argsstring>
        <name>thread_update</name>
        <briefdescription>
<para>Event handler function pointer for thread update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1098" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1098" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1af63372a6426fa4aacd0eecfee5f4ac48" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1typing__start__t" kindref="compound">typing_start_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const typing_start_t&amp; event)&gt; dpp::dispatcher::typing_start</definition>
        <argsstring></argsstring>
        <name>typing_start</name>
        <briefdescription>
<para>Event handler function pointer for typing start event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="970" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="970" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aac44804e681d34dc35bd98a61ab41e73" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1user__update__t" kindref="compound">user_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const user_update_t&amp; event)&gt; dpp::dispatcher::user_update</definition>
        <argsstring></argsstring>
        <name>user_update</name>
        <briefdescription>
<para>Event handler function pointer for user update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1066" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1066" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a05479a227ee0b2e3a9fc110fc22a1edc" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__buffer__send__t" kindref="compound">voice_buffer_send_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const voice_buffer_send_t&amp; event)&gt; dpp::dispatcher::voice_buffer_send</definition>
        <argsstring></argsstring>
        <name>voice_buffer_send</name>
        <briefdescription>
<para>Event handler function pointer for voice buffer send event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1118" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a324baf0ce362a3501af414836bd317af" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__client__disconnect__t" kindref="compound">voice_client_disconnect_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const voice_client_disconnect_t&amp; event)&gt; dpp::dispatcher::voice_client_disconnect</definition>
        <argsstring></argsstring>
        <name>voice_client_disconnect</name>
        <briefdescription>
<para>Event handler function pointer for voice client disconnect event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="914" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1acb4325dcc023f84a56515df1105cd0ee" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__client__speaking__t" kindref="compound">voice_client_speaking_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const voice_client_speaking_t&amp; event)&gt; dpp::dispatcher::voice_client_speaking</definition>
        <argsstring></argsstring>
        <name>voice_client_speaking</name>
        <briefdescription>
<para>Event handler function pointer for voice client speaking event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="910" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="910" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a9c2f74f1e854a61ec6795ab0e3f7c40b" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__ready__t" kindref="compound">voice_ready_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const voice_ready_t&amp; event)&gt; dpp::dispatcher::voice_ready</definition>
        <argsstring></argsstring>
        <name>voice_ready</name>
        <briefdescription>
<para>Event handler function pointer for voice ready event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1126" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1af52035826c4e3be4f6e6ac641389bee9" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__receive__t" kindref="compound">voice_receive_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const voice_receive_t&amp; event)&gt; dpp::dispatcher::voice_receive</definition>
        <argsstring></argsstring>
        <name>voice_receive</name>
        <briefdescription>
<para>Event handler function pointer for voice receive event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1130" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ab4635617a097fd90d9a9782066b7c8b3" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__server__update__t" kindref="compound">voice_server_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const voice_server_update_t&amp; event)&gt; dpp::dispatcher::voice_server_update</definition>
        <argsstring></argsstring>
        <name>voice_server_update</name>
        <briefdescription>
<para>Event handler function pointer for voice server update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1018" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1018" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a1980829c218c2b75b608769009bdfd6f" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__state__update__t" kindref="compound">voice_state_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const voice_state_update_t&amp; event)&gt; dpp::dispatcher::voice_state_update</definition>
        <argsstring></argsstring>
        <name>voice_state_update</name>
        <briefdescription>
<para>Event handler function pointer for voice state update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="906" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ab604386c5676c63901dff045a46b4aae" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__track__marker__t" kindref="compound">voice_track_marker_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const voice_track_marker_t&amp; event)&gt; dpp::dispatcher::voice_track_marker</definition>
        <argsstring></argsstring>
        <name>voice_track_marker</name>
        <briefdescription>
<para>Event handler function pointer for voice track marker event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1134" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ad9734f36f8ed672bdcc0efc4e1125b08" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__user__talking__t" kindref="compound">voice_user_talking_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const voice_user_talking_t&amp; event)&gt; dpp::dispatcher::voice_user_talking</definition>
        <argsstring></argsstring>
        <name>voice_user_talking</name>
        <briefdescription>
<para>Event handler function pointer for voice user talking event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1122" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a56d9099bf4647dc0ddb98d03b16613d6" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1webhooks__update__t" kindref="compound">webhooks_update_t</ref> &amp;event)&gt;</type>
        <definition>std::function&lt;void(const webhooks_update_t&amp; event)&gt; dpp::dispatcher::webhooks_update</definition>
        <argsstring></argsstring>
        <name>webhooks_update</name>
        <briefdescription>
<para>Event handler function pointer for webhooks update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1030" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="1030" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The dispatcher class contains a set of std::functions representing hooked events that the user code is interested in. These are modified via the on_eventname style methods in the cluster class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="2" relation="usage">
          <edgelabel>application_command_create</edgelabel>
          <edgelabel>application_command_delete</edgelabel>
          <edgelabel>application_command_update</edgelabel>
          <edgelabel>button_click</edgelabel>
          <edgelabel>channel_create</edgelabel>
          <edgelabel>channel_delete</edgelabel>
          <edgelabel>channel_pins_update</edgelabel>
          <edgelabel>channel_update</edgelabel>
          <edgelabel>guild_ban_add</edgelabel>
          <edgelabel>guild_ban_remove</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>function&lt;</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dispatcher.h" line="897" column="1" bodyfile="include/dpp/dispatcher.h" bodystart="897" bodyend="1155"/>
    <listofallmembers>
      <member refid="classdpp_1_1dispatcher_1abe9360d2e501ae40d513bf2a737758b8" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>application_command_create</name></member>
      <member refid="classdpp_1_1dispatcher_1adeda9731343cd06bd13b6aaf716082f3" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>application_command_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a1f4cdfa198a3aa8cbbbf3f6bd5ffd447" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>application_command_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a95261b35417e81c65e9046eca9f0d57c" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>button_click</name></member>
      <member refid="classdpp_1_1dispatcher_1ac82562a94e2bca3629f6e0d7ad9868e2" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a941fe0c8a4f52c1bf82c34a5c38d86b2" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a8a65cd0820a545d14b01324cf1508bc7" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_pins_update</name></member>
      <member refid="classdpp_1_1dispatcher_1ad4a6151ce96b42aef5d3ceb6d9f55ee5" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a171442fd458ad1a423ac48e44f269e20" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_ban_add</name></member>
      <member refid="classdpp_1_1dispatcher_1a3cc9e992868216001c607d0473425795" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_ban_remove</name></member>
      <member refid="classdpp_1_1dispatcher_1a1f70d6226670de148013d4ad7281afe9" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a8403bfd35d479d62884057b5561ebb6a" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1ac63839af90854dbe6a9fbb801075d862" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_emojis_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a866a5a142d35804453929dcc153435d6" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_integrations_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a9e95a46331f7dadc12210bee432a49e6" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_join_request_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a4a862f7dcddef43cc9b5bfe06d6577bb" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_member_add</name></member>
      <member refid="classdpp_1_1dispatcher_1a99f8ce259906ef7912c8509ad3ff70ac" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_member_remove</name></member>
      <member refid="classdpp_1_1dispatcher_1ac2521b114ee75a9d4f0aa36f9aba63f2" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_member_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a299d7f48d2cadf09b389850ee115fc5e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_members_chunk</name></member>
      <member refid="classdpp_1_1dispatcher_1ac698fd6fd317a93f4d1feb7e8710ee4f" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_role_create</name></member>
      <member refid="classdpp_1_1dispatcher_1ae134fc0cbe3f4537ce557f72571c8eed" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_role_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a276a38f9d9e9a89c55f07c2c20a7ea9c" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_role_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a0fbab68118106ac916dc8ce2d5ffd825" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a9156aeb607b633a0beafb0754840bde2" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>integration_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a32054b6807a7abcd456fd8f7ad17f4c3" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>integration_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a650bafe23ae42306008046f8cf3de2a5" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>integration_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a40072713dd30b8e37200d3ec91a1d1b2" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>interaction_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a811c8990061c5ce56d221f767ec0576d" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>invite_create</name></member>
      <member refid="classdpp_1_1dispatcher_1acff8bbb12c4d123fbd0b57fb3b48962a" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>invite_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1aa3e934f108231fa426cbcd1956e72b1c" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>log</name></member>
      <member refid="classdpp_1_1dispatcher_1a8a74c97a762054030a2423c01d3010de" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_create</name></member>
      <member refid="classdpp_1_1dispatcher_1ae8816e6679fff4b73ccffa8fa46caa08" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1ace33de42639a464557e525450a5835b7" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_delete_bulk</name></member>
      <member refid="classdpp_1_1dispatcher_1a67f34ecc15f698db28f340d8801f6685" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_add</name></member>
      <member refid="classdpp_1_1dispatcher_1a101b1939b506bbb33d711e50c46bf391" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_remove</name></member>
      <member refid="classdpp_1_1dispatcher_1a7ddbf5711d20ac6de1638f8a1392f70a" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_remove_all</name></member>
      <member refid="classdpp_1_1dispatcher_1a2ee8b4cb141a7c23acfae0c758027486" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_remove_emoji</name></member>
      <member refid="classdpp_1_1dispatcher_1aff7db3b3fd784e67a460a67147f2c315" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a21e0bbce14f6aba7065eeb20dcf4ae8d" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>presence_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a65719ce2641b1ab281f499ea116bc137" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>ready</name></member>
      <member refid="classdpp_1_1dispatcher_1a95bc992af2a7efc1c1c524eeab354990" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>resumed</name></member>
      <member refid="classdpp_1_1dispatcher_1a071ef2f5586d7879dbb17d9b1757d38a" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>select_click</name></member>
      <member refid="classdpp_1_1dispatcher_1aa405a83fbbbd434010b838b443d61897" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stage_instance_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a83540a056df758f8e9847c1bc8d9ba06" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stage_instance_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a7f08bc02a16493e03e7fc3bed3526a0e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stage_instance_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a9bd685c0f0e60a75d65a231d1e4193cd" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stickers_update</name></member>
      <member refid="classdpp_1_1dispatcher_1afbfed5c7753f5d0314d17bef0f475960" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a80f4cf2b1a6d240d1519126705147412" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a488948f48942387f07d6309b73dd5b90" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_list_sync</name></member>
      <member refid="classdpp_1_1dispatcher_1a2659e0d04b3b48bdb2791bfbc6846251" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_member_update</name></member>
      <member refid="classdpp_1_1dispatcher_1ad81162505ece86a36403f76687ca4607" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_members_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a6e92ecb7f9bfe0feb7feb7f3f2cfa99c" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_update</name></member>
      <member refid="classdpp_1_1dispatcher_1af63372a6426fa4aacd0eecfee5f4ac48" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>typing_start</name></member>
      <member refid="classdpp_1_1dispatcher_1aac44804e681d34dc35bd98a61ab41e73" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>user_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a05479a227ee0b2e3a9fc110fc22a1edc" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_buffer_send</name></member>
      <member refid="classdpp_1_1dispatcher_1a324baf0ce362a3501af414836bd317af" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_client_disconnect</name></member>
      <member refid="classdpp_1_1dispatcher_1acb4325dcc023f84a56515df1105cd0ee" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_client_speaking</name></member>
      <member refid="classdpp_1_1dispatcher_1a9c2f74f1e854a61ec6795ab0e3f7c40b" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_ready</name></member>
      <member refid="classdpp_1_1dispatcher_1af52035826c4e3be4f6e6ac641389bee9" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_receive</name></member>
      <member refid="classdpp_1_1dispatcher_1ab4635617a097fd90d9a9782066b7c8b3" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_server_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a1980829c218c2b75b608769009bdfd6f" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_state_update</name></member>
      <member refid="classdpp_1_1dispatcher_1ab604386c5676c63901dff045a46b4aae" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_track_marker</name></member>
      <member refid="classdpp_1_1dispatcher_1ad9734f36f8ed672bdcc0efc4e1125b08" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_user_talking</name></member>
      <member refid="classdpp_1_1dispatcher_1a56d9099bf4647dc0ddb98d03b16613d6" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>webhooks_update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
