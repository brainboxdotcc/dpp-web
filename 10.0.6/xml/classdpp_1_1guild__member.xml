<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1guild__member" kind="class" language="C++" prot="public">
    <compoundname>dpp::guild_member</compoundname>
    <includes local="no">guild.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1guild__member_1af305ded317e0fb05fc67d15713549efa" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::guild_member::nickname</definition>
        <argsstring></argsstring>
        <name>nickname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Nickname, or empty string if they don&apos;t have a nickname on this guild </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="158" column="13" bodyfile="include/dpp/guild.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild__member_1ae9419048b9b5a143f1b705e4dff83a93" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild_member::roles</definition>
        <argsstring></argsstring>
        <name>roles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of roles this user has on this guild </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="160" column="13" bodyfile="include/dpp/guild.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild__member_1abc1c9039f54691ae4e8938c2768ccf84" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild_member::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild id </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="162" column="11" bodyfile="include/dpp/guild.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild__member_1a127de740430a1f3ce4e793e21f94ce97" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild_member::user_id</definition>
        <argsstring></argsstring>
        <name>user_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User id </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="164" column="11" bodyfile="include/dpp/guild.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild__member_1aeb9413ebe5540ebd625a35166f5ad799" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::guild_member::avatar</definition>
        <argsstring></argsstring>
        <name>avatar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User avatar (per-server avatar is a nitro only feature) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="166" column="19" bodyfile="include/dpp/guild.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild__member_1a6bf5f4ec4e76b15734782ff2fdd51170" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::guild_member::communication_disabled_until</definition>
        <argsstring></argsstring>
        <name>communication_disabled_until</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>timestamp of when the time out will be removed; until then, they cannot interact with the guild </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="168" column="8" bodyfile="include/dpp/guild.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild__member_1aae2dfc2f98671c98704db1fa4295b05f" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::guild_member::joined_at</definition>
        <argsstring></argsstring>
        <name>joined_at</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Date and time the user joined the guild </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="170" column="8" bodyfile="include/dpp/guild.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild__member_1ae262a3f3d68a9728a92654e2f5b9c758" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::guild_member::premium_since</definition>
        <argsstring></argsstring>
        <name>premium_since</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Boosting since </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="172" column="8" bodyfile="include/dpp/guild.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild__member_1a11636d9baaca59361c22ac163b09fd7c" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild_member::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A set of flags built from the bitmask defined by <ref refid="namespacedpp_1aa4ffb1848bf700da25bc187e38054a30" kindref="member">dpp::guild_member_flags</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="174" column="9" bodyfile="include/dpp/guild.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1guild__member_1a22fc1a4cacec96dafe98277604823be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::guild_member::guild_member</definition>
        <argsstring>()</argsstring>
        <name>guild_member</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1a8388b6feb3be3972fa50d4665b461611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
        <definition>guild_member &amp; dpp::guild_member::fill_from_json</definition>
        <argsstring>(nlohmann::json *j, snowflake g_id, snowflake u_id)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>g_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>u_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill this object from a json object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The json object to get data from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild id to associate the member with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The user id to associate the member with </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self for call chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="185" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1a7495a6d80ae68d276344d015c9345206" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild_member::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build json string for the member object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Add ID to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string json string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="193" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1a5f914350fd3720e72e4857cc3075e09f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild_member::is_communication_disabled</definition>
        <argsstring>() const</argsstring>
        <name>is_communication_disabled</name>
        <briefdescription>
<para>Returns true if the user is in time-out (communication disabled) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true user is in time-out </para>
</simplesect>
<simplesect kind="return"><para>false user is not in time-out </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="201" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1a1136b98c677fbbcbcc1291857cfe53ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild_member::is_deaf</definition>
        <argsstring>() const</argsstring>
        <name>is_deaf</name>
        <briefdescription>
<para>Returns true if the user is deafened. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true user is deafened </para>
</simplesect>
<simplesect kind="return"><para>false user is not deafened </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="209" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1a0d9540b747d4f604088bc2d4b82f1695" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild_member::is_muted</definition>
        <argsstring>() const</argsstring>
        <name>is_muted</name>
        <briefdescription>
<para>Returns true if the user is muted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true user muted </para>
</simplesect>
<simplesect kind="return"><para>false user not muted </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="217" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1a0e8b71e030ad98f31831d7e0a079b873" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild_member::is_pending</definition>
        <argsstring>() const</argsstring>
        <name>is_pending</name>
        <briefdescription>
<para>Returns true if pending verification by membership screening. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true user has completed membership screening </para>
</simplesect>
<simplesect kind="return"><para>false user has not completed membership screening </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="225" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1ad785209b6ad322555a800510a5b4356c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild_member::has_animated_guild_avatar</definition>
        <argsstring>() const</argsstring>
        <name>has_animated_guild_avatar</name>
        <briefdescription>
<para>Returns true if the user&apos;s per-guild custom avatar is animated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true user&apos;s custom avatar is animated </para>
</simplesect>
<simplesect kind="return"><para>false user&apos;s custom avatar is not animated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="233" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1a849e4b4b20febc4bd1d32d8aaca11127" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild_member::get_avatar_url</definition>
        <argsstring>(uint16_t size=0) const</argsstring>
        <name>get_avatar_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the members per guild avatar if they have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>per-server avatar is a nitro only feature so it might be not set. If you need the real user avatar, use <ref refid="classdpp_1_1user_1adddc16b840a409119b9bda1af4e39e42" kindref="member">user::get_avatar_url</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the avatar in pixels. It can be any power of two between 16 and 4096. If not specified, the default sized avatar is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string avatar url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="243" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1adf919401f5e69225fb9fee91de8b7983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
        <definition>guild_member &amp; dpp::guild_member::set_nickname</definition>
        <argsstring>(const std::string &amp;nick)</argsstring>
        <name>set_nickname</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nick</declname>
        </param>
        <briefdescription>
<para>Set the nickname. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname to set</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref>&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="252" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1a91cf849628af76ad3fb4c58c8d54efab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
        <definition>guild_member &amp; dpp::guild_member::set_mute</definition>
        <argsstring>(const bool is_muted)</argsstring>
        <name>set_mute</name>
        <param>
          <type>const bool</type>
          <declname>is_muted</declname>
        </param>
        <briefdescription>
<para>Set whether the user is muted in voice channels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_muted</parametername>
</parameternamelist>
<parameterdescription>
<para>value to set, true if mute in voice channels</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref>&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="261" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1a51764b5c1960619ddc073224d2791ad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
        <definition>guild_member &amp; dpp::guild_member::set_deaf</definition>
        <argsstring>(const bool is_deafened)</argsstring>
        <name>set_deaf</name>
        <param>
          <type>const bool</type>
          <declname>is_deafened</declname>
        </param>
        <briefdescription>
<para>Set whether the user is deafened in voice channels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is_deafened</parametername>
</parameternamelist>
<parameterdescription>
<para>value to set, true if deaf in voice channels</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref>&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="270" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1a5f8cb5390378a011a1d7fe36f5ab3441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
        <definition>guild_member &amp; dpp::guild_member::set_communication_disabled_until</definition>
        <argsstring>(const time_t timestamp)</argsstring>
        <name>set_communication_disabled_until</name>
        <param>
          <type>const time_t</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Set communication_disabled_until. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>timestamp until communication is disabled</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref>&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="279" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild__member_1afb9f40dbcd49dbf960d246582eaeca9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild_member::get_mention</definition>
        <argsstring>() const</argsstring>
        <name>get_mention</name>
        <briefdescription>
<para>Return a ping/mention for the user by nickname. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string mention </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="286" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> membership upon a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref>. This contains the user&apos;s nickname, guild roles, and any other guild-specific flags. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="2" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="5" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>vector&lt;</label>
      </node>
      <node id="7">
        <label>time_t</label>
      </node>
      <node id="5">
        <label>uint64_t</label>
      </node>
      <node id="8">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/guild.h" line="155" column="1" bodyfile="include/dpp/guild.h" bodystart="155" bodyend="287"/>
    <listofallmembers>
      <member refid="classdpp_1_1guild__member_1aeb9413ebe5540ebd625a35166f5ad799" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>avatar</name></member>
      <member refid="classdpp_1_1guild__member_1a7495a6d80ae68d276344d015c9345206" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>build_json</name></member>
      <member refid="classdpp_1_1guild__member_1a6bf5f4ec4e76b15734782ff2fdd51170" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>communication_disabled_until</name></member>
      <member refid="classdpp_1_1guild__member_1a8388b6feb3be3972fa50d4665b461611" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1guild__member_1a11636d9baaca59361c22ac163b09fd7c" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>flags</name></member>
      <member refid="classdpp_1_1guild__member_1a849e4b4b20febc4bd1d32d8aaca11127" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>get_avatar_url</name></member>
      <member refid="classdpp_1_1guild__member_1afb9f40dbcd49dbf960d246582eaeca9b" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>get_mention</name></member>
      <member refid="classdpp_1_1guild__member_1abc1c9039f54691ae4e8938c2768ccf84" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1guild__member_1a22fc1a4cacec96dafe98277604823be0" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>guild_member</name></member>
      <member refid="classdpp_1_1guild__member_1ad785209b6ad322555a800510a5b4356c" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>has_animated_guild_avatar</name></member>
      <member refid="classdpp_1_1guild__member_1a5f914350fd3720e72e4857cc3075e09f" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>is_communication_disabled</name></member>
      <member refid="classdpp_1_1guild__member_1a1136b98c677fbbcbcc1291857cfe53ec" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>is_deaf</name></member>
      <member refid="classdpp_1_1guild__member_1a0d9540b747d4f604088bc2d4b82f1695" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>is_muted</name></member>
      <member refid="classdpp_1_1guild__member_1a0e8b71e030ad98f31831d7e0a079b873" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>is_pending</name></member>
      <member refid="classdpp_1_1guild__member_1aae2dfc2f98671c98704db1fa4295b05f" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>joined_at</name></member>
      <member refid="classdpp_1_1guild__member_1af305ded317e0fb05fc67d15713549efa" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>nickname</name></member>
      <member refid="classdpp_1_1guild__member_1ae262a3f3d68a9728a92654e2f5b9c758" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>premium_since</name></member>
      <member refid="classdpp_1_1guild__member_1ae9419048b9b5a143f1b705e4dff83a93" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>roles</name></member>
      <member refid="classdpp_1_1guild__member_1a5f8cb5390378a011a1d7fe36f5ab3441" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>set_communication_disabled_until</name></member>
      <member refid="classdpp_1_1guild__member_1a51764b5c1960619ddc073224d2791ad3" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>set_deaf</name></member>
      <member refid="classdpp_1_1guild__member_1a91cf849628af76ad3fb4c58c8d54efab" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>set_mute</name></member>
      <member refid="classdpp_1_1guild__member_1adf919401f5e69225fb9fee91de8b7983" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>set_nickname</name></member>
      <member refid="classdpp_1_1guild__member_1a127de740430a1f3ce4e793e21f94ce97" prot="public" virt="non-virtual"><scope>dpp::guild_member</scope><name>user_id</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
