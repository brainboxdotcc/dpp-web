<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1user" kind="class" language="C++" prot="public">
    <compoundname>dpp::user</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; user &gt;</basecompoundref>
    <derivedcompoundref refid="classdpp_1_1user__identified" prot="public" virt="non-virtual">dpp::user_identified</derivedcompoundref>
    <includes local="no">user.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1user_1ae9d90b269f17fc2c5a0021dcb2b8dce3" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::user::avatar</definition>
        <argsstring></argsstring>
        <name>avatar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Avatar hash </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="87" column="19" bodyfile="include/dpp/user.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1afe658cc2d4adcf83a76f798dead3e5e6" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::user::discriminator</definition>
        <argsstring></argsstring>
        <name>discriminator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discriminator (aka tag), 4 digits usually displayed with leading zeroes.</para>
<para><simplesect kind="note"><para>To print the discriminator with leading zeroes, use <ref refid="classdpp_1_1user_1aa8e70346690b38db060af1d0f84ac1d7" kindref="member">format_username()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="94" column="10" bodyfile="include/dpp/user.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1aab86456a191f214b38277cf65bb6af05" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::user::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags built from a bitmask of values in <ref refid="namespacedpp_1a99a238db04976402abb94ea0c989d8c0" kindref="member">dpp::user_flags</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="89" column="10" bodyfile="include/dpp/user.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="38" column="11" bodyfile="include/dpp/managed.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1a68d336b1fc0b592ea970c11eaf9f2048" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::user::refcount</definition>
        <argsstring></argsstring>
        <name>refcount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference count of how many guilds this user is in </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="96" column="9" bodyfile="include/dpp/user.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1user_1a4e72b2e5ac7d5539fdae64be6e01246c" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::user::username</definition>
        <argsstring></argsstring>
        <name>username</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discord username </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="85" column="13" bodyfile="include/dpp/user.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1user_1a10ae5c579f6d60370d825e71fdff697b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::user::user</definition>
        <argsstring>()</argsstring>
        <name>user</name>
        <briefdescription>
<para>Construct a new user object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a95440675fb84b84e8ff2b004ab7f5818" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::user::~user</definition>
        <argsstring>()</argsstring>
        <name>~user</name>
        <briefdescription>
<para>Destroy the user object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="106" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a99f8a16addc4254a51bae13aae574641" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string dpp::user::build_json</definition>
        <argsstring>(bool with_id=true) const</argsstring>
        <name>build_json</name>
        <reimplements refid="structdpp_1_1json__interface_1a287c22f692ee3d25b6f9b320ff35baa1">build_json</reimplements>
        <reimplementedby refid="classdpp_1_1user__identified_1a1eefbee1972ce9eadb3ff9a6372aca61">build_json</reimplementedby>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Convert to JSON string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>include ID in output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string JSON output </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="120" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1ae9fecaa47d8ba5330c4cdda978ffe267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref> &amp;</type>
        <definition>user &amp; dpp::user::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill this record from json. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The json to fill this record from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="112" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1aa8e70346690b38db060af1d0f84ac1d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::user::format_username</definition>
        <argsstring>() const</argsstring>
        <name>format_username</name>
        <briefdescription>
<para>Format a username into <ref refid="classdpp_1_1user_1afe658cc2d4adcf83a76f798dead3e5e6" kindref="member">user::discriminator</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>For example Brain#0001</para>
<para><simplesect kind="return"><para>Formatted username and discriminator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="274" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1adddc16b840a409119b9bda1af4e39e42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::user::get_avatar_url</definition>
        <argsstring>(uint16_t size=0) const</argsstring>
        <name>get_avatar_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the avatar url of the user object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the avatar in pixels. It can be any power of two between 16 and 4096. if not specified, the default sized avatar is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string avatar url. If the user doesn&apos;t have an avatar, the default user avatar url is returned </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="128" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a09743ef07e78406808e74a8bd7b5d658" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::user::get_mention</definition>
        <argsstring>() const</argsstring>
        <name>get_mention</name>
        <briefdescription>
<para>Return a ping/mention for the user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string mention </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="135" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a51c599c37ab5ccc1b770084c937abe98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_animated_icon</definition>
        <argsstring>() const</argsstring>
        <name>has_animated_icon</name>
        <briefdescription>
<para>Return true if user has an animated icon. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if icon is animated (gif) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="265" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1aaaa1239fe84eb4d3c88b8812a14c598b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_hypesquad_events</definition>
        <argsstring>() const</argsstring>
        <name>has_hypesquad_events</name>
        <briefdescription>
<para>Return true if user has hypesquad events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has hypesquad events </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="192" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a2a7d44696be1880931498dc48d4bb23c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_nitro_classic</definition>
        <argsstring>() const</argsstring>
        <name>has_nitro_classic</name>
        <briefdescription>
<para>Return true if user has nitro classic. This is mutually exclusive with nitro classic. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user has nitro classic </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="174" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a9c4116cc16eb91d0a1e3b3803c618395" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::has_nitro_full</definition>
        <argsstring>() const</argsstring>
        <name>has_nitro_full</name>
        <briefdescription>
<para>Return true if user has full nitro. This is mutually exclusive with full nitro. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user has full nitro </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="167" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1aeb219805eb74e76d7814ba671de31a21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bot</definition>
        <argsstring>() const</argsstring>
        <name>is_bot</name>
        <briefdescription>
<para>User is a bot. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the user is a bot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="142" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a897b8816c44f11d99ad54b4f87521a20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bot_http_interactions</definition>
        <argsstring>() const</argsstring>
        <name>is_bot_http_interactions</name>
        <briefdescription>
<para>Return true if user is a bot which exclusively uses HTTP interactions. Bots using HTTP interactions are always considered online even when not connected to a websocket. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if is a http interactions only bot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="259" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1afeb70e25be8585ff557b51dd99bb7f99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bughunter_1</definition>
        <argsstring>() const</argsstring>
        <name>is_bughunter_1</name>
        <briefdescription>
<para>Return true if user has the bughunter level 1 badge. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has bughunter level 1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="198" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a287d9706c6ba49a5d627ceef2d5c3525" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_bughunter_2</definition>
        <argsstring>() const</argsstring>
        <name>is_bughunter_2</name>
        <briefdescription>
<para>Return true if user has the bughunter level 2 badge. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if has bughunter level 2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="234" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a88d7f40223baa835b92f6aa54af42420" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_certified_moderator</definition>
        <argsstring>() const</argsstring>
        <name>is_certified_moderator</name>
        <briefdescription>
<para>Return true if user is a certified moderator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if certified moderator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="252" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a5780e0142e20d952d348c33d51a4d926" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_discord_employee</definition>
        <argsstring>() const</argsstring>
        <name>is_discord_employee</name>
        <briefdescription>
<para>Return true if user is a discord employee. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user is discord staff </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="180" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a5768865659ca76eebc37a8f02b1b7b9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_early_supporter</definition>
        <argsstring>() const</argsstring>
        <name>is_early_supporter</name>
        <briefdescription>
<para>Return true if user is an early supporter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if early supporter </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="222" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a8babf64a69f0d7d8d80c24e29c4e146f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_house_balance</definition>
        <argsstring>() const</argsstring>
        <name>is_house_balance</name>
        <briefdescription>
<para>Return true if user is in house balance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in house brilliance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="216" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1afe19328a79ed87eb25fcb9fbbd8da2b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_house_bravery</definition>
        <argsstring>() const</argsstring>
        <name>is_house_bravery</name>
        <briefdescription>
<para>Return true if user is in house bravery. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in house bravery </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="204" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1af4a509ae622f1b4531a758524b34f47e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_house_brilliance</definition>
        <argsstring>() const</argsstring>
        <name>is_house_brilliance</name>
        <briefdescription>
<para>Return true if user is in house brilliance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if in house brilliance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="210" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a08cd09a04a75493693d60a99e0123905" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_mfa_enabled</definition>
        <argsstring>() const</argsstring>
        <name>is_mfa_enabled</name>
        <briefdescription>
<para>User has multi-factor authentication enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if multi-factor is enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="154" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a75120bc6c3b53125f7396853052b6c52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_partnered_owner</definition>
        <argsstring>() const</argsstring>
        <name>is_partnered_owner</name>
        <briefdescription>
<para>Return true if user owns a partnered server. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user has partnered server </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="186" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1ae38c55d7ccd3752f73cf2a7bbe40b8fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_system</definition>
        <argsstring>() const</argsstring>
        <name>is_system</name>
        <briefdescription>
<para>User is a system user (Clyde) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if user is a system user </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="148" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1ab5309aeff0b712ed39e6fb47dd19d32b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_team_user</definition>
        <argsstring>() const</argsstring>
        <name>is_team_user</name>
        <briefdescription>
<para>Return true if user is a team user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if a team user </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="228" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1aa08cdd77402ef1d08b003e2e5342004a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_verified</definition>
        <argsstring>() const</argsstring>
        <name>is_verified</name>
        <briefdescription>
<para>Return true if user has verified account. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if verified </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="160" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1a9aabc6989097e79dc8e3e8d00d7a0c5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_verified_bot</definition>
        <argsstring>() const</argsstring>
        <name>is_verified_bot</name>
        <briefdescription>
<para>Return true if user has the verified bot badge. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if verified bot </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="240" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1user_1abe54bbcf190f3aba2aeaf8c2d6287152" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::user::is_verified_bot_dev</definition>
        <argsstring>() const</argsstring>
        <name>is_verified_bot_dev</name>
        <briefdescription>
<para>Return true if user is an early verified bot developer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if verified bot developer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/user.h" line="246" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="73" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="64" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a user on discord. May or may not be a member of a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>dpp::user_identified</label>
        <link refid="classdpp_1_1user__identified"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="4" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>uint16_t</label>
      </node>
      <node id="10">
        <label>uint32_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="12">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/user.h" line="82" column="1" bodyfile="include/dpp/user.h" bodystart="82" bodyend="275"/>
    <listofallmembers>
      <member refid="classdpp_1_1user_1ae9d90b269f17fc2c5a0021dcb2b8dce3" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>avatar</name></member>
      <member refid="classdpp_1_1user_1a99f8a16addc4254a51bae13aae574641" prot="public" virt="virtual"><scope>dpp::user</scope><name>build_json</name></member>
      <member refid="classdpp_1_1user_1afe658cc2d4adcf83a76f798dead3e5e6" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>discriminator</name></member>
      <member refid="classdpp_1_1user_1ae9fecaa47d8ba5330c4cdda978ffe267" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1user_1aab86456a191f214b38277cf65bb6af05" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>flags</name></member>
      <member refid="classdpp_1_1user_1aa8e70346690b38db060af1d0f84ac1d7" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>format_username</name></member>
      <member refid="classdpp_1_1user_1adddc16b840a409119b9bda1af4e39e42" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>get_avatar_url</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1user_1a09743ef07e78406808e74a8bd7b5d658" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>get_mention</name></member>
      <member refid="classdpp_1_1user_1a51c599c37ab5ccc1b770084c937abe98" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>has_animated_icon</name></member>
      <member refid="classdpp_1_1user_1aaaa1239fe84eb4d3c88b8812a14c598b" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>has_hypesquad_events</name></member>
      <member refid="classdpp_1_1user_1a2a7d44696be1880931498dc48d4bb23c" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>has_nitro_classic</name></member>
      <member refid="classdpp_1_1user_1a9c4116cc16eb91d0a1e3b3803c618395" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>has_nitro_full</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>id</name></member>
      <member refid="classdpp_1_1user_1aeb219805eb74e76d7814ba671de31a21" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_bot</name></member>
      <member refid="classdpp_1_1user_1a897b8816c44f11d99ad54b4f87521a20" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_bot_http_interactions</name></member>
      <member refid="classdpp_1_1user_1afeb70e25be8585ff557b51dd99bb7f99" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_bughunter_1</name></member>
      <member refid="classdpp_1_1user_1a287d9706c6ba49a5d627ceef2d5c3525" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_bughunter_2</name></member>
      <member refid="classdpp_1_1user_1a88d7f40223baa835b92f6aa54af42420" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_certified_moderator</name></member>
      <member refid="classdpp_1_1user_1a5780e0142e20d952d348c33d51a4d926" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_discord_employee</name></member>
      <member refid="classdpp_1_1user_1a5768865659ca76eebc37a8f02b1b7b9b" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_early_supporter</name></member>
      <member refid="classdpp_1_1user_1a8babf64a69f0d7d8d80c24e29c4e146f" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_house_balance</name></member>
      <member refid="classdpp_1_1user_1afe19328a79ed87eb25fcb9fbbd8da2b5" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_house_bravery</name></member>
      <member refid="classdpp_1_1user_1af4a509ae622f1b4531a758524b34f47e" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_house_brilliance</name></member>
      <member refid="classdpp_1_1user_1a08cd09a04a75493693d60a99e0123905" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_mfa_enabled</name></member>
      <member refid="classdpp_1_1user_1a75120bc6c3b53125f7396853052b6c52" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_partnered_owner</name></member>
      <member refid="classdpp_1_1user_1ae38c55d7ccd3752f73cf2a7bbe40b8fb" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_system</name></member>
      <member refid="classdpp_1_1user_1ab5309aeff0b712ed39e6fb47dd19d32b" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_team_user</name></member>
      <member refid="classdpp_1_1user_1aa08cdd77402ef1d08b003e2e5342004a" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_verified</name></member>
      <member refid="classdpp_1_1user_1a9aabc6989097e79dc8e3e8d00d7a0c5f" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_verified_bot</name></member>
      <member refid="classdpp_1_1user_1abe54bbcf190f3aba2aeaf8c2d6287152" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>is_verified_bot_dev</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>operator==</name></member>
      <member refid="classdpp_1_1user_1a68d336b1fc0b592ea970c11eaf9f2048" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>refcount</name></member>
      <member refid="classdpp_1_1user_1a10ae5c579f6d60370d825e71fdff697b" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>user</name></member>
      <member refid="classdpp_1_1user_1a4e72b2e5ac7d5539fdae64be6e01246c" prot="public" virt="non-virtual"><scope>dpp::user</scope><name>username</name></member>
      <member refid="structdpp_1_1json__interface_1a8fea07be649b8bb166c28c5a7daccf53" prot="protected" virt="non-virtual"><scope>dpp::user</scope><name>~json_interface</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::user</scope><name>~managed</name></member>
      <member refid="classdpp_1_1user_1a95440675fb84b84e8ff2b004ab7f5818" prot="public" virt="virtual"><scope>dpp::user</scope><name>~user</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
