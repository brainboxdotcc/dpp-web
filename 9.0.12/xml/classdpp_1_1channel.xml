<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1channel" kind="class" language="C++" prot="public">
    <compoundname>dpp::channel</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <derivedcompoundref refid="classdpp_1_1thread" prot="public" virt="non-virtual">dpp::thread</derivedcompoundref>
    <includes local="no">channel.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1channel_1a4468e3981302301886f649d14b7ddcf7" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::channel::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags bitmap </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="152" column="10" bodyfile="include/dpp/channel.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a52a3d85468b8b6a1eb16c1bdb19cb499" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::channel::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild id of the guild that owns the channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="155" column="11" bodyfile="include/dpp/channel.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a1f31178c9e86ad1490b8619cb9bdbde4" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::channel::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorting position, lower number means higher up the list </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="158" column="10" bodyfile="include/dpp/channel.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a065d6fbd4e21759354c2516b074078a8" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::channel::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Channel name </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="161" column="13" bodyfile="include/dpp/channel.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a57864fde3659243453d1ad1c9bf60983" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::channel::topic</definition>
        <argsstring></argsstring>
        <name>topic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Channel topic </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="164" column="13" bodyfile="include/dpp/channel.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1aa510e7eb5e93c1c885392c7fcdf24779" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::channel::last_message_id</definition>
        <argsstring></argsstring>
        <name>last_message_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID of last message to be sent to the channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="167" column="11" bodyfile="include/dpp/channel.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a79251adb1bc9dc6780af2afd21499769" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::channel::user_limit</definition>
        <argsstring></argsstring>
        <name>user_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum user limit for voice channels (0-99) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="170" column="9" bodyfile="include/dpp/channel.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1ab32308d8281aef6bfe4d5a6538c6306e" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::channel::bitrate</definition>
        <argsstring></argsstring>
        <name>bitrate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the bitrate (in bits) of the voice channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="173" column="10" bodyfile="include/dpp/channel.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a2ec41d2c2a7d592c1a17888d3f401fd5" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::channel::rate_limit_per_user</definition>
        <argsstring></argsstring>
        <name>rate_limit_per_user</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="176" column="10" bodyfile="include/dpp/channel.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1adb22659e9dc7fb8dd36d1c9f67eb7181" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::channel::owner_id</definition>
        <argsstring></argsstring>
        <name>owner_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User ID of owner for group DMs </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="179" column="11" bodyfile="include/dpp/channel.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1ae1e877475ccc7113683382f787cfbc48" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::channel::parent_id</definition>
        <argsstring></argsstring>
        <name>parent_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parent ID (category) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="182" column="11" bodyfile="include/dpp/channel.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1ae33f863adef0f0cc89a7324cd93bc752" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::channel::last_pin_timestamp</definition>
        <argsstring></argsstring>
        <name>last_pin_timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Timestamp of last pinned message </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="185" column="8" bodyfile="include/dpp/channel.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a0d66636187a0382693d69c2ac2827e89" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::channel::recipients</definition>
        <argsstring></argsstring>
        <name>recipients</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DM recipients </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="188" column="13" bodyfile="include/dpp/channel.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a3eb698179af0d4c535cf5b7ed01b096e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1permission__overwrite" kindref="compound">permission_overwrite</ref> &gt;</type>
        <definition>std::vector&lt;permission_overwrite&gt; dpp::channel::permission_overwrites</definition>
        <argsstring></argsstring>
        <name>permission_overwrites</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Permission overwrites to apply to base permissions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="191" column="13" bodyfile="include/dpp/channel.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1ab04ddf442a472f1c0d9c1f50846348f8" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::channel::permissions</definition>
        <argsstring></argsstring>
        <name>permissions</name>
        <briefdescription>
<para>This is only filled when the channel is part of the <computeroutput>resolved</computeroutput> set sent within an interaction. Any other time it contains zero. When filled, it contains the calculated permission bitmask of the user issuing the command within this channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="199" column="10" bodyfile="include/dpp/channel.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1channel_1a05f56fbd37e993e0fc36df06b3d65bad" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::channel::rtc_region</definition>
        <argsstring></argsstring>
        <name>rtc_region</name>
        <briefdescription>
<para>Voice region if set for voice channel, otherwise empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="204" column="13" bodyfile="include/dpp/channel.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unique ID of object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discord.h" line="44" column="11" bodyfile="include/dpp/discord.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1channel_1a53bbf494148ceea48e3b78716d7a8b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::channel::channel</definition>
        <argsstring>()</argsstring>
        <name>channel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="207" column="1" bodyfile="src/dpp/channel.cpp" bodystart="48" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a51afd2284fe4ae3a6d1043c8f3ecf4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>dpp::channel::~channel</definition>
        <argsstring>()</argsstring>
        <name>~channel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="210" column="9" bodyfile="src/dpp/channel.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a97c266efb07e429ecc1175207a409824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
        <definition>channel &amp; dpp::channel::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="216" column="9" bodyfile="src/dpp/channel.cpp" bodystart="164" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a2b818d100d7b40ee6b07d95ff3fcccb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string dpp::channel::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <reimplementedby refid="classdpp_1_1thread_1a3606d9b03710775529e277315afd8fb0">build_json</reimplementedby>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build json for this channel object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>include the ID in the json </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string JSON string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="224" column="21" bodyfile="src/dpp/channel.cpp" bodystart="243" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a86527c1fe86e93c66bf731c73ebcc0ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::channel::get_user_permissions</definition>
        <argsstring>(const class user *member) const</argsstring>
        <name>get_user_permissions</name>
        <param>
          <type>const class <ref refid="classdpp_1_1user" kindref="compound">user</ref> *</type>
          <declname>member</declname>
        </param>
        <briefdescription>
<para>Get the user permissions for a user on this channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>The user to return permissions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t Permissions bitmask made of bits in role_permissions. Note that if the user is not on the channel or the guild is not in the cache, the function will always return 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="234" column="10" bodyfile="src/dpp/channel.cpp" bodystart="287" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1ab817b065af6dab9a77e406908e368ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, class <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> * &gt;</type>
        <definition>std::map&lt; snowflake, guild_member * &gt; dpp::channel::get_members</definition>
        <argsstring>()</argsstring>
        <name>get_members</name>
        <briefdescription>
<para>Return a map of members on the channel, built from the guild&apos;s member list based on which members have the VIEW_CHANNEL permission. Does not return reliable information for voice channels, use <ref refid="classdpp_1_1channel_1a915cc4ba3ec7514a684315594255253a" kindref="member">dpp::channel::get_voice_members()</ref> instead for this. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A map of guild members keyed by user id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="243" column="10" bodyfile="src/dpp/channel.cpp" bodystart="299" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a915cc4ba3ec7514a684315594255253a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, <ref refid="classdpp_1_1voicestate" kindref="compound">voicestate</ref> &gt;</type>
        <definition>std::map&lt; snowflake, voicestate &gt; dpp::channel::get_voice_members</definition>
        <argsstring>()</argsstring>
        <name>get_voice_members</name>
        <briefdescription>
<para>Get a map of members in this channel, if it is a voice channel. The map is keyed by snowflake id of the user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::map&lt;snowflake, voicestate&gt; The voice members of the channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="251" column="10" bodyfile="src/dpp/channel.cpp" bodystart="315" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a41631deb5f2cb740b4d124cde9f266d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_nsfw</definition>
        <argsstring>() const</argsstring>
        <name>is_nsfw</name>
        <briefdescription>
<para>Returns true if the channel is NSFW gated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if NSFW </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="258" column="6" bodyfile="src/dpp/channel.cpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a7b9bfb2f922e7cfcbbb1d60f02e5a901" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_text_channel</definition>
        <argsstring>() const</argsstring>
        <name>is_text_channel</name>
        <briefdescription>
<para>Returns true if the channel is a text channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if text channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="265" column="6" bodyfile="src/dpp/channel.cpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a918afc6016a1114151a253e7caa35179" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_dm</definition>
        <argsstring>() const</argsstring>
        <name>is_dm</name>
        <briefdescription>
<para>Returns true if the channel is a DM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if is a DM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="272" column="6" bodyfile="src/dpp/channel.cpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a8ee69208f9cf16c18f2ceb460ada1916" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_voice_channel</definition>
        <argsstring>() const</argsstring>
        <name>is_voice_channel</name>
        <briefdescription>
<para>Returns true if the channel is a voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if voice channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="279" column="6" bodyfile="src/dpp/channel.cpp" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a27a623072570b333f697bd01c3616208" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_group_dm</definition>
        <argsstring>() const</argsstring>
        <name>is_group_dm</name>
        <briefdescription>
<para>Returns true if the channel is a group DM channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if group DM </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="286" column="6" bodyfile="src/dpp/channel.cpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a1b6b7a32e44eec70466a98b31252aa54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_category</definition>
        <argsstring>() const</argsstring>
        <name>is_category</name>
        <briefdescription>
<para>Returns true if the channel is a category. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if a category </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="293" column="6" bodyfile="src/dpp/channel.cpp" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a9fb22156c167cb2c334ec3388502fdff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_news_channel</definition>
        <argsstring>() const</argsstring>
        <name>is_news_channel</name>
        <briefdescription>
<para>Returns true if the channel is a news channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if news channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="300" column="6" bodyfile="src/dpp/channel.cpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a04256bb3015b9fa150d56a8025a6e1d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_store_channel</definition>
        <argsstring>() const</argsstring>
        <name>is_store_channel</name>
        <briefdescription>
<para>Returns true if the channel is a store channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if store channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="307" column="6" bodyfile="src/dpp/channel.cpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1ae95ae73f17ff4badd2001bcc07940709" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_stage_channel</definition>
        <argsstring>() const</argsstring>
        <name>is_stage_channel</name>
        <briefdescription>
<para>Returns true if the channel is a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if stage channel </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="314" column="6" bodyfile="src/dpp/channel.cpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1afb783f82a86a5ed6f247aaa213164854" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_video_auto</definition>
        <argsstring>() const</argsstring>
        <name>is_video_auto</name>
        <briefdescription>
<para>Returns true if video quality is auto. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if video quality is auto </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="321" column="6" bodyfile="src/dpp/channel.cpp" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1channel_1a311501db36692f1753254e1bf618e75d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::channel::is_video_720p</definition>
        <argsstring>() const</argsstring>
        <name>is_video_720p</name>
        <briefdescription>
<para>Returns true if video quality is 720p. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if video quality is 720p </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/channel.h" line="328" column="6" bodyfile="src/dpp/channel.cpp" bodystart="115" bodyend="117"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A definition of a discord channel There are one of these for every channel type except threads. Threads are special snowflakes. Get it? A Discord pun. Hahaha. .... I&apos;ll get my coat. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::channel</label>
        <link refid="classdpp_1_1channel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="3">
        <label>dpp::thread</label>
        <link refid="classdpp_1_1thread"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::channel</label>
        <link refid="classdpp_1_1channel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>bitrate</edgelabel>
          <edgelabel>flags</edgelabel>
          <edgelabel>position</edgelabel>
          <edgelabel>rate_limit_per_user</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>last_message_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>parent_id</edgelabel>
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>rtc_region</edgelabel>
          <edgelabel>topic</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>user_limit</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_pin_timestamp</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>permission_overwrites</edgelabel>
          <edgelabel>recipients</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>vector&lt;</label>
      </node>
      <node id="8">
        <label>time_t</label>
      </node>
      <node id="4">
        <label>uint16_t</label>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
      <node id="7">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/channel.h" line="149" column="1" bodyfile="include/dpp/channel.h" bodystart="149" bodyend="330"/>
    <listofallmembers>
      <member refid="classdpp_1_1channel_1ab32308d8281aef6bfe4d5a6538c6306e" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>bitrate</name></member>
      <member refid="classdpp_1_1channel_1a2b818d100d7b40ee6b07d95ff3fcccb8" prot="public" virt="virtual"><scope>dpp::channel</scope><name>build_json</name></member>
      <member refid="classdpp_1_1channel_1a53bbf494148ceea48e3b78716d7a8b07" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>channel</name></member>
      <member refid="classdpp_1_1channel_1a97c266efb07e429ecc1175207a409824" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1channel_1a4468e3981302301886f649d14b7ddcf7" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>flags</name></member>
      <member refid="classdpp_1_1channel_1ab817b065af6dab9a77e406908e368ae1" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>get_members</name></member>
      <member refid="classdpp_1_1channel_1a86527c1fe86e93c66bf731c73ebcc0ac" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>get_user_permissions</name></member>
      <member refid="classdpp_1_1channel_1a915cc4ba3ec7514a684315594255253a" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>get_voice_members</name></member>
      <member refid="classdpp_1_1channel_1a52a3d85468b8b6a1eb16c1bdb19cb499" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>id</name></member>
      <member refid="classdpp_1_1channel_1a1b6b7a32e44eec70466a98b31252aa54" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_category</name></member>
      <member refid="classdpp_1_1channel_1a918afc6016a1114151a253e7caa35179" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_dm</name></member>
      <member refid="classdpp_1_1channel_1a27a623072570b333f697bd01c3616208" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_group_dm</name></member>
      <member refid="classdpp_1_1channel_1a9fb22156c167cb2c334ec3388502fdff" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_news_channel</name></member>
      <member refid="classdpp_1_1channel_1a41631deb5f2cb740b4d124cde9f266d2" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_nsfw</name></member>
      <member refid="classdpp_1_1channel_1ae95ae73f17ff4badd2001bcc07940709" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_stage_channel</name></member>
      <member refid="classdpp_1_1channel_1a04256bb3015b9fa150d56a8025a6e1d0" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_store_channel</name></member>
      <member refid="classdpp_1_1channel_1a7b9bfb2f922e7cfcbbb1d60f02e5a901" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_text_channel</name></member>
      <member refid="classdpp_1_1channel_1a311501db36692f1753254e1bf618e75d" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_video_720p</name></member>
      <member refid="classdpp_1_1channel_1afb783f82a86a5ed6f247aaa213164854" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_video_auto</name></member>
      <member refid="classdpp_1_1channel_1a8ee69208f9cf16c18f2ceb460ada1916" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>is_voice_channel</name></member>
      <member refid="classdpp_1_1channel_1aa510e7eb5e93c1c885392c7fcdf24779" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>last_message_id</name></member>
      <member refid="classdpp_1_1channel_1ae33f863adef0f0cc89a7324cd93bc752" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>last_pin_timestamp</name></member>
      <member refid="classdpp_1_1managed_1a3e2b7d69e7313d84aff23cadf9ba9a6a" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>managed</name></member>
      <member refid="classdpp_1_1channel_1a065d6fbd4e21759354c2516b074078a8" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>name</name></member>
      <member refid="classdpp_1_1channel_1adb22659e9dc7fb8dd36d1c9f67eb7181" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>owner_id</name></member>
      <member refid="classdpp_1_1channel_1ae1e877475ccc7113683382f787cfbc48" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>parent_id</name></member>
      <member refid="classdpp_1_1channel_1a3eb698179af0d4c535cf5b7ed01b096e" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>permission_overwrites</name></member>
      <member refid="classdpp_1_1channel_1ab04ddf442a472f1c0d9c1f50846348f8" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>permissions</name></member>
      <member refid="classdpp_1_1channel_1a1f31178c9e86ad1490b8619cb9bdbde4" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>position</name></member>
      <member refid="classdpp_1_1channel_1a2ec41d2c2a7d592c1a17888d3f401fd5" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>rate_limit_per_user</name></member>
      <member refid="classdpp_1_1channel_1a0d66636187a0382693d69c2ac2827e89" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>recipients</name></member>
      <member refid="classdpp_1_1channel_1a05f56fbd37e993e0fc36df06b3d65bad" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>rtc_region</name></member>
      <member refid="classdpp_1_1channel_1a57864fde3659243453d1ad1c9bf60983" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>topic</name></member>
      <member refid="classdpp_1_1channel_1a79251adb1bc9dc6780af2afd21499769" prot="public" virt="non-virtual"><scope>dpp::channel</scope><name>user_limit</name></member>
      <member refid="classdpp_1_1channel_1a51afd2284fe4ae3a6d1043c8f3ecf4f1" prot="public" virt="virtual"><scope>dpp::channel</scope><name>~channel</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::channel</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
