<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1voicestate" kind="class" language="C++" prot="public">
    <compoundname>dpp::voicestate</compoundname>
    <includes local="no">voicestate.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1voicestate_1a0ea73d3fd39463142c315005321e28f5" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::voicestate::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>the channel id this user is connected to (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="49" column="10" bodyfile="include/dpp/voicestate.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voicestate_1abf58f2ac3357bc012b7bf617309919c9" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::voicestate::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
<para>Voice state flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="52" column="8" bodyfile="include/dpp/voicestate.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voicestate_1ae7a837b367c89d55482d448a4a6eb702" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::voicestate::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>Optional: the guild id this voice state is for. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="48" column="10" bodyfile="include/dpp/voicestate.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voicestate_1adda1e3192a8dbe103f5b5c29b29ca74b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::voicestate::session_id</definition>
        <argsstring></argsstring>
        <name>session_id</name>
        <briefdescription>
<para>the session id for this voice state </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="51" column="12" bodyfile="include/dpp/voicestate.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voicestate_1a94e4a9ddbfb2368a4d06c1cd1f538141" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>class discord_client* dpp::voicestate::shard</definition>
        <argsstring></argsstring>
        <name>shard</name>
        <briefdescription>
<para>Owning shard. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="47" column="21" bodyfile="include/dpp/voicestate.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1voicestate_1a2a56a68ec5590ac218711f72893013fd" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::voicestate::user_id</definition>
        <argsstring></argsstring>
        <name>user_id</name>
        <briefdescription>
<para>the user id this voice state is for </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="50" column="10" bodyfile="include/dpp/voicestate.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1voicestate_1a2cffc101e4bff3c2aa40f5efc9fee895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voicestate::voicestate</definition>
        <argsstring>()</argsstring>
        <name>voicestate</name>
        <briefdescription>
<para>Construct a new voicestate object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a29e5fdd1ec931b6ad1feed0094a1225f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::voicestate::~voicestate</definition>
        <argsstring>()</argsstring>
        <name>~voicestate</name>
        <briefdescription>
<para>Destroy the voicestate object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1aba7457e7deae41a991abebbdc2d330dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::voicestate::build_json</definition>
        <argsstring>() const</argsstring>
        <name>build_json</name>
        <briefdescription>
<para>Build json representation of the object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string JSON string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="77" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a24cf57b27275f7e5c650f581da9c469d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1voicestate" kindref="compound">voicestate</ref> &amp;</type>
        <definition>voicestate &amp; dpp::voicestate::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type><ref refid="namespacenlohmann_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref> *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill voicestate object from json data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON data to fill from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>voicestate&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="70" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a307d3a8776385f6ab468e838c97099ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::is_deaf</definition>
        <argsstring>() const</argsstring>
        <name>is_deaf</name>
        <briefdescription>
<para>Return true if user is deafened. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="80" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a5b42b2ae9e76fe86bdf73eac208d953d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::is_mute</definition>
        <argsstring>() const</argsstring>
        <name>is_mute</name>
        <briefdescription>
<para>Return true if user is muted. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="83" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1ac52f6bca0bf8feb50fc7c3ab9cdc57db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::is_self_deaf</definition>
        <argsstring>() const</argsstring>
        <name>is_self_deaf</name>
        <briefdescription>
<para>Return true if user deafened themselves. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="89" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a1ade333534ab9fe0cb18485269ced203" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::is_self_mute</definition>
        <argsstring>() const</argsstring>
        <name>is_self_mute</name>
        <briefdescription>
<para>Return true if user muted themselves. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="86" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a631921c8fd04d5b3c1989218b48ef4d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::is_suppressed</definition>
        <argsstring>() const</argsstring>
        <name>is_suppressed</name>
        <briefdescription>
<para>Return true if user is suppressed. &quot;HELP HELP I&apos;M BEING SUPPRESSED!&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="99" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a5b0fa82d1d55249aeb96fd7119aac5c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::self_stream</definition>
        <argsstring>() const</argsstring>
        <name>self_stream</name>
        <briefdescription>
<para>Return true if the user is streamig. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="92" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1voicestate_1a6d2114f152b6170f039c096f8a200219" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::voicestate::self_video</definition>
        <argsstring>() const</argsstring>
        <name>self_video</name>
        <briefdescription>
<para>Return true if the user is in video. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/voicestate.h" line="95" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents the voice state of a user on a guild These are stored in the <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref> object, and accessible there, or via <ref refid="classdpp_1_1channel_1a915cc4ba3ec7514a684315594255253a" kindref="member">dpp::channel::get_voice_members</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="7">
        <label>bool</label>
      </node>
      <node id="23">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="15">
        <label>double</label>
      </node>
      <node id="22">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="23" relation="usage">
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="5" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>reconnects</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
          <edgelabel>last_heartbeat_ack</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>sessionid</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>websocket_ping</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="12" relation="usage">
          <edgelabel>application_command_create</edgelabel>
          <edgelabel>application_command_delete</edgelabel>
          <edgelabel>application_command_update</edgelabel>
          <edgelabel>button_click</edgelabel>
          <edgelabel>channel_create</edgelabel>
          <edgelabel>channel_delete</edgelabel>
          <edgelabel>channel_pins_update</edgelabel>
          <edgelabel>channel_update</edgelabel>
          <edgelabel>guild_ban_add</edgelabel>
          <edgelabel>guild_ban_remove</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="11" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="5" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
          <edgelabel>custom_writeable_ready</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="11" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::voicestate</label>
        <link refid="classdpp_1_1voicestate"/>
        <childnode refid="2" relation="usage">
          <edgelabel>shard</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>session_id</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>int</label>
      </node>
      <node id="9">
        <label>opensslcontext *</label>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="12">
        <label>function&lt;</label>
      </node>
      <node id="25">
        <label>std::mutex</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>native_handle_type</label>
      </node>
      <node id="26">
        <label>unordered_map&lt;</label>
      </node>
      <node id="10">
        <label>time_t</label>
      </node>
      <node id="19">
        <label>uint16_t</label>
      </node>
      <node id="14">
        <label>uint32_t</label>
      </node>
      <node id="11">
        <label>uint64_t</label>
      </node>
      <node id="21">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/voicestate.h" line="45" column="1" bodyfile="include/dpp/voicestate.h" bodystart="45" bodyend="100"/>
    <listofallmembers>
      <member refid="classdpp_1_1voicestate_1aba7457e7deae41a991abebbdc2d330dc" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>build_json</name></member>
      <member refid="classdpp_1_1voicestate_1a0ea73d3fd39463142c315005321e28f5" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>channel_id</name></member>
      <member refid="classdpp_1_1voicestate_1a24cf57b27275f7e5c650f581da9c469d" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1voicestate_1abf58f2ac3357bc012b7bf617309919c9" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>flags</name></member>
      <member refid="classdpp_1_1voicestate_1ae7a837b367c89d55482d448a4a6eb702" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1voicestate_1a307d3a8776385f6ab468e838c97099ed" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>is_deaf</name></member>
      <member refid="classdpp_1_1voicestate_1a5b42b2ae9e76fe86bdf73eac208d953d" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>is_mute</name></member>
      <member refid="classdpp_1_1voicestate_1ac52f6bca0bf8feb50fc7c3ab9cdc57db" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>is_self_deaf</name></member>
      <member refid="classdpp_1_1voicestate_1a1ade333534ab9fe0cb18485269ced203" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>is_self_mute</name></member>
      <member refid="classdpp_1_1voicestate_1a631921c8fd04d5b3c1989218b48ef4d3" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>is_suppressed</name></member>
      <member refid="classdpp_1_1voicestate_1a5b0fa82d1d55249aeb96fd7119aac5c2" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>self_stream</name></member>
      <member refid="classdpp_1_1voicestate_1a6d2114f152b6170f039c096f8a200219" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>self_video</name></member>
      <member refid="classdpp_1_1voicestate_1adda1e3192a8dbe103f5b5c29b29ca74b" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>session_id</name></member>
      <member refid="classdpp_1_1voicestate_1a94e4a9ddbfb2368a4d06c1cd1f538141" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>shard</name></member>
      <member refid="classdpp_1_1voicestate_1a2a56a68ec5590ac218711f72893013fd" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>user_id</name></member>
      <member refid="classdpp_1_1voicestate_1a2cffc101e4bff3c2aa40f5efc9fee895" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>voicestate</name></member>
      <member refid="classdpp_1_1voicestate_1a29e5fdd1ec931b6ad1feed0094a1225f" prot="public" virt="non-virtual"><scope>dpp::voicestate</scope><name>~voicestate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
