<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="buildlinux" kind="page">
    <compoundname>buildlinux</compoundname>
    <title>Building on Linux</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="buildlinux_1autotoc_md1">
<title>Building on Linux</title>
<sect2 id="buildlinux_1autotoc_md2">
<title>1. Build Source Code</title>
<para><verbatim>mkdir build
cd build
cmake ..
make -j8
</verbatim> Replace the number after -j with a number suitable for your setup, usually the same as the number of cores on your machine. <computeroutput>cmake</computeroutput> will fetch any dependencies that are required for you and ensure they are compiled alongside the library.</para>
</sect2>
<sect2 id="buildlinux_1autotoc_md3">
<title>2. Optional: Run test cases</title>
<para>run <computeroutput>./test</computeroutput> for unit test cases. You will need to create a <computeroutput>config.json</computeroutput> file in the directory above the executable file with a valid bot token in it. See the example file <computeroutput>config.example.json</computeroutput> for an example of the correct format.</para>
</sect2>
<sect2 id="buildlinux_1autotoc_md4">
<title>3. Install to /usr/local/include and /usr/local/lib</title>
<para><verbatim>sudo make install
</verbatim> </para>
</sect2>
<sect2 id="buildlinux_1autotoc_md5">
<title>4. Installation to a different directory</title>
<para>If you want to install the library, its dependencies and header files to a different directory, specify this directory when running <computeroutput>cmake</computeroutput>: <verbatim>cmake .. -DCMAKE_INSTALL_PREFIX=/path/to/install
</verbatim> Then once the build is complete, run <computeroutput>make install</computeroutput> to install to the location you specified.</para>
</sect2>
<sect2 id="buildlinux_1autotoc_md6">
<title>5. Using the library</title>
<para>Once installed to the /usr/local directory, you can make use of the library in standalone programs simply by including it and linking to it: <verbatim>g++ -std=c++17 -ldpp -lfmt mydppbot.cpp -o dppbot
</verbatim> The important flags in this command-line are:</para>
<para><itemizedlist>
<listitem><para><computeroutput>-std=c++17</computeroutput> - Required to compile the headers</para>
</listitem><listitem><para><computeroutput>-ldpp -lfmt</computeroutput> - Link to libdpp.so and its dependencies, also in /usr/local</para>
</listitem><listitem><para><computeroutput>mydppbot.cpp</computeroutput> - Your source code</para>
</listitem><listitem><para><computeroutput>dppbot</computeroutput> - The name of the executable to make</para>
</listitem></itemizedlist>
</para>
<para>Of course, this is just a proof of concept - you should really use a more robust build system like GNU <computeroutput>make</computeroutput> or <ref refid="buildcmake" kindref="compound">`cmake`</ref>.</para>
<para><bold>Have fun!</bold> </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="docpages/02_build.md"/>
  </compounddef>
</doxygen>
