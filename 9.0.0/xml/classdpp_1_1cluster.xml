<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1cluster" kind="class" language="C++" prot="public">
    <compoundname>dpp::cluster</compoundname>
    <includes local="no">cluster.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1cluster_1a550e3f1bf003f129a04c6acc0fcaa914" prot="private" static="no" mutable="no">
        <type><ref refid="classdpp_1_1request__queue" kindref="compound">request_queue</ref> *</type>
        <definition>request_queue* dpp::cluster::rest</definition>
        <argsstring></argsstring>
        <name>rest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>queue system for commands sent to Discord, and any replies </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="219" column="15" bodyfile="include/dpp/cluster.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a3334e0a3ee0cbf7e20a7a88e9b73f8df" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::cluster::compressed</definition>
        <argsstring></argsstring>
        <name>compressed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if to use compression on shards </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="222" column="6" bodyfile="include/dpp/cluster.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a66dc3cad1b49988c7656c92169c7b2bb" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex dpp::cluster::dm_list_lock</definition>
        <argsstring></argsstring>
        <name>dm_list_lock</name>
        <briefdescription>
<para>Lock to prevent concurrent access to dm_channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="227" column="12" bodyfile="include/dpp/cluster.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a9b12c3db92a110916052b0c1b260299d" prot="private" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::cluster::start_time</definition>
        <argsstring></argsstring>
        <name>start_time</name>
        <briefdescription>
<para>Start time of cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="232" column="8" bodyfile="include/dpp/cluster.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a643e94b648db0e392f52e345c8bc3377" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::unordered_map&lt;snowflake, snowflake&gt; dpp::cluster::dm_channels</definition>
        <argsstring></argsstring>
        <name>dm_channels</name>
        <briefdescription>
<para>Active DM channels for the bot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="237" column="20" bodyfile="include/dpp/cluster.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a0846d3ebce4cb2c346ef4947683cf058" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a13c4d4e6238396245b349e6a637897e0" kindref="member">shard_list</ref></type>
        <definition>shard_list dpp::cluster::shards</definition>
        <argsstring></argsstring>
        <name>shards</name>
        <briefdescription>
<para>Active shards on this cluster. Shard IDs may have gaps between if there are multiple clusters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="243" column="12" bodyfile="include/dpp/cluster.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1cluster_1a644b186bc4b386a8313e3c5dce456c4e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::cluster::token</definition>
        <argsstring></argsstring>
        <name>token</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current bot token for all shards on this cluster and all commands sent via HTTP </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="253" column="13" bodyfile="include/dpp/cluster.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a32ce7fc13658a25e2faeadcd36282b0b" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::cluster::last_identify</definition>
        <argsstring></argsstring>
        <name>last_identify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="256" column="8" bodyfile="include/dpp/cluster.h" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a239af1e13449c85658fb37e6589745a0" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::cluster::intents</definition>
        <argsstring></argsstring>
        <name>intents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current bitmask of gateway intents </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="259" column="10" bodyfile="include/dpp/cluster.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a7418aa521c49af80822039b013d8d004" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::cluster::numshards</definition>
        <argsstring></argsstring>
        <name>numshards</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total number of shards across all clusters </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="262" column="10" bodyfile="include/dpp/cluster.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a5155862c1d7267c7f4ee8781ff3e8d7f" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::cluster::cluster_id</definition>
        <argsstring></argsstring>
        <name>cluster_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID of this cluster, between 0 and MAXCLUSTERS-1 inclusive </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="265" column="10" bodyfile="include/dpp/cluster.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ad80e4df300e69988d163d61c14e540ab" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::cluster::maxclusters</definition>
        <argsstring></argsstring>
        <name>maxclusters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total number of clusters that are active </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="268" column="10" bodyfile="include/dpp/cluster.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ad7dfd048a845235dda924b989c1383f3" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1dispatcher" kindref="compound">dpp::dispatcher</ref></type>
        <definition>dpp::dispatcher dpp::cluster::dispatch</definition>
        <argsstring></argsstring>
        <name>dispatch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Routes events from Discord back to user program code via std::functions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="271" column="17" bodyfile="include/dpp/cluster.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1ad31317a40181f6864646c8758871b495" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref></type>
        <definition>dpp::user dpp::cluster::me</definition>
        <argsstring></argsstring>
        <name>me</name>
        <briefdescription>
<para>The details of the bot user. This is assumed to be identical across all shards in the cluster. Each connecting shard updates this information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="277" column="11" bodyfile="include/dpp/cluster.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1cluster_1a9fae28f81712be86530fe3314d166ad3" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1cache__policy__t" kindref="compound">cache_policy_t</ref></type>
        <definition>cache_policy_t dpp::cluster::cache_policy</definition>
        <argsstring></argsstring>
        <name>cache_policy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="279" column="16" bodyfile="include/dpp/cluster.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1cluster_1aeb86e87c07ca3954e198741175fbcb5a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::auto_shard</definition>
        <argsstring>(const confirmation_callback_t &amp;shardinfo)</argsstring>
        <name>auto_shard</name>
        <param>
          <type>const <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">confirmation_callback_t</ref> &amp;</type>
          <declname>shardinfo</declname>
        </param>
        <briefdescription>
<para>Accepts result from /gateway/bot REST API call and populates numshards with it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shardinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Received HTTP data from API call </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="250" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="120" bodyend="134"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1cluster_1aac40e45e1ff8efb4e9ae75a7ecacc786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::cluster::cluster</definition>
        <argsstring>(const std::string &amp;token, uint32_t intents=i_default_intents, uint32_t shards=0, uint32_t cluster_id=0, uint32_t maxclusters=1, bool compressed=true, cache_policy_t policy={cp_aggressive, cp_aggressive, cp_aggressive})</argsstring>
        <name>cluster</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>intents</declname>
          <defval><ref refid="namespacedpp_1a0042c0fc8164da4239b977d5be8e2ef5a561a52b3c6883808735c41891351c68f" kindref="member">i_default_intents</ref></defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shards</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cluster_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxclusters</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>compressed</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="structdpp_1_1cache__policy__t" kindref="compound">cache_policy_t</ref></type>
          <declname>policy</declname>
          <defval>{<ref refid="namespacedpp_1ace5c63d91b72c5bae7d8cf9d8f531e52a81a53a5c84326ed9419729871d0af46e" kindref="member">cp_aggressive</ref>, <ref refid="namespacedpp_1ace5c63d91b72c5bae7d8cf9d8f531e52a81a53a5c84326ed9419729871d0af46e" kindref="member">cp_aggressive</ref>, <ref refid="namespacedpp_1ace5c63d91b72c5bae7d8cf9d8f531e52a81a53a5c84326ed9419729871d0af46e" kindref="member">cp_aggressive</ref>}</defval>
        </param>
        <briefdescription>
<para>Constructor for creating a cluster. All but the token are optional. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>The bot token to use for all HTTP commands and websocket connections </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intents</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitmask of dpd::intents values for all shards on this cluster. This is required to be sent for all bots with over 100 servers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shards</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of shards on this bot. If there are multiple clusters, then (shards / clusters) actual shards will run on this cluster. If you omit this value, the library will attempt to query the Discord API for the correct number of shards to start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cluster_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of this cluster, should be between 0 and MAXCLUSTERS-1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxclusters</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of clusters that are active, which may be on seperate processes or even separate machines. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressed</parametername>
</parameternamelist>
<parameterdescription>
<para>Wether or not to use compression for shards on this cluster. Saves a ton of bandwidth at the cost of some CPU </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>Set the user caching policy for the cluster, either lazy (only cache users/members when they message the bot) or aggressive (request whole member lists on seeing new guilds too) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="292" column="1" bodyfile="src/dpp/cluster.cpp" bodystart="38" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6b0b523f89559b4ce204ca9ed9693d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::cluster::cluster</definition>
        <argsstring>(const cluster &amp;)=delete</argsstring>
        <name>cluster</name>
        <param>
          <type>const <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;</type>
        </param>
        <briefdescription>
<para><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> is non-copyable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2d957f52245734f6d44444af8380c952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::cluster::cluster</definition>
        <argsstring>(const cluster &amp;&amp;)=delete</argsstring>
        <name>cluster</name>
        <param>
          <type>const <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
<para><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> is non-moveable </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a270be0ab59aff4f335ef3f4af7559d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::cluster::~cluster</definition>
        <argsstring>()</argsstring>
        <name>~cluster</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="305" column="1" bodyfile="src/dpp/cluster.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a13689440c9cc80279d415c563a6363c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const</argsstring>
        <name>log</name>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message to whatever log the user is using. The logged message is passed up the chain to the on_log event in user code which can then do whatever it wants to do with it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level from <ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The log message to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="314" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="136" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae6164d5543b7594731a980da9b0b2088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::cluster::get_dm_channel</definition>
        <argsstring>(snowflake user_id)</argsstring>
        <name>get_dm_channel</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <briefdescription>
<para>Get the dm channel for a user id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the user id to get the dm channel for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 0 on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="322" column="11" bodyfile="src/dpp/cluster.cpp" bodystart="201" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3fc501cc0ebb334d09a7f4bb1ea6b3e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::set_dm_channel</definition>
        <argsstring>(snowflake user_id, snowflake channel_id)</argsstring>
        <name>set_dm_channel</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Set the dm channel id for a user id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>user id to set the dm channel for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>dm channel to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="330" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af12b5b33ea156bde9977796858066a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref></type>
        <definition>dpp::utility::uptime dpp::cluster::uptime</definition>
        <argsstring>()</argsstring>
        <name>uptime</name>
        <briefdescription>
<para>Returns the uptime of the cluster. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref> The uptime of the cluster </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="337" column="22" bodyfile="src/dpp/cluster.cpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a40e99d13e1380eccd30d13123014594f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::start</definition>
        <argsstring>(bool return_after=true)</argsstring>
        <name>start</name>
        <param>
          <type>bool</type>
          <declname>return_after</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Start the cluster, connecting all its shards. Returns once all shards are connected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>return_after</parametername>
</parameternamelist>
<parameterdescription>
<para>If true the bot will return to your program after starting shards, if false this function will never return. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="345" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="151" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9b67c9455ac0378712e4c0fd0ba7f2a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::set_presence</definition>
        <argsstring>(const class dpp::presence &amp;p)</argsstring>
        <name>set_presence</name>
        <param>
          <type>const class <ref refid="classdpp_1_1presence" kindref="compound">dpp::presence</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Set the presence for all shards on the cluster. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>The presence to set. Only the online status and the first activity are sent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="352" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="245" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5c677c0d5c059e87cc01ce598d49487d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>discord_client * dpp::cluster::get_shard</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>get_shard</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a shard by id, returning the <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Shard ID </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>discord_client* shard, or null </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="360" column="16" bodyfile="src/dpp/cluster.cpp" bodystart="254" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af4d6195862e6d25c644902631a0b34d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacedpp_1a13c4d4e6238396245b349e6a637897e0" kindref="member">shard_list</ref> &amp;</type>
        <definition>const shard_list &amp; dpp::cluster::get_shards</definition>
        <argsstring>()</argsstring>
        <name>get_shards</name>
        <briefdescription>
<para>Get the list of shards. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>shard_list&amp; Reference to map of shards for this cluster </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="367" column="18" bodyfile="src/dpp/cluster.cpp" bodystart="263" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a52046d1e6bbbad709abe05cedd376eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_voice_state_update</definition>
        <argsstring>(std::function&lt; void(const voice_state_update_t &amp;_event)&gt; _voice_state_update)</argsstring>
        <name>on_voice_state_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__state__update__t" kindref="compound">voice_state_update_t</ref> &amp;_event)&gt;</type>
          <declname>_voice_state_update</declname>
        </param>
        <briefdescription>
<para>on voice state update event </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_voice_state_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="376" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1555" bodyend="1557"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab42d2402bb68ba381a011f4ade31c909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_log</definition>
        <argsstring>(std::function&lt; void(const log_t &amp;_event)&gt; _log)</argsstring>
        <name>on_log</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1log__t" kindref="compound">log_t</ref> &amp;_event)&gt;</type>
          <declname>_log</declname>
        </param>
        <briefdescription>
<para>Called when a log message is to be written to the log. You can attach any logging system here you wish, e.g. spdlog, or even just a simple use of std::cout or printf. If nothing attaches this log event, then the library will be silent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_log</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="386" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1551" bodyend="1553"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a543b76d7b49f9473b0476dbfee627271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_join_request_delete</definition>
        <argsstring>(std::function&lt; void(const guild_join_request_delete_t &amp;_event)&gt; _guild_join_request_delete)</argsstring>
        <name>on_guild_join_request_delete</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__join__request__delete__t" kindref="compound">guild_join_request_delete_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_join_request_delete</declname>
        </param>
        <briefdescription>
<para>on guild join request delete. Triggered when a user declines the membership screening questionnaire for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_join_request_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="394" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1783" bodyend="1785"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab17aa65a6835eca5a95036d6bf6f736c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_interaction_create</definition>
        <argsstring>(std::function&lt; void(const interaction_create_t &amp;_event)&gt; _interaction_create)</argsstring>
        <name>on_interaction_create</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1interaction__create__t" kindref="compound">interaction_create_t</ref> &amp;_event)&gt;</type>
          <declname>_interaction_create</declname>
        </param>
        <briefdescription>
<para>Called when a new interaction is created. Interactions are created by discord when commands you have registered are issued by a user. For an example of this in action please see <ref refid="slashcommands" kindref="compound">Using Slash Commands and Interactions</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_interaction_create</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="403" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1567" bodyend="1569"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afb5b1009f3eacd98784cfb642c8e2858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_button_click</definition>
        <argsstring>(std::function&lt; void(const button_click_t &amp;_event)&gt; _button_click)</argsstring>
        <name>on_button_click</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1button__click__t" kindref="compound">button_click_t</ref> &amp;_event)&gt;</type>
          <declname>_button_click</declname>
        </param>
        <briefdescription>
<para>Called when a button is clicked attached to a message. Button clicks are triggered by discord when buttons are clicked which you have associated with a message using <ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_button_click</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="412" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1571" bodyend="1573"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a75cfef69413003d5bed51b986fd15787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_select_click</definition>
        <argsstring>(std::function&lt; void(const select_click_t &amp;_event)&gt; _select_click)</argsstring>
        <name>on_select_click</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1select__click__t" kindref="compound">select_click_t</ref> &amp;_event)&gt;</type>
          <declname>_select_click</declname>
        </param>
        <briefdescription>
<para>Called when a select menu is clicked attached to a message. Select menu clicks are triggered by discord when select menus are clicked which you have associated with a message using <ref refid="classdpp_1_1component" kindref="compound">dpp::component</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_select_click</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="421" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1575" bodyend="1577"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6cb092977902daa7f92e33f4fd05928d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_delete</definition>
        <argsstring>(std::function&lt; void(const guild_delete_t &amp;_event)&gt; _guild_delete)</argsstring>
        <name>on_guild_delete</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__delete__t" kindref="compound">guild_delete_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_delete</declname>
        </param>
        <briefdescription>
<para>Called when a guild is deleted. A guild can be deleted via the bot being kicked, the bot leaving the guild explicitly with dpp::guild_delete, or via the guild being unavaialble due to an outage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="431" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1579" bodyend="1581"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a198205866e58980295bdf41d69fc91d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_channel_delete</definition>
        <argsstring>(std::function&lt; void(const channel_delete_t &amp;_event)&gt; _channel_delete)</argsstring>
        <name>on_channel_delete</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1channel__delete__t" kindref="compound">channel_delete_t</ref> &amp;_event)&gt;</type>
          <declname>_channel_delete</declname>
        </param>
        <briefdescription>
<para>Called when a channel is deleted from a guild. The channel will still be temporarily avaialble in the cache. Pointers to the channel should not be retained long-term as they will be deleted by the garbage collector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_channel_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="441" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1583" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0a610f0b4ff4f2836c6b5b73d833d85c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_channel_update</definition>
        <argsstring>(std::function&lt; void(const channel_update_t &amp;_event)&gt; _channel_update)</argsstring>
        <name>on_channel_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1channel__update__t" kindref="compound">channel_update_t</ref> &amp;_event)&gt;</type>
          <declname>_channel_update</declname>
        </param>
        <briefdescription>
<para>Called when a channel is edited on a guild. The new channel details have already been applied to the guild when you receive this event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_channel_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="450" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1587" bodyend="1589"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad8170aef3ae244df66464b192e3e30e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_ready</definition>
        <argsstring>(std::function&lt; void(const ready_t &amp;_event)&gt; _ready)</argsstring>
        <name>on_ready</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1ready__t" kindref="compound">ready_t</ref> &amp;_event)&gt;</type>
          <declname>_ready</declname>
        </param>
        <briefdescription>
<para>Called when a shard is connected and ready. A set of on_guild_create events will follow this event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="458" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1591" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a10cb7cb6746c6420a8db7b0419d7167e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_message_delete</definition>
        <argsstring>(std::function&lt; void(const message_delete_t &amp;_event)&gt; _message_delete)</argsstring>
        <name>on_message_delete</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1message__delete__t" kindref="compound">message_delete_t</ref> &amp;_event)&gt;</type>
          <declname>_message_delete</declname>
        </param>
        <briefdescription>
<para>Called when a message is deleted. The message has already been deleted from Discord when you receive this event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_message_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="467" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1595" bodyend="1597"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1abd8ee0e654de56e39c418e83e1115af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_application_command_delete</definition>
        <argsstring>(std::function&lt; void(const application_command_delete_t &amp;_event)&gt; _application_command_delete)</argsstring>
        <name>on_application_command_delete</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1application__command__delete__t" kindref="compound">application_command_delete_t</ref> &amp;_event)&gt;</type>
          <declname>_application_command_delete</declname>
        </param>
        <briefdescription>
<para>Called when an application command (slash command) is deleted. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_application_command_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="474" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1599" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a066836f6875a4e3c0337ac8bdb5dc0cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_member_remove</definition>
        <argsstring>(std::function&lt; void(const guild_member_remove_t &amp;_event)&gt; _guild_member_remove)</argsstring>
        <name>on_guild_member_remove</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__member__remove__t" kindref="compound">guild_member_remove_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_member_remove</declname>
        </param>
        <briefdescription>
<para>Called when a user leaves a guild (either through being kicked, or choosing to leave) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_member_remove</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="481" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1603" bodyend="1605"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aaf2ae12b7d433f3b8e84dc72258e90a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_application_command_create</definition>
        <argsstring>(std::function&lt; void(const application_command_create_t &amp;_event)&gt; _application_command_create)</argsstring>
        <name>on_application_command_create</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1application__command__create__t" kindref="compound">application_command_create_t</ref> &amp;_event)&gt;</type>
          <declname>_application_command_create</declname>
        </param>
        <briefdescription>
<para>Called when a new application command (slash command) is registered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_application_command_create</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="488" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1607" bodyend="1609"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab14ac92eae4e4830f4cc17ae58aa9eaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_resumed</definition>
        <argsstring>(std::function&lt; void(const resumed_t &amp;_event)&gt; _resumed)</argsstring>
        <name>on_resumed</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1resumed__t" kindref="compound">resumed_t</ref> &amp;_event)&gt;</type>
          <declname>_resumed</declname>
        </param>
        <briefdescription>
<para>Called when a connection to a shard successfully resumes. A resumed session does not need to re-synchronise guilds, members, etc. This is generally non-fatal and informational only. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_resumed</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="497" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1611" bodyend="1613"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae672ed645f2d2ac9c16400fdfb280028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_role_create</definition>
        <argsstring>(std::function&lt; void(const guild_role_create_t &amp;_event)&gt; _guild_role_create)</argsstring>
        <name>on_guild_role_create</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__role__create__t" kindref="compound">guild_role_create_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_role_create</declname>
        </param>
        <briefdescription>
<para>Called when a new role is created on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_role_create</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="504" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1615" bodyend="1617"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af39f3dd46cbc25cf33f17ddb7621a0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_typing_start</definition>
        <argsstring>(std::function&lt; void(const typing_start_t &amp;_event)&gt; _typing_start)</argsstring>
        <name>on_typing_start</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1typing__start__t" kindref="compound">typing_start_t</ref> &amp;_event)&gt;</type>
          <declname>_typing_start</declname>
        </param>
        <briefdescription>
<para>Called when a user is typing on a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_typing_start</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="511" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1619" bodyend="1621"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6f6c50a06dde8496cc5975831182616e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_message_reaction_add</definition>
        <argsstring>(std::function&lt; void(const message_reaction_add_t &amp;_event)&gt; _message_reaction_add)</argsstring>
        <name>on_message_reaction_add</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__add__t" kindref="compound">message_reaction_add_t</ref> &amp;_event)&gt;</type>
          <declname>_message_reaction_add</declname>
        </param>
        <briefdescription>
<para>Called when a new reaction is added to a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_message_reaction_add</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="518" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1623" bodyend="1625"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6563c6a86b51b51604367a49e5b7d40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_members_chunk</definition>
        <argsstring>(std::function&lt; void(const guild_members_chunk_t &amp;_event)&gt; _guild_members_chunk)</argsstring>
        <name>on_guild_members_chunk</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__members__chunk__t" kindref="compound">guild_members_chunk_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_members_chunk</declname>
        </param>
        <briefdescription>
<para>Called when a set of members is received for a guild. D++ will request these for all new guilds if needed, after the on_guild_create events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_members_chunk</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="527" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1627" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1adba3843eca8e834a08833dff0e0c5cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_message_reaction_remove</definition>
        <argsstring>(std::function&lt; void(const message_reaction_remove_t &amp;_event)&gt; _message_reaction_remove)</argsstring>
        <name>on_message_reaction_remove</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__t" kindref="compound">message_reaction_remove_t</ref> &amp;_event)&gt;</type>
          <declname>_message_reaction_remove</declname>
        </param>
        <briefdescription>
<para>Called when a single reaction is removed from a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_message_reaction_remove</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="534" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1631" bodyend="1633"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5664cec1efc2de0beb9fde7b3a7b15fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_create</definition>
        <argsstring>(std::function&lt; void(const guild_create_t &amp;_event)&gt; _guild_create)</argsstring>
        <name>on_guild_create</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__create__t" kindref="compound">guild_create_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_create</declname>
        </param>
        <briefdescription>
<para>Called when a new guild is created. D++ will request members for the guild for its cache using guild_members_chunk. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_create</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="542" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1635" bodyend="1637"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac23e89c1685520bf303ac9b1b5eea08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_channel_create</definition>
        <argsstring>(std::function&lt; void(const channel_create_t &amp;_event)&gt; _channel_create)</argsstring>
        <name>on_channel_create</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1channel__create__t" kindref="compound">channel_create_t</ref> &amp;_event)&gt;</type>
          <declname>_channel_create</declname>
        </param>
        <briefdescription>
<para>Called when a new channel is created on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_channel_create</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="549" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1639" bodyend="1641"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a22f73e8bd1a6fb5aed92ae992fdef1d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_message_reaction_remove_emoji</definition>
        <argsstring>(std::function&lt; void(const message_reaction_remove_emoji_t &amp;_event)&gt; _message_reaction_remove_emoji)</argsstring>
        <name>on_message_reaction_remove_emoji</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__emoji__t" kindref="compound">message_reaction_remove_emoji_t</ref> &amp;_event)&gt;</type>
          <declname>_message_reaction_remove_emoji</declname>
        </param>
        <briefdescription>
<para>Called when all reactions for a particular emoji are removed from a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_message_reaction_remove_emoji</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="556" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1643" bodyend="1645"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aac2a29067eabb416c07773fa4c92628f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_message_delete_bulk</definition>
        <argsstring>(std::function&lt; void(const message_delete_bulk_t &amp;_event)&gt; _message_delete_bulk)</argsstring>
        <name>on_message_delete_bulk</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1message__delete__bulk__t" kindref="compound">message_delete_bulk_t</ref> &amp;_event)&gt;</type>
          <declname>_message_delete_bulk</declname>
        </param>
        <briefdescription>
<para>Called when multiple messages are deleted from a channel or DM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_message_delete_bulk</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="563" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1647" bodyend="1649"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9dfa1de622ce391d5f5a9131fdba50ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_role_update</definition>
        <argsstring>(std::function&lt; void(const guild_role_update_t &amp;_event)&gt; _guild_role_update)</argsstring>
        <name>on_guild_role_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__role__update__t" kindref="compound">guild_role_update_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_role_update</declname>
        </param>
        <briefdescription>
<para>Called when an existing role is updated on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_role_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="570" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1651" bodyend="1653"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6ff0483a599f5e925778f08c8e2736e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_role_delete</definition>
        <argsstring>(std::function&lt; void(const guild_role_delete_t &amp;_event)&gt; _guild_role_delete)</argsstring>
        <name>on_guild_role_delete</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__role__delete__t" kindref="compound">guild_role_delete_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_role_delete</declname>
        </param>
        <briefdescription>
<para>Called when a role is deleted in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_role_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="577" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1655" bodyend="1657"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa4fe070786e817347ab1f97217e1a713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_channel_pins_update</definition>
        <argsstring>(std::function&lt; void(const channel_pins_update_t &amp;_event)&gt; _channel_pins_update)</argsstring>
        <name>on_channel_pins_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1channel__pins__update__t" kindref="compound">channel_pins_update_t</ref> &amp;_event)&gt;</type>
          <declname>_channel_pins_update</declname>
        </param>
        <briefdescription>
<para>Called when a message is pinned. Note that the pinned message is not returned to this event, just the timestamp of the last pinned message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_channel_pins_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="586" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1659" bodyend="1661"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a25376d14ddda772a12105451c99834cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_message_reaction_remove_all</definition>
        <argsstring>(std::function&lt; void(const message_reaction_remove_all_t &amp;_event)&gt; _message_reaction_remove_all)</argsstring>
        <name>on_message_reaction_remove_all</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__all__t" kindref="compound">message_reaction_remove_all_t</ref> &amp;_event)&gt;</type>
          <declname>_message_reaction_remove_all</declname>
        </param>
        <briefdescription>
<para>Called when all reactions are removed from a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_message_reaction_remove_all</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="593" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1663" bodyend="1665"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab7ae85a0111247501183673313d09abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_voice_server_update</definition>
        <argsstring>(std::function&lt; void(const voice_server_update_t &amp;_event)&gt; _voice_server_update)</argsstring>
        <name>on_voice_server_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__server__update__t" kindref="compound">voice_server_update_t</ref> &amp;_event)&gt;</type>
          <declname>_voice_server_update</declname>
        </param>
        <briefdescription>
<para>Called when we are told which voice server we can use. This will be sent either when we establish a new voice channel connection, or as discord rearrange their infrastructure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_voice_server_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="602" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1691" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1abef8cb4e6080a0bd0f6641853d088fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_emojis_update</definition>
        <argsstring>(std::function&lt; void(const guild_emojis_update_t &amp;_event)&gt; _guild_emojis_update)</argsstring>
        <name>on_guild_emojis_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__emojis__update__t" kindref="compound">guild_emojis_update_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_emojis_update</declname>
        </param>
        <briefdescription>
<para>Called when new emojis are added to a guild. The complete set of emojis is sent every time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_emojis_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="610" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1695" bodyend="1697"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2f55020d0ad012c494cf80bb9ee86d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_presence_update</definition>
        <argsstring>(std::function&lt; void(const presence_update_t &amp;_event)&gt; _presence_update)</argsstring>
        <name>on_presence_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1presence__update__t" kindref="compound">presence_update_t</ref> &amp;_event)&gt;</type>
          <declname>_presence_update</declname>
        </param>
        <briefdescription>
<para>Called when a user&apos;s presence is updated. To receive these you will need the GUILD_PRESENCES privileged intent. You will receive many of these, very often, and receiving them will significaintly increase your bot&apos;s CPU usage. If you don&apos;t need them it is recommended to not ask for them. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_presence_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="621" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1699" bodyend="1701"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aca67bc20cb570e7563d157913066ad0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_webhooks_update</definition>
        <argsstring>(std::function&lt; void(const webhooks_update_t &amp;_event)&gt; _webhooks_update)</argsstring>
        <name>on_webhooks_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1webhooks__update__t" kindref="compound">webhooks_update_t</ref> &amp;_event)&gt;</type>
          <declname>_webhooks_update</declname>
        </param>
        <briefdescription>
<para>Called when the webhooks for a guild are updated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_webhooks_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="628" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1703" bodyend="1705"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8a394c8eb339f59d74b212b1c8af70a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_member_add</definition>
        <argsstring>(std::function&lt; void(const guild_member_add_t &amp;_event)&gt; _guild_member_add)</argsstring>
        <name>on_guild_member_add</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__member__add__t" kindref="compound">guild_member_add_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_member_add</declname>
        </param>
        <briefdescription>
<para>Called when a new member joins a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_member_add</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="635" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1707" bodyend="1709"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a86478198b682c09a4b5d4bcfa9d41f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_invite_delete</definition>
        <argsstring>(std::function&lt; void(const invite_delete_t &amp;_event)&gt; _invite_delete)</argsstring>
        <name>on_invite_delete</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1invite__delete__t" kindref="compound">invite_delete_t</ref> &amp;_event)&gt;</type>
          <declname>_invite_delete</declname>
        </param>
        <briefdescription>
<para>Called when an invite is deleted from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_invite_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="642" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1711" bodyend="1713"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1acfd6eb377df60cc02fb84de9136f5b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_update</definition>
        <argsstring>(std::function&lt; void(const guild_update_t &amp;_event)&gt; _guild_update)</argsstring>
        <name>on_guild_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__update__t" kindref="compound">guild_update_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_update</declname>
        </param>
        <briefdescription>
<para>Called when details of a guild are updated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="649" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1715" bodyend="1717"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a17765cfe21f91fcbac2e67778f6b36b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_integrations_update</definition>
        <argsstring>(std::function&lt; void(const guild_integrations_update_t &amp;_event)&gt; _guild_integrations_update)</argsstring>
        <name>on_guild_integrations_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__integrations__update__t" kindref="compound">guild_integrations_update_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_integrations_update</declname>
        </param>
        <briefdescription>
<para>Called when an integration is updated for a guild. This returns the complete list. An integration is a connection to a guild of a user&apos;s associated accounts, e.g. youtube or twitch, for automatic assignment of roles etc. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_integrations_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="659" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1719" bodyend="1721"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1acc914758724437ef5e2bd7af8cd6f2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_member_update</definition>
        <argsstring>(std::function&lt; void(const guild_member_update_t &amp;_event)&gt; _guild_member_update)</argsstring>
        <name>on_guild_member_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__member__update__t" kindref="compound">guild_member_update_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_member_update</declname>
        </param>
        <briefdescription>
<para>Called when details of a guild member (e.g. their roles or nickname) are updated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_member_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="666" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1723" bodyend="1725"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6fbee88ecc38a82cb1d13813199fb4ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_application_command_update</definition>
        <argsstring>(std::function&lt; void(const application_command_update_t &amp;_event)&gt; _application_command_update)</argsstring>
        <name>on_application_command_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1application__command__update__t" kindref="compound">application_command_update_t</ref> &amp;_event)&gt;</type>
          <declname>_application_command_update</declname>
        </param>
        <briefdescription>
<para>Called when an application command (slash command) is updated. You will only receive this event for application commands that belong to your bot/application. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_application_command_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="674" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1727" bodyend="1729"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ada70d52d327d96129829ba6b677ac0aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_invite_create</definition>
        <argsstring>(std::function&lt; void(const invite_create_t &amp;_event)&gt; _invite_create)</argsstring>
        <name>on_invite_create</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1invite__create__t" kindref="compound">invite_create_t</ref> &amp;_event)&gt;</type>
          <declname>_invite_create</declname>
        </param>
        <briefdescription>
<para>Called when a new invite is created for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_invite_create</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="681" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1731" bodyend="1733"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad75729ec22faab8b62de375cdfb98cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_message_update</definition>
        <argsstring>(std::function&lt; void(const message_update_t &amp;_event)&gt; _message_update)</argsstring>
        <name>on_message_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1message__update__t" kindref="compound">message_update_t</ref> &amp;_event)&gt;</type>
          <declname>_message_update</declname>
        </param>
        <briefdescription>
<para>Called when a message is updated (edited). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_message_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="688" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1735" bodyend="1737"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1abd822542ad661833cbf1fc23b6f0a1aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_user_update</definition>
        <argsstring>(std::function&lt; void(const user_update_t &amp;_event)&gt; _user_update)</argsstring>
        <name>on_user_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1user__update__t" kindref="compound">user_update_t</ref> &amp;_event)&gt;</type>
          <declname>_user_update</declname>
        </param>
        <briefdescription>
<para>Called when a user is updated. This is separate to guild_member_update and includes things such as an avatar change, username change, discriminator change or change in subscription status for nitro. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_user_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="697" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1739" bodyend="1741"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a29140a7c0e1250fe2016dbe4ced56f95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_message_create</definition>
        <argsstring>(std::function&lt; void(const message_create_t &amp;_event)&gt; _message_create)</argsstring>
        <name>on_message_create</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1message__create__t" kindref="compound">message_create_t</ref> &amp;_event)&gt;</type>
          <declname>_message_create</declname>
        </param>
        <briefdescription>
<para>Called when a new message arrives from discord. Note that D++ does not cache messages. If you want to cache these objects you should create something yourself within your bot. Caching of messages is not on the roadmap to be supported as it consumes excessive amounts of RAM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_message_create</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="707" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1743" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aee3b96f180a7cad98daaaab8ba98530a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_ban_add</definition>
        <argsstring>(std::function&lt; void(const guild_ban_add_t &amp;_event)&gt; _guild_ban_add)</argsstring>
        <name>on_guild_ban_add</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__ban__add__t" kindref="compound">guild_ban_add_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_ban_add</declname>
        </param>
        <briefdescription>
<para>Called when a ban is added to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_ban_add</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="714" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1747" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4fb67064fbd4738ec8bad14b5a80d2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_guild_ban_remove</definition>
        <argsstring>(std::function&lt; void(const guild_ban_remove_t &amp;_event)&gt; _guild_ban_remove)</argsstring>
        <name>on_guild_ban_remove</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1guild__ban__remove__t" kindref="compound">guild_ban_remove_t</ref> &amp;_event)&gt;</type>
          <declname>_guild_ban_remove</declname>
        </param>
        <briefdescription>
<para>Called when a ban is removed from a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_guild_ban_remove</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="721" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8483003e4f9d6ab671a2cf05e2e056fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_integration_create</definition>
        <argsstring>(std::function&lt; void(const integration_create_t &amp;_event)&gt; _integration_create)</argsstring>
        <name>on_integration_create</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1integration__create__t" kindref="compound">integration_create_t</ref> &amp;_event)&gt;</type>
          <declname>_integration_create</declname>
        </param>
        <briefdescription>
<para>Called when a new intgration is attached to a guild by a user. An integration is a connection to a guild of a user&apos;s associated accounts, e.g. youtube or twitch, for automatic assignment of roles etc. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_integration_create</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="730" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1751" bodyend="1753"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad8b5162af3648f5c521a9a3377211ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_integration_update</definition>
        <argsstring>(std::function&lt; void(const integration_update_t &amp;_event)&gt; _integration_update)</argsstring>
        <name>on_integration_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1integration__update__t" kindref="compound">integration_update_t</ref> &amp;_event)&gt;</type>
          <declname>_integration_update</declname>
        </param>
        <briefdescription>
<para>Called when an integration is updated by a user. This returns details of just the single integration that has changed. An integration is a connection to a guild of a user&apos;s associated accounts, e.g. youtube or twitch, for automatic assignment of roles etc. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_integration_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="740" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1755" bodyend="1757"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1d4f63cec74428a22f783e95bc8d8201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_integration_delete</definition>
        <argsstring>(std::function&lt; void(const integration_delete_t &amp;_event)&gt; _integration_delete)</argsstring>
        <name>on_integration_delete</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1integration__delete__t" kindref="compound">integration_delete_t</ref> &amp;_event)&gt;</type>
          <declname>_integration_delete</declname>
        </param>
        <briefdescription>
<para>Called when an integration is removed by a user. An integration is a connection to a guild of a user&apos;s associated accounts, e.g. youtube or twitch, for automatic assignment of roles etc. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_integration_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="749" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1759" bodyend="1761"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a090c58e8249813c550077c0fd569dbf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_thread_create</definition>
        <argsstring>(std::function&lt; void(const thread_create_t &amp;_event)&gt; _thread_create)</argsstring>
        <name>on_thread_create</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__create__t" kindref="compound">thread_create_t</ref> &amp;_event)&gt;</type>
          <declname>_thread_create</declname>
        </param>
        <briefdescription>
<para>Called when a thread is created Note: Threads are not cached by D++, but a list of thread IDs is accessible in a guild object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_thread_create</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="757" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1667" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a21c176195c3a2b4ef002cf4cbfbd382b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_thread_update</definition>
        <argsstring>(std::function&lt; void(const thread_update_t &amp;_event)&gt; _thread_update)</argsstring>
        <name>on_thread_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__update__t" kindref="compound">thread_update_t</ref> &amp;_event)&gt;</type>
          <declname>_thread_update</declname>
        </param>
        <briefdescription>
<para>Called when a thread is updated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_thread_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="764" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1671" bodyend="1673"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a545c320691915b49d0d6fd794c984816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_thread_delete</definition>
        <argsstring>(std::function&lt; void(const thread_delete_t &amp;_event)&gt; _thread_delete)</argsstring>
        <name>on_thread_delete</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__delete__t" kindref="compound">thread_delete_t</ref> &amp;_event)&gt;</type>
          <declname>_thread_delete</declname>
        </param>
        <briefdescription>
<para>Called when a thread is deleted. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_thread_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="771" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1675" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a314b36750a8b16d0a13f3fdd94342965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_thread_list_sync</definition>
        <argsstring>(std::function&lt; void(const thread_list_sync_t &amp;_event)&gt; _thread_list_sync)</argsstring>
        <name>on_thread_list_sync</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__list__sync__t" kindref="compound">thread_list_sync_t</ref> &amp;_event)&gt;</type>
          <declname>_thread_list_sync</declname>
        </param>
        <briefdescription>
<para>Called when thread list is synced (upon gaining access to a channel) Note: Threads are not cached by D++, but a list of thread IDs is accessible in a guild object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_thread_list_sync</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="779" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1679" bodyend="1681"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0cecbf9791b82b34defc264fad24066c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_thread_member_update</definition>
        <argsstring>(std::function&lt; void(const thread_member_update_t &amp;_event)&gt; _thread_member_update)</argsstring>
        <name>on_thread_member_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__member__update__t" kindref="compound">thread_member_update_t</ref> &amp;_event)&gt;</type>
          <declname>_thread_member_update</declname>
        </param>
        <briefdescription>
<para>Called when current user&apos;s thread member object is updated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_thread_member_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="786" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1683" bodyend="1685"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a56429a7a625651fd36e6f45ec8793d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_thread_members_update</definition>
        <argsstring>(std::function&lt; void(const thread_members_update_t &amp;_event)&gt; _thread_members_update)</argsstring>
        <name>on_thread_members_update</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1thread__members__update__t" kindref="compound">thread_members_update_t</ref> &amp;_event)&gt;</type>
          <declname>_thread_members_update</declname>
        </param>
        <briefdescription>
<para>Called when a thread&apos;s member list is updated (without GUILD_MEMBERS intent, is only called for current user) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_thread_members_update</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="793" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1687" bodyend="1689"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1485e8d3d133680e506c25ab9d9554bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_voice_buffer_send</definition>
        <argsstring>(std::function&lt; void(const voice_buffer_send_t &amp;_event)&gt; _voice_buffer_send)</argsstring>
        <name>on_voice_buffer_send</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__buffer__send__t" kindref="compound">voice_buffer_send_t</ref> &amp;_event)&gt;</type>
          <declname>_voice_buffer_send</declname>
        </param>
        <briefdescription>
<para>Called when packets are sent from the voice buffer. The voice buffer contains packets that are already encoded with Opus and encrypted with Sodium, and merged into packets by the repacketizer, which is done in the <ref refid="classdpp_1_1discord__voice__client_1a453942021fbf45a1944a125209cdface" kindref="member">dpp::discord_voice_client::send_audio</ref> method. You should use the buffer size properties of <ref refid="structdpp_1_1voice__buffer__send__t" kindref="compound">dpp::voice_buffer_send_t</ref> to determine if you should fill the buffer with more content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_voice_buffer_send</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="805" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1763" bodyend="1765"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7950429cb10fbe40acd4aef7bd6f6a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_voice_user_talking</definition>
        <argsstring>(std::function&lt; void(const voice_user_talking_t &amp;_event)&gt; _voice_user_talking)</argsstring>
        <name>on_voice_user_talking</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__user__talking__t" kindref="compound">voice_user_talking_t</ref> &amp;_event)&gt;</type>
          <declname>_voice_user_talking</declname>
        </param>
        <briefdescription>
<para>Called when a user is talking on a voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_voice_user_talking</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="812" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1767" bodyend="1769"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac9795329c70bca7027829a94a6d25c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_voice_ready</definition>
        <argsstring>(std::function&lt; void(const voice_ready_t &amp;_event)&gt; _voice_ready)</argsstring>
        <name>on_voice_ready</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__ready__t" kindref="compound">voice_ready_t</ref> &amp;_event)&gt;</type>
          <declname>_voice_ready</declname>
        </param>
        <briefdescription>
<para>Called when a voice channel is connected and ready to send audio. Note that this is not directly attached to the READY event of the websocket, as there is further connection that needs to be done before audio is ready to send. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_voice_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="821" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1771" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aaac5fbafa18f2634e450e78979660365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_voice_receive</definition>
        <argsstring>(std::function&lt; void(const voice_receive_t &amp;_event)&gt; _voice_receive)</argsstring>
        <name>on_voice_receive</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__receive__t" kindref="compound">voice_receive_t</ref> &amp;_event)&gt;</type>
          <declname>_voice_receive</declname>
        </param>
        <briefdescription>
<para>Called when new audio data is received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Receiveing audio for bots is not supported or documented, so this endpoint will be triggered at the correct times but the audio buffer will always be null and size zero.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_voice_receive</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="831" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1775" bodyend="1777"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a588cb9aff5b15b9f54cc2818a5482994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_voice_track_marker</definition>
        <argsstring>(std::function&lt; void(const voice_track_marker_t &amp;_event)&gt; _voice_track_marker)</argsstring>
        <name>on_voice_track_marker</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1voice__track__marker__t" kindref="compound">voice_track_marker_t</ref> &amp;_event)&gt;</type>
          <declname>_voice_track_marker</declname>
        </param>
        <briefdescription>
<para>Called when sending of audio passes over a track marker. Track markers are arbitrarily placed &quot;bookmarks&quot; in the audio buffer, placed by the bot developer. Each track marker can have a string value associated with it which is specified in <ref refid="classdpp_1_1discord__voice__client_1a84fc0cb1aaf9691aed818e18daea1b84" kindref="member">dpp::discord_voice_client::insert_marker</ref> and returned to this event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_voice_receive</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="842" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1779" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa606c528c83756715ab608dd9ddba3e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_stage_instance_create</definition>
        <argsstring>(std::function&lt; void(const stage_instance_create_t &amp;_event)&gt; _stage_instance_create)</argsstring>
        <name>on_stage_instance_create</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__create__t" kindref="compound">stage_instance_create_t</ref> &amp;_event)&gt;</type>
          <declname>_stage_instance_create</declname>
        </param>
        <briefdescription>
<para>Called when a new stage instance is created on a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_stage_instance_create</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="849" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1559" bodyend="1561"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa71427dc52a2edbd2ec497a4810e38c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::on_stage_instance_delete</definition>
        <argsstring>(std::function&lt; void(const stage_instance_delete_t &amp;_event)&gt; _stage_instance_delete)</argsstring>
        <name>on_stage_instance_delete</name>
        <param>
          <type>std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__delete__t" kindref="compound">stage_instance_delete_t</ref> &amp;_event)&gt;</type>
          <declname>_stage_instance_delete</declname>
        </param>
        <briefdescription>
<para>Called when an existing stage instance is deleted from a stage channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_stage_instance_delete</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to attach to event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="856" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1563" bodyend="1565"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a62b83ee3be02df68eb5e697ddc5efc0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::post_rest</definition>
        <argsstring>(const std::string &amp;endpoint, const std::string &amp;major_parameters, const std::string &amp;parameters, http_method method, const std::string &amp;postdata, json_encode_t callback, const std::string &amp;filename=&quot;&quot;, const std::string &amp;filecontent=&quot;&quot;)</argsstring>
        <name>post_rest</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>endpoint</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>major_parameters</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a805ef1feb2862a208ec0e9d1be005c88" kindref="member">http_method</ref></type>
          <declname>method</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>postdata</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aafc7fb6792b12d92c4e77b46d20924ee" kindref="member">json_encode_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filecontent</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Post a REST request. Where possible use a helper method instead like message_create. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint to post to, e.g. /api/guilds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>major_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Major parameters for the endpoint e.g. a guild id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor parameters for the API request </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>Method, e.g. GET, POST </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>postdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Post data (usually JSON encoded) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the HTTP call completes. The callback parameter will contain amongst other things, the decoded json. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Filename to post for POST requests (for uploading files) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filecontent</parametername>
</parameternamelist>
<parameterdescription>
<para>File content to post for POST requests (for uploading files) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="870" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="216" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4c92a68228fe9dcb96b1c7cb6b8ae795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_response_create</definition>
        <argsstring>(snowflake interaction_id, const std::string &amp;token, const interaction_response &amp;r, command_completion_event_t callback={})</argsstring>
        <name>interaction_response_create</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>interaction_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1interaction__response" kindref="compound">interaction_response</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Respond to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interaction_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Interaction id to respond to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Response to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="880" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="297" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a41c9c18dd9185dfc2cc61b463ad7cf0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::interaction_response_edit</definition>
        <argsstring>(const std::string &amp;token, const message &amp;r, command_completion_event_t callback={})</argsstring>
        <name>interaction_response_edit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Respond to a slash command. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="889" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="305" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1140708ccf01ffb15f19f50ae731386d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::global_command_create</definition>
        <argsstring>(slashcommand &amp;s, command_completion_event_t callback={})</argsstring>
        <name>global_command_create</name>
        <param>
          <type><ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to create, s.id will be filled if the creation succeeds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a dpp::slashcommmand object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="898" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="314" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a74a61aa62ddf9207c197bfd496ae6ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_auditlog_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_auditlog_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the audit log for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get the audit log of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="classdpp_1_1auditlog" kindref="compound">dpp::auditlog</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="907" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1543" bodyend="1549"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5bca14a420fac05fbff570edb8d36e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_command_create</definition>
        <argsstring>(slashcommand &amp;s, snowflake guild_id, command_completion_event_t callback={})</argsstring>
        <name>guild_command_create</name>
        <param>
          <type><ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to create, s.id will be filled if the creation succeeds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create the slash command in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a dpp::slashcommmand object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="917" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="326" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aef037a47fee2efddedfe78ba4bf0467c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::global_command_edit</definition>
        <argsstring>(const slashcommand &amp;s, command_completion_event_t callback={})</argsstring>
        <name>global_command_edit</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to change </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="926" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="342" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4d555ccc3e69298ccac9d160ce3a71bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_command_edit</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id, command_completion_event_t callback={})</argsstring>
        <name>guild_command_edit</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit the slash command in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="936" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="350" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4ebb701d07c25d3667f0e1640670bbc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_command_edit_permissions</definition>
        <argsstring>(const slashcommand &amp;s, snowflake guild_id, command_completion_event_t callback={})</argsstring>
        <name>guild_command_edit_permissions</name>
        <param>
          <type>const <ref refid="classdpp_1_1slashcommand" kindref="compound">slashcommand</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit slash command permissions local to a guild, permissions are read from s.permissions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit the slash command in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="947" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="358" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a7cb7e2a8ddcb41a39d989802853a8605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::global_command_delete</definition>
        <argsstring>(snowflake id, command_completion_event_t callback={})</argsstring>
        <name>global_command_delete</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete a global slash command (a bot can have a maximum of 100 of these) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="958" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="377" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5b4a91a572c4e33ae60a3b09041ae3c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_command_delete</definition>
        <argsstring>(snowflake id, snowflake guild_id, command_completion_event_t callback={})</argsstring>
        <name>guild_command_delete</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete a slash command local to a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Slash command to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete the slash command in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="968" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="385" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a01623d7535dc359905990e710ae3b5e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_commands_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_commands_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the application&apos;s slash commands for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get the slash commands for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1acb9a69e08af58173ea9644999290416d" kindref="member">dpp::slashcommand_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="977" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="619" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8a8cadcdde42fcfa8d29c0c4fd0bec5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::global_commands_get</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>global_commands_get</name>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the application&apos;s global slash commands. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1acb9a69e08af58173ea9644999290416d" kindref="member">dpp::slashcommand_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="985" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="631" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae3a5e7d9ba9dcbfc1e219eeb029f61ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::direct_message_create</definition>
        <argsstring>(snowflake user_id, const message &amp;m, command_completion_event_t callback={})</argsstring>
        <name>direct_message_create</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a direct message, also create the channel for the direct message if needed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of user to send message to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="995" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="275" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9d3b0f7c3dae4ecb1980cabe8f10ccd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_get</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, command_completion_event_t callback)</argsstring>
        <name>message_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1005" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="483" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1acb1a4777f0907ee6c841ba008a81f60b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::messages_get</definition>
        <argsstring>(snowflake channel_id, snowflake around, snowflake before, snowflake after, snowflake limit, command_completion_event_t callback)</argsstring>
        <name>messages_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>around</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get multiple messages. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to retrieve messages for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>around</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages should be retrieved around this ID if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of messages maximum should be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="namespacedpp_1a44d4dd39b5d7c24c5fe97a76a73cf708" kindref="member">dpp::message_map</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1018" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1180" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a080a8cefc6ceb0b882fdb6fe70c078a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_create</definition>
        <argsstring>(const struct message &amp;m, command_completion_event_t callback={})</argsstring>
        <name>message_create</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Send a message to a channel. The callback function is called when the message has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1027" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="393" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8cdf2c55ac48902e7b194ab8e651d869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_crosspost</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, command_completion_event_t callback={})</argsstring>
        <name>message_crosspost</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Crosspost a message. The callback function is called when the message has been sent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to crosspost </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to crosspost from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1037" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="409" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a754206a7e97f1aaab4ab83ed53e4f351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_edit</definition>
        <argsstring>(const struct message &amp;m, command_completion_event_t callback={})</argsstring>
        <name>message_edit</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit a message on a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1046" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="401" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a08eb4e0352a29a92587d677d4b5fd6a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_add_reaction</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction, command_completion_event_t callback={})</argsstring>
        <name>message_add_reaction</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Add a reaction to a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to add a reaction to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to add. Emojis should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a236e18583e5bec566956670374cb28fa" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1056" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="417" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aba9abca51107d5aed147fa9b0aa8d675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_own_reaction</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction, command_completion_event_t callback={})</argsstring>
        <name>message_delete_own_reaction</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete own reaction from a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete own reaction from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete. The reaction should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1065" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="425" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a72b04160e95d808013fe222a9b690dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_reaction</definition>
        <argsstring>(const struct message &amp;m, snowflake user_id, const std::string &amp;reaction, command_completion_event_t callback={})</argsstring>
        <name>message_delete_reaction</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete a user&apos;s reaction from a message. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete a user&apos;s reaction from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID who&apos;s reaction you want to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to remove. Reactions should be in the form emojiname:id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1075" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="450" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab05fea3d6c298d5f2371704084383f8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_get_reactions</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction, snowflake before, snowflake after, snowflake limit, command_completion_event_t callback)</argsstring>
        <name>message_get_reactions</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>before</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>after</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>limit</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get reactions on a message for a particular emoji. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to get reactions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction should be in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>after</parametername>
</parameternamelist>
<parameterdescription>
<para>Reactions before this ID should be retrieved if this is set to non-zero </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>This number of reactions maximum should be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1087" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="458" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a13ae40b4389928ce8e6f8d9b47512291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_all_reactions</definition>
        <argsstring>(const struct message &amp;m, command_completion_event_t callback={})</argsstring>
        <name>message_delete_all_reactions</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete all reactions on a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1095" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="433" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6a1478ca3f0fb3c645a34474099e4e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_reaction_emoji</definition>
        <argsstring>(const struct message &amp;m, const std::string &amp;reaction, command_completion_event_t callback={})</argsstring>
        <name>message_delete_reaction_emoji</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete all reactions on a message using a particular emoji. The reaction string must be either an <computeroutput>emojiname:id</computeroutput> or a unicode character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to delete reactions from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Reaction to delete, in the form emojiname:id or a unicode character </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1104" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="441" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1abb75919ec5abd5b510255692ef439f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete</definition>
        <argsstring>(snowflake message_id, snowflake channel_id, command_completion_event_t callback={})</argsstring>
        <name>message_delete</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete a message from a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1113" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="491" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab4534c2c87bf45c326b126ef0a00ee80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_delete_bulk</definition>
        <argsstring>(const std::vector&lt; snowflake &gt; &amp;message_ids, snowflake channel_id, command_completion_event_t callback={})</argsstring>
        <name>message_delete_bulk</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt; &amp;</type>
          <declname>message_ids</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Bulk delete messages from a channel. The callback function is called when the message has been edited. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>List of message IDs to delete (maximum of 100 message IDs) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to delete from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1122" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="499" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a108f6f06b43709c8d47df5f94a3ca0a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_get</definition>
        <argsstring>(snowflake c, command_completion_event_t callback)</argsstring>
        <name>channel_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1130" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="532" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a24e67431b79cc2c3d0f12d59afd5a1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channels_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>channels_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all channels for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to retrieve channels for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1138" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1168" bodyend="1178"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad73706406e2f99b9a580319e389777be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_create</definition>
        <argsstring>(const class channel &amp;c, command_completion_event_t callback={})</argsstring>
        <name>channel_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1146" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="511" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5511e31156dd2508387b1ba5a1612c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_edit</definition>
        <argsstring>(const class channel &amp;c, command_completion_event_t callback={})</argsstring>
        <name>channel_edit</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to edit/update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1154" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="519" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a391779232600ba3a6f57d678047761b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_edit_position</definition>
        <argsstring>(const class channel &amp;c, command_completion_event_t callback={})</argsstring>
        <name>channel_edit_position</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit a channel&apos;s position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to change the position for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1162" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="564" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1abfb4457e63c60500b44bfdee27d80c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_edit_permissions</definition>
        <argsstring>(const class channel &amp;c, snowflake overwrite_id, uint32_t allow, uint32_t deny, bool member, command_completion_event_t callback={})</argsstring>
        <name>channel_edit_permissions</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>allow</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>deny</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>member</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit a channel&apos;s permissions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to set permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to change (a user or channel ID) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allow</parametername>
</parameternamelist>
<parameterdescription>
<para>allow permissions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deny</parametername>
</parameternamelist>
<parameterdescription>
<para>deny permissions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the overwrite_id is a user id, false if it is a channel id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1174" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="573" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad3b00dafa69984d444422b500c3d18b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_delete</definition>
        <argsstring>(snowflake channel_id, command_completion_event_t callback={})</argsstring>
        <name>channel_delete</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1182" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="765" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4a4d4220a93d6ba8c72d5472fd6718d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::invite_get</definition>
        <argsstring>(const std::string &amp;invite, command_completion_event_t callback)</argsstring>
        <name>invite_get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>invite</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get details about an invite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invite</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite code to get information on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1190" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="599" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a4c22698fbbb32edebd9824309015a017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::invite_delete</definition>
        <argsstring>(const std::string &amp;invite, command_completion_event_t callback={})</argsstring>
        <name>invite_delete</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>invite</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete an invite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invite</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite code to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1198" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="757" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa03a0da5c8e6801dc56bda258265da04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_invites_get</definition>
        <argsstring>(const class channel &amp;c, command_completion_event_t callback)</argsstring>
        <name>channel_invites_get</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get invites for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get invites for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1206" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="607" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a07e66a7400101f466aab40ed58c67942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_invite_create</definition>
        <argsstring>(const class channel &amp;c, const class invite &amp;i, command_completion_event_t callback={})</argsstring>
        <name>channel_invite_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1invite" kindref="compound">invite</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create invite for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to create an invite on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Invite to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1215" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="718" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a566bb31ea08798afe2fca4888e3c5e70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::pins_get</definition>
        <argsstring>(snowflake channel_id, command_completion_event_t callback)</argsstring>
        <name>pins_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a channel&apos;s pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to get pins for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1223" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="726" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a9ad36637b9bb094d9f24d18f204138a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::gdm_add</definition>
        <argsstring>(snowflake channel_id, snowflake user_id, const std::string &amp;access_token, const std::string &amp;nick, command_completion_event_t callback={})</argsstring>
        <name>gdm_add</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_token</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nick</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Adds a recipient to a Group DM using their access token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to add group DM recipients to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_token</parametername>
</parameternamelist>
<parameterdescription>
<para>Access token from OAuth2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nick</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname of user to apply to the chat </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1234" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="738" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6be231a13131f6fae94f88ee6fcdc5f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::gdm_remove</definition>
        <argsstring>(snowflake channel_id, snowflake user_id, command_completion_event_t callback={})</argsstring>
        <name>gdm_remove</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Removes a recipient from a Group DM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID of group DM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove from group DM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1243" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="749" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa2fce9638b93c6b5d5d67f8bea9f8f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_delete_permission</definition>
        <argsstring>(const class channel &amp;c, snowflake overwrite_id, command_completion_event_t callback={})</argsstring>
        <name>channel_delete_permission</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>overwrite_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Remove a permission from a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to remove permission from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Overwrite to remove, user or channel ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1252" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="591" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1b7593e4ba82977bf3d8ad9052c9c565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_follow_news</definition>
        <argsstring>(const class channel &amp;c, snowflake target_channel_id, command_completion_event_t callback={})</argsstring>
        <name>channel_follow_news</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>target_channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Follow a news channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to follow </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target_channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to subscribe the channel to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1261" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="582" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2caf58e161373fd3fa26172a4a78c835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::channel_typing</definition>
        <argsstring>(const class channel &amp;c, command_completion_event_t callback={})</argsstring>
        <name>channel_typing</name>
        <param>
          <type>const class <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Trigger channel typing indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to set as typing on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1269" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="540" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa140a11ab0b2feede600761aaee2483b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_pin</definition>
        <argsstring>(snowflake channel_id, snowflake message_id, command_completion_event_t callback={})</argsstring>
        <name>message_pin</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Pin a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to pin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message id to pin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1278" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="548" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a454e53cea10416ca9d299855dbb08e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::message_unpin</definition>
        <argsstring>(snowflake channel_id, snowflake message_id, command_completion_event_t callback={})</argsstring>
        <name>message_unpin</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Unpin a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel id to unpin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message id to unpin message on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1287" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="556" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a6a003669770549d25a951810bff0153e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get</definition>
        <argsstring>(snowflake g, command_completion_event_t callback)</argsstring>
        <name>guild_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1295" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="789" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3ecd82c6169107c9c944356f19abba9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_preview</definition>
        <argsstring>(snowflake g, command_completion_event_t callback)</argsstring>
        <name>guild_get_preview</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a guild preview. Returns a guild object but only a subset of the fields will be populated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1303" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="797" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a99e8227f11ef33cd2d9cc3abef46adfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_member</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_member</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get member for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of member to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1312" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="805" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab0598354c7302d1243bea4148365927d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_members</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_members</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all guild members. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get all members for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1320" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="912" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa2937f10828bc3fbdeff87fc6b4463cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_add_member</definition>
        <argsstring>(const guild_member &amp;gm, const std::string &amp;access_token, command_completion_event_t callback={})</argsstring>
        <name>guild_add_member</name>
        <param>
          <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
          <declname>gm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_token</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Add guild member. Needs a specific oauth2 scope, from which you get the access_token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gm</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild member to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_token</parametername>
</parameternamelist>
<parameterdescription>
<para>Access token from Oauth2 scope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1329" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="813" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a57a1957b81c9606850e730c477dd44aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_edit_member</definition>
        <argsstring>(const guild_member &amp;gm, command_completion_event_t callback={})</argsstring>
        <name>guild_edit_member</name>
        <param>
          <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref> &amp;</type>
          <declname>gm</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit the properties of an existing guild member. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gm</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild member to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1337" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="830" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a40665f55528cfc1077b8adcae2d49086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_move</definition>
        <argsstring>(const snowflake channel_id, const snowflake guild_id, const snowflake user_id, command_completion_event_t callback={})</argsstring>
        <name>guild_member_move</name>
        <param>
          <type>const <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Moves the guild member to a other voice channel, if member is connected to one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the channel to which the user is used </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild id to which the user is connected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User id, who should be moved </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1346" column="10" bodyfile="src/dpp/cluster.cpp" bodystart="838" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa30ff4f80815720bafab51f9bc86b089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_set_nickname</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;nickname, command_completion_event_t callback={})</argsstring>
        <name>guild_set_nickname</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Change current user nickname. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to change nickanem on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>New nickname, or empty string to clear nickname </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1355" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="849" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa9dcac8996e5eaad9b1eed9983ecefef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_add_role</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id, command_completion_event_t callback={})</argsstring>
        <name>guild_member_add_role</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Add role to guild member. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to add a role to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to add role to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role ID to add to the user </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1365" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="863" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af0289849ef90572a331e68fc84075cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_delete_role</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, snowflake role_id, command_completion_event_t callback={})</argsstring>
        <name>guild_member_delete_role</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Remove role from guild member. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to remove role from user on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to remove role from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1375" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="871" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a58be46d2934738b32229d984c266a4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_member_delete</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, command_completion_event_t callback={})</argsstring>
        <name>guild_member_delete</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Remove (kick) a guild member. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to kick member from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to kick </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1384" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="879" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad2273fdee237880d5e6b948198ffae52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_ban_add</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, uint32_t delete_message_days, const std::string &amp;reason, command_completion_event_t callback={})</argsstring>
        <name>guild_ban_add</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>delete_message_days</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>reason</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Add guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to add ban to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to ban </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delete_message_days</parametername>
</parameternamelist>
<parameterdescription>
<para>How many days of ther user&apos;s messages to also delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reason</parametername>
</parameternamelist>
<parameterdescription>
<para>Reason for ban </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1395" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="887" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a18f31527cd6b99cf2757e6c14dac5e5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_ban_delete</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, command_completion_event_t callback={})</argsstring>
        <name>guild_ban_delete</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to delete ban from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to delete ban for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1404" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="902" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af9fffa4f080e0b5abab1417fa8eb1b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_bans</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_bans</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild ban list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get bans for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1412" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1055" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad871d30ed11d0799da4a831ede8a7d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_ban</definition>
        <argsstring>(snowflake guild_id, snowflake user_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_ban</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get single guild ban. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get ban for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID of ban to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1421" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1067" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a52366e37144b166c6a2c773e14992b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::template_get</definition>
        <argsstring>(const std::string &amp;code, command_completion_event_t callback)</argsstring>
        <name>template_get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a template. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1429" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="930" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad277277c10ccdaecc3869a23d9ecb94b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_create_from_template</definition>
        <argsstring>(const std::string &amp;code, const std::string &amp;name, command_completion_event_t callback={})</argsstring>
        <name>guild_create_from_template</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a new guild based on a template. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to create guild from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild name to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1438" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="938" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1faa321ede15b209c789ea1155a3d356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_templates_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_templates_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild templates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get templates for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1446" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="948" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a38db2ce96431b742e98cabf8170a84d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_template_create</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;name, const std::string &amp;description, command_completion_event_t callback)</argsstring>
        <name>guild_template_create</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Creates a template for the guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to create template from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Template name to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>Description of template to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1456" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="960" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a3fc2ed8ec7e7550daa418f693ade1016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_template_sync</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code, command_completion_event_t callback={})</argsstring>
        <name>guild_template_sync</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Syncs the template to the guild&apos;s current state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to synchronise template for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Code of template to synchronise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1465" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="971" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a22f9702b44025f54cf03920d3a3e554b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_template_modify</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code, const std::string &amp;name, const std::string &amp;description, command_completion_event_t callback={})</argsstring>
        <name>guild_template_modify</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>description</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Modifies the template&apos;s metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of template to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>New name of template </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>New description of template </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1476" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="979" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a91791a9d280c0973834223df37d39ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_template_delete</definition>
        <argsstring>(snowflake guild_id, const std::string &amp;code, command_completion_event_t callback={})</argsstring>
        <name>guild_template_delete</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Deletes the template. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID of template to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Template code to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1485" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="990" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af327d6e65c703ce001d666ef2adc4b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_create</definition>
        <argsstring>(const class guild &amp;g, command_completion_event_t callback={})</argsstring>
        <name>guild_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1493" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="773" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5b0ce3857773519ca2ed62b49c04f267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_edit</definition>
        <argsstring>(const class guild &amp;g, command_completion_event_t callback={})</argsstring>
        <name>guild_edit</name>
        <param>
          <type>const class <ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1501" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="781" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8a78935110be8ea8bf5fdc4f0734fd28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_delete</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback={})</argsstring>
        <name>guild_delete</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1509" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1026" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad66ab98a72eb1ba8d2686fcaa1eb49db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_emojis_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_emojis_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all emojis for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get emojis for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1517" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1075" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ada721a222fb3a42a1a1bb6d93dfcc745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_emoji_get</definition>
        <argsstring>(snowflake guild_id, snowflake emoji_id, command_completion_event_t callback)</argsstring>
        <name>guild_emoji_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>emoji_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a single emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get emoji for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emoji_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji ID to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1526" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1087" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a5f6d9dbdb2009bdea2fad46e93813af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_emoji_create</definition>
        <argsstring>(snowflake guild_id, const class emoji &amp;newemoji, command_completion_event_t callback={})</argsstring>
        <name>guild_emoji_create</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
          <declname>newemoji</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create single emoji. You must ensure that the emoji passed contained image data using the <ref refid="classdpp_1_1emoji_1abc20d1f03cc624b82251780cd534c085" kindref="member">emoji::load_image()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to create emoji om </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newemoji</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1536" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1095" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2c4bf8c1767b71ed06bfa407341096d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_emoji_edit</definition>
        <argsstring>(snowflake guild_id, const class emoji &amp;newemoji, command_completion_event_t callback={})</argsstring>
        <name>guild_emoji_edit</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1emoji" kindref="compound">emoji</ref> &amp;</type>
          <declname>newemoji</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit a single emoji. You must ensure that the emoji passed contained image data using the <ref refid="classdpp_1_1emoji_1abc20d1f03cc624b82251780cd534c085" kindref="member">emoji::load_image()</ref> method. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit emoji on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newemoji</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1546" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1103" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af9c8f4357998bc8a77e8561edcb738c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_emoji_delete</definition>
        <argsstring>(snowflake guild_id, snowflake emoji_id, command_completion_event_t callback={})</argsstring>
        <name>guild_emoji_delete</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>emoji_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete a guild emoji. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete emoji on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emoji_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Emoji ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1555" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1111" bodyend="1117"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aad296f07bd5b9f900dcedbf88c464e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_prune_counts</definition>
        <argsstring>(snowflake guild_id, const struct prune &amp;pruneinfo, command_completion_event_t callback)</argsstring>
        <name>guild_get_prune_counts</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &amp;</type>
          <declname>pruneinfo</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get prune counts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to count for pruning </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pruneinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pruning info </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1564" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1119" bodyend="1125"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2102835f11fabbc2cd2e6b41155783f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_begin_prune</definition>
        <argsstring>(snowflake guild_id, const struct prune &amp;pruneinfo, command_completion_event_t callback={})</argsstring>
        <name>guild_begin_prune</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1prune" kindref="compound">prune</ref> &amp;</type>
          <declname>pruneinfo</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Begin guild prune. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to prune </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pruneinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pruning info </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1573" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1127" bodyend="1133"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae5556385a69a408a268332f774ba6c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_voice_regions</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_voice_regions</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild voice regions. Voice regions per guild are somewhat deprecated in preference of per-channel voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get voice regions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1582" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1135" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a24d66752ec835f989e72ffa111ff0af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_guild_invites</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>get_guild_invites</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild invites. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get invites for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1590" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="644" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a43cba3bd187f9b28dcaed5b4f4ed5bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_integrations</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_integrations</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild itegrations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get integrations for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1598" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="656" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afb07fc90589ee936f73da5551cff1255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_modify_integration</definition>
        <argsstring>(snowflake guild_id, const class integration &amp;i, command_completion_event_t callback={})</argsstring>
        <name>guild_modify_integration</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1integration" kindref="compound">integration</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Modify guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to modify integration for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration to modify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1607" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="692" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a0db4a48d1ebc2133c30963a995e156e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_delete_integration</definition>
        <argsstring>(snowflake guild_id, snowflake integration_id, command_completion_event_t callback={})</argsstring>
        <name>guild_delete_integration</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>integration_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete integration for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1616" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="700" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a58d976f9d101225e05482db7b739f986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_sync_integration</definition>
        <argsstring>(snowflake guild_id, snowflake integration_id, command_completion_event_t callback={})</argsstring>
        <name>guild_sync_integration</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>integration_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Sync guild integration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to sync integration on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to synchronise </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1625" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="708" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a57626c7a0e06aee1c362b986e44030c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_widget</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_widget</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild widget. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get widget for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1633" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="668" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1afb37eaa792a69f43171f580695fd4520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_edit_widget</definition>
        <argsstring>(snowflake guild_id, const class guild_widget &amp;gw, command_completion_event_t callback={})</argsstring>
        <name>guild_edit_widget</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>const class <ref refid="classdpp_1_1guild__widget" kindref="compound">guild_widget</ref> &amp;</type>
          <declname>gw</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit guild widget. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to edit widget for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gw</parametername>
</parameternamelist>
<parameterdescription>
<para>New guild widget information </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1642" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="684" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad1332e45cc89e871009e840c25145df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::guild_get_vanity</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>guild_get_vanity</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild vanity url, if enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild to get vanity URL for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1650" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="676" bodyend="682"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a627510bf4f4d1c3a999ccb506c75ec47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::create_webhook</definition>
        <argsstring>(const class webhook &amp;w, command_completion_event_t callback={})</argsstring>
        <name>create_webhook</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1658" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1412" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8d352afcbc0430ca11576386278da7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_guild_webhooks</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>get_guild_webhooks</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get guild webhooks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get webhooks for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1666" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1420" bodyend="1430"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae58b1f27711b42e9aa8a21e34147429f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_channel_webhooks</definition>
        <argsstring>(snowflake channel_id, command_completion_event_t callback)</argsstring>
        <name>get_channel_webhooks</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get channel webhooks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID to get webhooks for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1674" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1432" bodyend="1442"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a40e140f1e2eda9632828bce461bc7338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_webhook</definition>
        <argsstring>(snowflake webhook_id, command_completion_event_t callback)</argsstring>
        <name>get_webhook</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to get </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1682" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1444" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a770526895ed13e2dfb746decc3f0be67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_webhook_with_token</definition>
        <argsstring>(snowflake webhook_id, const std::string &amp;token, command_completion_event_t callback)</argsstring>
        <name>get_webhook_with_token</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get webhook using token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token of webhook </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1691" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1452" bodyend="1458"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af319c151f1b9b2b578d9303bab7ce5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::edit_webhook</definition>
        <argsstring>(const class webhook &amp;wh, command_completion_event_t callback={})</argsstring>
        <name>edit_webhook</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1699" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1460" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2bffc1fa43d6a78814f9ca0f378755c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::edit_webhook_with_token</definition>
        <argsstring>(const class webhook &amp;wh, command_completion_event_t callback={})</argsstring>
        <name>edit_webhook_with_token</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit webhook with token (token is encapsulated in the webhook object) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Wehook to edit (should include token) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1707" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1468" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aee76e0048ec1cd35420da1bfc5317646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::delete_webhook</definition>
        <argsstring>(snowflake webhook_id, command_completion_event_t callback={})</argsstring>
        <name>delete_webhook</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete a webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1715" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1487" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae790b70aaecd9c42fe8a64c4c71a3d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::delete_webhook_with_token</definition>
        <argsstring>(snowflake webhook_id, const std::string &amp;token, command_completion_event_t callback={})</argsstring>
        <name>delete_webhook_with_token</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>webhook_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete webhook with token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>webhook_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Token of webhook to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1724" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1495" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad5e83314cede8b9277a01b7b173abbad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::execute_webhook</definition>
        <argsstring>(const class webhook &amp;wh, const struct message &amp;m, bool wait=false, snowflake thread_id=0, command_completion_event_t callback={})</argsstring>
        <name>execute_webhook</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>thread_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Execute webhook. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to execute </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait</parametername>
</parameternamelist>
<parameterdescription>
<para>waits for server confirmation of message send before response, and returns the created message body </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Send a message to the specified thread within a webhook&apos;s channel. The thread will automatically be unarchived </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1735" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1503" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a8685b3bd821ab87342670d730689191e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_webhook_message</definition>
        <argsstring>(const class webhook &amp;wh, command_completion_event_t callback={})</argsstring>
        <name>get_webhook_message</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Webhook</parametername>
</parameternamelist>
<parameterdescription>
<para>to get the original message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1743" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1518" bodyend="1525"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a86a37684f9d12edd4ca7d00296a5443b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::edit_webhook_message</definition>
        <argsstring>(const class webhook &amp;wh, const struct message &amp;m, command_completion_event_t callback={})</argsstring>
        <name>edit_webhook_message</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to edit message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>New message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1752" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1527" bodyend="1533"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ae6e937f48e410469c90f37368afa4cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::delete_webhook_message</definition>
        <argsstring>(const class webhook &amp;wh, snowflake message_id, command_completion_event_t callback={})</argsstring>
        <name>delete_webhook_message</name>
        <param>
          <type>const class <ref refid="classdpp_1_1webhook" kindref="compound">webhook</ref> &amp;</type>
          <declname>wh</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete webhook message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wh</parametername>
</parameternamelist>
<parameterdescription>
<para>Webhook to delete message for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1761" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1535" bodyend="1541"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a884dbb70619fcf92b06577dea8093219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::roles_get</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback)</argsstring>
        <name>roles_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a role for a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to get role for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1769" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1156" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab912eb28e9bb4df46954c7a9b93b283d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::role_create</definition>
        <argsstring>(const class role &amp;r, command_completion_event_t callback={})</argsstring>
        <name>role_create</name>
        <param>
          <type>const class <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a role on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to create (guild ID is encapsulated in the role object) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1777" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1034" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a24cc5286955e6641d574d232d8b47f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::role_edit</definition>
        <argsstring>(const class role &amp;r, command_completion_event_t callback={})</argsstring>
        <name>role_edit</name>
        <param>
          <type>const class <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit a role on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to edit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1785" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1042" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac77932ee797aeb44098c2013811b2887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::role_edit_position</definition>
        <argsstring>(const class role &amp;r, command_completion_event_t callback={})</argsstring>
        <name>role_edit_position</name>
        <param>
          <type>const class <ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit a role&apos;s position in a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Role to change position of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1793" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1208" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a45414d0d189edd147c3d76b4480ec0b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::role_delete</definition>
        <argsstring>(snowflake guild_id, snowflake role_id, command_completion_event_t callback={})</argsstring>
        <name>role_delete</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>role_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Delete a role. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to delete the role on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>role_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role ID to delete </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1802" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1217" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a73483dbeb0f1946dc18b1d0a5331b0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::user_get</definition>
        <argsstring>(snowflake user_id, command_completion_event_t callback)</argsstring>
        <name>user_get</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get a user by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1810" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="998" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aad927e85ed6b99e9b05f4190f1b19cae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_get</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>current_user_get</name>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get current (bot) user. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1817" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1006" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a93c8fd5f22e0eae6bf357ad498b43f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_get_guilds</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>current_user_get_guilds</name>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get current (bot) user guilds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1824" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1014" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a462e5859d1123c8b29c09d477a957157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_edit</definition>
        <argsstring>(const std::string &amp;nickname, const std::string &amp;image_blob, image_type type, command_completion_event_t callback={})</argsstring>
        <name>current_user_edit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nickname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>image_blob</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Edit current (bot) user. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nickname</parametername>
</parameternamelist>
<parameterdescription>
<para>Nickname to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>Avatar data to upload (NOTE: Very heavily rate limited!) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of image for avatar </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1834" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1225" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a662fc0a998c62395f166da5e4a2acaf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_get_dms</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>current_user_get_dms</name>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get current user DM channels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1841" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1392" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a55c6a9bb92a500aefc65a953e419c27f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::create_dm_channel</definition>
        <argsstring>(snowflake user_id, command_completion_event_t callback={})</argsstring>
        <name>create_dm_channel</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a dm channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User ID to create DM channel with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1849" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1404" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aa20f6c8ef35465a17c9510fa8353ef3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_leave_guild</definition>
        <argsstring>(snowflake guild_id, command_completion_event_t callback={})</argsstring>
        <name>current_user_leave_guild</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Leave a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to leave </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1857" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1248" bodyend="1254"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a1dbf6a68d6ba12a2cca7f263c227b5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_create</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, uint16_t auto_archive_duration, channel_type thread_type, command_completion_event_t callback={})</argsstring>
        <name>thread_create</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a8af3a726df107c304139477dbfa42092" kindref="member">channel_type</ref></type>
          <declname>thread_type</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration after which thread auto-archives. Can be set to - 60, 1440 (for boosted guilds can also be: 4320, 10080) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of thread - GUILD_PUBLIC_THREAD, GUILD_NEWS_THREAD, GUILD_PRIVATE_THREAD </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1868" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1256" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a632d0bd95fa36ed7bea925123d5b07ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_create_with_message</definition>
        <argsstring>(const std::string &amp;thread_name, snowflake channel_id, snowflake message_id, uint16_t auto_archive_duration, command_completion_event_t callback={})</argsstring>
        <name>thread_create_with_message</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>thread_name</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>message_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>auto_archive_duration</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a thread with a message (Discord: ID of a thread is same as mesage ID) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel in which thread to create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message_id</parametername>
</parameternamelist>
<parameterdescription>
<para>message to start thread with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>auto_archive_duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration after which thread auto-archives. Can be set to - 60, 1440 (for boosted guilds can also be: 4320, 10080) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1879" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1268" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a485553dc602bb2a7ed3ca11057034221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_join_thread</definition>
        <argsstring>(snowflake thread_id, command_completion_event_t callback={})</argsstring>
        <name>current_user_join_thread</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Join a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to join </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1887" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1280" bodyend="1286"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a13a819f21159771de3142d57eabfe306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::current_user_leave_thread</definition>
        <argsstring>(snowflake thread_id, command_completion_event_t callback={})</argsstring>
        <name>current_user_leave_thread</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Leave a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to leave </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1895" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1288" bodyend="1294"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a066a4a71deac82b823757c2c80479a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_member_add</definition>
        <argsstring>(snowflake thread_id, snowflake user_id, command_completion_event_t callback={})</argsstring>
        <name>thread_member_add</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Add a member to a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to add to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Member ID to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1904" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1296" bodyend="1302"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ad253c2a68c5a1e78b880da7252a15814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::thread_member_remove</definition>
        <argsstring>(snowflake thread_id, snowflake user_id, command_completion_event_t callback={})</argsstring>
        <name>thread_member_remove</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Remove a member from a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID to remove from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Member ID to remove </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1913" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1304" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1aaba92db711beb50fd66ba5ee97546b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_thread_members</definition>
        <argsstring>(snowflake thread_id, command_completion_event_t callback={})</argsstring>
        <name>get_thread_members</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get members of a thread. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread to get members for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1920" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1312" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a2e0ad6c1d79f922ad6b0b07cbb9407b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_active_threads</definition>
        <argsstring>(snowflake channel_id, command_completion_event_t callback={})</argsstring>
        <name>get_active_threads</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get active threads in a channel (Sorted by ID in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get active threads for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1927" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1324" bodyend="1334"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a55e1c8797c831de444a0e51aa96a870a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_public_archived_threads</definition>
        <argsstring>(snowflake channel_id, time_t before_timestamp=0, uint16_t limit=0, command_completion_event_t callback={})</argsstring>
        <name>get_public_archived_threads</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>before_timestamp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get public archived threads in a channel (Sorted by archive_timestamp in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads before this timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1936" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1336" bodyend="1353"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ac194025b4189078493a6684a2df6d3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_private_archived_threads</definition>
        <argsstring>(snowflake channel_id, time_t before_timestamp=0, uint16_t limit=0, command_completion_event_t callback={})</argsstring>
        <name>get_private_archived_threads</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>before_timestamp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get private archived threads in a channel (Sorted by archive_timestamp in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads before this timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1945" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1355" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1ab119357a15f1c5a53f4d53bf06bf9e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_joined_private_archived_threads</definition>
        <argsstring>(snowflake channel_id, snowflake before_id=0, uint16_t limit=0, command_completion_event_t callback={})</argsstring>
        <name>get_joined_private_archived_threads</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>before_id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>limit</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get private archived threads in a channel which current user has joined (Sorted by ID in descending order) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to get public archived threads for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>before_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Get threads before this id </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of threads to get </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1955" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1374" bodyend="1391"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1af6d45a29b3976f7b623d92e70ab9a1bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_voice_regions</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>get_voice_regions</name>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get all voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1962" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="1145" bodyend="1153"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1cluster_1a68f16d04f100a0159683cba96e8c0a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::cluster::get_gateway_bot</definition>
        <argsstring>(command_completion_event_t callback)</argsstring>
        <name>get_gateway_bot</name>
        <param>
          <type><ref refid="namespacedpp_1acce615d2721b50de907ef1d2cfa1490b" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get the gateway information for the bot using the token. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/cluster.h" line="1969" column="6" bodyfile="src/dpp/cluster.cpp" bodystart="267" bodyend="273"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The cluster class represents a group of shards and a command queue for sending and receiving commands from discord via HTTP. You should usually instantiate a cluster object at the very least to make use of the library. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="15">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="14">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="15" relation="usage">
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="2" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="7" relation="usage">
          <edgelabel>application_command_create</edgelabel>
          <edgelabel>application_command_delete</edgelabel>
          <edgelabel>application_command_update</edgelabel>
          <edgelabel>button_click</edgelabel>
          <edgelabel>channel_create</edgelabel>
          <edgelabel>channel_delete</edgelabel>
          <edgelabel>channel_pins_update</edgelabel>
          <edgelabel>channel_update</edgelabel>
          <edgelabel>guild_ban_add</edgelabel>
          <edgelabel>guild_ban_remove</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="10" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="10" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>function&lt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>time_t</label>
      </node>
      <node id="11">
        <label>uint16_t</label>
      </node>
      <node id="5">
        <label>uint32_t</label>
      </node>
      <node id="10">
        <label>uint64_t</label>
      </node>
      <node id="13">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/cluster.h" line="216" column="1" bodyfile="include/dpp/cluster.h" bodystart="216" bodyend="1972"/>
    <listofallmembers>
      <member refid="classdpp_1_1cluster_1aeb86e87c07ca3954e198741175fbcb5a" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>auto_shard</name></member>
      <member refid="classdpp_1_1cluster_1a9fae28f81712be86530fe3314d166ad3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>cache_policy</name></member>
      <member refid="classdpp_1_1cluster_1ad73706406e2f99b9a580319e389777be" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_create</name></member>
      <member refid="classdpp_1_1cluster_1ad3b00dafa69984d444422b500c3d18b3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_delete</name></member>
      <member refid="classdpp_1_1cluster_1aa2fce9638b93c6b5d5d67f8bea9f8f6c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_delete_permission</name></member>
      <member refid="classdpp_1_1cluster_1a5511e31156dd2508387b1ba5a1612c09" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit</name></member>
      <member refid="classdpp_1_1cluster_1abfb4457e63c60500b44bfdee27d80c75" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a391779232600ba3a6f57d678047761b0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_edit_position</name></member>
      <member refid="classdpp_1_1cluster_1a1b7593e4ba82977bf3d8ad9052c9c565" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_follow_news</name></member>
      <member refid="classdpp_1_1cluster_1a108f6f06b43709c8d47df5f94a3ca0a5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_get</name></member>
      <member refid="classdpp_1_1cluster_1a07e66a7400101f466aab40ed58c67942" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_invite_create</name></member>
      <member refid="classdpp_1_1cluster_1aa03a0da5c8e6801dc56bda258265da04" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_invites_get</name></member>
      <member refid="classdpp_1_1cluster_1a2caf58e161373fd3fa26172a4a78c835" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channel_typing</name></member>
      <member refid="classdpp_1_1cluster_1a24e67431b79cc2c3d0f12d59afd5a1c8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>channels_get</name></member>
      <member refid="classdpp_1_1cluster_1aac40e45e1ff8efb4e9ae75a7ecacc786" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>cluster</name></member>
      <member refid="classdpp_1_1cluster_1a6b0b523f89559b4ce204ca9ed9693d79" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>cluster</name></member>
      <member refid="classdpp_1_1cluster_1a2d957f52245734f6d44444af8380c952" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>cluster</name></member>
      <member refid="classdpp_1_1cluster_1a5155862c1d7267c7f4ee8781ff3e8d7f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>cluster_id</name></member>
      <member refid="classdpp_1_1cluster_1a3334e0a3ee0cbf7e20a7a88e9b73f8df" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>compressed</name></member>
      <member refid="classdpp_1_1cluster_1a55c6a9bb92a500aefc65a953e419c27f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>create_dm_channel</name></member>
      <member refid="classdpp_1_1cluster_1a627510bf4f4d1c3a999ccb506c75ec47" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>create_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a462e5859d1123c8b29c09d477a957157" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_edit</name></member>
      <member refid="classdpp_1_1cluster_1aad927e85ed6b99e9b05f4190f1b19cae" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_get</name></member>
      <member refid="classdpp_1_1cluster_1a662fc0a998c62395f166da5e4a2acaf3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_get_dms</name></member>
      <member refid="classdpp_1_1cluster_1a93c8fd5f22e0eae6bf357ad498b43f87" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_get_guilds</name></member>
      <member refid="classdpp_1_1cluster_1a485553dc602bb2a7ed3ca11057034221" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_join_thread</name></member>
      <member refid="classdpp_1_1cluster_1aa20f6c8ef35465a17c9510fa8353ef3a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_leave_guild</name></member>
      <member refid="classdpp_1_1cluster_1a13a819f21159771de3142d57eabfe306" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>current_user_leave_thread</name></member>
      <member refid="classdpp_1_1cluster_1aee76e0048ec1cd35420da1bfc5317646" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>delete_webhook</name></member>
      <member refid="classdpp_1_1cluster_1ae6e937f48e410469c90f37368afa4cbe" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>delete_webhook_message</name></member>
      <member refid="classdpp_1_1cluster_1ae790b70aaecd9c42fe8a64c4c71a3d0c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>delete_webhook_with_token</name></member>
      <member refid="classdpp_1_1cluster_1ae3a5e7d9ba9dcbfc1e219eeb029f61ad" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>direct_message_create</name></member>
      <member refid="classdpp_1_1cluster_1ad7dfd048a845235dda924b989c1383f3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>dispatch</name></member>
      <member refid="classdpp_1_1cluster_1a643e94b648db0e392f52e345c8bc3377" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>dm_channels</name></member>
      <member refid="classdpp_1_1cluster_1a66dc3cad1b49988c7656c92169c7b2bb" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>dm_list_lock</name></member>
      <member refid="classdpp_1_1cluster_1af319c151f1b9b2b578d9303bab7ce5d0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>edit_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a86a37684f9d12edd4ca7d00296a5443b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>edit_webhook_message</name></member>
      <member refid="classdpp_1_1cluster_1a2bffc1fa43d6a78814f9ca0f378755c5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>edit_webhook_with_token</name></member>
      <member refid="classdpp_1_1cluster_1ad5e83314cede8b9277a01b7b173abbad" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>execute_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a9ad36637b9bb094d9f24d18f204138a3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>gdm_add</name></member>
      <member refid="classdpp_1_1cluster_1a6be231a13131f6fae94f88ee6fcdc5f0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>gdm_remove</name></member>
      <member refid="classdpp_1_1cluster_1a2e0ad6c1d79f922ad6b0b07cbb9407b1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_active_threads</name></member>
      <member refid="classdpp_1_1cluster_1ae58b1f27711b42e9aa8a21e34147429f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_channel_webhooks</name></member>
      <member refid="classdpp_1_1cluster_1ae6164d5543b7594731a980da9b0b2088" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_dm_channel</name></member>
      <member refid="classdpp_1_1cluster_1a68f16d04f100a0159683cba96e8c0a6c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_gateway_bot</name></member>
      <member refid="classdpp_1_1cluster_1a24d66752ec835f989e72ffa111ff0af7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_guild_invites</name></member>
      <member refid="classdpp_1_1cluster_1a8d352afcbc0430ca11576386278da7d0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_guild_webhooks</name></member>
      <member refid="classdpp_1_1cluster_1ab119357a15f1c5a53f4d53bf06bf9e49" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_joined_private_archived_threads</name></member>
      <member refid="classdpp_1_1cluster_1ac194025b4189078493a6684a2df6d3d3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_private_archived_threads</name></member>
      <member refid="classdpp_1_1cluster_1a55e1c8797c831de444a0e51aa96a870a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_public_archived_threads</name></member>
      <member refid="classdpp_1_1cluster_1a5c677c0d5c059e87cc01ce598d49487d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_shard</name></member>
      <member refid="classdpp_1_1cluster_1af4d6195862e6d25c644902631a0b34d1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_shards</name></member>
      <member refid="classdpp_1_1cluster_1aaba92db711beb50fd66ba5ee97546b0c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_thread_members</name></member>
      <member refid="classdpp_1_1cluster_1af6d45a29b3976f7b623d92e70ab9a1bc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_voice_regions</name></member>
      <member refid="classdpp_1_1cluster_1a40e140f1e2eda9632828bce461bc7338" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_webhook</name></member>
      <member refid="classdpp_1_1cluster_1a8685b3bd821ab87342670d730689191e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_webhook_message</name></member>
      <member refid="classdpp_1_1cluster_1a770526895ed13e2dfb746decc3f0be67" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>get_webhook_with_token</name></member>
      <member refid="classdpp_1_1cluster_1a1140708ccf01ffb15f19f50ae731386d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_create</name></member>
      <member refid="classdpp_1_1cluster_1a7cb7e2a8ddcb41a39d989802853a8605" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_delete</name></member>
      <member refid="classdpp_1_1cluster_1aef037a47fee2efddedfe78ba4bf0467c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_command_edit</name></member>
      <member refid="classdpp_1_1cluster_1a8a8cadcdde42fcfa8d29c0c4fd0bec5b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>global_commands_get</name></member>
      <member refid="classdpp_1_1cluster_1aa2937f10828bc3fbdeff87fc6b4463cc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_add_member</name></member>
      <member refid="classdpp_1_1cluster_1a74a61aa62ddf9207c197bfd496ae6ade" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_auditlog_get</name></member>
      <member refid="classdpp_1_1cluster_1ad2273fdee237880d5e6b948198ffae52" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_ban_add</name></member>
      <member refid="classdpp_1_1cluster_1a18f31527cd6b99cf2757e6c14dac5e5b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_ban_delete</name></member>
      <member refid="classdpp_1_1cluster_1a2102835f11fabbc2cd2e6b41155783f6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_begin_prune</name></member>
      <member refid="classdpp_1_1cluster_1a5bca14a420fac05fbff570edb8d36e7a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_create</name></member>
      <member refid="classdpp_1_1cluster_1a5b4a91a572c4e33ae60a3b09041ae3c2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_delete</name></member>
      <member refid="classdpp_1_1cluster_1a4d555ccc3e69298ccac9d160ce3a71bf" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_edit</name></member>
      <member refid="classdpp_1_1cluster_1a4ebb701d07c25d3667f0e1640670bbc1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_command_edit_permissions</name></member>
      <member refid="classdpp_1_1cluster_1a01623d7535dc359905990e710ae3b5e9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_commands_get</name></member>
      <member refid="classdpp_1_1cluster_1af327d6e65c703ce001d666ef2adc4b25" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_create</name></member>
      <member refid="classdpp_1_1cluster_1ad277277c10ccdaecc3869a23d9ecb94b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_create_from_template</name></member>
      <member refid="classdpp_1_1cluster_1a8a78935110be8ea8bf5fdc4f0734fd28" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_delete</name></member>
      <member refid="classdpp_1_1cluster_1a0db4a48d1ebc2133c30963a995e156e1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_delete_integration</name></member>
      <member refid="classdpp_1_1cluster_1a5b0ce3857773519ca2ed62b49c04f267" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit</name></member>
      <member refid="classdpp_1_1cluster_1a57a1957b81c9606850e730c477dd44aa" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_member</name></member>
      <member refid="classdpp_1_1cluster_1afb37eaa792a69f43171f580695fd4520" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_edit_widget</name></member>
      <member refid="classdpp_1_1cluster_1a5f6d9dbdb2009bdea2fad46e93813af5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_create</name></member>
      <member refid="classdpp_1_1cluster_1af9c8f4357998bc8a77e8561edcb738c3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_delete</name></member>
      <member refid="classdpp_1_1cluster_1a2c4bf8c1767b71ed06bfa407341096d4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_edit</name></member>
      <member refid="classdpp_1_1cluster_1ada721a222fb3a42a1a1bb6d93dfcc745" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emoji_get</name></member>
      <member refid="classdpp_1_1cluster_1ad66ab98a72eb1ba8d2686fcaa1eb49db" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_emojis_get</name></member>
      <member refid="classdpp_1_1cluster_1a6a003669770549d25a951810bff0153e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get</name></member>
      <member refid="classdpp_1_1cluster_1ad871d30ed11d0799da4a831ede8a7d95" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_ban</name></member>
      <member refid="classdpp_1_1cluster_1af9fffa4f080e0b5abab1417fa8eb1b0f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_bans</name></member>
      <member refid="classdpp_1_1cluster_1a43cba3bd187f9b28dcaed5b4f4ed5bda" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_integrations</name></member>
      <member refid="classdpp_1_1cluster_1a99e8227f11ef33cd2d9cc3abef46adfd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_member</name></member>
      <member refid="classdpp_1_1cluster_1ab0598354c7302d1243bea4148365927d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_members</name></member>
      <member refid="classdpp_1_1cluster_1a3ecd82c6169107c9c944356f19abba9e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_preview</name></member>
      <member refid="classdpp_1_1cluster_1aad296f07bd5b9f900dcedbf88c464e09" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_prune_counts</name></member>
      <member refid="classdpp_1_1cluster_1ad1332e45cc89e871009e840c25145df5" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_vanity</name></member>
      <member refid="classdpp_1_1cluster_1ae5556385a69a408a268332f774ba6c3c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_voice_regions</name></member>
      <member refid="classdpp_1_1cluster_1a57626c7a0e06aee1c362b986e44030c2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_get_widget</name></member>
      <member refid="classdpp_1_1cluster_1aa9dcac8996e5eaad9b1eed9983ecefef" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_add_role</name></member>
      <member refid="classdpp_1_1cluster_1a58be46d2934738b32229d984c266a4b7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_delete</name></member>
      <member refid="classdpp_1_1cluster_1af0289849ef90572a331e68fc84075cb2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_delete_role</name></member>
      <member refid="classdpp_1_1cluster_1a40665f55528cfc1077b8adcae2d49086" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_member_move</name></member>
      <member refid="classdpp_1_1cluster_1afb07fc90589ee936f73da5551cff1255" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_modify_integration</name></member>
      <member refid="classdpp_1_1cluster_1aa30ff4f80815720bafab51f9bc86b089" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_set_nickname</name></member>
      <member refid="classdpp_1_1cluster_1a58d976f9d101225e05482db7b739f986" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_sync_integration</name></member>
      <member refid="classdpp_1_1cluster_1a38db2ce96431b742e98cabf8170a84d7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_create</name></member>
      <member refid="classdpp_1_1cluster_1a91791a9d280c0973834223df37d39ac8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_delete</name></member>
      <member refid="classdpp_1_1cluster_1a22f9702b44025f54cf03920d3a3e554b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_modify</name></member>
      <member refid="classdpp_1_1cluster_1a3fc2ed8ec7e7550daa418f693ade1016" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_template_sync</name></member>
      <member refid="classdpp_1_1cluster_1a1faa321ede15b209c789ea1155a3d356" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>guild_templates_get</name></member>
      <member refid="classdpp_1_1cluster_1a239af1e13449c85658fb37e6589745a0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>intents</name></member>
      <member refid="classdpp_1_1cluster_1a4c92a68228fe9dcb96b1c7cb6b8ae795" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_response_create</name></member>
      <member refid="classdpp_1_1cluster_1a41c9c18dd9185dfc2cc61b463ad7cf0f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>interaction_response_edit</name></member>
      <member refid="classdpp_1_1cluster_1a4c22698fbbb32edebd9824309015a017" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>invite_delete</name></member>
      <member refid="classdpp_1_1cluster_1a4a4d4220a93d6ba8c72d5472fd6718d0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>invite_get</name></member>
      <member refid="classdpp_1_1cluster_1a32ce7fc13658a25e2faeadcd36282b0b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>last_identify</name></member>
      <member refid="classdpp_1_1cluster_1a13689440c9cc80279d415c563a6363c0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>log</name></member>
      <member refid="classdpp_1_1cluster_1ad80e4df300e69988d163d61c14e540ab" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>maxclusters</name></member>
      <member refid="classdpp_1_1cluster_1ad31317a40181f6864646c8758871b495" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>me</name></member>
      <member refid="classdpp_1_1cluster_1a08eb4e0352a29a92587d677d4b5fd6a7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_add_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a080a8cefc6ceb0b882fdb6fe70c078a6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_create</name></member>
      <member refid="classdpp_1_1cluster_1a8cdf2c55ac48902e7b194ab8e651d869" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_crosspost</name></member>
      <member refid="classdpp_1_1cluster_1abb75919ec5abd5b510255692ef439f97" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete</name></member>
      <member refid="classdpp_1_1cluster_1a13ae40b4389928ce8e6f8d9b47512291" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_all_reactions</name></member>
      <member refid="classdpp_1_1cluster_1ab4534c2c87bf45c326b126ef0a00ee80" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_bulk</name></member>
      <member refid="classdpp_1_1cluster_1aba9abca51107d5aed147fa9b0aa8d675" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_own_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a72b04160e95d808013fe222a9b690dae" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_reaction</name></member>
      <member refid="classdpp_1_1cluster_1a6a1478ca3f0fb3c645a34474099e4e04" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_delete_reaction_emoji</name></member>
      <member refid="classdpp_1_1cluster_1a754206a7e97f1aaab4ab83ed53e4f351" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_edit</name></member>
      <member refid="classdpp_1_1cluster_1a9d3b0f7c3dae4ecb1980cabe8f10ccd7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_get</name></member>
      <member refid="classdpp_1_1cluster_1ab05fea3d6c298d5f2371704084383f8f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_get_reactions</name></member>
      <member refid="classdpp_1_1cluster_1aa140a11ab0b2feede600761aaee2483b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_pin</name></member>
      <member refid="classdpp_1_1cluster_1a454e53cea10416ca9d299855dbb08e0b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>message_unpin</name></member>
      <member refid="classdpp_1_1cluster_1acb1a4777f0907ee6c841ba008a81f60b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>messages_get</name></member>
      <member refid="classdpp_1_1cluster_1a7418aa521c49af80822039b013d8d004" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>numshards</name></member>
      <member refid="classdpp_1_1cluster_1aaf2ae12b7d433f3b8e84dc72258e90a2" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_application_command_create</name></member>
      <member refid="classdpp_1_1cluster_1abd8ee0e654de56e39c418e83e1115af3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_application_command_delete</name></member>
      <member refid="classdpp_1_1cluster_1a6fbee88ecc38a82cb1d13813199fb4ce" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_application_command_update</name></member>
      <member refid="classdpp_1_1cluster_1afb5b1009f3eacd98784cfb642c8e2858" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_button_click</name></member>
      <member refid="classdpp_1_1cluster_1ac23e89c1685520bf303ac9b1b5eea08d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_channel_create</name></member>
      <member refid="classdpp_1_1cluster_1a198205866e58980295bdf41d69fc91d1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_channel_delete</name></member>
      <member refid="classdpp_1_1cluster_1aa4fe070786e817347ab1f97217e1a713" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_channel_pins_update</name></member>
      <member refid="classdpp_1_1cluster_1a0a610f0b4ff4f2836c6b5b73d833d85c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_channel_update</name></member>
      <member refid="classdpp_1_1cluster_1aee3b96f180a7cad98daaaab8ba98530a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_ban_add</name></member>
      <member refid="classdpp_1_1cluster_1a4fb67064fbd4738ec8bad14b5a80d2dd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_ban_remove</name></member>
      <member refid="classdpp_1_1cluster_1a5664cec1efc2de0beb9fde7b3a7b15fb" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_create</name></member>
      <member refid="classdpp_1_1cluster_1a6cb092977902daa7f92e33f4fd05928d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_delete</name></member>
      <member refid="classdpp_1_1cluster_1abef8cb4e6080a0bd0f6641853d088fec" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_emojis_update</name></member>
      <member refid="classdpp_1_1cluster_1a17765cfe21f91fcbac2e67778f6b36b3" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_integrations_update</name></member>
      <member refid="classdpp_1_1cluster_1a543b76d7b49f9473b0476dbfee627271" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_join_request_delete</name></member>
      <member refid="classdpp_1_1cluster_1a8a394c8eb339f59d74b212b1c8af70a9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_member_add</name></member>
      <member refid="classdpp_1_1cluster_1a066836f6875a4e3c0337ac8bdb5dc0cd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_member_remove</name></member>
      <member refid="classdpp_1_1cluster_1acc914758724437ef5e2bd7af8cd6f2b6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_member_update</name></member>
      <member refid="classdpp_1_1cluster_1a6563c6a86b51b51604367a49e5b7d40e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_members_chunk</name></member>
      <member refid="classdpp_1_1cluster_1ae672ed645f2d2ac9c16400fdfb280028" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_role_create</name></member>
      <member refid="classdpp_1_1cluster_1a6ff0483a599f5e925778f08c8e2736e7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_role_delete</name></member>
      <member refid="classdpp_1_1cluster_1a9dfa1de622ce391d5f5a9131fdba50ef" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_role_update</name></member>
      <member refid="classdpp_1_1cluster_1acfd6eb377df60cc02fb84de9136f5b9d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_guild_update</name></member>
      <member refid="classdpp_1_1cluster_1a8483003e4f9d6ab671a2cf05e2e056fc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_integration_create</name></member>
      <member refid="classdpp_1_1cluster_1a1d4f63cec74428a22f783e95bc8d8201" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_integration_delete</name></member>
      <member refid="classdpp_1_1cluster_1ad8b5162af3648f5c521a9a3377211ea1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_integration_update</name></member>
      <member refid="classdpp_1_1cluster_1ab17aa65a6835eca5a95036d6bf6f736c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_interaction_create</name></member>
      <member refid="classdpp_1_1cluster_1ada70d52d327d96129829ba6b677ac0aa" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_invite_create</name></member>
      <member refid="classdpp_1_1cluster_1a86478198b682c09a4b5d4bcfa9d41f15" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_invite_delete</name></member>
      <member refid="classdpp_1_1cluster_1ab42d2402bb68ba381a011f4ade31c909" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_log</name></member>
      <member refid="classdpp_1_1cluster_1a29140a7c0e1250fe2016dbe4ced56f95" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_create</name></member>
      <member refid="classdpp_1_1cluster_1a10cb7cb6746c6420a8db7b0419d7167e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_delete</name></member>
      <member refid="classdpp_1_1cluster_1aac2a29067eabb416c07773fa4c92628f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_delete_bulk</name></member>
      <member refid="classdpp_1_1cluster_1a6f6c50a06dde8496cc5975831182616e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_reaction_add</name></member>
      <member refid="classdpp_1_1cluster_1adba3843eca8e834a08833dff0e0c5cc0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_reaction_remove</name></member>
      <member refid="classdpp_1_1cluster_1a25376d14ddda772a12105451c99834cd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_reaction_remove_all</name></member>
      <member refid="classdpp_1_1cluster_1a22f73e8bd1a6fb5aed92ae992fdef1d8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_reaction_remove_emoji</name></member>
      <member refid="classdpp_1_1cluster_1ad75729ec22faab8b62de375cdfb98cee" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_message_update</name></member>
      <member refid="classdpp_1_1cluster_1a2f55020d0ad012c494cf80bb9ee86d3a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_presence_update</name></member>
      <member refid="classdpp_1_1cluster_1ad8170aef3ae244df66464b192e3e30e7" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_ready</name></member>
      <member refid="classdpp_1_1cluster_1ab14ac92eae4e4830f4cc17ae58aa9eaf" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_resumed</name></member>
      <member refid="classdpp_1_1cluster_1a75cfef69413003d5bed51b986fd15787" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_select_click</name></member>
      <member refid="classdpp_1_1cluster_1aa606c528c83756715ab608dd9ddba3e4" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_stage_instance_create</name></member>
      <member refid="classdpp_1_1cluster_1aa71427dc52a2edbd2ec497a4810e38c9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_stage_instance_delete</name></member>
      <member refid="classdpp_1_1cluster_1a090c58e8249813c550077c0fd569dbf1" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_create</name></member>
      <member refid="classdpp_1_1cluster_1a545c320691915b49d0d6fd794c984816" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_delete</name></member>
      <member refid="classdpp_1_1cluster_1a314b36750a8b16d0a13f3fdd94342965" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_list_sync</name></member>
      <member refid="classdpp_1_1cluster_1a0cecbf9791b82b34defc264fad24066c" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_member_update</name></member>
      <member refid="classdpp_1_1cluster_1a56429a7a625651fd36e6f45ec8793d65" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_members_update</name></member>
      <member refid="classdpp_1_1cluster_1a21c176195c3a2b4ef002cf4cbfbd382b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_thread_update</name></member>
      <member refid="classdpp_1_1cluster_1af39f3dd46cbc25cf33f17ddb7621a0fc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_typing_start</name></member>
      <member refid="classdpp_1_1cluster_1abd822542ad661833cbf1fc23b6f0a1aa" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_user_update</name></member>
      <member refid="classdpp_1_1cluster_1a1485e8d3d133680e506c25ab9d9554bd" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_buffer_send</name></member>
      <member refid="classdpp_1_1cluster_1ac9795329c70bca7027829a94a6d25c47" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_ready</name></member>
      <member refid="classdpp_1_1cluster_1aaac5fbafa18f2634e450e78979660365" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_receive</name></member>
      <member refid="classdpp_1_1cluster_1ab7ae85a0111247501183673313d09abe" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_server_update</name></member>
      <member refid="classdpp_1_1cluster_1a52046d1e6bbbad709abe05cedd376eb0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_state_update</name></member>
      <member refid="classdpp_1_1cluster_1a588cb9aff5b15b9f54cc2818a5482994" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_track_marker</name></member>
      <member refid="classdpp_1_1cluster_1a7950429cb10fbe40acd4aef7bd6f6a67" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_voice_user_talking</name></member>
      <member refid="classdpp_1_1cluster_1aca67bc20cb570e7563d157913066ad0b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>on_webhooks_update</name></member>
      <member refid="classdpp_1_1cluster_1a566bb31ea08798afe2fca4888e3c5e70" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>pins_get</name></member>
      <member refid="classdpp_1_1cluster_1a62b83ee3be02df68eb5e697ddc5efc0a" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>post_rest</name></member>
      <member refid="classdpp_1_1cluster_1a550e3f1bf003f129a04c6acc0fcaa914" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>rest</name></member>
      <member refid="classdpp_1_1cluster_1ab912eb28e9bb4df46954c7a9b93b283d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>role_create</name></member>
      <member refid="classdpp_1_1cluster_1a45414d0d189edd147c3d76b4480ec0b8" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>role_delete</name></member>
      <member refid="classdpp_1_1cluster_1a24cc5286955e6641d574d232d8b47f55" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>role_edit</name></member>
      <member refid="classdpp_1_1cluster_1ac77932ee797aeb44098c2013811b2887" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>role_edit_position</name></member>
      <member refid="classdpp_1_1cluster_1a884dbb70619fcf92b06577dea8093219" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>roles_get</name></member>
      <member refid="classdpp_1_1cluster_1a3fc501cc0ebb334d09a7f4bb1ea6b3e6" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>set_dm_channel</name></member>
      <member refid="classdpp_1_1cluster_1a9b67c9455ac0378712e4c0fd0ba7f2a9" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>set_presence</name></member>
      <member refid="classdpp_1_1cluster_1a0846d3ebce4cb2c346ef4947683cf058" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>shards</name></member>
      <member refid="classdpp_1_1cluster_1a40e99d13e1380eccd30d13123014594f" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>start</name></member>
      <member refid="classdpp_1_1cluster_1a9b12c3db92a110916052b0c1b260299d" prot="private" virt="non-virtual"><scope>dpp::cluster</scope><name>start_time</name></member>
      <member refid="classdpp_1_1cluster_1a52366e37144b166c6a2c773e14992b21" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>template_get</name></member>
      <member refid="classdpp_1_1cluster_1a1dbf6a68d6ba12a2cca7f263c227b5bc" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_create</name></member>
      <member refid="classdpp_1_1cluster_1a632d0bd95fa36ed7bea925123d5b07ba" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_create_with_message</name></member>
      <member refid="classdpp_1_1cluster_1a066a4a71deac82b823757c2c80479a5d" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_member_add</name></member>
      <member refid="classdpp_1_1cluster_1ad253c2a68c5a1e78b880da7252a15814" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>thread_member_remove</name></member>
      <member refid="classdpp_1_1cluster_1a644b186bc4b386a8313e3c5dce456c4e" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>token</name></member>
      <member refid="classdpp_1_1cluster_1af12b5b33ea156bde9977796858066a6b" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>uptime</name></member>
      <member refid="classdpp_1_1cluster_1a73483dbeb0f1946dc18b1d0a5331b0d0" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>user_get</name></member>
      <member refid="classdpp_1_1cluster_1a270be0ab59aff4f335ef3f4af7559d92" prot="public" virt="non-virtual"><scope>dpp::cluster</scope><name>~cluster</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
