<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1sticker__pack" kind="struct" language="C++" prot="public">
    <compoundname>dpp::sticker_pack</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">message.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a0eda149feeaa0abeba5842f4d8c18e46" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, <ref refid="structdpp_1_1sticker" kindref="compound">sticker</ref> &gt;</type>
        <definition>std::map&lt;snowflake, sticker&gt; dpp::sticker_pack::stickers</definition>
        <argsstring></argsstring>
        <name>stickers</name>
        <briefdescription>
<para>the stickers in the pack </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="865" column="10" bodyfile="include/dpp/message.h" bodystart="865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a399c740b550ec216511437962f9e9b2c" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sticker_pack::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>name of the sticker pack </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="867" column="13" bodyfile="include/dpp/message.h" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1ac9ee077be2df50175a2e9b9c99ec35d3" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::sticker_pack::sku_id</definition>
        <argsstring></argsstring>
        <name>sku_id</name>
        <briefdescription>
<para>id of the pack&apos;s SKU </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="869" column="13" bodyfile="include/dpp/message.h" bodystart="869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a49377b72f118dc19514f165d344a83d7" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::sticker_pack::cover_sticker_id</definition>
        <argsstring></argsstring>
        <name>cover_sticker_id</name>
        <briefdescription>
<para>Optional: id of a sticker in the pack which is shown as the pack&apos;s icon. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="871" column="13" bodyfile="include/dpp/message.h" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a27f09153a66b2a3390b9b8b66a700f28" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::sticker_pack::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>description of the sticker pack </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="873" column="13" bodyfile="include/dpp/message.h" bodystart="873" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1sticker__pack_1a1f2430ab0a0bebabe48954017ef4a003" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::sticker_pack::banner_asset_id</definition>
        <argsstring></argsstring>
        <name>banner_asset_id</name>
        <briefdescription>
<para>id of the sticker pack&apos;s banner image </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="875" column="13" bodyfile="include/dpp/message.h" bodystart="875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="38" column="11" bodyfile="include/dpp/managed.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1sticker__pack_1ae50d2073e56542513b89e5a55a6e7a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::sticker_pack::sticker_pack</definition>
        <argsstring>()</argsstring>
        <name>sticker_pack</name>
        <briefdescription>
<para>Construct a new sticker pack object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="880" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1sticker__pack_1a98955bba3833a65bfb0af6c580d32f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1sticker__pack" kindref="compound">sticker_pack</ref> &amp;</type>
        <definition>sticker_pack &amp; dpp::sticker_pack::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type><ref refid="namespacenlohmann_1a2bfd99e845a2e5cd90aeaf1b1431f474" kindref="member">nlohmann::json</ref> *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="886" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1sticker__pack_1a7fb0eeaade402ee61d213ecf45fa5258" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::sticker_pack::build_json</definition>
        <argsstring>(bool with_id=true) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build JSON from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the ID is to be set in the JSON structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON text of the invite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/message.h" line="892" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a sticker pack (the built in groups of stickers that all nitro users get to use) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::sticker_pack</label>
        <link refid="structdpp_1_1sticker__pack"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::sticker_pack</label>
        <link refid="structdpp_1_1sticker__pack"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>stickers</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>banner_asset_id</edgelabel>
          <edgelabel>cover_sticker_id</edgelabel>
          <edgelabel>sku_id</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="4">
        <label>map&lt;</label>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/message.h" line="863" column="1" bodyfile="include/dpp/message.h" bodystart="863" bodyend="894"/>
    <listofallmembers>
      <member refid="structdpp_1_1sticker__pack_1a1f2430ab0a0bebabe48954017ef4a003" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>banner_asset_id</name></member>
      <member refid="structdpp_1_1sticker__pack_1a7fb0eeaade402ee61d213ecf45fa5258" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>build_json</name></member>
      <member refid="structdpp_1_1sticker__pack_1a49377b72f118dc19514f165d344a83d7" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>cover_sticker_id</name></member>
      <member refid="structdpp_1_1sticker__pack_1a27f09153a66b2a3390b9b8b66a700f28" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>description</name></member>
      <member refid="structdpp_1_1sticker__pack_1a98955bba3833a65bfb0af6c580d32f59" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>id</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>managed</name></member>
      <member refid="structdpp_1_1sticker__pack_1a399c740b550ec216511437962f9e9b2c" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>name</name></member>
      <member refid="structdpp_1_1sticker__pack_1ac9ee077be2df50175a2e9b9c99ec35d3" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>sku_id</name></member>
      <member refid="structdpp_1_1sticker__pack_1ae50d2073e56542513b89e5a55a6e7a23" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>sticker_pack</name></member>
      <member refid="structdpp_1_1sticker__pack_1a0eda149feeaa0abeba5842f4d8c18e46" prot="public" virt="non-virtual"><scope>dpp::sticker_pack</scope><name>stickers</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::sticker_pack</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
