<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1role" kind="class" language="C++" prot="public">
    <compoundname>dpp::role</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">role.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1role_1a6451e41576902faa14d0394d47d19934" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::role::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Role name Between 1 and 100 characters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="98" column="13" bodyfile="include/dpp/role.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ab831d734d6cfe3a88c54bb91b0f578ea" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::role::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>Guild ID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="102" column="11" bodyfile="include/dpp/role.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a42f8b747f7a04cd1022ce3bc42e6a05b" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::role::colour</definition>
        <argsstring></argsstring>
        <name>colour</name>
        <briefdescription>
<para>Role colour. A colour of 0 means no colour. If you want a black role, you must use the value 0x000001. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="108" column="10" bodyfile="include/dpp/role.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a08996823fc9ba1eb8c95b1e2e855d958" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::role::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role position </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="110" column="9" bodyfile="include/dpp/role.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ad1d79b737f5e7d2cc71238068fc36ad4" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::role::permissions</definition>
        <argsstring></argsstring>
        <name>permissions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role permissions bitmask values from <ref refid="namespacedpp_1a2b8b5573bf936e034d33a7238fe5604f" kindref="member">dpp::role_permissions</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="112" column="10" bodyfile="include/dpp/role.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a67fa7fe9f3650b5783cf4f5d2ed37de0" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::role::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Role flags from <ref refid="namespacedpp_1af803e69eddf23c5862947295f3df5d53" kindref="member">dpp::role_flags</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="114" column="9" bodyfile="include/dpp/role.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1aa44718ae47c00bcf2008366218646572" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::role::integration_id</definition>
        <argsstring></argsstring>
        <name>integration_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Integration id if any (e.g. role is a bot&apos;s role created when it was invited) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="116" column="11" bodyfile="include/dpp/role.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ada5cb5675b012b2cf55d285d5b233df3" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::role::bot_id</definition>
        <argsstring></argsstring>
        <name>bot_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bot id if any (e.g. role is a bot&apos;s role created when it was invited) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="118" column="11" bodyfile="include/dpp/role.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ad84006ea16f3dc59cfd67559a60c5d10" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::role::unicode_emoji</definition>
        <argsstring></argsstring>
        <name>unicode_emoji</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The unicode emoji used for the role&apos;s icon, can be an empty string </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="120" column="13" bodyfile="include/dpp/role.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1a4cca9d86bb489189d5938102fc52905f" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::role::icon</definition>
        <argsstring></argsstring>
        <name>icon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The role icon hash, can be an empty string </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="122" column="19" bodyfile="include/dpp/role.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1role_1ade838f66e78b524c5c14d30188e08281" prot="public" static="no" mutable="no">
        <type>std::string *</type>
        <definition>std::string* dpp::role::image_data</definition>
        <argsstring></argsstring>
        <name>image_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Image data for the role icon (if any) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="124" column="13" bodyfile="include/dpp/role.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="38" column="11" bodyfile="include/dpp/managed.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1role_1aa23013a7a7d7c03c4ef44d6e6fc02baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::role::role</definition>
        <argsstring>()</argsstring>
        <name>role</name>
        <briefdescription>
<para>Construct a new role object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="129" column="1" bodyfile="src/dpp/role.cpp" bodystart="33" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a1cd275ca1aa52763e05b78a8a3443476" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>dpp::role::~role</definition>
        <argsstring>()</argsstring>
        <name>~role</name>
        <briefdescription>
<para>Destroy the role object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="134" column="9" bodyfile="src/dpp/role.cpp" bodystart="46" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aecb03f1ceb58c646db0347ad8908b849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_name</definition>
        <argsstring>(const std::string &amp;n)</argsstring>
        <name>set_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Set the name of the role Maximum length: 100 Minimum length: 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>thrown if role length is less than 1 character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="144" column="6" bodyfile="src/dpp/role.cpp" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ad5add725167aa1be8c43ec167ce14d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_colour</definition>
        <argsstring>(uint32_t c)</argsstring>
        <name>set_colour</name>
        <param>
          <type>uint32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Set the colour object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Colour to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>There is an americanised version of this method, <ref refid="classdpp_1_1role_1acdf6e9513f3dffca42499ed9dcc255a9" kindref="member">role::set_color()</ref>. </para>
</simplesect>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="153" column="6" bodyfile="src/dpp/role.cpp" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1acdf6e9513f3dffca42499ed9dcc255a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_color</definition>
        <argsstring>(uint32_t c)</argsstring>
        <name>set_color</name>
        <param>
          <type>uint32_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Set the color object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Colour to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is an alias of <ref refid="classdpp_1_1role_1ad5add725167aa1be8c43ec167ce14d4f" kindref="member">role::set_colour</ref> for American spelling. </para>
</simplesect>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="162" column="6" bodyfile="src/dpp/role.cpp" bodystart="314" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a8d710124a87c30664e1e0f6507a9ebe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_flags</definition>
        <argsstring>(uint8_t f)</argsstring>
        <name>set_flags</name>
        <param>
          <type>uint8_t</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Set the flags object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="170" column="6" bodyfile="src/dpp/role.cpp" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a4eab09f700a66b003adfd9adfd3cd5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_integration_id</definition>
        <argsstring>(snowflake i)</argsstring>
        <name>set_integration_id</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Set the integration id object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration ID to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="178" column="6" bodyfile="src/dpp/role.cpp" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a50e37b69fd90533aae8d998c0dba3054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_bot_id</definition>
        <argsstring>(snowflake b)</argsstring>
        <name>set_bot_id</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Set the bot id object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Bot ID to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="186" column="6" bodyfile="src/dpp/role.cpp" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aca74c158ab06219bbf3a0c61d96e2043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::set_guild_id</definition>
        <argsstring>(snowflake gid)</argsstring>
        <name>set_guild_id</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>gid</declname>
        </param>
        <briefdescription>
<para>Set the guild id object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gid</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild ID to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>role&amp; reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="194" column="6" bodyfile="src/dpp/role.cpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a5352cd2a40c1c2c430ec9448bd45723f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::fill_from_json</definition>
        <argsstring>(snowflake guild_id, nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill this role from json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the guild id to place in the json </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The json data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="203" column="6" bodyfile="src/dpp/role.cpp" bodystart="53" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a704dd3aee9a7b3687f1556442144f62b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::role::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build a json string from this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the ID is to be included in the json text </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The json of the role </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="211" column="13" bodyfile="src/dpp/role.cpp" bodystart="82" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a82eb1c7df3ee72db92cf502bb575e799" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::role::get_mention</definition>
        <argsstring>() const</argsstring>
        <name>get_mention</name>
        <briefdescription>
<para>Get the mention/ping for the role. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string mention </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="218" column="13" bodyfile="src/dpp/role.cpp" bodystart="108" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a5ce1695745201d6c2914c9d818119078" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::role::get_icon_url</definition>
        <argsstring>(uint16_t size=0) const</argsstring>
        <name>get_icon_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Returns the role&apos;s icon if they have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the icon in pixels. It can be any power of two between 16 and 4096. If not specified, the default sized icon is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string icon url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="226" column="13" bodyfile="src/dpp/role.cpp" bodystart="357" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a6d46d3e4a1b8e166f4a26da58bf119dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1role" kindref="compound">role</ref> &amp;</type>
        <definition>role &amp; dpp::role::load_image</definition>
        <argsstring>(const std::string &amp;image_blob, const image_type type)</argsstring>
        <name>load_image</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>image_blob</declname>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Load an image into the object as base64. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_blob</parametername>
</parameternamelist>
<parameterdescription>
<para>Image binary data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of image </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>emoji&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="235" column="6" bodyfile="src/dpp/role.cpp" bodystart="112" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae0cb040c022f08d210c885012bf47919" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_hoisted</definition>
        <argsstring>() const</argsstring>
        <name>is_hoisted</name>
        <briefdescription>
<para>True if the role is hoisted. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Role appears separated from others in the member list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="241" column="6" bodyfile="src/dpp/role.cpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a1d5a026fa3773f52b9c2cee6c590509f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_mentionable</definition>
        <argsstring>() const</argsstring>
        <name>is_mentionable</name>
        <briefdescription>
<para>True if the role is mentionable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Role is mentionable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="246" column="6" bodyfile="src/dpp/role.cpp" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a479bc27fe486bb70dd3fc1376df3c5b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::is_managed</definition>
        <argsstring>() const</argsstring>
        <name>is_managed</name>
        <briefdescription>
<para>True if the role is managed (belongs to a bot or application) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if the role is managed (introduced for a bot or other application by Discord) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="251" column="6" bodyfile="src/dpp/role.cpp" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a7005a2a951c2917edb6f5ce189093234" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_create_instant_invite</definition>
        <argsstring>() const</argsstring>
        <name>has_create_instant_invite</name>
        <briefdescription>
<para>True if has create instant invite permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the instant invite permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="258" column="6" bodyfile="src/dpp/role.cpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a7b76518e70c32391bbae2c80439a2a76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_kick_members</definition>
        <argsstring>() const</argsstring>
        <name>has_kick_members</name>
        <briefdescription>
<para>True if has create instant invite permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the kick members permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="265" column="6" bodyfile="src/dpp/role.cpp" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac8eaec9aac9633c7d05cb208da7fc4d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_ban_members</definition>
        <argsstring>() const</argsstring>
        <name>has_ban_members</name>
        <briefdescription>
<para>True if has the ban members permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the ban members permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="272" column="6" bodyfile="src/dpp/role.cpp" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a3ffcaced8369d47cc3f954fa0978c40c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_administrator</definition>
        <argsstring>() const</argsstring>
        <name>has_administrator</name>
        <briefdescription>
<para>True if has the administrator permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the administrator permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="279" column="6" bodyfile="src/dpp/role.cpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9630315e9c31cb53335e077140497ad7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_channels</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_channels</name>
        <briefdescription>
<para>True if has the manage channels permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage channels permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="286" column="6" bodyfile="src/dpp/role.cpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ad1de8e0ce44138225e9e7620b0834cb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_guild</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_guild</name>
        <briefdescription>
<para>True if has the manage guild permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage guild permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="293" column="6" bodyfile="src/dpp/role.cpp" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0e2683fd21c1743132eb29f8155c12a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_add_reactions</definition>
        <argsstring>() const</argsstring>
        <name>has_add_reactions</name>
        <briefdescription>
<para>True if has the add reactions permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the add reactions permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="300" column="6" bodyfile="src/dpp/role.cpp" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a600d347d4f491ba32969a76d9d0cf3c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_audit_log</definition>
        <argsstring>() const</argsstring>
        <name>has_view_audit_log</name>
        <briefdescription>
<para>True if has the view audit log permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the view audit log permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="307" column="6" bodyfile="src/dpp/role.cpp" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a640358a9aa6e34c0e0b16020af176e55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_priority_speaker</definition>
        <argsstring>() const</argsstring>
        <name>has_priority_speaker</name>
        <briefdescription>
<para>True if has the priority speaker permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the priority speaker permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="314" column="6" bodyfile="src/dpp/role.cpp" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae6173507d17a12012cf46da70929a49e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_stream</definition>
        <argsstring>() const</argsstring>
        <name>has_stream</name>
        <briefdescription>
<para>True if has the stream permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the stream permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="321" column="6" bodyfile="src/dpp/role.cpp" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1acbe56d5d1d54e9fea3a6b7acd66ef888" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_channel</definition>
        <argsstring>() const</argsstring>
        <name>has_view_channel</name>
        <briefdescription>
<para>True if has the view channel permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the view channel permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="328" column="6" bodyfile="src/dpp/role.cpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a31d923d5f1020215b836db355991870b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_send_messages</name>
        <briefdescription>
<para>True if has the send messages permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the send messages permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="335" column="6" bodyfile="src/dpp/role.cpp" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1af54ea9f64ea035675a26b0d8e8b356f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_tts_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_send_tts_messages</name>
        <briefdescription>
<para>True if has the send TTS messages permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the send TTS messages permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="342" column="6" bodyfile="src/dpp/role.cpp" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a1a28c7f8685b1c0287067665aecf6efb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_messages</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_messages</name>
        <briefdescription>
<para>True if has the manage messages permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage messages permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="349" column="6" bodyfile="src/dpp/role.cpp" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae1dc87323b6ab2e499fee7c8bfa69d58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_embed_links</definition>
        <argsstring>() const</argsstring>
        <name>has_embed_links</name>
        <briefdescription>
<para>True if has the embed links permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the embed links permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="356" column="6" bodyfile="src/dpp/role.cpp" bodystart="196" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a848a39ba5ff6b5c42c3246d041582d00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_attach_files</definition>
        <argsstring>() const</argsstring>
        <name>has_attach_files</name>
        <briefdescription>
<para>True if has the attach files permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the attach files permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="363" column="6" bodyfile="src/dpp/role.cpp" bodystart="200" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac5f664643c59d7e24271bb790735c68f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_read_message_history</definition>
        <argsstring>() const</argsstring>
        <name>has_read_message_history</name>
        <briefdescription>
<para>True if has the read message history permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the read message history permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="370" column="6" bodyfile="src/dpp/role.cpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aed437137a98c1f99d28942070c8ccf0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_mention_everyone</definition>
        <argsstring>() const</argsstring>
        <name>has_mention_everyone</name>
        <briefdescription>
<para>True if has the mention @everyone and @here permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the mention @everyone and @here permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="377" column="6" bodyfile="src/dpp/role.cpp" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a363303c06726e049586b8ae4f3f6375e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_external_emojis</definition>
        <argsstring>() const</argsstring>
        <name>has_use_external_emojis</name>
        <briefdescription>
<para>True if has the use external emojis permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the use external emojis permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="384" column="6" bodyfile="src/dpp/role.cpp" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac71887da3f920e070d1fa743ea000d1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_view_guild_insights</definition>
        <argsstring>() const</argsstring>
        <name>has_view_guild_insights</name>
        <briefdescription>
<para>True if has the view guild insights permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the view guild insights permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="391" column="6" bodyfile="src/dpp/role.cpp" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0be98542c2299aa41829d69bf348b54d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_connect</definition>
        <argsstring>() const</argsstring>
        <name>has_connect</name>
        <briefdescription>
<para>True if has the connect voice permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the connect voice permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="398" column="6" bodyfile="src/dpp/role.cpp" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a92ce258f420bce887cc9c92ad006fe06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_speak</definition>
        <argsstring>() const</argsstring>
        <name>has_speak</name>
        <briefdescription>
<para>True if has the speak permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the speak permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="405" column="6" bodyfile="src/dpp/role.cpp" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a504ae68edc2bfe1c21ffdb6745c1194c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_mute_members</definition>
        <argsstring>() const</argsstring>
        <name>has_mute_members</name>
        <briefdescription>
<para>True if has the mute members permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the mute members permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="412" column="6" bodyfile="src/dpp/role.cpp" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0a197983ea6fc5047c7873d804f7646a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_deafen_members</definition>
        <argsstring>() const</argsstring>
        <name>has_deafen_members</name>
        <briefdescription>
<para>True if has the deafen members permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the deafen members permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="419" column="6" bodyfile="src/dpp/role.cpp" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac9605d0d14e4fff0c0848e08682c6da5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_move_members</definition>
        <argsstring>() const</argsstring>
        <name>has_move_members</name>
        <briefdescription>
<para>True if has the move members permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the move members permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="426" column="6" bodyfile="src/dpp/role.cpp" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9ffd7c58994f9c3e0a38245462eb6766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_vad</definition>
        <argsstring>() const</argsstring>
        <name>has_use_vad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if has use voice activity detection permission </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="428" column="6" bodyfile="src/dpp/role.cpp" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a2b158e7e37bb66c17a4ed412a71f7222" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_change_nickname</definition>
        <argsstring>() const</argsstring>
        <name>has_change_nickname</name>
        <briefdescription>
<para>True if has the change nickname permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the change nickname permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="435" column="6" bodyfile="src/dpp/role.cpp" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a80c8b573fc16edfd685294e0326b38d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_nicknames</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_nicknames</name>
        <briefdescription>
<para>True if has the manage nicknames permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage nicknames permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="442" column="6" bodyfile="src/dpp/role.cpp" bodystart="248" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a0b2cf553aab82c6a6a388c3f6e3c240d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_roles</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_roles</name>
        <briefdescription>
<para>True if has the manage roles permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage roles permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="449" column="6" bodyfile="src/dpp/role.cpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a9ac39f8c39f870603f0e9d9760159ef9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_webhooks</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_webhooks</name>
        <briefdescription>
<para>True if has the manage webhooks permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage webhooks permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="456" column="6" bodyfile="src/dpp/role.cpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a6d9b1dd5f966530c162b85409b00561c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_emojis_and_stickers</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_emojis_and_stickers</name>
        <briefdescription>
<para>True if has the manage emojis and stickers permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage emojis and stickers permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="463" column="6" bodyfile="src/dpp/role.cpp" bodystart="260" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ac19332b3de93ecf0a38d0f07589fd6c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_application_commands</definition>
        <argsstring>() const</argsstring>
        <name>has_use_application_commands</name>
        <briefdescription>
<para>True if has the use application commands permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the use application commands permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="470" column="6" bodyfile="src/dpp/role.cpp" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a84cfa9cd3dc9526f3a6a04ae25d3c775" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_request_to_speak</definition>
        <argsstring>() const</argsstring>
        <name>has_request_to_speak</name>
        <briefdescription>
<para>True if has the request to speak permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the request to speak permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="477" column="6" bodyfile="src/dpp/role.cpp" bodystart="268" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a032ce15247e135d733e6879bed928e7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_threads</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_threads</name>
        <briefdescription>
<para>True if has the manage threads permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage threads permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="484" column="6" bodyfile="src/dpp/role.cpp" bodystart="272" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ad593d01c7a2fac0413c939c80d81c590" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_create_public_threads</definition>
        <argsstring>() const</argsstring>
        <name>has_create_public_threads</name>
        <briefdescription>
<para>True if has the create public threads permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the create public threads permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="491" column="6" bodyfile="src/dpp/role.cpp" bodystart="276" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1aa3127166dafb6cd4685a1e84b80a7e86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_create_private_threads</definition>
        <argsstring>() const</argsstring>
        <name>has_create_private_threads</name>
        <briefdescription>
<para>True if has the create private threads permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the create private threads permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="498" column="6" bodyfile="src/dpp/role.cpp" bodystart="280" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a3ec1376d0b72ba7d42b3b0167daef425" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_use_external_stickers</definition>
        <argsstring>() const</argsstring>
        <name>has_use_external_stickers</name>
        <briefdescription>
<para>True if has the use external stickers permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the use external stickers permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="505" column="6" bodyfile="src/dpp/role.cpp" bodystart="284" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ae7e42a98476a40201e9bce274f748954" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_send_messages_in_threads</definition>
        <argsstring>() const</argsstring>
        <name>has_send_messages_in_threads</name>
        <briefdescription>
<para>True if has the send messages in threads permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the send messages in threads permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="512" column="6" bodyfile="src/dpp/role.cpp" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1ab4a31bfb4b3913ea9043b7c3f2ceb371" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_start_embedded_activities</definition>
        <argsstring>() const</argsstring>
        <name>has_start_embedded_activities</name>
        <briefdescription>
<para>True if has the start embedded activities permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the start embedded activities permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="519" column="6" bodyfile="src/dpp/role.cpp" bodystart="292" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a04025962b533f09ea8a55d3c2815a442" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_manage_events</definition>
        <argsstring>() const</argsstring>
        <name>has_manage_events</name>
        <briefdescription>
<para>True if has the manage events permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the manage events permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="526" column="6" bodyfile="src/dpp/role.cpp" bodystart="296" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a12d4fba5e5a0a02425c923234dd486bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::role::has_moderate_members</definition>
        <argsstring>() const</argsstring>
        <name>has_moderate_members</name>
        <briefdescription>
<para>True if has the moderate users permission. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Having the administrator permission causes this method to always return true Channel specific overrides may apply to permissions. </para>
</simplesect>
<simplesect kind="return"><para>bool True if user has the moderate users permission or is administrator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="533" column="6" bodyfile="src/dpp/role.cpp" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1role_1a60bd9c7e3901c18f5ec3c4f835e1c1de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a674dfd30e37779538e80d95fcb13770f" kindref="member">members_container</ref></type>
        <definition>members_container dpp::role::get_members</definition>
        <argsstring>() const</argsstring>
        <name>get_members</name>
        <briefdescription>
<para>Get guild members who have this role. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This method requires user/members cache to be active </para>
</simplesect>
<simplesect kind="return"><para>members_container List of members who have this role </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/role.h" line="540" column="19" bodyfile="src/dpp/role.cpp" bodystart="338" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8" bodyfile="src/dpp/discordevents.cpp" bodystart="49" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a role within a <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref>. Roles are combined via logical OR of the permission bitmasks, then channel-specific overrides can be applied on top, deny types apply a logic NOT to the bit mask, and allows apply a logical OR. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Every guild has at least one role, called the &apos;everyone&apos; role, which always has the same role ID as the guild&apos;s ID. This is the base permission set applied to all users where no other role or override applies, and is the starting value of the bit mask looped through to calculate channel permissions. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="1">
        <label>dpp::role</label>
        <link refid="classdpp_1_1role"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::role</label>
        <link refid="classdpp_1_1role"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>image_data</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>unicode_emoji</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>bot_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>integration_id</edgelabel>
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>colour</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>position</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>icon</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="3" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>uint32_t</label>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
      <node id="7">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/role.h" line="92" column="1" bodyfile="include/dpp/role.h" bodystart="92" bodyend="541"/>
    <listofallmembers>
      <member refid="classdpp_1_1role_1ada5cb5675b012b2cf55d285d5b233df3" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>bot_id</name></member>
      <member refid="classdpp_1_1role_1a704dd3aee9a7b3687f1556442144f62b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>build_json</name></member>
      <member refid="classdpp_1_1role_1a42f8b747f7a04cd1022ce3bc42e6a05b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>colour</name></member>
      <member refid="classdpp_1_1role_1a5352cd2a40c1c2c430ec9448bd45723f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1role_1a67fa7fe9f3650b5783cf4f5d2ed37de0" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>flags</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1role_1a5ce1695745201d6c2914c9d818119078" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>get_icon_url</name></member>
      <member refid="classdpp_1_1role_1a60bd9c7e3901c18f5ec3c4f835e1c1de" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>get_members</name></member>
      <member refid="classdpp_1_1role_1a82eb1c7df3ee72db92cf502bb575e799" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>get_mention</name></member>
      <member refid="classdpp_1_1role_1ab831d734d6cfe3a88c54bb91b0f578ea" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1role_1a0e2683fd21c1743132eb29f8155c12a2" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_add_reactions</name></member>
      <member refid="classdpp_1_1role_1a3ffcaced8369d47cc3f954fa0978c40c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_administrator</name></member>
      <member refid="classdpp_1_1role_1a848a39ba5ff6b5c42c3246d041582d00" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_attach_files</name></member>
      <member refid="classdpp_1_1role_1ac8eaec9aac9633c7d05cb208da7fc4d9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_ban_members</name></member>
      <member refid="classdpp_1_1role_1a2b158e7e37bb66c17a4ed412a71f7222" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_change_nickname</name></member>
      <member refid="classdpp_1_1role_1a0be98542c2299aa41829d69bf348b54d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_connect</name></member>
      <member refid="classdpp_1_1role_1a7005a2a951c2917edb6f5ce189093234" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_create_instant_invite</name></member>
      <member refid="classdpp_1_1role_1aa3127166dafb6cd4685a1e84b80a7e86" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_create_private_threads</name></member>
      <member refid="classdpp_1_1role_1ad593d01c7a2fac0413c939c80d81c590" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_create_public_threads</name></member>
      <member refid="classdpp_1_1role_1a0a197983ea6fc5047c7873d804f7646a" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_deafen_members</name></member>
      <member refid="classdpp_1_1role_1ae1dc87323b6ab2e499fee7c8bfa69d58" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_embed_links</name></member>
      <member refid="classdpp_1_1role_1a7b76518e70c32391bbae2c80439a2a76" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_kick_members</name></member>
      <member refid="classdpp_1_1role_1a9630315e9c31cb53335e077140497ad7" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_channels</name></member>
      <member refid="classdpp_1_1role_1a6d9b1dd5f966530c162b85409b00561c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_emojis_and_stickers</name></member>
      <member refid="classdpp_1_1role_1a04025962b533f09ea8a55d3c2815a442" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_events</name></member>
      <member refid="classdpp_1_1role_1ad1de8e0ce44138225e9e7620b0834cb0" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_guild</name></member>
      <member refid="classdpp_1_1role_1a1a28c7f8685b1c0287067665aecf6efb" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_messages</name></member>
      <member refid="classdpp_1_1role_1a80c8b573fc16edfd685294e0326b38d2" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_nicknames</name></member>
      <member refid="classdpp_1_1role_1a0b2cf553aab82c6a6a388c3f6e3c240d" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_roles</name></member>
      <member refid="classdpp_1_1role_1a032ce15247e135d733e6879bed928e7e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_threads</name></member>
      <member refid="classdpp_1_1role_1a9ac39f8c39f870603f0e9d9760159ef9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_manage_webhooks</name></member>
      <member refid="classdpp_1_1role_1aed437137a98c1f99d28942070c8ccf0f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_mention_everyone</name></member>
      <member refid="classdpp_1_1role_1a12d4fba5e5a0a02425c923234dd486bf" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_moderate_members</name></member>
      <member refid="classdpp_1_1role_1ac9605d0d14e4fff0c0848e08682c6da5" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_move_members</name></member>
      <member refid="classdpp_1_1role_1a504ae68edc2bfe1c21ffdb6745c1194c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_mute_members</name></member>
      <member refid="classdpp_1_1role_1a640358a9aa6e34c0e0b16020af176e55" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_priority_speaker</name></member>
      <member refid="classdpp_1_1role_1ac5f664643c59d7e24271bb790735c68f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_read_message_history</name></member>
      <member refid="classdpp_1_1role_1a84cfa9cd3dc9526f3a6a04ae25d3c775" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_request_to_speak</name></member>
      <member refid="classdpp_1_1role_1a31d923d5f1020215b836db355991870b" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_messages</name></member>
      <member refid="classdpp_1_1role_1ae7e42a98476a40201e9bce274f748954" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_messages_in_threads</name></member>
      <member refid="classdpp_1_1role_1af54ea9f64ea035675a26b0d8e8b356f5" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_send_tts_messages</name></member>
      <member refid="classdpp_1_1role_1a92ce258f420bce887cc9c92ad006fe06" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_speak</name></member>
      <member refid="classdpp_1_1role_1ab4a31bfb4b3913ea9043b7c3f2ceb371" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_start_embedded_activities</name></member>
      <member refid="classdpp_1_1role_1ae6173507d17a12012cf46da70929a49e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_stream</name></member>
      <member refid="classdpp_1_1role_1ac19332b3de93ecf0a38d0f07589fd6c5" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_application_commands</name></member>
      <member refid="classdpp_1_1role_1a363303c06726e049586b8ae4f3f6375e" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_external_emojis</name></member>
      <member refid="classdpp_1_1role_1a3ec1376d0b72ba7d42b3b0167daef425" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_external_stickers</name></member>
      <member refid="classdpp_1_1role_1a9ffd7c58994f9c3e0a38245462eb6766" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_use_vad</name></member>
      <member refid="classdpp_1_1role_1a600d347d4f491ba32969a76d9d0cf3c3" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_audit_log</name></member>
      <member refid="classdpp_1_1role_1acbe56d5d1d54e9fea3a6b7acd66ef888" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_channel</name></member>
      <member refid="classdpp_1_1role_1ac71887da3f920e070d1fa743ea000d1c" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>has_view_guild_insights</name></member>
      <member refid="classdpp_1_1role_1a4cca9d86bb489189d5938102fc52905f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>icon</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>id</name></member>
      <member refid="classdpp_1_1role_1ade838f66e78b524c5c14d30188e08281" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>image_data</name></member>
      <member refid="classdpp_1_1role_1aa44718ae47c00bcf2008366218646572" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>integration_id</name></member>
      <member refid="classdpp_1_1role_1ae0cb040c022f08d210c885012bf47919" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_hoisted</name></member>
      <member refid="classdpp_1_1role_1a479bc27fe486bb70dd3fc1376df3c5b9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_managed</name></member>
      <member refid="classdpp_1_1role_1a1d5a026fa3773f52b9c2cee6c590509f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>is_mentionable</name></member>
      <member refid="classdpp_1_1role_1a6d46d3e4a1b8e166f4a26da58bf119dc" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>load_image</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>managed</name></member>
      <member refid="classdpp_1_1role_1a6451e41576902faa14d0394d47d19934" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>name</name></member>
      <member refid="classdpp_1_1role_1ad1d79b737f5e7d2cc71238068fc36ad4" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>permissions</name></member>
      <member refid="classdpp_1_1role_1a08996823fc9ba1eb8c95b1e2e855d958" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>position</name></member>
      <member refid="classdpp_1_1role_1aa23013a7a7d7c03c4ef44d6e6fc02baa" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>role</name></member>
      <member refid="classdpp_1_1role_1a50e37b69fd90533aae8d998c0dba3054" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_bot_id</name></member>
      <member refid="classdpp_1_1role_1acdf6e9513f3dffca42499ed9dcc255a9" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_color</name></member>
      <member refid="classdpp_1_1role_1ad5add725167aa1be8c43ec167ce14d4f" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_colour</name></member>
      <member refid="classdpp_1_1role_1a8d710124a87c30664e1e0f6507a9ebe3" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_flags</name></member>
      <member refid="classdpp_1_1role_1aca74c158ab06219bbf3a0c61d96e2043" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_guild_id</name></member>
      <member refid="classdpp_1_1role_1a4eab09f700a66b003adfd9adfd3cd5d6" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_integration_id</name></member>
      <member refid="classdpp_1_1role_1aecb03f1ceb58c646db0347ad8908b849" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>set_name</name></member>
      <member refid="classdpp_1_1role_1ad84006ea16f3dc59cfd67559a60c5d10" prot="public" virt="non-virtual"><scope>dpp::role</scope><name>unicode_emoji</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::role</scope><name>~managed</name></member>
      <member refid="classdpp_1_1role_1a1cd275ca1aa52763e05b78a8a3443476" prot="public" virt="virtual"><scope>dpp::role</scope><name>~role</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
