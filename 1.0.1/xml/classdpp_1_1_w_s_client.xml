<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1_w_s_client" kind="class" language="C++" prot="public">
    <compoundname>dpp::WSClient</compoundname>
    <basecompoundref refid="classdpp_1_1_s_s_l_client" prot="public" virt="non-virtual">dpp::SSLClient</basecompoundref>
    <derivedcompoundref refid="classdpp_1_1_discord_client" prot="public" virt="non-virtual">dpp::DiscordClient</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1_discord_voice_client" prot="public" virt="non-virtual">dpp::DiscordVoiceClient</derivedcompoundref>
    <includes local="no">wsclient.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1_w_s_client_1a0f1c9de4f6439d0b1a333cfbdef517e2" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; dpp::WSClient::HTTPHeaders</definition>
        <argsstring></argsstring>
        <name>HTTPHeaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HTTP headers received on connecting/upgrading </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="68" column="10" bodyfile="include/dpp/wsclient.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_w_s_client_1a40b4925f750a2c81519bf6498d8db108" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::WSClient::key</definition>
        <argsstring></argsstring>
        <name>key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connection key used in the HTTP headers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="59" column="13" bodyfile="include/dpp/wsclient.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_w_s_client_1a91ea88eb035b25d7a128f66407818473" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::WSClient::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Path part of URL for websocket </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="65" column="13" bodyfile="include/dpp/wsclient.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_w_s_client_1ac8d88ae747d6f2312529a06a359e8d57" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a3e85c4c9871cd06e41554d9130d17741" kindref="member">WSState</ref></type>
        <definition>WSState dpp::WSClient::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Current websocket state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="62" column="9" bodyfile="include/dpp/wsclient.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1a3b6a07e05b3e50b16fd11ebda6d7c4b4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::WSClient::FillHeader</definition>
        <argsstring>(unsigned char *outbuf, size_t sendlength, OpCode opcode)</argsstring>
        <name>FillHeader</name>
        <param>
          <type>unsigned char *</type>
          <declname>outbuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sendlength</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a2560a920a9a24cb15f2fc349f6df7418" kindref="member">OpCode</ref></type>
          <declname>opcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill a header for outbound messages <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The raw frame to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sendlength</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the data to encapsulate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OpCode</parametername>
</parameternamelist>
<parameterdescription>
<para>the opcode to send in the header </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="87" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1a9814a9ccfda12b96667d5274ab74dc46" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::WSClient::HandlePingPong</definition>
        <argsstring>(bool ping, const std::string &amp;payload)</argsstring>
        <name>HandlePingPong</name>
        <param>
          <type>bool</type>
          <declname>ping</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle ping and pong requests. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ping</parametername>
</parameternamelist>
<parameterdescription>
<para>True if this is a ping, false if it is a pong </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>The ping payload, to be returned as-is for a ping </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="93" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1af364701786304281c3317e8fcefee38d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::WSClient::parseheader</definition>
        <argsstring>(std::string &amp;buffer)</argsstring>
        <name>parseheader</name>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse headers for a websocket frame from the buffer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to operate on. Will modify the string removing completed items from the head of the queue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="73" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1a8b1356186f5ee2d24946477edab60da6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::WSClient::unpack</definition>
        <argsstring>(std::string &amp;buffer, uint32_t offset, bool first=true)</argsstring>
        <name>unpack</name>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unpack a frame and pass completed frames up the stack. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to operate on. Gets modified to remove completed frames on the head of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset to start at (reserved for future use) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>True if is the first element (reserved for future use) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="80" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1ac8364158676f7f65dc219ca9a9d21e09" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::WSClient::Connect</definition>
        <argsstring>()</argsstring>
        <name>Connect</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1a59203374735f25a44c4cda1d35e04b94">Connect</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(Re)connect </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="98" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1aa3e6bbb5e62d6c701f7c25bc61fcf977" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a3e85c4c9871cd06e41554d9130d17741" kindref="member">WSState</ref></type>
        <definition>WSState dpp::WSClient::GetState</definition>
        <argsstring>()</argsstring>
        <name>GetState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get websocket state <simplesect kind="return"><para>websocket state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="103" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1a1de79d389e653ee40334b71bac3b8dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::WSClient::WSClient</definition>
        <argsstring>(const std::string &amp;hostname, const std::string &amp;port=&quot;443&quot;, const std::string &amp;urlpath=&quot;&quot;)</argsstring>
        <name>WSClient</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>port</declname>
          <defval>&quot;443&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>urlpath</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect to a specific websocket server. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>Hostname to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Port to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>urlpath</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL path components of the HTTP request to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="112" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1a9e570719ee8bdbc30b1262134542c5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::WSClient::~WSClient</definition>
        <argsstring>()</argsstring>
        <name>~WSClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="115" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1aaf200086f214a78e0d3b83519b892519" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::WSClient::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1aab00ea04e3a83786c0b428f8f8746b8f">close</reimplements>
        <briefdescription>
<para>Close websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="134" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1ad6e829eef167197d2ee0e28d9b19a01c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::WSClient::Error</definition>
        <argsstring>(uint32_t errorcode)</argsstring>
        <name>Error</name>
        <reimplementedby refid="classdpp_1_1_discord_client_1ace6f62946ab4560487583f4735eaaca8">Error</reimplementedby>
        <reimplementedby refid="classdpp_1_1_discord_voice_client_1a76d1053c9a5513799ebf1f8b7d4c9aca">Error</reimplementedby>
        <param>
          <type>uint32_t</type>
          <declname>errorcode</declname>
        </param>
        <briefdescription>
<para>Called upon error frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errorcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code from the websocket server </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="149" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_s_s_l_client_1a86c883435a97b87d43017332333b2a50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::SSLClient::GetBytesIn</definition>
        <argsstring>()</argsstring>
        <name>GetBytesIn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total bytes received </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="88" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_s_s_l_client_1af9abd52051cee90fd27e3bcff8d674d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::SSLClient::GetBytesOut</definition>
        <argsstring>()</argsstring>
        <name>GetBytesOut</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total bytes sent </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="85" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1af899d3c6a40df74bf881ee954bd10cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::WSClient::HandleBuffer</definition>
        <argsstring>(std::string &amp;buffer)</argsstring>
        <name>HandleBuffer</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1a2f4314c11b623d94504625274304c83a">HandleBuffer</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Processes incoming frames from the SSL socket input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents. Can modify this value removing the head elements when processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="129" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1a4c112062af7a4b12ac2227501012404c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::WSClient::HandleFrame</definition>
        <argsstring>(const std::string &amp;buffer)</argsstring>
        <name>HandleFrame</name>
        <reimplementedby refid="classdpp_1_1_discord_client_1acc4ce9565611186934ab5e8226d9dd94">HandleFrame</reimplementedby>
        <reimplementedby refid="classdpp_1_1_discord_voice_client_1ae559c6891966256b9cc007a75776ccc3">HandleFrame</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Receives raw frame content only without headers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the frame was successfully handled. False if no valid frame is in the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="142" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_s_s_l_client_1a6fe20ba9e2466d73d29d5d110ff9303f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::SSLClient::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const</argsstring>
        <name>log</name>
        <reimplementedby refid="classdpp_1_1_discord_client_1a855c5703fc35fa7e6e6a60640c8282e5">log</reimplementedby>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>severity of log message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="157" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1aa9d7441bf46fe61aabd8c49da36143ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::WSClient::OneSecondTimer</definition>
        <argsstring>()</argsstring>
        <name>OneSecondTimer</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1a7cac59e2f5b38bb1acfd0c1fd0a7a0e9">OneSecondTimer</reimplements>
        <reimplementedby refid="classdpp_1_1_discord_client_1a71df9ed233125eaa8bec08b98b5ce47f">OneSecondTimer</reimplementedby>
        <reimplementedby refid="classdpp_1_1_discord_voice_client_1af165a831d056b17d423bca6ad195354e">OneSecondTimer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fires every second from the underlying socket I/O loop, used for sending webscocket pings </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="152" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_s_s_l_client_1a6c1ea74cfc2543f7e682f3181ff8215b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::SSLClient::ReadLoop</definition>
        <argsstring>()</argsstring>
        <name>ReadLoop</name>
        <briefdescription>
<para>Nonblocking I/O loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="127" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1a18e3e2d3771d3a6ea17401a8caf36b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::WSClient::write</definition>
        <argsstring>(const std::string &amp;data)</argsstring>
        <name>write</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1a639fc0fa2335f4ff10a27344ffc2ebca">write</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write to websocket. Encapsulates data in frames if the status is CONNECTED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="122" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a5beee5ae2603bc35941490f0ed781064" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::SSLClient::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input buffer received from openssl </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="41" column="13" bodyfile="include/dpp/sslclient.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1af169f1ac00c59f2a749919d4dfb978bf" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::SSLClient::bytes_in</definition>
        <argsstring></argsstring>
        <name>bytes_in</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bytes in </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="76" column="10" bodyfile="include/dpp/sslclient.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a2678852573957846f9282be968085deb" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::SSLClient::bytes_out</definition>
        <argsstring></argsstring>
        <name>bytes_out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bytes out </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="73" column="10" bodyfile="include/dpp/sslclient.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ac3a430041c3a03d88411616567cb5a30" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::SSLClient::cipher</definition>
        <argsstring></argsstring>
        <name>cipher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SSL cipher in use </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="61" column="13" bodyfile="include/dpp/sslclient.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ae14b2dfb6828c49d7e88e404b8ce56e5" prot="protected" static="no" mutable="no">
        <type>SSL_CTX *</type>
        <definition>SSL_CTX* dpp::SSLClient::ctx</definition>
        <argsstring></argsstring>
        <name>ctx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>OpenSSL context </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="58" column="9" bodyfile="include/dpp/sslclient.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ad53f1295dc277729511a4653c122cff3" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::SSLClient::hostname</definition>
        <argsstring></argsstring>
        <name>hostname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hostname connected to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="67" column="13" bodyfile="include/dpp/sslclient.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ae9fdbc996fe0003160b1096329b9c8ba" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::SSLClient::last_tick</definition>
        <argsstring></argsstring>
        <name>last_tick</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For timers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="64" column="8" bodyfile="include/dpp/sslclient.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a5a7c0ad6978157507c525d2076b97244" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::SSLClient::nonblocking</definition>
        <argsstring></argsstring>
        <name>nonblocking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if in nonblocking mode. The socket switches to nonblocking mode once ReadLoop is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="49" column="6" bodyfile="include/dpp/sslclient.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a171dadd1d1afc362a632edbbcaa25150" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::SSLClient::obuffer</definition>
        <argsstring></argsstring>
        <name>obuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output buffer for sending to openssl </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="44" column="13" bodyfile="include/dpp/sslclient.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1aa2ac4fae7d67004791e1a2af25d087e1" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::SSLClient::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Port connected to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="70" column="13" bodyfile="include/dpp/sslclient.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a55eab8288050b982ec0741efe58381b9" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int dpp::SSLClient::sfd</definition>
        <argsstring></argsstring>
        <name>sfd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw file descriptor of connection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="52" column="5" bodyfile="include/dpp/sslclient.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a8a6060cdbb9b0dabb029a4b4aac1e62e" prot="protected" static="no" mutable="no">
        <type>SSL *</type>
        <definition>SSL* dpp::SSLClient::ssl</definition>
        <argsstring></argsstring>
        <name>ssl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>OpenSSL session </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="55" column="5" bodyfile="include/dpp/sslclient.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ac6292cb6c5074d4bfdcfda12fe15997b" prot="public" static="no" mutable="no">
        <type>std::function&lt; int()&gt;</type>
        <definition>std::function&lt;int()&gt; dpp::SSLClient::custom_readable_fd</definition>
        <argsstring></argsstring>
        <name>custom_readable_fd</name>
        <briefdescription>
<para>Attaching an additional file descriptor to this function will send notifications when there is data to read. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Only hook this if you NEED it as it can increase CPU usage of the thread! Returning -1 means that you don&apos;t want to be notified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="96" column="15" bodyfile="include/dpp/sslclient.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a9122566a8d8306a3b1e17eec6cba1584" prot="public" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; dpp::SSLClient::custom_readable_ready</definition>
        <argsstring></argsstring>
        <name>custom_readable_ready</name>
        <briefdescription>
<para>This event will be called when you can read from the custom fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="110" column="15" bodyfile="include/dpp/sslclient.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ab89687d0e40aac259389a22a1c900444" prot="public" static="no" mutable="no">
        <type>std::function&lt; int()&gt;</type>
        <definition>std::function&lt;int()&gt; dpp::SSLClient::custom_writeable_fd</definition>
        <argsstring></argsstring>
        <name>custom_writeable_fd</name>
        <briefdescription>
<para>Attaching an additional file descriptor to this function will send notifications when you are able to write to the socket. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Only hook this if you NEED it as it can increase CPU usage of the thread! You should toggle this to -1 when you do not have anything to write otherwise it&apos;ll keep triggering repeatedly (it is level triggered). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="105" column="15" bodyfile="include/dpp/sslclient.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1acbb60605bfc2a132df49ec23a062bb7c" prot="public" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; dpp::SSLClient::custom_writeable_ready</definition>
        <argsstring></argsstring>
        <name>custom_writeable_ready</name>
        <briefdescription>
<para>This event will be called when you can write to a custom fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="115" column="15" bodyfile="include/dpp/sslclient.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a websocket client based on the SSL client. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::DiscordClient</label>
        <link refid="classdpp_1_1_discord_client"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::DiscordVoiceClient</label>
        <link refid="classdpp_1_1_discord_voice_client"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::SSLClient</label>
        <link refid="classdpp_1_1_s_s_l_client"/>
      </node>
      <node id="1">
        <label>dpp::WSClient</label>
        <link refid="classdpp_1_1_w_s_client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>SSL *</label>
      </node>
      <node id="8">
        <label>SSL_CTX *</label>
      </node>
      <node id="5">
        <label>bool</label>
      </node>
      <node id="2">
        <label>dpp::SSLClient</label>
        <link refid="classdpp_1_1_s_s_l_client"/>
        <childnode refid="3" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
          <edgelabel>custom_writeable_ready</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::WSClient</label>
        <link refid="classdpp_1_1_w_s_client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>int</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="11">
        <label>function&lt;</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>time_t</label>
      </node>
      <node id="10">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/wsclient.h" line="56" column="1" bodyfile="include/dpp/wsclient.h" bodystart="57" bodyend="153"/>
    <listofallmembers>
      <member refid="classdpp_1_1_s_s_l_client_1a5beee5ae2603bc35941490f0ed781064" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>buffer</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1af169f1ac00c59f2a749919d4dfb978bf" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>bytes_in</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a2678852573957846f9282be968085deb" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>bytes_out</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ac3a430041c3a03d88411616567cb5a30" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>cipher</name></member>
      <member refid="classdpp_1_1_w_s_client_1aaf200086f214a78e0d3b83519b892519" prot="public" virt="virtual"><scope>dpp::WSClient</scope><name>close</name></member>
      <member refid="classdpp_1_1_w_s_client_1ac8364158676f7f65dc219ca9a9d21e09" prot="protected" virt="virtual"><scope>dpp::WSClient</scope><name>Connect</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ae14b2dfb6828c49d7e88e404b8ce56e5" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>ctx</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ac6292cb6c5074d4bfdcfda12fe15997b" prot="public" virt="non-virtual"><scope>dpp::WSClient</scope><name>custom_readable_fd</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a9122566a8d8306a3b1e17eec6cba1584" prot="public" virt="non-virtual"><scope>dpp::WSClient</scope><name>custom_readable_ready</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ab89687d0e40aac259389a22a1c900444" prot="public" virt="non-virtual"><scope>dpp::WSClient</scope><name>custom_writeable_fd</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1acbb60605bfc2a132df49ec23a062bb7c" prot="public" virt="non-virtual"><scope>dpp::WSClient</scope><name>custom_writeable_ready</name></member>
      <member refid="classdpp_1_1_w_s_client_1ad6e829eef167197d2ee0e28d9b19a01c" prot="public" virt="virtual"><scope>dpp::WSClient</scope><name>Error</name></member>
      <member refid="classdpp_1_1_w_s_client_1a3b6a07e05b3e50b16fd11ebda6d7c4b4" prot="private" virt="non-virtual"><scope>dpp::WSClient</scope><name>FillHeader</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a86c883435a97b87d43017332333b2a50" prot="public" virt="non-virtual"><scope>dpp::WSClient</scope><name>GetBytesIn</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1af9abd52051cee90fd27e3bcff8d674d2" prot="public" virt="non-virtual"><scope>dpp::WSClient</scope><name>GetBytesOut</name></member>
      <member refid="classdpp_1_1_w_s_client_1aa3e6bbb5e62d6c701f7c25bc61fcf977" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>GetState</name></member>
      <member refid="classdpp_1_1_w_s_client_1af899d3c6a40df74bf881ee954bd10cf6" prot="public" virt="virtual"><scope>dpp::WSClient</scope><name>HandleBuffer</name></member>
      <member refid="classdpp_1_1_w_s_client_1a4c112062af7a4b12ac2227501012404c" prot="public" virt="virtual"><scope>dpp::WSClient</scope><name>HandleFrame</name></member>
      <member refid="classdpp_1_1_w_s_client_1a9814a9ccfda12b96667d5274ab74dc46" prot="private" virt="non-virtual"><scope>dpp::WSClient</scope><name>HandlePingPong</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ad53f1295dc277729511a4653c122cff3" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>hostname</name></member>
      <member refid="classdpp_1_1_w_s_client_1a0f1c9de4f6439d0b1a333cfbdef517e2" prot="private" virt="non-virtual"><scope>dpp::WSClient</scope><name>HTTPHeaders</name></member>
      <member refid="classdpp_1_1_w_s_client_1a40b4925f750a2c81519bf6498d8db108" prot="private" virt="non-virtual"><scope>dpp::WSClient</scope><name>key</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ae9fdbc996fe0003160b1096329b9c8ba" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>last_tick</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a6fe20ba9e2466d73d29d5d110ff9303f" prot="public" virt="virtual"><scope>dpp::WSClient</scope><name>log</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a5a7c0ad6978157507c525d2076b97244" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>nonblocking</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a171dadd1d1afc362a632edbbcaa25150" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>obuffer</name></member>
      <member refid="classdpp_1_1_w_s_client_1aa9d7441bf46fe61aabd8c49da36143ef" prot="public" virt="virtual"><scope>dpp::WSClient</scope><name>OneSecondTimer</name></member>
      <member refid="classdpp_1_1_w_s_client_1af364701786304281c3317e8fcefee38d" prot="private" virt="non-virtual"><scope>dpp::WSClient</scope><name>parseheader</name></member>
      <member refid="classdpp_1_1_w_s_client_1a91ea88eb035b25d7a128f66407818473" prot="private" virt="non-virtual"><scope>dpp::WSClient</scope><name>path</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1aa2ac4fae7d67004791e1a2af25d087e1" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>port</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a6c1ea74cfc2543f7e682f3181ff8215b" prot="public" virt="non-virtual"><scope>dpp::WSClient</scope><name>ReadLoop</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a55eab8288050b982ec0741efe58381b9" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>sfd</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a8a6060cdbb9b0dabb029a4b4aac1e62e" prot="protected" virt="non-virtual"><scope>dpp::WSClient</scope><name>ssl</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1acab97910ee108e6577ab1205eba9a8dd" prot="public" virt="non-virtual"><scope>dpp::WSClient</scope><name>SSLClient</name></member>
      <member refid="classdpp_1_1_w_s_client_1ac8d88ae747d6f2312529a06a359e8d57" prot="private" virt="non-virtual"><scope>dpp::WSClient</scope><name>state</name></member>
      <member refid="classdpp_1_1_w_s_client_1a8b1356186f5ee2d24946477edab60da6" prot="private" virt="non-virtual"><scope>dpp::WSClient</scope><name>unpack</name></member>
      <member refid="classdpp_1_1_w_s_client_1a18e3e2d3771d3a6ea17401a8caf36b04" prot="public" virt="virtual"><scope>dpp::WSClient</scope><name>write</name></member>
      <member refid="classdpp_1_1_w_s_client_1a1de79d389e653ee40334b71bac3b8dea" prot="public" virt="non-virtual"><scope>dpp::WSClient</scope><name>WSClient</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a052b2f1c3b14e8ec067904b78b3e2ae7" prot="public" virt="virtual"><scope>dpp::WSClient</scope><name>~SSLClient</name></member>
      <member refid="classdpp_1_1_w_s_client_1a9e570719ee8bdbc30b1262134542c5a7" prot="public" virt="virtual"><scope>dpp::WSClient</scope><name>~WSClient</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
