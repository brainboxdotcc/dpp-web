<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacehttplib_1_1detail" kind="namespace" language="C++">
    <compoundname>httplib::detail</compoundname>
    <innerclass refid="classhttplib_1_1detail_1_1_buffer_stream" prot="public">httplib::detail::BufferStream</innerclass>
    <innerclass refid="structhttplib_1_1detail_1_1ci" prot="public">httplib::detail::ci</innerclass>
    <innerclass refid="classhttplib_1_1detail_1_1compressor" prot="public">httplib::detail::compressor</innerclass>
    <innerclass refid="classhttplib_1_1detail_1_1_content_provider_adapter" prot="public">httplib::detail::ContentProviderAdapter</innerclass>
    <innerclass refid="classhttplib_1_1detail_1_1decompressor" prot="public">httplib::detail::decompressor</innerclass>
    <innerclass refid="classhttplib_1_1detail_1_1_multipart_form_data_parser" prot="public">httplib::detail::MultipartFormDataParser</innerclass>
    <innerclass refid="classhttplib_1_1detail_1_1nocompressor" prot="public">httplib::detail::nocompressor</innerclass>
    <innerclass refid="classhttplib_1_1detail_1_1_socket_stream" prot="public">httplib::detail::SocketStream</innerclass>
    <innerclass refid="classhttplib_1_1detail_1_1_s_s_l_init" prot="public">httplib::detail::SSLInit</innerclass>
    <innerclass refid="classhttplib_1_1detail_1_1_s_s_l_socket_stream" prot="public">httplib::detail::SSLSocketStream</innerclass>
    <innerclass refid="classhttplib_1_1detail_1_1_s_s_l_thread_locks" prot="public">httplib::detail::SSLThreadLocks</innerclass>
    <innerclass refid="classhttplib_1_1detail_1_1stream__line__reader" prot="public">httplib::detail::stream_line_reader</innerclass>
    <innernamespace refid="namespacehttplib_1_1detail_1_1udl">httplib::detail::udl</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacehttplib_1_1detail_1a2d74473be3feaf34ea8f25d4e782dc1a" prot="public" static="no" strong="yes">
        <type></type>
        <name>EncodingType</name>
        <enumvalue id="namespacehttplib_1_1detail_1a2d74473be3feaf34ea8f25d4e782dc1aa6adf97f83acf6453d4a6a4b1070f3754" prot="public">
          <name>None</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehttplib_1_1detail_1a2d74473be3feaf34ea8f25d4e782dc1aa2548e50da66f41afea53de1cbbf3b30c" prot="public">
          <name>Gzip</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacehttplib_1_1detail_1a2d74473be3feaf34ea8f25d4e782dc1aa4b9159701faed6a94df888e2c83b48bf" prot="public">
          <name>Brotli</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1044" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="1044" bodyend="1044"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacehttplib_1_1detail_1af325d2643af41713dfc926ee01f1d0a9" prot="public" static="yes" mutable="no">
        <type>std::shared_ptr&lt; std::vector&lt; std::mutex &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;std::mutex&gt; &gt; httplib::detail::openSSL_locks_</definition>
        <argsstring></argsstring>
        <name>openSSL_locks_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="5153" column="24" bodyfile="src/dpp/httplib.cpp" bodystart="5153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacehttplib_1_1detail_1a6a785b846219778ce62b63e3271340c7" prot="public" static="yes" mutable="no">
        <type><ref refid="classhttplib_1_1detail_1_1_s_s_l_init" kindref="compound">SSLInit</ref></type>
        <definition>SSLInit httplib::detail::sslinit_</definition>
        <argsstring></argsstring>
        <name>sslinit_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="5263" column="16" bodyfile="src/dpp/httplib.cpp" bodystart="5263" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a4a74a4e9cde826f1a91894f63ddb2d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::is_hex</definition>
        <argsstring>(char c, int &amp;v)</argsstring>
        <name>is_hex</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="15" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="15" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a62592aa626f8ab0e3af59e681a28ac1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::from_hex_to_i</definition>
        <argsstring>(const std::string &amp;s, size_t i, size_t cnt, int &amp;val)</argsstring>
        <name>from_hex_to_i</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="29" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="29" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ac08f80eff074b5a4adcb6e160a1380a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::from_i_to_hex</definition>
        <argsstring>(size_t n)</argsstring>
        <name>from_i_to_hex</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="46" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a011d617356300d12aeb93d2dda1560b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t httplib::detail::to_utf8</definition>
        <argsstring>(int code, char *buff)</argsstring>
        <name>to_utf8</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="56" column="8" bodyfile="src/dpp/httplib.cpp" bodystart="56" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a455e8db9d2cc4c24565af6d9b884eeaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::base64_encode</definition>
        <argsstring>(const std::string &amp;in)</argsstring>
        <name>base64_encode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="90" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="90" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a5d432e56b6e9cdb1d3a47477d3b3684e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::is_file</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>is_file</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="118" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1af1f56433b3a10b13b2f914de33bd6e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::is_dir</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>is_dir</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="123" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a955ed1d5e52f6e2513d06d969ceeb668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::is_valid_path</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>is_valid_path</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="128" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="128" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ac15d5d0e71ad0968279824f83b398b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::encode_query_param</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>encode_query_param</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="165" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="165" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1af303bae3a748ade0f39ac8098fa50733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::encode_url</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>encode_url</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="186" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="186" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ad9a33d8ea46a298f605165c2d7a11626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::decode_url</definition>
        <argsstring>(const std::string &amp;s, bool convert_plus_to_space)</argsstring>
        <name>decode_url</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>convert_plus_to_space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="218" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="218" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a606532e60127124a0258fa9d37db21c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void httplib::detail::read_file</definition>
        <argsstring>(const std::string &amp;path, std::string &amp;out)</argsstring>
        <name>read_file</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="255" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="255" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a810a6c09469427bb1729f084db0d92d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::file_extension</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>file_extension</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="264" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="264" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a516825616cd42123cbe974a9f42718aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::is_space_or_tab</definition>
        <argsstring>(char c)</argsstring>
        <name>is_space_or_tab</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="271" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1aaf2601752b770a3ad3c6fbfc74f9e4cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; size_t, size_t &gt;</type>
        <definition>std::pair&lt; size_t, size_t &gt; httplib::detail::trim</definition>
        <argsstring>(const char *b, const char *e, size_t left, size_t right)</argsstring>
        <name>trim</name>
        <param>
          <type>const char *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>left</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="273" column="11" bodyfile="src/dpp/httplib.cpp" bodystart="273" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a43195f9bc4116e2472476caa1c0fc062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::trim_copy</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>trim_copy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="284" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a371bab3d3c19d72d416526aed1baf852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Fn</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void httplib::detail::split</definition>
        <argsstring>(const char *b, const char *e, char d, Fn fn)</argsstring>
        <name>split</name>
        <param>
          <type>const char *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>char</type>
          <declname>d</declname>
        </param>
        <param>
          <type>Fn</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="289" column="18" bodyfile="src/dpp/httplib.cpp" bodystart="289" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ab97ddef67a99aee8ed2aec5e20d90286" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int httplib::detail::close_socket</definition>
        <argsstring>(socket_t sock)</argsstring>
        <name>close_socket</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="384" column="5" bodyfile="src/dpp/httplib.cpp" bodystart="384" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a8fbaa8fefb24f6dd249b62f832f64a84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>ssize_t</type>
        <definition>ssize_t httplib::detail::handle_EINTR</definition>
        <argsstring>(T fn)</argsstring>
        <name>handle_EINTR</name>
        <param>
          <type>T</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="392" column="21" bodyfile="src/dpp/httplib.cpp" bodystart="392" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ade5583c2e13e0822f2a90227894d92fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t httplib::detail::select_read</definition>
        <argsstring>(socket_t sock, time_t sec, time_t usec)</argsstring>
        <name>select_read</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>usec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="402" column="9" bodyfile="src/dpp/httplib.cpp" bodystart="402" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a904dd937c3c0a43da925cab16b8b896b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t httplib::detail::select_write</definition>
        <argsstring>(socket_t sock, time_t sec, time_t usec)</argsstring>
        <name>select_write</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>usec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="430" column="9" bodyfile="src/dpp/httplib.cpp" bodystart="430" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ac5362f1f9049aebd262a98e69fc66ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::wait_until_socket_is_ready</definition>
        <argsstring>(socket_t sock, time_t sec, time_t usec)</argsstring>
        <name>wait_until_socket_is_ready</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>usec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="458" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="458" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ab08d37ac18483ada5ec56e3232405765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::keep_alive</definition>
        <argsstring>(socket_t sock, time_t keep_alive_timeout_sec)</argsstring>
        <name>keep_alive</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>keep_alive_timeout_sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="572" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="572" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a5f0c9305bd9afeafdd749b0c1a61b1e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::process_server_socket_core</definition>
        <argsstring>(socket_t sock, size_t keep_alive_max_count, time_t keep_alive_timeout_sec, T callback)</argsstring>
        <name>process_server_socket_core</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>keep_alive_max_count</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>keep_alive_timeout_sec</declname>
        </param>
        <param>
          <type>T</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="593" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="593" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ac93f82fce90706744b03f22eecc0f73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::process_server_socket</definition>
        <argsstring>(socket_t sock, size_t keep_alive_max_count, time_t keep_alive_timeout_sec, time_t read_timeout_sec, time_t read_timeout_usec, time_t write_timeout_sec, time_t write_timeout_usec, T callback)</argsstring>
        <name>process_server_socket</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>keep_alive_max_count</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>keep_alive_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>read_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>read_timeout_usec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>write_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>write_timeout_usec</declname>
        </param>
        <param>
          <type>T</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="610" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="610" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a062e27d668e8472bae75759bbcfb715e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::process_client_socket</definition>
        <argsstring>(socket_t sock, time_t read_timeout_sec, time_t read_timeout_usec, time_t write_timeout_sec, time_t write_timeout_usec, T callback)</argsstring>
        <name>process_client_socket</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>read_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>read_timeout_usec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>write_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>write_timeout_usec</declname>
        </param>
        <param>
          <type>T</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="624" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="624" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a6fe756f70ad6d331f8269d1504ecc296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int httplib::detail::shutdown_socket</definition>
        <argsstring>(socket_t sock)</argsstring>
        <name>shutdown_socket</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="633" column="5" bodyfile="src/dpp/httplib.cpp" bodystart="633" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a1caec6c4266e176ba37f52a716200881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BindOrConnect</type>
          </param>
        </templateparamlist>
        <type>socket_t</type>
        <definition>socket_t httplib::detail::create_socket</definition>
        <argsstring>(const char *host, int port, int address_family, int socket_flags, bool tcp_nodelay, SocketOptions socket_options, BindOrConnect bind_or_connect)</argsstring>
        <name>create_socket</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>address_family</declname>
        </param>
        <param>
          <type>int</type>
          <declname>socket_flags</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>tcp_nodelay</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a02305f842f48963eb2ed425ee5d1655d" kindref="member">SocketOptions</ref></type>
          <declname>socket_options</declname>
        </param>
        <param>
          <type>BindOrConnect</type>
          <declname>bind_or_connect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="642" column="10" bodyfile="src/dpp/httplib.cpp" bodystart="642" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a697035fa14dcfff9fb4705d6cffea733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void httplib::detail::set_nonblocking</definition>
        <argsstring>(socket_t sock, bool nonblocking)</argsstring>
        <name>set_nonblocking</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>nonblocking</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="724" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="724" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1aefb0b64a836468f95269d11943464a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::is_connection_error</definition>
        <argsstring>()</argsstring>
        <name>is_connection_error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="735" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="735" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a3c99670815bc5f1516efedc4c3e21bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::bind_ip_address</definition>
        <argsstring>(socket_t sock, const char *host)</argsstring>
        <name>bind_ip_address</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="743" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="743" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a65013cf519cc0998f60d7b23ee3dc136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::if2ip</definition>
        <argsstring>(const std::string &amp;ifn)</argsstring>
        <name>if2ip</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>ifn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="772" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="772" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ab8781c0e831d7c13ae312f253a99d610" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>socket_t</type>
        <definition>socket_t httplib::detail::create_client_socket</definition>
        <argsstring>(const char *host, int port, int address_family, bool tcp_nodelay, SocketOptions socket_options, time_t connection_timeout_sec, time_t connection_timeout_usec, time_t read_timeout_sec, time_t read_timeout_usec, time_t write_timeout_sec, time_t write_timeout_usec, const std::string &amp;intf, Error &amp;error)</argsstring>
        <name>create_client_socket</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int</type>
          <declname>address_family</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>tcp_nodelay</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a02305f842f48963eb2ed425ee5d1655d" kindref="member">SocketOptions</ref></type>
          <declname>socket_options</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>connection_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>connection_timeout_usec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>read_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>read_timeout_usec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>write_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>write_timeout_usec</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>intf</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a46ff5da925971ebebf2c5693e367f24a" kindref="member">Error</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="792" column="10" bodyfile="src/dpp/httplib.cpp" bodystart="792" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a12c303379e2647b2148a6245235423ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void httplib::detail::get_remote_ip_and_port</definition>
        <argsstring>(const struct sockaddr_storage &amp;addr, socklen_t addr_len, std::string &amp;ip, int &amp;port)</argsstring>
        <name>get_remote_ip_and_port</name>
        <param>
          <type>const struct sockaddr_storage &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>socklen_t</type>
          <declname>addr_len</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="854" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="854" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a179925921531261e6f657e92c78542c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void httplib::detail::get_remote_ip_and_port</definition>
        <argsstring>(socket_t sock, std::string &amp;ip, int &amp;port)</argsstring>
        <name>get_remote_ip_and_port</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="872" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="872" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1afbbe1f2e45c67a29f1cb3cb68eadbfa6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr unsigned int</type>
        <definition>constexpr unsigned int httplib::detail::str2tag_core</definition>
        <argsstring>(const char *s, size_t l, unsigned int h)</argsstring>
        <name>str2tag_core</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="882" column="24" bodyfile="src/dpp/httplib.cpp" bodystart="882" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a8421d59405044ca97486b9b41d728b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int httplib::detail::str2tag</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>str2tag</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="889" column="14" bodyfile="src/dpp/httplib.cpp" bodystart="889" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a37f92d5d7fa227444bfd5b73d40e1837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * httplib::detail::find_content_type</definition>
        <argsstring>(const std::string &amp;path, const std::map&lt; std::string, std::string &gt; &amp;user_data)</argsstring>
        <name>find_content_type</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="902" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="902" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a53ecc5e40689fc4b7c2f5ed456260128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * httplib::detail::status_message</definition>
        <argsstring>(int status)</argsstring>
        <name>status_message</name>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="965" column="12" bodyfile="src/dpp/httplib.cpp" bodystart="965" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1abe508674330c10dbe19fc1a33901c535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::can_compress_content_type</definition>
        <argsstring>(const std::string &amp;content_type)</argsstring>
        <name>can_compress_content_type</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>content_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1035" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1035" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ab3d7a73532e427696847a2c77090729d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacehttplib_1_1detail_1a2d74473be3feaf34ea8f25d4e782dc1a" kindref="member">EncodingType</ref></type>
        <definition>EncodingType httplib::detail::encoding_type</definition>
        <argsstring>(const Request &amp;req, const Response &amp;res)</argsstring>
        <name>encoding_type</name>
        <param>
          <type>const <ref refid="structhttplib_1_1_request" kindref="compound">Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>const <ref refid="structhttplib_1_1_response" kindref="compound">Response</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1046" column="14" bodyfile="src/dpp/httplib.cpp" bodystart="1046" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a290756a21ec7646b70a02103cd61d061" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::has_header</definition>
        <argsstring>(const Headers &amp;headers, const char *key)</argsstring>
        <name>has_header</name>
        <param>
          <type>const <ref refid="namespacehttplib_1a6fb30cf4bb44485bee38481e46ab8dc5" kindref="member">Headers</ref> &amp;</type>
          <declname>headers</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1301" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1301" bodyend="1303"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1aef894f1e166e16c38e91b750b805b619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * httplib::detail::get_header_value</definition>
        <argsstring>(const Headers &amp;headers, const char *key, size_t id=0, const char *def=nullptr)</argsstring>
        <name>get_header_value</name>
        <param>
          <type>const <ref refid="namespacehttplib_1a6fb30cf4bb44485bee38481e46ab8dc5" kindref="member">Headers</ref> &amp;</type>
          <declname>headers</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>id</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>def</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1305" column="12" bodyfile="src/dpp/httplib.cpp" bodystart="1305" bodyend="1312"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ae834154494c5cb27cc4244996c370729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T httplib::detail::get_header_value</definition>
        <argsstring>(const Headers &amp;, const char *, size_t=0, uint64_t=0)</argsstring>
        <name>get_header_value</name>
        <param>
          <type>const <ref refid="namespacehttplib_1a6fb30cf4bb44485bee38481e46ab8dc5" kindref="member">Headers</ref> &amp;</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>size_t</type>
          <defval>0</defval>
        </param>
        <param>
          <type>uint64_t</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1315" column="3" bodyfile="src/dpp/httplib.cpp" bodystart="1315" bodyend="1316"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ab1179c256f1324293272556cd6406299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t httplib::detail::get_header_value&lt; uint64_t &gt;</definition>
        <argsstring>(const Headers &amp;headers, const char *key, size_t id, uint64_t def)</argsstring>
        <name>get_header_value&lt; uint64_t &gt;</name>
        <param>
          <type>const <ref refid="namespacehttplib_1a6fb30cf4bb44485bee38481e46ab8dc5" kindref="member">Headers</ref> &amp;</type>
          <declname>headers</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>def</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1319" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="1319" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a9f88ca460e7fee64d3598e4d79349f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::parse_header</definition>
        <argsstring>(const char *beg, const char *end, T fn)</argsstring>
        <name>parse_header</name>
        <param>
          <type>const char *</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1332" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1332" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1aeb8db950848e27227eb130f609b293cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::read_headers</definition>
        <argsstring>(Stream &amp;strm, Headers &amp;headers)</argsstring>
        <name>read_headers</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a6fb30cf4bb44485bee38481e46ab8dc5" kindref="member">Headers</ref> &amp;</type>
          <declname>headers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1361" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1361" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1abe909e9a9ee7454dbc9bd814f390bdf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::read_content_with_length</definition>
        <argsstring>(Stream &amp;strm, uint64_t len, Progress progress, ContentReceiverWithProgress out)</argsstring>
        <name>read_content_with_length</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1ac816c86c4eb6af0ee03fb35059631b3c" kindref="member">Progress</ref></type>
          <declname>progress</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a14689d530e42fbb0d8d34b1b5a28c580" kindref="member">ContentReceiverWithProgress</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1389" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1389" bodyend="1409"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a1a2e37dcda3bd290ec3fe49c6d7b6e95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void httplib::detail::skip_content_with_length</definition>
        <argsstring>(Stream &amp;strm, uint64_t len)</argsstring>
        <name>skip_content_with_length</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1411" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1411" bodyend="1420"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1af7dd1efc28cb1936e56c5225b6a183d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::read_content_without_length</definition>
        <argsstring>(Stream &amp;strm, ContentReceiverWithProgress out)</argsstring>
        <name>read_content_without_length</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a14689d530e42fbb0d8d34b1b5a28c580" kindref="member">ContentReceiverWithProgress</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1422" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1422" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a8ed40b1d1ea6e016a0a95fe5e676262b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::read_content_chunked</definition>
        <argsstring>(Stream &amp;strm, ContentReceiverWithProgress out)</argsstring>
        <name>read_content_chunked</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a14689d530e42fbb0d8d34b1b5a28c580" kindref="member">ContentReceiverWithProgress</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1441" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1441" bodyend="1479"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1abd6e246430f90f7881c9475acb026d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::is_chunked_transfer_encoding</definition>
        <argsstring>(const Headers &amp;headers)</argsstring>
        <name>is_chunked_transfer_encoding</name>
        <param>
          <type>const <ref refid="namespacehttplib_1a6fb30cf4bb44485bee38481e46ab8dc5" kindref="member">Headers</ref> &amp;</type>
          <declname>headers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1481" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1481" bodyend="1484"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1adde3b6920db2d9d0065c119a8b255b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::prepare_content_receiver</definition>
        <argsstring>(T &amp;x, int &amp;status, ContentReceiverWithProgress receiver, bool decompress, U callback)</argsstring>
        <name>prepare_content_receiver</name>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a14689d530e42fbb0d8d34b1b5a28c580" kindref="member">ContentReceiverWithProgress</ref></type>
          <declname>receiver</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>decompress</declname>
        </param>
        <param>
          <type>U</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1487" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1487" bodyend="1533"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a471b40288a374b94e0957ce380ba01dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::read_content</definition>
        <argsstring>(Stream &amp;strm, T &amp;x, size_t payload_max_length, int &amp;status, Progress progress, ContentReceiverWithProgress receiver, bool decompress)</argsstring>
        <name>read_content</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>payload_max_length</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>status</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1ac816c86c4eb6af0ee03fb35059631b3c" kindref="member">Progress</ref></type>
          <declname>progress</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a14689d530e42fbb0d8d34b1b5a28c580" kindref="member">ContentReceiverWithProgress</ref></type>
          <declname>receiver</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>decompress</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1536" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1536" bodyend="1563"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1abc85cbf41b1214a5dc526521f989131b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t httplib::detail::write_headers</definition>
        <argsstring>(Stream &amp;strm, const Headers &amp;headers)</argsstring>
        <name>write_headers</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const <ref refid="namespacehttplib_1a6fb30cf4bb44485bee38481e46ab8dc5" kindref="member">Headers</ref> &amp;</type>
          <declname>headers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1565" column="9" bodyfile="src/dpp/httplib.cpp" bodystart="1565" bodyend="1577"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1aefec7c4fea53eda1af3a7362002c5223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::write_data</definition>
        <argsstring>(Stream &amp;strm, const char *d, size_t l)</argsstring>
        <name>write_data</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1579" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1579" bodyend="1587"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ac17dd7d7a80ce12e5966f5f577b67a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::write_content</definition>
        <argsstring>(Stream &amp;strm, const ContentProvider &amp;content_provider, size_t offset, size_t length, T is_shutting_down, Error &amp;error)</argsstring>
        <name>write_content</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const <ref refid="namespacehttplib_1aa14ad56981e64fa7d4972a812866fa22" kindref="member">ContentProvider</ref> &amp;</type>
          <declname>content_provider</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>T</type>
          <declname>is_shutting_down</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a46ff5da925971ebebf2c5693e367f24a" kindref="member">Error</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1590" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1590" bodyend="1623"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ae545b65e4ea144c8dbfb1dfb5991afa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::write_content</definition>
        <argsstring>(Stream &amp;strm, const ContentProvider &amp;content_provider, size_t offset, size_t length, const T &amp;is_shutting_down)</argsstring>
        <name>write_content</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const <ref refid="namespacehttplib_1aa14ad56981e64fa7d4972a812866fa22" kindref="member">ContentProvider</ref> &amp;</type>
          <declname>content_provider</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>is_shutting_down</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1626" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1626" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a4b08839cc083b4d71b0a3961c9a1686d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::write_content_without_length</definition>
        <argsstring>(Stream &amp;strm, const ContentProvider &amp;content_provider, const T &amp;is_shutting_down)</argsstring>
        <name>write_content_without_length</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const <ref refid="namespacehttplib_1aa14ad56981e64fa7d4972a812866fa22" kindref="member">ContentProvider</ref> &amp;</type>
          <declname>content_provider</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>is_shutting_down</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1636" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="1636" bodyend="1661"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1af586311a8460e53bac51d7d02802ede9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::write_content_chunked</definition>
        <argsstring>(Stream &amp;strm, const ContentProvider &amp;content_provider, const T &amp;is_shutting_down, U &amp;compressor, Error &amp;error)</argsstring>
        <name>write_content_chunked</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const <ref refid="namespacehttplib_1aa14ad56981e64fa7d4972a812866fa22" kindref="member">ContentProvider</ref> &amp;</type>
          <declname>content_provider</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>is_shutting_down</declname>
        </param>
        <param>
          <type>U &amp;</type>
          <declname>compressor</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a46ff5da925971ebebf2c5693e367f24a" kindref="member">Error</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1665" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="1665" bodyend="1743"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a466dfb2ad14ff432f525dff144af09a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::write_content_chunked</definition>
        <argsstring>(Stream &amp;strm, const ContentProvider &amp;content_provider, const T &amp;is_shutting_down, U &amp;compressor)</argsstring>
        <name>write_content_chunked</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const <ref refid="namespacehttplib_1aa14ad56981e64fa7d4972a812866fa22" kindref="member">ContentProvider</ref> &amp;</type>
          <declname>content_provider</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>is_shutting_down</declname>
        </param>
        <param>
          <type>U &amp;</type>
          <declname>compressor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1746" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1746" bodyend="1752"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a5617aea1da053ebdb2bac81742a25fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::redirect</definition>
        <argsstring>(T &amp;cli, Request &amp;req, Response &amp;res, const std::string &amp;path, const std::string &amp;location, Error &amp;error)</argsstring>
        <name>redirect</name>
        <param>
          <type>T &amp;</type>
          <declname>cli</declname>
        </param>
        <param>
          <type><ref refid="structhttplib_1_1_request" kindref="compound">Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="structhttplib_1_1_response" kindref="compound">Response</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a46ff5da925971ebebf2c5693e367f24a" kindref="member">Error</ref> &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1755" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1755" bodyend="1777"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ab7b74c41eee2905c0d828e5819514a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::params_to_query_str</definition>
        <argsstring>(const Params &amp;params)</argsstring>
        <name>params_to_query_str</name>
        <param>
          <type>const <ref refid="namespacehttplib_1a51ce06867e711ba5095eff9d606e802e" kindref="member">Params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1779" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="1779" bodyend="1789"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a618e7d1cb008277255ee00e53b1c48e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::append_query_params</definition>
        <argsstring>(const char *path, const Params &amp;params)</argsstring>
        <name>append_query_params</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const <ref refid="namespacehttplib_1a51ce06867e711ba5095eff9d606e802e" kindref="member">Params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1791" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="1791" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1acd471412f59b3f94884fcb9e7986a480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void httplib::detail::parse_query_text</definition>
        <argsstring>(const std::string &amp;s, Params &amp;params)</argsstring>
        <name>parse_query_text</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a51ce06867e711ba5095eff9d606e802e" kindref="member">Params</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1799" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1799" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ab575e708f5bc8388244b79a7bb020547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::parse_multipart_boundary</definition>
        <argsstring>(const std::string &amp;content_type, std::string &amp;boundary)</argsstring>
        <name>parse_multipart_boundary</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>content_type</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>boundary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1822" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1822" bodyend="1832"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ad4101f2d385e30a6c88e24b6a9058113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::parse_range_header</definition>
        <argsstring>(const std::string &amp;s, Ranges &amp;ranges)</argsstring>
        <name>parse_range_header</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacehttplib_1a3395bd4008ea82b092537f3084dddf5e" kindref="member">Ranges</ref> &amp;</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="1834" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="1834" bodyend="1866"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ab4e9ff501e78d30711d3f03bf8ccf932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::to_lower</definition>
        <argsstring>(const char *beg, const char *end)</argsstring>
        <name>to_lower</name>
        <param>
          <type>const char *</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2063" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="2063" bodyend="2071"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ae144d55905f9808c3abae6e20bd9367a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::make_multipart_data_boundary</definition>
        <argsstring>()</argsstring>
        <name>make_multipart_data_boundary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2073" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="2073" bodyend="2092"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a2d4a39719cfb2efb172a2c89e154c220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; size_t, size_t &gt;</type>
        <definition>std::pair&lt; size_t, size_t &gt; httplib::detail::get_range_offset_and_length</definition>
        <argsstring>(const Request &amp;req, size_t content_length, size_t index)</argsstring>
        <name>get_range_offset_and_length</name>
        <param>
          <type>const <ref refid="structhttplib_1_1_request" kindref="compound">Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>content_length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2095" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="2095" bodyend="2112"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1abe8b95159ae97fefd882a9990ff9291d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::make_content_range_header_field</definition>
        <argsstring>(size_t offset, size_t length, size_t content_length)</argsstring>
        <name>make_content_range_header_field</name>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>content_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2114" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="2114" bodyend="2123"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a89ddf0a3f7bf1b5a3a7f5547f20db6f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SToken</type>
          </param>
          <param>
            <type>typename CToken</type>
          </param>
          <param>
            <type>typename Content</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::process_multipart_ranges_data</definition>
        <argsstring>(const Request &amp;req, Response &amp;res, const std::string &amp;boundary, const std::string &amp;content_type, SToken stoken, CToken ctoken, Content content)</argsstring>
        <name>process_multipart_ranges_data</name>
        <param>
          <type>const <ref refid="structhttplib_1_1_request" kindref="compound">Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="structhttplib_1_1_response" kindref="compound">Response</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>boundary</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>content_type</declname>
        </param>
        <param>
          <type>SToken</type>
          <declname>stoken</declname>
        </param>
        <param>
          <type>CToken</type>
          <declname>ctoken</declname>
        </param>
        <param>
          <type>Content</type>
          <declname>content</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2126" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="2126" bodyend="2158"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1afc2b54d62d7a6164ba424964407eae16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::make_multipart_ranges_data</definition>
        <argsstring>(const Request &amp;req, Response &amp;res, const std::string &amp;boundary, const std::string &amp;content_type, std::string &amp;data)</argsstring>
        <name>make_multipart_ranges_data</name>
        <param>
          <type>const <ref refid="structhttplib_1_1_request" kindref="compound">Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="structhttplib_1_1_response" kindref="compound">Response</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>boundary</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>content_type</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2160" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="2160" bodyend="2175"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1adaa15da1e9aaa661e44dc5ef9688180e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t httplib::detail::get_multipart_ranges_data_length</definition>
        <argsstring>(const Request &amp;req, Response &amp;res, const std::string &amp;boundary, const std::string &amp;content_type)</argsstring>
        <name>get_multipart_ranges_data_length</name>
        <param>
          <type>const <ref refid="structhttplib_1_1_request" kindref="compound">Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="structhttplib_1_1_response" kindref="compound">Response</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>boundary</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>content_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2178" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="2178" bodyend="2193"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1accb2905616ea10b57a999fd34545a532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::write_multipart_ranges_data</definition>
        <argsstring>(Stream &amp;strm, const Request &amp;req, Response &amp;res, const std::string &amp;boundary, const std::string &amp;content_type, const T &amp;is_shutting_down)</argsstring>
        <name>write_multipart_ranges_data</name>
        <param>
          <type><ref refid="classhttplib_1_1_stream" kindref="compound">Stream</ref> &amp;</type>
          <declname>strm</declname>
        </param>
        <param>
          <type>const <ref refid="structhttplib_1_1_request" kindref="compound">Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="structhttplib_1_1_response" kindref="compound">Response</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>boundary</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>content_type</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>is_shutting_down</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2196" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="2196" bodyend="2209"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1afb79e1ea397a5aa249efe2a43d20790d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; size_t, size_t &gt;</type>
        <definition>std::pair&lt; size_t, size_t &gt; httplib::detail::get_range_offset_and_length</definition>
        <argsstring>(const Request &amp;req, const Response &amp;res, size_t index)</argsstring>
        <name>get_range_offset_and_length</name>
        <param>
          <type>const <ref refid="structhttplib_1_1_request" kindref="compound">Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>const <ref refid="structhttplib_1_1_response" kindref="compound">Response</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2212" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="2212" bodyend="2221"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a8cc06e1287343bb2231f8009621db60e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::expect_content</definition>
        <argsstring>(const Request &amp;req)</argsstring>
        <name>expect_content</name>
        <param>
          <type>const <ref refid="structhttplib_1_1_request" kindref="compound">Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2223" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="2223" bodyend="2230"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ab084360aabd1bb3ec5d12bda0e76e562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::has_crlf</definition>
        <argsstring>(const char *s)</argsstring>
        <name>has_crlf</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2232" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="2232" bodyend="2239"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1afee3db1610365627d4262ec3880bf2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CTX</type>
          </param>
          <param>
            <type>typename Init</type>
          </param>
          <param>
            <type>typename Update</type>
          </param>
          <param>
            <type>typename Final</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string httplib::detail::message_digest</definition>
        <argsstring>(const std::string &amp;s, Init init, Update update, Final final, size_t digest_length)</argsstring>
        <name>message_digest</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Init</type>
          <declname>init</declname>
        </param>
        <param>
          <type>Update</type>
          <declname>update</declname>
        </param>
        <param>
          <type>Final</type>
          <declname>final</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>digest_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2243" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="2243" bodyend="2259"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ae7c54c35fecc2c3043459ae4a3fb1d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::MD5</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>MD5</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2261" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="2261" bodyend="2264"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a184da4a92b5b672f6b9552fac14d3cdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::SHA_256</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>SHA_256</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2266" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="2266" bodyend="2269"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a33ba92b87e417e0cc28977e8d7486760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::SHA_512</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>SHA_512</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2271" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="2271" bodyend="2274"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a2caf4fbb8f5bf226843014099f966c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>std::pair&lt; std::string, std::string &gt; httplib::detail::make_digest_authentication_header</definition>
        <argsstring>(const Request &amp;req, const std::map&lt; std::string, std::string &gt; &amp;auth, size_t cnonce_count, const std::string &amp;cnonce, const std::string &amp;username, const std::string &amp;password, bool is_proxy=false)</argsstring>
        <name>make_digest_authentication_header</name>
        <param>
          <type>const <ref refid="structhttplib_1_1_request" kindref="compound">Request</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>auth</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cnonce_count</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cnonce</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>username</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>password</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_proxy</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2320" column="11" bodyfile="src/dpp/httplib.cpp" bodystart="2320" bodyend="2366"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a1852c9e2cbefaa5869d2a1a7c95ddb82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool httplib::detail::parse_www_authenticate</definition>
        <argsstring>(const Response &amp;res, std::map&lt; std::string, std::string &gt; &amp;auth, bool is_proxy)</argsstring>
        <name>parse_www_authenticate</name>
        <param>
          <type>const <ref refid="structhttplib_1_1_response" kindref="compound">Response</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, std::string &gt; &amp;</type>
          <declname>auth</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_proxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2369" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="2369" bodyend="2400"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1aa473f5aff2d646f2801456f003183b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string httplib::detail::random_string</definition>
        <argsstring>(size_t length)</argsstring>
        <name>random_string</name>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2403" column="13" bodyfile="src/dpp/httplib.cpp" bodystart="2403" bodyend="2414"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1ad7833c49ef4f17e86dbf495e69c6593d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void httplib::detail::duration_to_sec_and_usec</definition>
        <argsstring>(const T &amp;duration, U callback)</argsstring>
        <name>duration_to_sec_and_usec</name>
        <param>
          <type>const T &amp;</type>
          <declname>duration</declname>
        </param>
        <param>
          <type>U</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="2431" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="2431" bodyend="2437"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a34c5966f4aded3609a3e99c7ed55e4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>SSL *</type>
        <definition>SSL * httplib::detail::ssl_new</definition>
        <argsstring>(socket_t sock, SSL_CTX *ctx, std::mutex &amp;ctx_mutex, U SSL_connect_or_accept, V setup)</argsstring>
        <name>ssl_new</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>SSL_CTX *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>std::mutex &amp;</type>
          <declname>ctx_mutex</declname>
        </param>
        <param>
          <type>U</type>
          <declname>SSL_connect_or_accept</declname>
        </param>
        <param>
          <type>V</type>
          <declname>setup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="5062" column="5" bodyfile="src/dpp/httplib.cpp" bodystart="5062" bodyend="5090"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a6d88550e333ec626556c3954a38256d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void httplib::detail::ssl_delete</definition>
        <argsstring>(std::mutex &amp;ctx_mutex, SSL *ssl, bool shutdown_gracefully)</argsstring>
        <name>ssl_delete</name>
        <param>
          <type>std::mutex &amp;</type>
          <declname>ctx_mutex</declname>
        </param>
        <param>
          <type>SSL *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shutdown_gracefully</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="5092" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="5092" bodyend="5102"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1aa737da30efd3ad710601123db1d9c48a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::ssl_connect_or_accept_nonblocking</definition>
        <argsstring>(socket_t sock, SSL *ssl, U ssl_connect_or_accept, time_t timeout_sec, time_t timeout_usec)</argsstring>
        <name>ssl_connect_or_accept_nonblocking</name>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>SSL *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>U</type>
          <declname>ssl_connect_or_accept</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>timeout_usec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="5105" column="6" bodyfile="src/dpp/httplib.cpp" bodystart="5105" bodyend="5124"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a8e4c0a6816836e9c39703045c0ff66f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::process_server_socket_ssl</definition>
        <argsstring>(SSL *ssl, socket_t sock, size_t keep_alive_max_count, time_t keep_alive_timeout_sec, time_t read_timeout_sec, time_t read_timeout_usec, time_t write_timeout_sec, time_t write_timeout_usec, T callback)</argsstring>
        <name>process_server_socket_ssl</name>
        <param>
          <type>SSL *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>keep_alive_max_count</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>keep_alive_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>read_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>read_timeout_usec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>write_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>write_timeout_usec</declname>
        </param>
        <param>
          <type>T</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="5128" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="5128" bodyend="5140"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a09d4d73583f19fa0befcf8a99bbed123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool httplib::detail::process_client_socket_ssl</definition>
        <argsstring>(SSL *ssl, socket_t sock, time_t read_timeout_sec, time_t read_timeout_usec, time_t write_timeout_sec, time_t write_timeout_usec, T callback)</argsstring>
        <name>process_client_socket_ssl</name>
        <param>
          <type>SSL *</type>
          <declname>ssl</declname>
        </param>
        <param>
          <type>socket_t</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>read_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>read_timeout_usec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>write_timeout_sec</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>write_timeout_usec</declname>
        </param>
        <param>
          <type>T</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dpp/httplib.cpp" line="5144" column="1" bodyfile="src/dpp/httplib.cpp" bodystart="5144" bodyend="5150"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1a5c881a9e1290dee8ec75fff73976bbdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_array&lt; T &gt;::value, std::unique_ptr&lt; T &gt; &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_array&lt; T &gt;::value, std::unique_ptr&lt; T &gt; &gt;::type httplib::detail::make_unique</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>make_unique</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httplib.h" line="260" column="1" bodyfile="include/dpp/httplib.h" bodystart="260" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="namespacehttplib_1_1detail_1aad476144b9f04e958db83514b8b130ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_array&lt; T &gt;::value, std::unique_ptr&lt; T &gt; &gt;::type</type>
        <definition>std::enable_if&lt; std::is_array&lt; T &gt;::value, std::unique_ptr&lt; T &gt; &gt;::type httplib::detail::make_unique</definition>
        <argsstring>(std::size_t n)</argsstring>
        <name>make_unique</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httplib.h" line="266" column="1" bodyfile="include/dpp/httplib.h" bodystart="266" bodyend="269"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/dpp/httplib.cpp" line="13" column="1"/>
  </compounddef>
</doxygen>
