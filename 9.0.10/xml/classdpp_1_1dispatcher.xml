<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1dispatcher" kind="class" language="C++" prot="public">
    <compoundname>dpp::dispatcher</compoundname>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a3c5d2123f95b3fa326cecbadfb21fd5e" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1log__t" kindref="compound">log_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const log_t&amp; event)&gt; &gt; dpp::dispatcher::log</definition>
        <argsstring></argsstring>
        <name>log</name>
        <briefdescription>
<para>Event handler function pointer for log event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1510" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a8a4e1dc695163b793b15913d11cc43bb" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1voice__state__update__t" kindref="compound">voice_state_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const voice_state_update_t&amp; event)&gt; &gt; dpp::dispatcher::voice_state_update</definition>
        <argsstring></argsstring>
        <name>voice_state_update</name>
        <briefdescription>
<para>Event handler function pointer for voice state update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1514" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1adcccf35b317e4f076efe45bfd457983b" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1voice__client__speaking__t" kindref="compound">voice_client_speaking_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const voice_client_speaking_t&amp; event)&gt; &gt; dpp::dispatcher::voice_client_speaking</definition>
        <argsstring></argsstring>
        <name>voice_client_speaking</name>
        <briefdescription>
<para>Event handler function pointer for voice client speaking event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1518" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a61961e9339c0f4a1170868f6b7ed7194" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1voice__client__disconnect__t" kindref="compound">voice_client_disconnect_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const voice_client_disconnect_t&amp; event)&gt; &gt; dpp::dispatcher::voice_client_disconnect</definition>
        <argsstring></argsstring>
        <name>voice_client_disconnect</name>
        <briefdescription>
<para>Event handler function pointer for voice client disconnect event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1522" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a79bcd1a74e7884d48003a2141f3b36af" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1interaction__create__t" kindref="compound">interaction_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const interaction_create_t&amp; event)&gt; &gt; dpp::dispatcher::interaction_create</definition>
        <argsstring></argsstring>
        <name>interaction_create</name>
        <briefdescription>
<para>Event handler function pointer for interaction create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1526" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a05a20c2538323f31ed9988028ba63666" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1button__click__t" kindref="compound">button_click_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const button_click_t&amp; event)&gt; &gt; dpp::dispatcher::button_click</definition>
        <argsstring></argsstring>
        <name>button_click</name>
        <briefdescription>
<para>Event handler function pointer for button click event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1530" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1abf241cf313270a9953b4e124053f264a" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1autocomplete__t" kindref="compound">autocomplete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const autocomplete_t&amp; event)&gt; &gt; dpp::dispatcher::autocomplete</definition>
        <argsstring></argsstring>
        <name>autocomplete</name>
        <briefdescription>
<para>Event handler function pointer for autocomplete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1534" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a2b6be493f9a512099ad8b97a99bd31c4" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1select__click__t" kindref="compound">select_click_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const select_click_t&amp; event)&gt; &gt; dpp::dispatcher::select_click</definition>
        <argsstring></argsstring>
        <name>select_click</name>
        <briefdescription>
<para>Event handler function pointer for button click event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1538" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a184e24fddee585197aa3a5d7892ab3ef" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__delete__t" kindref="compound">guild_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_delete_t&amp; event)&gt; &gt; dpp::dispatcher::guild_delete</definition>
        <argsstring></argsstring>
        <name>guild_delete</name>
        <briefdescription>
<para>Event handler function pointer for guild delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1542" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aaf075ef20176c4aa88f2725db4388e6e" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1channel__delete__t" kindref="compound">channel_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const channel_delete_t&amp; event)&gt; &gt; dpp::dispatcher::channel_delete</definition>
        <argsstring></argsstring>
        <name>channel_delete</name>
        <briefdescription>
<para>Event handler function pointer for channel delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1546" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1af0e6123d54103826b70c07476c2fec7b" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1channel__update__t" kindref="compound">channel_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const channel_update_t&amp; event)&gt; &gt; dpp::dispatcher::channel_update</definition>
        <argsstring></argsstring>
        <name>channel_update</name>
        <briefdescription>
<para>Event handler function pointer for channel update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1550" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1afc7f9c12b4d85bab5c9f48d65b9dca0c" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1ready__t" kindref="compound">ready_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const ready_t&amp; event)&gt; &gt; dpp::dispatcher::ready</definition>
        <argsstring></argsstring>
        <name>ready</name>
        <briefdescription>
<para>Event handler function pointer for ready event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1554" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1adb73b297e756924eb916bdd9952049d3" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1message__delete__t" kindref="compound">message_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const message_delete_t&amp; event)&gt; &gt; dpp::dispatcher::message_delete</definition>
        <argsstring></argsstring>
        <name>message_delete</name>
        <briefdescription>
<para>Event handler function pointer for message delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1558" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1558" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a34948bd3500df94f46ec4d34aeda62d0" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1application__command__delete__t" kindref="compound">application_command_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const application_command_delete_t&amp; event)&gt; &gt; dpp::dispatcher::application_command_delete</definition>
        <argsstring></argsstring>
        <name>application_command_delete</name>
        <briefdescription>
<para>Event handler function pointer for application command delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1562" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a1161c6074a75e75f0fa6dbbffd9497bb" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__member__remove__t" kindref="compound">guild_member_remove_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_member_remove_t&amp; event)&gt; &gt; dpp::dispatcher::guild_member_remove</definition>
        <argsstring></argsstring>
        <name>guild_member_remove</name>
        <briefdescription>
<para>Event handler function pointer for guild member remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1566" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aeb2a00a58bc85e3790e5a91042ad9bda" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1application__command__create__t" kindref="compound">application_command_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const application_command_create_t&amp; event)&gt; &gt; dpp::dispatcher::application_command_create</definition>
        <argsstring></argsstring>
        <name>application_command_create</name>
        <briefdescription>
<para>Event handler function pointer for guild member remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1570" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a9e3cdfe53e040a1d1bdc5f009718b2c7" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1resumed__t" kindref="compound">resumed_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const resumed_t&amp; event)&gt; &gt; dpp::dispatcher::resumed</definition>
        <argsstring></argsstring>
        <name>resumed</name>
        <briefdescription>
<para>Event handler function pointer for resumed event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1574" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aa0956c66cac007db28bb0ae07eab0f62" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__role__create__t" kindref="compound">guild_role_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_role_create_t&amp; event)&gt; &gt; dpp::dispatcher::guild_role_create</definition>
        <argsstring></argsstring>
        <name>guild_role_create</name>
        <briefdescription>
<para>Event handler function pointer for guild role create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1578" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ac9816ef5ab72553cf3b1bf21d3aa1bae" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1typing__start__t" kindref="compound">typing_start_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const typing_start_t&amp; event)&gt; &gt; dpp::dispatcher::typing_start</definition>
        <argsstring></argsstring>
        <name>typing_start</name>
        <briefdescription>
<para>Event handler function pointer for typing start event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1582" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1abacf441e4ded4fbcf6ed9813fef505f4" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__add__t" kindref="compound">message_reaction_add_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const message_reaction_add_t&amp; event)&gt; &gt; dpp::dispatcher::message_reaction_add</definition>
        <argsstring></argsstring>
        <name>message_reaction_add</name>
        <briefdescription>
<para>Event handler function pointer for message reaction add event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1586" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aabf6376fd75f069782aa73358356d3a8" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__members__chunk__t" kindref="compound">guild_members_chunk_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_members_chunk_t&amp; event)&gt; &gt; dpp::dispatcher::guild_members_chunk</definition>
        <argsstring></argsstring>
        <name>guild_members_chunk</name>
        <briefdescription>
<para>Event handler function pointer for guild members chunk event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1590" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ae487f84d583974451b2ee0af3bb31372" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__t" kindref="compound">message_reaction_remove_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const message_reaction_remove_t&amp; event)&gt; &gt; dpp::dispatcher::message_reaction_remove</definition>
        <argsstring></argsstring>
        <name>message_reaction_remove</name>
        <briefdescription>
<para>Event handler function pointer for message reaction remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1594" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a743654de8aa12b54eb84eccdda73ea06" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__create__t" kindref="compound">guild_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_create_t&amp; event)&gt; &gt; dpp::dispatcher::guild_create</definition>
        <argsstring></argsstring>
        <name>guild_create</name>
        <briefdescription>
<para>Event handler function pointer for guild create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1598" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1adac986842056dd8e55ec63ed258b4335" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1channel__create__t" kindref="compound">channel_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const channel_create_t&amp; event)&gt; &gt; dpp::dispatcher::channel_create</definition>
        <argsstring></argsstring>
        <name>channel_create</name>
        <briefdescription>
<para>Event handler function pointer for guild channel create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1602" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1602" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a7f52253ee0387d79d8ab67c583973af3" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__emoji__t" kindref="compound">message_reaction_remove_emoji_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const message_reaction_remove_emoji_t&amp; event)&gt; &gt; dpp::dispatcher::message_reaction_remove_emoji</definition>
        <argsstring></argsstring>
        <name>message_reaction_remove_emoji</name>
        <briefdescription>
<para>Event handler function pointer for message reaction remove emoji event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1606" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a9f85e7d6428830057d353fae77c1ba49" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1message__delete__bulk__t" kindref="compound">message_delete_bulk_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const message_delete_bulk_t&amp; event)&gt; &gt; dpp::dispatcher::message_delete_bulk</definition>
        <argsstring></argsstring>
        <name>message_delete_bulk</name>
        <briefdescription>
<para>Event handler function pointer for message delete bulk event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1610" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a815e47232627fe35ad7e2c56af850399" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__role__update__t" kindref="compound">guild_role_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_role_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_role_update</definition>
        <argsstring></argsstring>
        <name>guild_role_update</name>
        <briefdescription>
<para>Event handler function pointer for guild role update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1614" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a82f0285098699cf7d94305f105bbd92c" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__role__delete__t" kindref="compound">guild_role_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_role_delete_t&amp; event)&gt; &gt; dpp::dispatcher::guild_role_delete</definition>
        <argsstring></argsstring>
        <name>guild_role_delete</name>
        <briefdescription>
<para>Event handler function pointer for guild role delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1618" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a516732a5a70e37b0c581f91316fe1d00" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1channel__pins__update__t" kindref="compound">channel_pins_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const channel_pins_update_t&amp; event)&gt; &gt; dpp::dispatcher::channel_pins_update</definition>
        <argsstring></argsstring>
        <name>channel_pins_update</name>
        <briefdescription>
<para>Event handler function pointer for channel pins update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1622" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aef2de58961fe73b36a093d9e638d2417" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1message__reaction__remove__all__t" kindref="compound">message_reaction_remove_all_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const message_reaction_remove_all_t&amp; event)&gt; &gt; dpp::dispatcher::message_reaction_remove_all</definition>
        <argsstring></argsstring>
        <name>message_reaction_remove_all</name>
        <briefdescription>
<para>Event handler function pointer for message reaction remove all event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1626" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1adac30934c94d016658a53fcacb3fa8ce" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1voice__server__update__t" kindref="compound">voice_server_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const voice_server_update_t&amp; event)&gt; &gt; dpp::dispatcher::voice_server_update</definition>
        <argsstring></argsstring>
        <name>voice_server_update</name>
        <briefdescription>
<para>Event handler function pointer for voice server update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1630" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aa283c9727c6baabd5716799c4d8a0a72" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__emojis__update__t" kindref="compound">guild_emojis_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_emojis_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_emojis_update</definition>
        <argsstring></argsstring>
        <name>guild_emojis_update</name>
        <briefdescription>
<para>Event handler function pointer for guild emojis update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1634" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a98d5d58c75a3b74066bc7d8f11411b80" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1presence__update__t" kindref="compound">presence_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const presence_update_t&amp; event)&gt; &gt; dpp::dispatcher::presence_update</definition>
        <argsstring></argsstring>
        <name>presence_update</name>
        <briefdescription>
<para>Event handler function pointer for presence update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1638" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a87a2dda728afdbb14b9879304692c38b" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1webhooks__update__t" kindref="compound">webhooks_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const webhooks_update_t&amp; event)&gt; &gt; dpp::dispatcher::webhooks_update</definition>
        <argsstring></argsstring>
        <name>webhooks_update</name>
        <briefdescription>
<para>Event handler function pointer for webhooks update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1642" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a7b7a694ffe711956d70354b0c74ab45b" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__member__add__t" kindref="compound">guild_member_add_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_member_add_t&amp; event)&gt; &gt; dpp::dispatcher::guild_member_add</definition>
        <argsstring></argsstring>
        <name>guild_member_add</name>
        <briefdescription>
<para>Event handler function pointer for guild member add event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1646" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a0bb42edacc0605b51ac0c98e34993a72" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1invite__delete__t" kindref="compound">invite_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const invite_delete_t&amp; event)&gt; &gt; dpp::dispatcher::invite_delete</definition>
        <argsstring></argsstring>
        <name>invite_delete</name>
        <briefdescription>
<para>Event handler function pointer for invite delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1650" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aa0451bdc1c724dae09c5f13c7f28ff1c" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__update__t" kindref="compound">guild_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_update</definition>
        <argsstring></argsstring>
        <name>guild_update</name>
        <briefdescription>
<para>Event handler function pointer for guild update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1654" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a353326fcd364b000b548b00d5027c5cb" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__integrations__update__t" kindref="compound">guild_integrations_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_integrations_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_integrations_update</definition>
        <argsstring></argsstring>
        <name>guild_integrations_update</name>
        <briefdescription>
<para>Event handler function pointer for guild integrations update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1658" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a3320bc97415413080deebe0f1a9c87bb" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__member__update__t" kindref="compound">guild_member_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_member_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_member_update</definition>
        <argsstring></argsstring>
        <name>guild_member_update</name>
        <briefdescription>
<para>Event handler function pointer for guild member update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1662" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1afd3dc6516fed71776d8685685d5b248f" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1application__command__update__t" kindref="compound">application_command_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const application_command_update_t&amp; event)&gt; &gt; dpp::dispatcher::application_command_update</definition>
        <argsstring></argsstring>
        <name>application_command_update</name>
        <briefdescription>
<para>Event handler function pointer for application command update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1666" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1afdf41cc2fb04d01a7e7d2cee33d091a2" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1invite__create__t" kindref="compound">invite_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const invite_create_t&amp; event)&gt; &gt; dpp::dispatcher::invite_create</definition>
        <argsstring></argsstring>
        <name>invite_create</name>
        <briefdescription>
<para>Event handler function pointer for invite create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1670" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1af41cd4f4efac8539fc8cd826aa78e9ac" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1message__update__t" kindref="compound">message_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const message_update_t&amp; event)&gt; &gt; dpp::dispatcher::message_update</definition>
        <argsstring></argsstring>
        <name>message_update</name>
        <briefdescription>
<para>Event handler function pointer for message update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1674" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ac1788ad2e0273a67a16fedb6f60ce705" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1user__update__t" kindref="compound">user_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const user_update_t&amp; event)&gt; &gt; dpp::dispatcher::user_update</definition>
        <argsstring></argsstring>
        <name>user_update</name>
        <briefdescription>
<para>Event handler function pointer for user update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1678" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a4e37a130ee6ea864d68c71364fdf0679" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1message__create__t" kindref="compound">message_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const message_create_t&amp; event)&gt; &gt; dpp::dispatcher::message_create</definition>
        <argsstring></argsstring>
        <name>message_create</name>
        <briefdescription>
<para>Event handler function pointer for message create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1682" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ac4bae48801252305b9be79eff95c9e32" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__ban__add__t" kindref="compound">guild_ban_add_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_ban_add_t&amp; event)&gt; &gt; dpp::dispatcher::guild_ban_add</definition>
        <argsstring></argsstring>
        <name>guild_ban_add</name>
        <briefdescription>
<para>Event handler function pointer for guild ban add event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1686" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a144159734344fb0f017beb89dc78700c" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__ban__remove__t" kindref="compound">guild_ban_remove_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_ban_remove_t&amp; event)&gt; &gt; dpp::dispatcher::guild_ban_remove</definition>
        <argsstring></argsstring>
        <name>guild_ban_remove</name>
        <briefdescription>
<para>Event handler function pointer for guild ban remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1690" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ad79c3fe23c449304ed4b2e95684d5b5e" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1integration__create__t" kindref="compound">integration_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const integration_create_t&amp; event)&gt; &gt; dpp::dispatcher::integration_create</definition>
        <argsstring></argsstring>
        <name>integration_create</name>
        <briefdescription>
<para>Event handler function pointer for integration create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1694" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a410ae92e5202595f4f9ad88da0883dee" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1integration__update__t" kindref="compound">integration_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const integration_update_t&amp; event)&gt; &gt; dpp::dispatcher::integration_update</definition>
        <argsstring></argsstring>
        <name>integration_update</name>
        <briefdescription>
<para>Event handler function pointer for integration update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1698" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aea2ae543a40f77594fc02a205b4c4f27" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1integration__delete__t" kindref="compound">integration_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const integration_delete_t&amp; event)&gt; &gt; dpp::dispatcher::integration_delete</definition>
        <argsstring></argsstring>
        <name>integration_delete</name>
        <briefdescription>
<para>Event handler function pointer for integration delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1702" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a93fb4c9dbe57fd1752bebfa79fe13cbf" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1thread__create__t" kindref="compound">thread_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const thread_create_t&amp; event)&gt; &gt; dpp::dispatcher::thread_create</definition>
        <argsstring></argsstring>
        <name>thread_create</name>
        <briefdescription>
<para>Event handler function pointer for thread create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1706" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1afa68e42c9e86ec9b4fef5001542ed383" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1thread__update__t" kindref="compound">thread_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const thread_update_t&amp; event)&gt; &gt; dpp::dispatcher::thread_update</definition>
        <argsstring></argsstring>
        <name>thread_update</name>
        <briefdescription>
<para>Event handler function pointer for thread update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1710" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a455076fa2c8d77b9e330c288797914ff" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1thread__delete__t" kindref="compound">thread_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const thread_delete_t&amp; event)&gt; &gt; dpp::dispatcher::thread_delete</definition>
        <argsstring></argsstring>
        <name>thread_delete</name>
        <briefdescription>
<para>Event handler function pointer for thread delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1714" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a90c53170eb551331c32636be713a4f0a" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1thread__list__sync__t" kindref="compound">thread_list_sync_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const thread_list_sync_t&amp; event)&gt; &gt; dpp::dispatcher::thread_list_sync</definition>
        <argsstring></argsstring>
        <name>thread_list_sync</name>
        <briefdescription>
<para>Event handler function pointer for thread list sync event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1718" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aee03d6e310265568fe86ccfa9a981536" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1thread__member__update__t" kindref="compound">thread_member_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const thread_member_update_t&amp; event)&gt; &gt; dpp::dispatcher::thread_member_update</definition>
        <argsstring></argsstring>
        <name>thread_member_update</name>
        <briefdescription>
<para>Event handler function pointer for thread member update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1722" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ab586d9a62ed55eb683dfb19196a91312" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1thread__members__update__t" kindref="compound">thread_members_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const thread_members_update_t&amp; event)&gt; &gt; dpp::dispatcher::thread_members_update</definition>
        <argsstring></argsstring>
        <name>thread_members_update</name>
        <briefdescription>
<para>Event handler function pointer for thread members update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1726" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1abf14ea127feaf24a52ede1ea6a13a40c" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1voice__buffer__send__t" kindref="compound">voice_buffer_send_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const voice_buffer_send_t&amp; event)&gt; &gt; dpp::dispatcher::voice_buffer_send</definition>
        <argsstring></argsstring>
        <name>voice_buffer_send</name>
        <briefdescription>
<para>Event handler function pointer for voice buffer send event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1730" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ac6784adeb28f894639b946d8abb01caa" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1voice__user__talking__t" kindref="compound">voice_user_talking_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const voice_user_talking_t&amp; event)&gt; &gt; dpp::dispatcher::voice_user_talking</definition>
        <argsstring></argsstring>
        <name>voice_user_talking</name>
        <briefdescription>
<para>Event handler function pointer for voice user talking event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1734" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a468a7dac19cc70fc751934cba6a422cd" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1voice__ready__t" kindref="compound">voice_ready_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const voice_ready_t&amp; event)&gt; &gt; dpp::dispatcher::voice_ready</definition>
        <argsstring></argsstring>
        <name>voice_ready</name>
        <briefdescription>
<para>Event handler function pointer for voice ready event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1738" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1acd5dae7ed0e497de5c444f791f60e040" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1voice__receive__t" kindref="compound">voice_receive_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const voice_receive_t&amp; event)&gt; &gt; dpp::dispatcher::voice_receive</definition>
        <argsstring></argsstring>
        <name>voice_receive</name>
        <briefdescription>
<para>Event handler function pointer for voice receive event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1742" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a364dc2a7fed037263842a1874d1e4f03" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1voice__track__marker__t" kindref="compound">voice_track_marker_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const voice_track_marker_t&amp; event)&gt; &gt; dpp::dispatcher::voice_track_marker</definition>
        <argsstring></argsstring>
        <name>voice_track_marker</name>
        <briefdescription>
<para>Event handler function pointer for voice track marker event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1746" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1af69acca6f61d2ad66f067bad0954d3b8" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__join__request__delete__t" kindref="compound">guild_join_request_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_join_request_delete_t&amp; event)&gt; &gt; dpp::dispatcher::guild_join_request_delete</definition>
        <argsstring></argsstring>
        <name>guild_join_request_delete</name>
        <briefdescription>
<para>Event handler function pointer for guild join request delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1750" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1aaf9ee726ea86d9f387e61c1a44a065c3" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__create__t" kindref="compound">stage_instance_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const stage_instance_create_t&amp; event)&gt; &gt; dpp::dispatcher::stage_instance_create</definition>
        <argsstring></argsstring>
        <name>stage_instance_create</name>
        <briefdescription>
<para>Event handler function pointer for stage instance create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1754" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a639deef1b761b445fd1861e5a72acd38" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__update__t" kindref="compound">stage_instance_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const stage_instance_update_t&amp; event)&gt; &gt; dpp::dispatcher::stage_instance_update</definition>
        <argsstring></argsstring>
        <name>stage_instance_update</name>
        <briefdescription>
<para>Event handler function pointer for stage instance update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1758" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a891479ac768772fe30985989e7664cbd" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1stage__instance__delete__t" kindref="compound">stage_instance_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const stage_instance_delete_t&amp; event)&gt; &gt; dpp::dispatcher::stage_instance_delete</definition>
        <argsstring></argsstring>
        <name>stage_instance_delete</name>
        <briefdescription>
<para>Event handler function pointer for stage instance delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1762" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a5500b887b34d78ceead2b09200685092" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__stickers__update__t" kindref="compound">guild_stickers_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_stickers_update_t&amp; event)&gt; &gt; dpp::dispatcher::stickers_update</definition>
        <argsstring></argsstring>
        <name>stickers_update</name>
        <briefdescription>
<para>Event handler function pointer for guild sticker update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1766" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a43c59b912d5ea5febb8b398ecfa43a73" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__scheduled__event__create__t" kindref="compound">guild_scheduled_event_create_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_scheduled_event_create_t&amp; event)&gt; &gt; dpp::dispatcher::guild_scheduled_event_create</definition>
        <argsstring></argsstring>
        <name>guild_scheduled_event_create</name>
        <briefdescription>
<para>Event handler function pointer for guild scheduled event create event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1770" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a68f301b91cd55c30188c56d3967c7f67" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__scheduled__event__update__t" kindref="compound">guild_scheduled_event_update_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_scheduled_event_update_t&amp; event)&gt; &gt; dpp::dispatcher::guild_scheduled_event_update</definition>
        <argsstring></argsstring>
        <name>guild_scheduled_event_update</name>
        <briefdescription>
<para>Event handler function pointer for guild scheduled event update event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1774" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1774" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1a41dcfbe906f739db0ae6464b98016f87" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__scheduled__event__delete__t" kindref="compound">guild_scheduled_event_delete_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_scheduled_event_delete_t&amp; event)&gt; &gt; dpp::dispatcher::guild_scheduled_event_delete</definition>
        <argsstring></argsstring>
        <name>guild_scheduled_event_delete</name>
        <briefdescription>
<para>Event handler function pointer for guild scheduled event delete event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1778" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1ae3af724230c0297a2ae3bf8cd3e73bee" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__scheduled__event__user__add__t" kindref="compound">guild_scheduled_event_user_add_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_scheduled_event_user_add_t&amp; event)&gt; &gt; dpp::dispatcher::guild_scheduled_event_user_add</definition>
        <argsstring></argsstring>
        <name>guild_scheduled_event_user_add</name>
        <briefdescription>
<para>Event handler function pointer for guild scheduled event user add event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1782" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1dispatcher_1abe56b3650d526833fb8805e703b775f0" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a4641626be7775de0b8b63a6e68d0934e" kindref="member">event_handle</ref>, std::function&lt; void(const <ref refid="structdpp_1_1guild__scheduled__event__user__remove__t" kindref="compound">guild_scheduled_event_user_remove_t</ref> &amp;event)&gt; &gt;</type>
        <definition>std::map&lt;event_handle, std::function&lt;void(const guild_scheduled_event_user_remove_t&amp; event)&gt; &gt; dpp::dispatcher::guild_scheduled_event_user_remove</definition>
        <argsstring></argsstring>
        <name>guild_scheduled_event_user_remove</name>
        <briefdescription>
<para>Event handler function pointer for guild scheduled event user remove event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="1786" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="1786" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The dispatcher class contains a set of std::functions representing hooked events that the user code is interested in. These are modified via the on_eventname style methods in the cluster class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="2" relation="usage">
          <edgelabel>application_command_create</edgelabel>
          <edgelabel>application_command_delete</edgelabel>
          <edgelabel>application_command_update</edgelabel>
          <edgelabel>autocomplete</edgelabel>
          <edgelabel>button_click</edgelabel>
          <edgelabel>channel_create</edgelabel>
          <edgelabel>channel_delete</edgelabel>
          <edgelabel>channel_pins_update</edgelabel>
          <edgelabel>channel_update</edgelabel>
          <edgelabel>guild_ban_add</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>map&lt;</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dispatcher.h" line="1505" column="1" bodyfile="include/dpp/dispatcher.h" bodystart="1505" bodyend="1787"/>
    <listofallmembers>
      <member refid="classdpp_1_1dispatcher_1aeb2a00a58bc85e3790e5a91042ad9bda" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>application_command_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a34948bd3500df94f46ec4d34aeda62d0" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>application_command_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1afd3dc6516fed71776d8685685d5b248f" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>application_command_update</name></member>
      <member refid="classdpp_1_1dispatcher_1abf241cf313270a9953b4e124053f264a" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>autocomplete</name></member>
      <member refid="classdpp_1_1dispatcher_1a05a20c2538323f31ed9988028ba63666" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>button_click</name></member>
      <member refid="classdpp_1_1dispatcher_1adac986842056dd8e55ec63ed258b4335" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_create</name></member>
      <member refid="classdpp_1_1dispatcher_1aaf075ef20176c4aa88f2725db4388e6e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a516732a5a70e37b0c581f91316fe1d00" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_pins_update</name></member>
      <member refid="classdpp_1_1dispatcher_1af0e6123d54103826b70c07476c2fec7b" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>channel_update</name></member>
      <member refid="classdpp_1_1dispatcher_1ac4bae48801252305b9be79eff95c9e32" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_ban_add</name></member>
      <member refid="classdpp_1_1dispatcher_1a144159734344fb0f017beb89dc78700c" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_ban_remove</name></member>
      <member refid="classdpp_1_1dispatcher_1a743654de8aa12b54eb84eccdda73ea06" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a184e24fddee585197aa3a5d7892ab3ef" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1aa283c9727c6baabd5716799c4d8a0a72" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_emojis_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a353326fcd364b000b548b00d5027c5cb" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_integrations_update</name></member>
      <member refid="classdpp_1_1dispatcher_1af69acca6f61d2ad66f067bad0954d3b8" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_join_request_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a7b7a694ffe711956d70354b0c74ab45b" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_member_add</name></member>
      <member refid="classdpp_1_1dispatcher_1a1161c6074a75e75f0fa6dbbffd9497bb" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_member_remove</name></member>
      <member refid="classdpp_1_1dispatcher_1a3320bc97415413080deebe0f1a9c87bb" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_member_update</name></member>
      <member refid="classdpp_1_1dispatcher_1aabf6376fd75f069782aa73358356d3a8" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_members_chunk</name></member>
      <member refid="classdpp_1_1dispatcher_1aa0956c66cac007db28bb0ae07eab0f62" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_role_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a82f0285098699cf7d94305f105bbd92c" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_role_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a815e47232627fe35ad7e2c56af850399" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_role_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a43c59b912d5ea5febb8b398ecfa43a73" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_scheduled_event_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a41dcfbe906f739db0ae6464b98016f87" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_scheduled_event_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a68f301b91cd55c30188c56d3967c7f67" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_scheduled_event_update</name></member>
      <member refid="classdpp_1_1dispatcher_1ae3af724230c0297a2ae3bf8cd3e73bee" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_scheduled_event_user_add</name></member>
      <member refid="classdpp_1_1dispatcher_1abe56b3650d526833fb8805e703b775f0" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_scheduled_event_user_remove</name></member>
      <member refid="classdpp_1_1dispatcher_1aa0451bdc1c724dae09c5f13c7f28ff1c" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>guild_update</name></member>
      <member refid="classdpp_1_1dispatcher_1ad79c3fe23c449304ed4b2e95684d5b5e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>integration_create</name></member>
      <member refid="classdpp_1_1dispatcher_1aea2ae543a40f77594fc02a205b4c4f27" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>integration_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a410ae92e5202595f4f9ad88da0883dee" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>integration_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a79bcd1a74e7884d48003a2141f3b36af" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>interaction_create</name></member>
      <member refid="classdpp_1_1dispatcher_1afdf41cc2fb04d01a7e7d2cee33d091a2" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>invite_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a0bb42edacc0605b51ac0c98e34993a72" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>invite_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a3c5d2123f95b3fa326cecbadfb21fd5e" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>log</name></member>
      <member refid="classdpp_1_1dispatcher_1a4e37a130ee6ea864d68c71364fdf0679" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_create</name></member>
      <member refid="classdpp_1_1dispatcher_1adb73b297e756924eb916bdd9952049d3" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a9f85e7d6428830057d353fae77c1ba49" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_delete_bulk</name></member>
      <member refid="classdpp_1_1dispatcher_1abacf441e4ded4fbcf6ed9813fef505f4" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_add</name></member>
      <member refid="classdpp_1_1dispatcher_1ae487f84d583974451b2ee0af3bb31372" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_remove</name></member>
      <member refid="classdpp_1_1dispatcher_1aef2de58961fe73b36a093d9e638d2417" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_remove_all</name></member>
      <member refid="classdpp_1_1dispatcher_1a7f52253ee0387d79d8ab67c583973af3" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_reaction_remove_emoji</name></member>
      <member refid="classdpp_1_1dispatcher_1af41cd4f4efac8539fc8cd826aa78e9ac" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>message_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a98d5d58c75a3b74066bc7d8f11411b80" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>presence_update</name></member>
      <member refid="classdpp_1_1dispatcher_1afc7f9c12b4d85bab5c9f48d65b9dca0c" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>ready</name></member>
      <member refid="classdpp_1_1dispatcher_1a9e3cdfe53e040a1d1bdc5f009718b2c7" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>resumed</name></member>
      <member refid="classdpp_1_1dispatcher_1a2b6be493f9a512099ad8b97a99bd31c4" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>select_click</name></member>
      <member refid="classdpp_1_1dispatcher_1aaf9ee726ea86d9f387e61c1a44a065c3" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stage_instance_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a891479ac768772fe30985989e7664cbd" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stage_instance_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a639deef1b761b445fd1861e5a72acd38" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stage_instance_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a5500b887b34d78ceead2b09200685092" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>stickers_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a93fb4c9dbe57fd1752bebfa79fe13cbf" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_create</name></member>
      <member refid="classdpp_1_1dispatcher_1a455076fa2c8d77b9e330c288797914ff" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_delete</name></member>
      <member refid="classdpp_1_1dispatcher_1a90c53170eb551331c32636be713a4f0a" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_list_sync</name></member>
      <member refid="classdpp_1_1dispatcher_1aee03d6e310265568fe86ccfa9a981536" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_member_update</name></member>
      <member refid="classdpp_1_1dispatcher_1ab586d9a62ed55eb683dfb19196a91312" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_members_update</name></member>
      <member refid="classdpp_1_1dispatcher_1afa68e42c9e86ec9b4fef5001542ed383" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>thread_update</name></member>
      <member refid="classdpp_1_1dispatcher_1ac9816ef5ab72553cf3b1bf21d3aa1bae" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>typing_start</name></member>
      <member refid="classdpp_1_1dispatcher_1ac1788ad2e0273a67a16fedb6f60ce705" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>user_update</name></member>
      <member refid="classdpp_1_1dispatcher_1abf14ea127feaf24a52ede1ea6a13a40c" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_buffer_send</name></member>
      <member refid="classdpp_1_1dispatcher_1a61961e9339c0f4a1170868f6b7ed7194" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_client_disconnect</name></member>
      <member refid="classdpp_1_1dispatcher_1adcccf35b317e4f076efe45bfd457983b" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_client_speaking</name></member>
      <member refid="classdpp_1_1dispatcher_1a468a7dac19cc70fc751934cba6a422cd" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_ready</name></member>
      <member refid="classdpp_1_1dispatcher_1acd5dae7ed0e497de5c444f791f60e040" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_receive</name></member>
      <member refid="classdpp_1_1dispatcher_1adac30934c94d016658a53fcacb3fa8ce" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_server_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a8a4e1dc695163b793b15913d11cc43bb" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_state_update</name></member>
      <member refid="classdpp_1_1dispatcher_1a364dc2a7fed037263842a1874d1e4f03" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_track_marker</name></member>
      <member refid="classdpp_1_1dispatcher_1ac6784adeb28f894639b946d8abb01caa" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>voice_user_talking</name></member>
      <member refid="classdpp_1_1dispatcher_1a87a2dda728afdbb14b9879304692c38b" prot="public" virt="non-virtual"><scope>dpp::dispatcher</scope><name>webhooks_update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
