<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1https__client" kind="class" language="C++" prot="public">
    <compoundname>dpp::https_client</compoundname>
    <basecompoundref refid="classdpp_1_1ssl__client" prot="public" virt="non-virtual">dpp::ssl_client</basecompoundref>
    <includes local="no">httpsclient.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1https__client_1a8c7302f1e9384a125f8a1f757b4329b3" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::https_client::body</definition>
        <argsstring></argsstring>
        <name>body</name>
        <briefdescription>
<para>The response body, e.g. file content or JSON. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="157" column="13" bodyfile="include/dpp/httpsclient.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1a7c1571db23c5f1c8b711a11edfd03c90" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t dpp::https_client::chunk_receive</definition>
        <argsstring></argsstring>
        <name>chunk_receive</name>
        <briefdescription>
<para>Number of bytes received in current chunk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="200" column="8" bodyfile="include/dpp/httpsclient.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1ac3eb2f3a3d044fc3151dd43fdf883c3a" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t dpp::https_client::chunk_size</definition>
        <argsstring></argsstring>
        <name>chunk_size</name>
        <briefdescription>
<para>Size of current chunk. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="195" column="8" bodyfile="include/dpp/httpsclient.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1a463fe015fba652aa875a7d604413b8d2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::https_client::chunked</definition>
        <argsstring></argsstring>
        <name>chunked</name>
        <briefdescription>
<para>If true the content is chunked encoding. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="190" column="6" bodyfile="include/dpp/httpsclient.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1aebb96d5bc879c002d7d824e04d2a78e7" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::https_client::content_length</definition>
        <argsstring></argsstring>
        <name>content_length</name>
        <briefdescription>
<para>The reported length of the content. If this is UULONG_MAX, then no length was reported by the server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="163" column="10" bodyfile="include/dpp/httpsclient.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1acc0b3c8c11a8483ef4462c796a7ab08e" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::https_client::http_protocol</definition>
        <argsstring></argsstring>
        <name>http_protocol</name>
        <briefdescription>
<para>The HTTP protocol to use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="180" column="13" bodyfile="include/dpp/httpsclient.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1a189161c0e29555a46af0d7afe7bf61e1" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::https_client::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
<para>Path part of URL for HTTPS connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="147" column="13" bodyfile="include/dpp/httpsclient.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1aedc9891569179988fc462daf824a1685" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::https_client::request_body</definition>
        <argsstring></argsstring>
        <name>request_body</name>
        <briefdescription>
<para>The request body, e.g. form data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="152" column="13" bodyfile="include/dpp/httpsclient.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1a5a7a9866a0f7cb682256400cfebe6015" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a4dbbdf54366910bacd95554ccbc705a2" kindref="member">http_headers</ref></type>
        <definition>http_headers dpp::https_client::request_headers</definition>
        <argsstring></argsstring>
        <name>request_headers</name>
        <briefdescription>
<para>Headers for the request, e.g. Authorization, etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="168" column="14" bodyfile="include/dpp/httpsclient.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1a899530fc5452a27010b3ea4a5e745e83" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::https_client::request_type</definition>
        <argsstring></argsstring>
        <name>request_type</name>
        <briefdescription>
<para>The type of the request, e.g. GET, POST. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="142" column="13" bodyfile="include/dpp/httpsclient.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1af4ee11452af6dc6baa3c095a3c915281" prot="private" static="no" mutable="no">
        <type>std::multimap&lt; std::string, std::string &gt;</type>
        <definition>std::multimap&lt;std::string, std::string&gt; dpp::https_client::response_headers</definition>
        <argsstring></argsstring>
        <name>response_headers</name>
        <briefdescription>
<para>Headers from the server&apos;s response, e.g. RateLimit headers, cookies, etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="206" column="15" bodyfile="include/dpp/httpsclient.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1ad8d80fde390cd6307e0c5008c0ad45d5" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::https_client::status</definition>
        <argsstring></argsstring>
        <name>status</name>
        <briefdescription>
<para>The status of the HTTP request from the server, e.g. 200 for OK, 404 for not found. A value of 0 means no request has been completed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="175" column="10" bodyfile="include/dpp/httpsclient.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1a1e85d7cad322c90c719f4434abfa1438" prot="private" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::https_client::timeout</definition>
        <argsstring></argsstring>
        <name>timeout</name>
        <briefdescription>
<para>Time at which the request should be abandoned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="185" column="8" bodyfile="include/dpp/httpsclient.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1https__client_1aea80273dc2bcdd9c55ef99f8a3ecadd5" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1af597d5e0f7483338956d105bbcfd9b63" kindref="member">https_client_completion_event</ref></type>
        <definition>https_client_completion_event dpp::https_client::completed</definition>
        <argsstring></argsstring>
        <name>completed</name>
        <briefdescription>
<para>Function to call when HTTP request is completed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="229" column="31" bodyfile="include/dpp/httpsclient.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1ac8997404ef91c501c3e8ae1079e89152" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::keepalive</definition>
        <argsstring></argsstring>
        <name>keepalive</name>
        <briefdescription>
<para>True if we are keeping the connection alive after it has finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="278" column="6" bodyfile="include/dpp/sslclient.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a16fdc0f7005b8ba56ecc46beec4cad1c" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
        <definition>class cluster* dpp::ssl_client::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
<para>Owning cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="283" column="15" bodyfile="include/dpp/sslclient.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1ad987631fa443685b10b7b46c3e9472d5" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1aaaa159f13811e8d13973c2794e171091" kindref="member">http_state</ref></type>
        <definition>http_state dpp::https_client::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
<para>Current connection state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="234" column="12" bodyfile="include/dpp/httpsclient.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1https__client_1a692403cf275abe733f85fb5a0eff9e55" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::https_client::timed_out</definition>
        <argsstring></argsstring>
        <name>timed_out</name>
        <briefdescription>
<para>If true the response timed out while waiting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="224" column="6" bodyfile="include/dpp/httpsclient.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1https__client_1ae14f32471d065d5a72b40da01731cb71" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::https_client::connect</definition>
        <argsstring>() override</argsstring>
        <name>connect</name>
        <reimplements refid="classdpp_1_1ssl__client_1a9a5168edeb1901d62aecf273c28f03ca">connect</reimplements>
        <briefdescription>
<para>Start the connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="212" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a96739f7abe24b9d7b17f67dc32a91399" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::do_raw_trace</definition>
        <argsstring>(const std::string &amp;message) const</argsstring>
        <name>do_raw_trace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>If raw_trace is set to true, log a debug message for this connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>debug message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="236" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1af0b48879cca3f23df33cbad1cc73f7d2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1aaaa159f13811e8d13973c2794e171091" kindref="member">http_state</ref></type>
        <definition>http_state dpp::https_client::get_state</definition>
        <argsstring>()</argsstring>
        <name>get_state</name>
        <briefdescription>
<para>Get request state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>request state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="218" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1https__client_1a52ed26cfbff8e2cfb17fddffa8e8e9a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::https_client::https_client</definition>
        <argsstring>(cluster *creator, const std::string &amp;hostname, uint16_t port=443, const std::string &amp;urlpath=&quot;/&quot;, const std::string &amp;verb=&quot;GET&quot;, const std::string &amp;req_body=&quot;&quot;, const http_headers &amp;extra_headers={}, bool plaintext_connection=false, uint16_t request_timeout=5, const std::string &amp;protocol=&quot;1.1&quot;, https_client_completion_event done={})</argsstring>
        <name>https_client</name>
        <param>
          <type><ref refid="classdpp_1_1cluster" kindref="compound">cluster</ref> *</type>
          <declname>creator</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
          <defval>443</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>urlpath</declname>
          <defval>&quot;/&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>verb</declname>
          <defval>&quot;GET&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>req_body</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a4dbbdf54366910bacd95554ccbc705a2" kindref="member">http_headers</ref> &amp;</type>
          <declname>extra_headers</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>plaintext_connection</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>request_timeout</declname>
          <defval>5</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>protocol</declname>
          <defval>&quot;1.1&quot;</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1af597d5e0f7483338956d105bbcfd9b63" kindref="member">https_client_completion_event</ref></type>
          <declname>done</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Connect to a specific HTTP(S) server and complete a request. </para>
        </briefdescription>
        <detaileddescription>
<para>The constructor will attempt the connection, and return the content. By the time the constructor completes, the HTTP request will be stored in the object.</para>
<para><simplesect kind="note"><para>This is a blocking call. It starts a loop which runs non-blocking functions within it, but does not return until the request completes. See queues.cpp for how to make this asynchronous.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>Hostname to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Port number to connect to, usually 443 for SSL and 80 for plaintext </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>urlpath</parametername>
</parameternamelist>
<parameterdescription>
<para>path part of URL, e.g. &quot;/api&quot; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verb</parametername>
</parameternamelist>
<parameterdescription>
<para>Request verb, e.g. GET or POST </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>req_body</parametername>
</parameternamelist>
<parameterdescription>
<para>Request body, use <ref refid="classdpp_1_1https__client_1aa4e20ece223207e62c1006dcadfbe2a9" kindref="member">dpp::https_client::build_multipart()</ref> to build a multipart MIME body (e.g. for multiple file upload) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_headers</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional request headers, e.g. user-agent, authorization, etc </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plaintext_connection</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true to make the connection plaintext (turns off SSL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>request_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>How many seconds before the connection is considered failed if not finished </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>Request HTTP protocol (default: 1.1) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>done</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when <ref refid="classdpp_1_1https__client" kindref="compound">https_client</ref> request is completed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="258" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1a327d83e594b36de04bf58d5ab8258b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::https_client::~https_client</definition>
        <argsstring>() override</argsstring>
        <name>~https_client</name>
        <briefdescription>
<para>Destroy the https client object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="263" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1aa70a2d6c3665c57f3e96d0a56cab48c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::https_client::close</definition>
        <argsstring>() override</argsstring>
        <name>close</name>
        <reimplements refid="classdpp_1_1ssl__client_1ae85df4b13fa64d701fb09f2bf44f100e">close</reimplements>
        <briefdescription>
<para>Close HTTPS socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="286" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1adf054c481a7d9e804462db5b726af2e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::complete_handshake</definition>
        <argsstring>(const struct socket_events *ev)</argsstring>
        <name>complete_handshake</name>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">socket_events</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Called while SSL handshake is in progress. If the handshake completes, the state of the socket is progressed to an established state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events for the socket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="342" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a0da035d84f8d82c9741db0fcf8fc1cbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::enable_raw_tracing</definition>
        <argsstring>()</argsstring>
        <name>enable_raw_tracing</name>
        <briefdescription>
<para>For low-level debugging, calling this function will enable low level I/O logging for this connection to the logger. This can be very loud, and output a lot of data, so only enable it selectively where you need it. </para>
        </briefdescription>
        <detaileddescription>
<para>Generally, you won&apos;t need this, it is a library development utility. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="247" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1afa5d5654ce0b631d07045088ef347418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::get_bytes_in</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_in</name>
        <briefdescription>
<para>Get total bytes received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="259" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1aad4da6489c8f08030ca49c060a23740a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::get_bytes_out</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_out</name>
        <briefdescription>
<para>Get the bytes out objectGet total bytes sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes sent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="253" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1abf247ed0871e89e6a319c95841a315bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::get_cipher</definition>
        <argsstring>()</argsstring>
        <name>get_cipher</name>
        <briefdescription>
<para>Get SSL cipher name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string ssl cipher name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="273" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1affac629e0843afcdc9a77351a550d6be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string dpp::https_client::get_content</definition>
        <argsstring>() const</argsstring>
        <name>get_content</name>
        <briefdescription>
<para>Get the response content. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>response content </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="333" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1a58d8ae5c9949d7b066dbbc6fb2c13a77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string dpp::https_client::get_header</definition>
        <argsstring>(std::string header_name) const</argsstring>
        <name>get_header</name>
        <param>
          <type>std::string</type>
          <declname>header_name</declname>
        </param>
        <briefdescription>
<para>Get a HTTP response header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Header name to find, case insensitive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Header content or empty string if not found. If multiple values have the same header_name, this will return one of them. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1https__client_1a0c19fdc08d1d8cedcdd357af3f23e790" kindref="member">get_header_count</ref> to determine if multiple are present </para>
</simplesect>
<simplesect kind="see"><para><ref refid="classdpp_1_1https__client_1ad9b018960ad5f7687b48ee3a6bc99bb8" kindref="member">get_header_list</ref> to retrieve all entries of the same header_name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="302" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1a0c19fdc08d1d8cedcdd357af3f23e790" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::https_client::get_header_count</definition>
        <argsstring>(std::string header_name) const</argsstring>
        <name>get_header_count</name>
        <param>
          <type>std::string</type>
          <declname>header_name</declname>
        </param>
        <briefdescription>
<para>Get the number of headers with the same header name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header_name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of headers with this count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="310" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1ad9b018960ad5f7687b48ee3a6bc99bb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::list&lt; std::string &gt;</type>
        <definition>const std::list&lt; std::string &gt; dpp::https_client::get_header_list</definition>
        <argsstring>(std::string header_name) const</argsstring>
        <name>get_header_list</name>
        <param>
          <type>std::string</type>
          <declname>header_name</declname>
        </param>
        <briefdescription>
<para>Get a set of HTTP response headers with a common name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>header_name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of headers with the same name, or an empty list if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="319" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1acecf3bc12787b4115de00a4977d86c90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::multimap&lt; std::string, std::string &gt;</type>
        <definition>const std::multimap&lt; std::string, std::string &gt; dpp::https_client::get_headers</definition>
        <argsstring>() const</argsstring>
        <name>get_headers</name>
        <briefdescription>
<para>Get all HTTP response headers. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>headers as a map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="326" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1aad457d811e2b8655eef18d2f3b76e076" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t dpp::https_client::get_status</definition>
        <argsstring>() const</argsstring>
        <name>get_status</name>
        <briefdescription>
<para>Get the response HTTP status, e.g. 200 for OK, 404 for not found, 429 for rate limited. A value of 0 indicates the request was not completed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint16_t HTTP status </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="342" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1af74793d8ea8e6a4389d97cc72f9e1c4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::get_unique_id</definition>
        <argsstring>() const</argsstring>
        <name>get_unique_id</name>
        <briefdescription>
<para>Every request made has a unique ID. This increments for every request, starting at 1. You can use this for statistics, or to associate requests and replies in external event loops. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Unique ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="267" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1ae247d12f198e690590532ee86958cae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::https_client::handle_buffer</definition>
        <argsstring>(std::string &amp;buffer) override</argsstring>
        <name>handle_buffer</name>
        <reimplements refid="classdpp_1_1ssl__client_1a0100372dd4c32d9faddaf69fffda7cfc">handle_buffer</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Processes incoming data from the SSL socket input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents. Can modify this value removing the head elements when processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="281" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a945ccd04f376174a64c0cceffca3bbcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::ssl_client::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const</argsstring>
        <name>log</name>
        <reimplementedby refid="classdpp_1_1discord__client_1ac8c04aa0b82c13324c8a4fe9dc3f697e">log</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a6a4111094ce256554beac3523b660822">log</reimplementedby>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>severity of log message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="334" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a0382a16a566b1ae091b5667ba98df42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::on_error</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;, int error_code)</argsstring>
        <name>on_error</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
        </param>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <briefdescription>
<para>Called when there is an error on the TCP socket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="363" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a25b211229c4109489f68251e7d86a952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::on_read</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;ev)</argsstring>
        <name>on_read</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
<para>Called when the TCP socket has data to read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="349" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a6f443e1b2f4ed33458eee2576f7015e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::on_write</definition>
        <argsstring>(dpp::socket fd, const struct dpp::socket_events &amp;e)</argsstring>
        <name>on_write</name>
        <param>
          <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const struct <ref refid="structdpp_1_1socket__events" kindref="compound">dpp::socket_events</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Called when the TCP socket can be written to without blocking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>File descriptor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket events </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="356" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1ae0cd5a31a4739ad2d1be843597fa7ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::https_client::one_second_timer</definition>
        <argsstring>() override</argsstring>
        <name>one_second_timer</name>
        <reimplements refid="classdpp_1_1ssl__client_1a5028e720508fcb82533ce838dcea5f2e">one_second_timer</reimplements>
        <briefdescription>
<para>Fires every second from the underlying socket I/O loop, used for timeouts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="291" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::read_loop</definition>
        <argsstring>()</argsstring>
        <name>read_loop</name>
        <briefdescription>
<para>Set up non blocking I/O and configure on_read, on_write and on_error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::exception</parametername>
</parameternamelist>
<parameterdescription>
<para>Any std::exception (or derivative) thrown from <ref refid="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" kindref="member">read_loop()</ref> indicates setup failed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="302" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a5e8f5c577083d2a6b7e4f6558f29962f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::socket_write</definition>
        <argsstring>(const std::string_view data)</argsstring>
        <name>socket_write</name>
        <param>
          <type>const std::string_view</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write to the output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written to the buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The data may not be written immediately and may be written at a later time to the socket. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="322" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classdpp_1_1https__client_1aa4e20ece223207e62c1006dcadfbe2a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1multipart__content" kindref="compound">multipart_content</ref></type>
        <definition>static multipart_content dpp::https_client::build_multipart</definition>
        <argsstring>(const std::string &amp;json, const std::vector&lt; std::string &gt; &amp;filenames={}, const std::vector&lt; std::string &gt; &amp;contents={}, const std::vector&lt; std::string &gt; &amp;mimetypes={})</argsstring>
        <name>build_multipart</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>filenames</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>contents</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>mimetypes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Build a multipart content from a set of files and some json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The json content </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>filenames</parametername>
</parameternamelist>
<parameterdescription>
<para>File names of files to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contents</parametername>
</parameternamelist>
<parameterdescription>
<para>Contents of each of the files to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mimetypes</parametername>
</parameternamelist>
<parameterdescription>
<para>MIME types of each of the files to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>multipart mime content and headers </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="274" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1https__client_1ab78d925b79646c8d0f2aa76065cd1397" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1http__connect__info" kindref="compound">http_connect_info</ref></type>
        <definition>static http_connect_info dpp::https_client::get_host_info</definition>
        <argsstring>(std::string url)</argsstring>
        <name>get_host_info</name>
        <param>
          <type>std::string</type>
          <declname>url</declname>
        </param>
        <briefdescription>
<para>Break down a scheme, hostname and port into a <ref refid="structdpp_1_1http__connect__info" kindref="compound">http_connect_info</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>All but the hostname portion are optional. The path component should not be passed to this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>URL to break down </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Split URL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/httpsclient.h" line="354" column="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1ae0e5e0799448bf29506bfcc21168d3fa" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
<para>Input buffer received from socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="128" column="13" bodyfile="include/dpp/sslclient.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a7b3bbb4e6a9e271c8f19736b36b71d5d" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::bytes_in</definition>
        <argsstring></argsstring>
        <name>bytes_in</name>
        <briefdescription>
<para>Bytes in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="183" column="10" bodyfile="include/dpp/sslclient.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a8022a8002cfc6f394016546168ef4085" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::bytes_out</definition>
        <argsstring></argsstring>
        <name>bytes_out</name>
        <briefdescription>
<para>Bytes out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="178" column="10" bodyfile="include/dpp/sslclient.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a5fc2e7836da5485216419bbf17e49428" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::cipher</definition>
        <argsstring></argsstring>
        <name>cipher</name>
        <briefdescription>
<para>SSL cipher in use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="148" column="13" bodyfile="include/dpp/sslclient.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1aa621be77e296d0cb59ac9e80faf92692" prot="protected" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::ssl_client::connect_retries</definition>
        <argsstring></argsstring>
        <name>connect_retries</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>How many times we retried <ref refid="classdpp_1_1ssl__client_1a9a5168edeb1901d62aecf273c28f03ca" kindref="member">connect()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="163" column="9" bodyfile="include/dpp/sslclient.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1ab14964f3fb7b075d8611984a3c02f81b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::connected</definition>
        <argsstring></argsstring>
        <name>connected</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if connection is completed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="193" column="6" bodyfile="include/dpp/sslclient.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a9aab17086711ef6777a01ee0974b5ce8" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::hostname</definition>
        <argsstring></argsstring>
        <name>hostname</name>
        <briefdescription>
<para>Hostname connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="168" column="13" bodyfile="include/dpp/sslclient.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a61f0bbeefa25de686ac93887afa65895" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_client::last_tick</definition>
        <argsstring></argsstring>
        <name>last_tick</name>
        <briefdescription>
<para>For timers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="153" column="8" bodyfile="include/dpp/sslclient.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a1f9600d4fd902c74c6d8b748c359eecc" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::obuffer</definition>
        <argsstring></argsstring>
        <name>obuffer</name>
        <briefdescription>
<para>Output buffer for sending to socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="133" column="13" bodyfile="include/dpp/sslclient.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1aa735feca3545e156e0607c06d55288c4" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::plaintext</definition>
        <argsstring></argsstring>
        <name>plaintext</name>
        <briefdescription>
<para>True for a plain text connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="188" column="6" bodyfile="include/dpp/sslclient.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a53cda56d5d61e3371bd7be2424e7ff07" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
<para>Port connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="173" column="13" bodyfile="include/dpp/sslclient.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a7b3a22d8f3de7ed7287dd8e88e049ddb" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::raw_trace</definition>
        <argsstring></argsstring>
        <name>raw_trace</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Set this to true to log all IO to debug for this connection. This is an internal developer facility. Do not enable it unless you need to, as it will be very noisy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="230" column="6" bodyfile="include/dpp/sslclient.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a423ca70d4046067ebe219f85c7baa540" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1acfb6805855456fe93068c474c8f977c7" kindref="member">dpp::socket</ref></type>
        <definition>dpp::socket dpp::ssl_client::sfd</definition>
        <argsstring></argsstring>
        <name>sfd</name>
        <briefdescription>
<para>Raw file descriptor of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="138" column="13" bodyfile="include/dpp/sslclient.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a26db29793a38b8a9dad74581597b298a" prot="protected" static="no" mutable="no">
        <type>openssl_connection *</type>
        <definition>openssl_connection* dpp::ssl_client::ssl</definition>
        <argsstring></argsstring>
        <name>ssl</name>
        <briefdescription>
<para>Openssl opaque contexts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="143" column="20" bodyfile="include/dpp/sslclient.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a19b8b7ead269fe0ef80f0a98c1e90c56" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_client::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
<para>Start time of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="158" column="8" bodyfile="include/dpp/sslclient.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a9d61aefda2e6f1df2e8acdb5f4165510" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::tcp_connect_done</definition>
        <argsstring></argsstring>
        <name>tcp_connect_done</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if tcp <ref refid="classdpp_1_1ssl__client_1a9a5168edeb1901d62aecf273c28f03ca" kindref="member">connect()</ref> succeeded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="198" column="6" bodyfile="include/dpp/sslclient.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a1218ebf714d7511f3ead33c34c2fb30a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a8b9ab0b8cf29978147a7df3947cd8f30" kindref="member">timer</ref></type>
        <definition>timer dpp::ssl_client::timer_handle</definition>
        <argsstring></argsstring>
        <name>timer_handle</name>
        <briefdescription>
<para>Timer handle for one second timer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="203" column="7" bodyfile="include/dpp/sslclient.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1adf682f42a07664887300335e1927828a" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::unique_id</definition>
        <argsstring></argsstring>
        <name>unique_id</name>
        <briefdescription>
<para>Unique ID of socket used as a nonce You can use this to identify requests vs reply if you want. D++ itself only sets this, and does not use it in any logic. It starts at 1 and increments for each request made. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="212" column="10" bodyfile="include/dpp/sslclient.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a HTTPS socket client based on the SSL client. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>plaintext HTTP without SSL is also supported via a &quot;downgrade&quot; setting </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::https_client</label>
        <link refid="classdpp_1_1https__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="10">
        <label>bool</label>
      </node>
      <node id="23">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="14">
        <label>double</label>
      </node>
      <node id="22">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="23" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="3" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>socketengine</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::https_client</label>
        <link refid="classdpp_1_1https__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>timed_out</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>completed</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="16">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="17" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="9" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="3" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>last_tick</edgelabel>
          <edgelabel>start</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>connect_retries</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
          <edgelabel>unique_id</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>connected</edgelabel>
          <edgelabel>keepalive</edgelabel>
          <edgelabel>plaintext</edgelabel>
          <edgelabel>raw_trace</edgelabel>
          <edgelabel>tcp_connect_done</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>timer_handle</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="9" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>event_router_t&lt;</label>
      </node>
      <node id="29">
        <label>http_state</label>
      </node>
      <node id="5">
        <label>int</label>
      </node>
      <node id="18">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="19" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>openssl_connection *</label>
      </node>
      <node id="11">
        <label>size_t</label>
      </node>
      <node id="25">
        <label>atomic_bool</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="28">
        <label>function&lt; void(class https_client *)&gt;</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="7">
        <label>time_t</label>
      </node>
      <node id="21">
        <label>uint16_t</label>
      </node>
      <node id="13">
        <label>uint32_t</label>
      </node>
      <node id="9">
        <label>uint64_t</label>
      </node>
      <node id="8">
        <label>uint8_t</label>
      </node>
      <node id="24">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/httpsclient.h" line="137" column="1" bodyfile="include/dpp/httpsclient.h" bodystart="137" bodyend="355"/>
    <listofallmembers>
      <member refid="classdpp_1_1https__client_1a8c7302f1e9384a125f8a1f757b4329b3" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>body</name></member>
      <member refid="classdpp_1_1ssl__client_1ae0e5e0799448bf29506bfcc21168d3fa" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>buffer</name></member>
      <member refid="classdpp_1_1https__client_1aa4e20ece223207e62c1006dcadfbe2a9" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>build_multipart</name></member>
      <member refid="classdpp_1_1ssl__client_1a7b3bbb4e6a9e271c8f19736b36b71d5d" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>bytes_in</name></member>
      <member refid="classdpp_1_1ssl__client_1a8022a8002cfc6f394016546168ef4085" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>bytes_out</name></member>
      <member refid="classdpp_1_1https__client_1a7c1571db23c5f1c8b711a11edfd03c90" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>chunk_receive</name></member>
      <member refid="classdpp_1_1https__client_1ac3eb2f3a3d044fc3151dd43fdf883c3a" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>chunk_size</name></member>
      <member refid="classdpp_1_1https__client_1a463fe015fba652aa875a7d604413b8d2" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>chunked</name></member>
      <member refid="classdpp_1_1ssl__client_1a5fc2e7836da5485216419bbf17e49428" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>cipher</name></member>
      <member refid="classdpp_1_1https__client_1aa70a2d6c3665c57f3e96d0a56cab48c8" prot="public" virt="virtual"><scope>dpp::https_client</scope><name>close</name></member>
      <member refid="classdpp_1_1ssl__client_1adf054c481a7d9e804462db5b726af2e2" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>complete_handshake</name></member>
      <member refid="classdpp_1_1https__client_1aea80273dc2bcdd9c55ef99f8a3ecadd5" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>completed</name></member>
      <member refid="classdpp_1_1https__client_1ae14f32471d065d5a72b40da01731cb71" prot="protected" virt="virtual"><scope>dpp::https_client</scope><name>connect</name></member>
      <member refid="classdpp_1_1ssl__client_1aa621be77e296d0cb59ac9e80faf92692" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>connect_retries</name></member>
      <member refid="classdpp_1_1ssl__client_1ab14964f3fb7b075d8611984a3c02f81b" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>connected</name></member>
      <member refid="classdpp_1_1https__client_1aebb96d5bc879c002d7d824e04d2a78e7" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>content_length</name></member>
      <member refid="classdpp_1_1ssl__client_1a96739f7abe24b9d7b17f67dc32a91399" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>do_raw_trace</name></member>
      <member refid="classdpp_1_1ssl__client_1a0da035d84f8d82c9741db0fcf8fc1cbc" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>enable_raw_tracing</name></member>
      <member refid="classdpp_1_1ssl__client_1afa5d5654ce0b631d07045088ef347418" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_bytes_in</name></member>
      <member refid="classdpp_1_1ssl__client_1aad4da6489c8f08030ca49c060a23740a" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_bytes_out</name></member>
      <member refid="classdpp_1_1ssl__client_1abf247ed0871e89e6a319c95841a315bd" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_cipher</name></member>
      <member refid="classdpp_1_1https__client_1affac629e0843afcdc9a77351a550d6be" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_content</name></member>
      <member refid="classdpp_1_1https__client_1a58d8ae5c9949d7b066dbbc6fb2c13a77" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_header</name></member>
      <member refid="classdpp_1_1https__client_1a0c19fdc08d1d8cedcdd357af3f23e790" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_header_count</name></member>
      <member refid="classdpp_1_1https__client_1ad9b018960ad5f7687b48ee3a6bc99bb8" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_header_list</name></member>
      <member refid="classdpp_1_1https__client_1acecf3bc12787b4115de00a4977d86c90" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_headers</name></member>
      <member refid="classdpp_1_1https__client_1ab78d925b79646c8d0f2aa76065cd1397" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_host_info</name></member>
      <member refid="classdpp_1_1https__client_1af0b48879cca3f23df33cbad1cc73f7d2" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>get_state</name></member>
      <member refid="classdpp_1_1https__client_1aad457d811e2b8655eef18d2f3b76e076" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_status</name></member>
      <member refid="classdpp_1_1ssl__client_1af74793d8ea8e6a4389d97cc72f9e1c4d" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>get_unique_id</name></member>
      <member refid="classdpp_1_1https__client_1ae247d12f198e690590532ee86958cae2" prot="public" virt="virtual"><scope>dpp::https_client</scope><name>handle_buffer</name></member>
      <member refid="classdpp_1_1ssl__client_1a9aab17086711ef6777a01ee0974b5ce8" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>hostname</name></member>
      <member refid="classdpp_1_1https__client_1acc0b3c8c11a8483ef4462c796a7ab08e" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>http_protocol</name></member>
      <member refid="classdpp_1_1https__client_1a52ed26cfbff8e2cfb17fddffa8e8e9a6" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>https_client</name></member>
      <member refid="classdpp_1_1ssl__client_1ac8997404ef91c501c3e8ae1079e89152" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>keepalive</name></member>
      <member refid="classdpp_1_1ssl__client_1a61f0bbeefa25de686ac93887afa65895" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>last_tick</name></member>
      <member refid="classdpp_1_1ssl__client_1a945ccd04f376174a64c0cceffca3bbcd" prot="public" virt="virtual"><scope>dpp::https_client</scope><name>log</name></member>
      <member refid="classdpp_1_1ssl__client_1a1f9600d4fd902c74c6d8b748c359eecc" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>obuffer</name></member>
      <member refid="classdpp_1_1ssl__client_1a0382a16a566b1ae091b5667ba98df42a" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>on_error</name></member>
      <member refid="classdpp_1_1ssl__client_1a25b211229c4109489f68251e7d86a952" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>on_read</name></member>
      <member refid="classdpp_1_1ssl__client_1a6f443e1b2f4ed33458eee2576f7015e2" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>on_write</name></member>
      <member refid="classdpp_1_1https__client_1ae0cd5a31a4739ad2d1be843597fa7ec3" prot="public" virt="virtual"><scope>dpp::https_client</scope><name>one_second_timer</name></member>
      <member refid="classdpp_1_1ssl__client_1a16fdc0f7005b8ba56ecc46beec4cad1c" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>owner</name></member>
      <member refid="classdpp_1_1https__client_1a189161c0e29555a46af0d7afe7bf61e1" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>path</name></member>
      <member refid="classdpp_1_1ssl__client_1aa735feca3545e156e0607c06d55288c4" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>plaintext</name></member>
      <member refid="classdpp_1_1ssl__client_1a53cda56d5d61e3371bd7be2424e7ff07" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>port</name></member>
      <member refid="classdpp_1_1ssl__client_1a7b3a22d8f3de7ed7287dd8e88e049ddb" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>raw_trace</name></member>
      <member refid="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>read_loop</name></member>
      <member refid="classdpp_1_1https__client_1aedc9891569179988fc462daf824a1685" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>request_body</name></member>
      <member refid="classdpp_1_1https__client_1a5a7a9866a0f7cb682256400cfebe6015" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>request_headers</name></member>
      <member refid="classdpp_1_1https__client_1a899530fc5452a27010b3ea4a5e745e83" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>request_type</name></member>
      <member refid="classdpp_1_1https__client_1af4ee11452af6dc6baa3c095a3c915281" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>response_headers</name></member>
      <member refid="classdpp_1_1ssl__client_1a423ca70d4046067ebe219f85c7baa540" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>sfd</name></member>
      <member refid="classdpp_1_1ssl__client_1a5e8f5c577083d2a6b7e4f6558f29962f" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>socket_write</name></member>
      <member refid="classdpp_1_1ssl__client_1a26db29793a38b8a9dad74581597b298a" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>ssl</name></member>
      <member refid="classdpp_1_1ssl__client_1a0a50111a0c6de5f0ffe96de142819e94" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>ssl_client</name></member>
      <member refid="classdpp_1_1ssl__client_1a19b8b7ead269fe0ef80f0a98c1e90c56" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>start</name></member>
      <member refid="classdpp_1_1https__client_1ad987631fa443685b10b7b46c3e9472d5" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>state</name></member>
      <member refid="classdpp_1_1https__client_1ad8d80fde390cd6307e0c5008c0ad45d5" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>status</name></member>
      <member refid="classdpp_1_1ssl__client_1a9d61aefda2e6f1df2e8acdb5f4165510" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>tcp_connect_done</name></member>
      <member refid="classdpp_1_1https__client_1a692403cf275abe733f85fb5a0eff9e55" prot="public" virt="non-virtual"><scope>dpp::https_client</scope><name>timed_out</name></member>
      <member refid="classdpp_1_1https__client_1a1e85d7cad322c90c719f4434abfa1438" prot="private" virt="non-virtual"><scope>dpp::https_client</scope><name>timeout</name></member>
      <member refid="classdpp_1_1ssl__client_1a1218ebf714d7511f3ead33c34c2fb30a" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>timer_handle</name></member>
      <member refid="classdpp_1_1ssl__client_1adf682f42a07664887300335e1927828a" prot="protected" virt="non-virtual"><scope>dpp::https_client</scope><name>unique_id</name></member>
      <member refid="classdpp_1_1https__client_1a327d83e594b36de04bf58d5ab8258b8e" prot="public" virt="virtual"><scope>dpp::https_client</scope><name>~https_client</name></member>
      <member refid="classdpp_1_1ssl__client_1a892b774dc3832123c829d4f3bcef693a" prot="public" virt="virtual"><scope>dpp::https_client</scope><name>~ssl_client</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
