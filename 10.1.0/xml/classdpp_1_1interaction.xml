<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1interaction" kind="class" language="C++" prot="public">
    <compoundname>dpp::interaction</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; interaction &gt;</basecompoundref>
    <includes local="no">appcommand.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdpp_1_1interaction_1adbf86946f0d3c7a7551b05c19510b4f1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; interaction &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; interaction &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="classdpp_1_1interaction" kindref="compound">interaction</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="902" column="13" bodyfile="include/dpp/appcommand.h" bodystart="939" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1interaction_1a1a91af243ab4d765ecadc025958a8a85" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1permission" kindref="compound">permission</ref></type>
        <definition>permission dpp::interaction::app_permissions</definition>
        <argsstring></argsstring>
        <name>app_permissions</name>
        <briefdescription>
<para>Permissions of the bot in the channel/guild where this command was issued. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1024" column="12" bodyfile="include/dpp/appcommand.h" bodystart="1024" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a2575444b8e918c947fb4ffc30c442201" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::interaction::application_id</definition>
        <argsstring></argsstring>
        <name>application_id</name>
        <briefdescription>
<para>ID of the application this interaction is for. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="989" column="11" bodyfile="include/dpp/appcommand.h" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a940be1aea86c5e09328426d8dcdf4a68" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a772599e8a351acf3a1d4e0267ca15158" kindref="member">application_integration_types</ref>, <ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref> &gt;</type>
        <definition>std::map&lt;application_integration_types, snowflake&gt; dpp::interaction::authorizing_integration_owners</definition>
        <argsstring></argsstring>
        <name>authorizing_integration_owners</name>
        <briefdescription>
<para>Context where the interaction was triggered from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="979" column="10" bodyfile="include/dpp/appcommand.h" bodystart="979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1abc6027911679c409058e1ff4904154cc" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1cache__policy__t" kindref="compound">cache_policy_t</ref></type>
        <definition>cache_policy_t dpp::interaction::cache_policy</definition>
        <argsstring></argsstring>
        <name>cache_policy</name>
        <briefdescription>
<para>Cache policy from cluster. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1069" column="16" bodyfile="include/dpp/appcommand.h" bodystart="1069" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a40bc62124a16f911fe27ac2a010f73fa" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1channel" kindref="compound">dpp::channel</ref></type>
        <definition>dpp::channel dpp::interaction::channel</definition>
        <argsstring></argsstring>
        <name>channel</name>
        <briefdescription>
<para>Optional: The partial channel object where it was sent from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1014" column="14" bodyfile="include/dpp/appcommand.h" bodystart="1014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a8062f778758ef53d0ea4e40f62ff4015" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::interaction::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>Optional: the channel it was sent from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1009" column="11" bodyfile="include/dpp/appcommand.h" bodystart="1009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1aea8ac1233f15f567d5439fdcbc959cc3" prot="public" static="no" mutable="no">
        <type>std::optional&lt; <ref refid="namespacedpp_1aae430aca529d808c16a22954928b3896" kindref="member">interaction_context_type</ref> &gt;</type>
        <definition>std::optional&lt;interaction_context_type&gt; dpp::interaction::context</definition>
        <argsstring></argsstring>
        <name>context</name>
        <briefdescription>
<para>Context where the interaction was triggered from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="984" column="15" bodyfile="include/dpp/appcommand.h" bodystart="984" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a04d74cfb07306fdf8bc540ee5a7e2f4e" prot="public" static="no" mutable="no">
        <type>std::variant&lt; <ref refid="structdpp_1_1command__interaction" kindref="compound">command_interaction</ref>, <ref refid="structdpp_1_1component__interaction" kindref="compound">component_interaction</ref>, <ref refid="structdpp_1_1autocomplete__interaction" kindref="compound">autocomplete_interaction</ref> &gt;</type>
        <definition>std::variant&lt;command_interaction, component_interaction, autocomplete_interaction&gt; dpp::interaction::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
<para>Optional: the command data payload. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="999" column="14" bodyfile="include/dpp/appcommand.h" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1ae92d06d5b72c45b6b5029b684c1b5326" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classdpp_1_1entitlement" kindref="compound">entitlement</ref> &gt;</type>
        <definition>std::vector&lt;entitlement&gt; dpp::interaction::entitlements</definition>
        <argsstring></argsstring>
        <name>entitlements</name>
        <briefdescription>
<para>For monetized apps, any entitlements for the invoking user, representing access to premium SKUs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1074" column="13" bodyfile="include/dpp/appcommand.h" bodystart="1074" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a6301d14a86e9b51b656ef589c2e39009" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::interaction::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>Optional: the guild it was sent from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1004" column="11" bodyfile="include/dpp/appcommand.h" bodystart="1004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1af73bc2d172724c5fe2ce9b3dc34c4eb8" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::interaction::guild_locale</definition>
        <argsstring></argsstring>
        <name>guild_locale</name>
        <briefdescription>
<para>Guild&apos;s locale (language) - for guild interactions only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1064" column="13" bodyfile="include/dpp/appcommand.h" bodystart="1064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="39" column="11" bodyfile="include/dpp/managed.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1ae3578a171f1c351ccca8b178ec4a9314" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::interaction::locale</definition>
        <argsstring></argsstring>
        <name>locale</name>
        <briefdescription>
<para>User&apos;s <ulink url="https://discord.com/developers/docs/reference#locales">locale</ulink> (language). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1059" column="13" bodyfile="include/dpp/appcommand.h" bodystart="1059" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a8d1cc9b3f5ccab6fc206c1adb864ac06" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1guild__member" kindref="compound">guild_member</ref></type>
        <definition>guild_member dpp::interaction::member</definition>
        <argsstring></argsstring>
        <name>member</name>
        <briefdescription>
<para>Optional: guild member data for the invoking user, including permissions. Filled when the interaction is invoked in a guild. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1034" column="14" bodyfile="include/dpp/appcommand.h" bodystart="1034" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a5101b493d82a15b9fa3aca68a6386e39" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::interaction::message_id</definition>
        <argsstring></argsstring>
        <name>message_id</name>
        <briefdescription>
<para>Originating message id for context menu actions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1019" column="11" bodyfile="include/dpp/appcommand.h" bodystart="1019" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a41e250dd231a840c82276e14bc4ffb86" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1message" kindref="compound">message</ref></type>
        <definition>message dpp::interaction::msg</definition>
        <argsstring></argsstring>
        <name>msg</name>
        <briefdescription>
<para>Originating message for context menu actions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1029" column="9" bodyfile="include/dpp/appcommand.h" bodystart="1029" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1aaa88ba118d0a7b5b32090a844610d7e7" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1command__resolved" kindref="compound">command_resolved</ref></type>
        <definition>command_resolved dpp::interaction::resolved</definition>
        <argsstring></argsstring>
        <name>resolved</name>
        <briefdescription>
<para>Resolved data e.g. users, members, roles, channels, permissions, etc. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1054" column="18" bodyfile="include/dpp/appcommand.h" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a3d20499cf0b8b93c655b904847622085" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::interaction::token</definition>
        <argsstring></argsstring>
        <name>token</name>
        <briefdescription>
<para>A continuation token for responding to the interaction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1044" column="13" bodyfile="include/dpp/appcommand.h" bodystart="1044" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1ae1df9ec5826bac923ee92e2037bf17cc" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::interaction::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>The type of interaction from <ref refid="namespacedpp_1a53805450964cf3ad4a26f673aebebd96" kindref="member">dpp::interaction_type</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="994" column="8" bodyfile="include/dpp/appcommand.h" bodystart="994" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1af42be274f0c532e1b227d6725f25ecd3" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref></type>
        <definition>user dpp::interaction::usr</definition>
        <argsstring></argsstring>
        <name>usr</name>
        <briefdescription>
<para>User object for the invoking user. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1039" column="6" bodyfile="include/dpp/appcommand.h" bodystart="1039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1interaction_1a326c799b4b9d813f44f5462dae01e027" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::interaction::version</definition>
        <argsstring></argsstring>
        <name>version</name>
        <briefdescription>
<para>Read-only property, always 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1049" column="9" bodyfile="include/dpp/appcommand.h" bodystart="1049" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1interaction_1a0cdf4d4c39248eae902a5781f105656d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1interaction" kindref="compound">interaction</ref> &amp;</type>
        <definition>interaction &amp; dpp::interaction::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill object properties from JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON to fill from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>interaction&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="965" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a3f5432830d462d3f0bec20fc5ef7b3a3" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T &amp; dpp::interaction::get_resolved</definition>
        <argsstring>(snowflake id, const C &amp;resolved_set) const</argsstring>
        <name>get_resolved</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const C &amp;</type>
          <declname>resolved_set</declname>
        </param>
        <briefdescription>
<para>Get a resolved object from the resolved set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of object to retrieve </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>C</parametername>
</parameternamelist>
<parameterdescription>
<para>container defintion for resolved container </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Snowflake ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolved_set</parametername>
</parameternamelist>
<parameterdescription>
<para>container for the type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const T&amp; retrieved type </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on object not found in resolved set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="951" column="22" bodyfile="include/dpp/appcommand.h" bodystart="951" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1afacf39c58da074d5d1be99176cf41b62" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>virtual json dpp::interaction::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build a json for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if to include the ID in the JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>json JSON object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="973" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1interaction_1a633cfd684b67c14cbaf747b5ce181eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::interaction::interaction</definition>
        <argsstring>()</argsstring>
        <name>interaction</name>
        <briefdescription>
<para>Construct a new interaction object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1079" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1aded41ecda9d55bcaa1650f34068dada7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::interaction::~interaction</definition>
        <argsstring>()=default</argsstring>
        <name>~interaction</name>
        <briefdescription>
<para>Destroy the interaction object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1084" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; interaction  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdpp_1_1interaction" kindref="compound">interaction</ref> &amp;</type>
        <definition>interaction  &amp; dpp::json_interface&lt; interaction  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a6f042eba33c6d6ff14b612c0bf46fab3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">dpp::snowflake</ref></type>
        <definition>dpp::snowflake dpp::interaction::get_authorizing_integration_owner</definition>
        <argsstring>(application_integration_types type) const</argsstring>
        <name>get_authorizing_integration_owner</name>
        <param>
          <type><ref refid="namespacedpp_1a772599e8a351acf3a1d4e0267ca15158" kindref="member">application_integration_types</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get the user who installed the application for a given type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of installation for the command, e.g. <ref refid="namespacedpp_1a772599e8a351acf3a1d4e0267ca15158ae9361a04022a1040f16d28dcc6db5dbf" kindref="member">dpp::ait_guild_install</ref> or <ref refid="namespacedpp_1a772599e8a351acf3a1d4e0267ca15158a9601746fb7bd857786fc2729836e1211" kindref="member">dpp::ait_user_install</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The snowflake of the user. In the event this type is not allowed for the given command, this will return a default-initialised snowflake with value 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1236" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1ae0c4f92722e07cf8815a8a899381e657" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1autocomplete__interaction" kindref="compound">autocomplete_interaction</ref></type>
        <definition>autocomplete_interaction dpp::interaction::get_autocomplete_interaction</definition>
        <argsstring>() const</argsstring>
        <name>get_autocomplete_interaction</name>
        <briefdescription>
<para>Get the autocomplete interaction object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the interaction is not for an autocomplete</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1autocomplete__interaction" kindref="compound">autocomplete_interaction</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1219" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a2b09ae67bedffaeb0e6d0ae4a091d29f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classdpp_1_1channel" kindref="compound">dpp::channel</ref> &amp;</type>
        <definition>const dpp::channel &amp; dpp::interaction::get_channel</definition>
        <argsstring>() const</argsstring>
        <name>get_channel</name>
        <briefdescription>
<para>Get the channel this command originated on. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="classdpp_1_1channel" kindref="compound">dpp::channel</ref>&amp; channel </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Command originated from a DM or channel not in cache </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1103" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1ad75f1efe3900962422b2bf643bd654f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1command__interaction" kindref="compound">command_interaction</ref></type>
        <definition>command_interaction dpp::interaction::get_command_interaction</definition>
        <argsstring>() const</argsstring>
        <name>get_command_interaction</name>
        <briefdescription>
<para>Get the command interaction object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the interaction is not for a command</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1command__interaction" kindref="compound">command_interaction</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1201" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1aabbb8d58d708128098516ed443d5c140" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::interaction::get_command_name</definition>
        <argsstring>() const</argsstring>
        <name>get_command_name</name>
        <briefdescription>
<para>Get the command name for a command interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string command interaction, or empty string if the interaction is not for a command. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1227" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1acb48f4602b96d1a2a289422ae1813753" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1component__interaction" kindref="compound">component_interaction</ref></type>
        <definition>component_interaction dpp::interaction::get_component_interaction</definition>
        <argsstring>() const</argsstring>
        <name>get_component_interaction</name>
        <briefdescription>
<para>Get the component interaction object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the interaction is not for a component</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1component__interaction" kindref="compound">component_interaction</ref> object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1210" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a938144b8f0c521668a938c138fc77f6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> &amp;</type>
        <definition>const dpp::message &amp; dpp::interaction::get_context_message</definition>
        <argsstring>() const</argsstring>
        <name>get_context_message</name>
        <briefdescription>
<para>Get the message this action refers to if it is a context menu command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref>&amp; context menu message </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1125" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr double</type>
        <definition>constexpr double dpp::managed::get_creation_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="89" column="18" bodyfile="include/dpp/managed.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a90e73abe72b0c15c594f27c96c1b5663" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref> &amp;</type>
        <definition>const dpp::guild &amp; dpp::interaction::get_guild</definition>
        <argsstring>() const</argsstring>
        <name>get_guild</name>
        <briefdescription>
<para>Get the guild this command originated on. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="classdpp_1_1guild" kindref="compound">dpp::guild</ref>&amp; guild </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Command originated from a DM or guild not in cache </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1111" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a7e7fcf0b1ac0f4c22603bf87b0ea7650" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> &amp;</type>
        <definition>const dpp::user &amp; dpp::interaction::get_issuing_user</definition>
        <argsstring>() const</argsstring>
        <name>get_issuing_user</name>
        <briefdescription>
<para>Get the user who issued this command. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref>&amp; user </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1118" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a3f89d8774aad40fc50bf1b245ffaca79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1attachment" kindref="compound">dpp::attachment</ref> &amp;</type>
        <definition>const dpp::attachment &amp; dpp::interaction::get_resolved_attachment</definition>
        <argsstring>(snowflake id) const</argsstring>
        <name>get_resolved_attachment</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get an uploaded attachment associated with the slash command from the resolved list. The resolved list contains associated structures for this command and does not use the cache or require any extra API calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Attachment snowflake ID to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="structdpp_1_1attachment" kindref="compound">dpp::attachment</ref>&amp; file attachment </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on object not found in resolved set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1192" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1ae042d9e744e3f2089f1fed575e2d4787" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classdpp_1_1channel" kindref="compound">dpp::channel</ref> &amp;</type>
        <definition>const dpp::channel &amp; dpp::interaction::get_resolved_channel</definition>
        <argsstring>(snowflake id) const</argsstring>
        <name>get_resolved_channel</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a channel associated with the slash command from the resolved list. The resolved list contains associated structures for this command and does not use the cache or require any extra API calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel snowflake ID to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="classdpp_1_1channel" kindref="compound">dpp::channel</ref>&amp; channel </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on object not found in resolved set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1147" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a65c7c983e42dece3a9152a721d87f039" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classdpp_1_1guild__member" kindref="compound">dpp::guild_member</ref> &amp;</type>
        <definition>const dpp::guild_member &amp; dpp::interaction::get_resolved_member</definition>
        <argsstring>(snowflake id) const</argsstring>
        <name>get_resolved_member</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a guild member associated with the slash command from the resolved list. The resolved list contains associated structures for this command and does not use the cache or require any extra API calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>User snowflake ID to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="classdpp_1_1guild__member" kindref="compound">dpp::guild_member</ref>&amp; guild member </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on object not found in resolved set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1158" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a0c721701103dbac51de5dda49ada848c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> &amp;</type>
        <definition>const dpp::message &amp; dpp::interaction::get_resolved_message</definition>
        <argsstring>(snowflake id) const</argsstring>
        <name>get_resolved_message</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a message associated with the slash command from the resolved list. The resolved list contains associated structures for this command and does not use the cache or require any extra API calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Message snowflake ID to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref>&amp; message </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on object not found in resolved set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1181" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a89ef384ef9f2c2f7bf99c2b5ba0844c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classdpp_1_1permission" kindref="compound">dpp::permission</ref> &amp;</type>
        <definition>const dpp::permission &amp; dpp::interaction::get_resolved_permission</definition>
        <argsstring>(snowflake id) const</argsstring>
        <name>get_resolved_permission</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a permission associated with the slash command from the resolved list. The resolved list contains associated structures for this command and does not use the cache or require any extra API calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>User snowflake ID to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="classdpp_1_1permission" kindref="compound">dpp::permission</ref>&amp; total permissions for the user including overrides on the channel where the command was issued. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on object not found in resolved set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1170" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a5c94b68ec3e174a9bfd8b16a64dd0fa3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classdpp_1_1role" kindref="compound">dpp::role</ref> &amp;</type>
        <definition>const dpp::role &amp; dpp::interaction::get_resolved_role</definition>
        <argsstring>(snowflake id) const</argsstring>
        <name>get_resolved_role</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a role associated with the slash command from the resolved list. The resolved list contains associated structures for this command and does not use the cache or require any extra API calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Role snowflake ID to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="classdpp_1_1role" kindref="compound">dpp::role</ref>&amp; role </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on object not found in resolved set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1136" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1ac2a20671ce5da9458c69b2a26d914217" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref> &amp;</type>
        <definition>const dpp::user &amp; dpp::interaction::get_resolved_user</definition>
        <argsstring>(snowflake id) const</argsstring>
        <name>get_resolved_user</name>
        <param>
          <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get a user associated with the slash command from the resolved list. The resolved list contains associated structures for this command and does not use the cache or require any extra API calls. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>User snowflake ID to find </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const <ref refid="classdpp_1_1user" kindref="compound">dpp::user</ref>&amp; user </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on object not found in resolved set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1095" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1a98d337ebf0ecef5d263098c4a1cd5d7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::interaction::is_guild_interaction</definition>
        <argsstring>() const</argsstring>
        <name>is_guild_interaction</name>
        <briefdescription>
<para>Returns true if this interaction occurred as a guild-invited interaction, e.g. within a guild&apos;s channel, or a DM of a user in that guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if a guild interaction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1250" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1interaction_1ae8022b4e58f5bafcf28427a4cdac71ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::interaction::is_user_app_interaction</definition>
        <argsstring>() const</argsstring>
        <name>is_user_app_interaction</name>
        <briefdescription>
<para>Returns true if this interaction occurred as a user-app interaction, e.g. within a DM or group DM, added to the user not a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if a user-app interaction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/appcommand.h" line="1243" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="111" column="16" bodyfile="include/dpp/managed.h" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="100" column="16" bodyfile="include/dpp/managed.h" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; interaction  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An interaction represents a user running a command and arrives via the <ref refid="classdpp_1_1cluster_1aaaac4fce048efff1be42965c82235b3e" kindref="member">dpp::cluster::on_interaction_create</ref> event. This is further split into the events on_form_submit, on_slashcommand, on_user_context_menu, on_button_click, on_select_menu, etc. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::interaction</label>
        <link refid="classdpp_1_1interaction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; interaction &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; interaction &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21">
        <label>auto_archive_duration_t</label>
      </node>
      <node id="32">
        <label>bool</label>
      </node>
      <node id="40">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="22">
        <label>default_forum_sort_order_t</label>
      </node>
      <node id="38">
        <label>double</label>
      </node>
      <node id="39">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="40" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>dpp::channel</label>
        <link refid="classdpp_1_1channel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>CHANNEL_TYPE_MASK</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>rtc_region</edgelabel>
          <edgelabel>topic</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>available_tags</edgelabel>
          <edgelabel>permission_overwrites</edgelabel>
          <edgelabel>recipients</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>default_reaction</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>icon</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>last_message_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>parent_id</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>last_pin_timestamp</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>bitrate</edgelabel>
          <edgelabel>default_thread_rate_limit_per_user</edgelabel>
          <edgelabel>flags</edgelabel>
          <edgelabel>position</edgelabel>
          <edgelabel>rate_limit_per_user</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>default_auto_archive_duration</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>default_sort_order</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>user_limit</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="14" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>socketengine</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>dpp::command_resolved</label>
        <link refid="structdpp_1_1command__resolved"/>
        <childnode refid="7" relation="usage">
          <edgelabel>attachments</edgelabel>
          <edgelabel>channels</edgelabel>
          <edgelabel>member_permissions</edgelabel>
          <edgelabel>members</edgelabel>
          <edgelabel>messages</edgelabel>
          <edgelabel>roles</edgelabel>
          <edgelabel>users</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="29" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::interaction</label>
        <link refid="classdpp_1_1interaction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>authorizing_integration_owners</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>context</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>application_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>type</edgelabel>
          <edgelabel>version</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>channel</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>app_permissions</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>msg</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>guild_locale</edgelabel>
          <edgelabel>locale</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>resolved</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>entitlements</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>dpp::interaction_metadata_type</label>
        <link refid="structdpp_1_1interaction__metadata__type"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
          <edgelabel>interacted_message_id</edgelabel>
          <edgelabel>original_response_message_id</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>dpp::message</label>
        <link refid="structdpp_1_1message"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>webhook_id</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>author</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>content</edgelabel>
          <edgelabel>nonce</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>attachments</edgelabel>
          <edgelabel>components</edgelabel>
          <edgelabel>embeds</edgelabel>
          <edgelabel>file_data</edgelabel>
          <edgelabel>mention_channels</edgelabel>
          <edgelabel>mention_roles</edgelabel>
          <edgelabel>mentions</edgelabel>
          <edgelabel>reactions</edgelabel>
          <edgelabel>stickers</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>edited</edgelabel>
          <edgelabel>sent</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>message_reference</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>message_snapshots</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>interaction</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>interaction_metadata</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>allowed_mentions</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>mention_everyone</edgelabel>
          <edgelabel>pinned</edgelabel>
          <edgelabel>tts</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>attached_poll</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>dpp::message::allowed_ref</label>
        <link refid="structdpp_1_1message_1_1allowed__ref"/>
        <childnode refid="32" relation="usage">
          <edgelabel>parse_everyone</edgelabel>
          <edgelabel>parse_roles</edgelabel>
          <edgelabel>parse_users</edgelabel>
          <edgelabel>replied_user</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>roles</edgelabel>
          <edgelabel>users</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>dpp::message::message_interaction_struct</label>
        <link refid="structdpp_1_1message_1_1message__interaction__struct"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>dpp::message::message_ref</label>
        <link refid="structdpp_1_1message_1_1message__ref"/>
        <childnode refid="31" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>fail_if_not_exists</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>dpp::permission</label>
        <link refid="classdpp_1_1permission"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="4" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="4" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>event_router_t&lt;</label>
      </node>
      <node id="12">
        <label>dpp::json_interface&lt; channel &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; channel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>dpp::json_interface&lt; guild_member &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; guild_member &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; interaction &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; interaction &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>dpp::json_interface&lt; message &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; message &gt;</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>message_ref_type</label>
      </node>
      <node id="33">
        <label>message_snapshot&lt;</label>
      </node>
      <node id="45">
        <label>message_type</label>
      </node>
      <node id="13">
        <label>static constexpr uint16_t</label>
      </node>
      <node id="42">
        <label>atomic_bool</label>
      </node>
      <node id="15">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>map&lt;</label>
      </node>
      <node id="8">
        <label>optional&lt;</label>
      </node>
      <node id="14">
        <label>std::string</label>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="43">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="10">
        <label>variant&lt;</label>
      </node>
      <node id="16">
        <label>vector&lt;</label>
      </node>
      <node id="18">
        <label>time_t</label>
      </node>
      <node id="20">
        <label>uint16_t</label>
      </node>
      <node id="27">
        <label>uint32_t</label>
      </node>
      <node id="4">
        <label>uint64_t</label>
      </node>
      <node id="9">
        <label>uint8_t</label>
      </node>
      <node id="41">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/appcommand.h" line="937" column="1" bodyfile="include/dpp/appcommand.h" bodystart="937" bodyend="1252"/>
    <listofallmembers>
      <member refid="classdpp_1_1interaction_1a1a91af243ab4d765ecadc025958a8a85" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>app_permissions</name></member>
      <member refid="classdpp_1_1interaction_1a2575444b8e918c947fb4ffc30c442201" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>application_id</name></member>
      <member refid="classdpp_1_1interaction_1a940be1aea86c5e09328426d8dcdf4a68" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>authorizing_integration_owners</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>build_json</name></member>
      <member refid="classdpp_1_1interaction_1abc6027911679c409058e1ff4904154cc" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>cache_policy</name></member>
      <member refid="classdpp_1_1interaction_1a40bc62124a16f911fe27ac2a010f73fa" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>channel</name></member>
      <member refid="classdpp_1_1interaction_1a8062f778758ef53d0ea4e40f62ff4015" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>channel_id</name></member>
      <member refid="classdpp_1_1interaction_1aea8ac1233f15f567d5439fdcbc959cc3" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>context</name></member>
      <member refid="classdpp_1_1interaction_1a04d74cfb07306fdf8bc540ee5a7e2f4e" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>data</name></member>
      <member refid="classdpp_1_1interaction_1ae92d06d5b72c45b6b5029b684c1b5326" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>entitlements</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1interaction_1a0cdf4d4c39248eae902a5781f105656d" prot="protected" virt="non-virtual"><scope>dpp::interaction</scope><name>fill_from_json_impl</name></member>
      <member refid="classdpp_1_1interaction_1a6f042eba33c6d6ff14b612c0bf46fab3" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_authorizing_integration_owner</name></member>
      <member refid="classdpp_1_1interaction_1ae0c4f92722e07cf8815a8a899381e657" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_autocomplete_interaction</name></member>
      <member refid="classdpp_1_1interaction_1a2b09ae67bedffaeb0e6d0ae4a091d29f" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_channel</name></member>
      <member refid="classdpp_1_1interaction_1ad75f1efe3900962422b2bf643bd654f4" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_command_interaction</name></member>
      <member refid="classdpp_1_1interaction_1aabbb8d58d708128098516ed443d5c140" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_command_name</name></member>
      <member refid="classdpp_1_1interaction_1acb48f4602b96d1a2a289422ae1813753" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_component_interaction</name></member>
      <member refid="classdpp_1_1interaction_1a938144b8f0c521668a938c138fc77f6c" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_context_message</name></member>
      <member refid="classdpp_1_1managed_1a38d7b0a8ddf537cb9668c3c0ff202940" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1interaction_1a90e73abe72b0c15c594f27c96c1b5663" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_guild</name></member>
      <member refid="classdpp_1_1interaction_1a7e7fcf0b1ac0f4c22603bf87b0ea7650" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_issuing_user</name></member>
      <member refid="classdpp_1_1interaction_1a3f5432830d462d3f0bec20fc5ef7b3a3" prot="protected" virt="non-virtual"><scope>dpp::interaction</scope><name>get_resolved</name></member>
      <member refid="classdpp_1_1interaction_1a3f89d8774aad40fc50bf1b245ffaca79" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_resolved_attachment</name></member>
      <member refid="classdpp_1_1interaction_1ae042d9e744e3f2089f1fed575e2d4787" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_resolved_channel</name></member>
      <member refid="classdpp_1_1interaction_1a65c7c983e42dece3a9152a721d87f039" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_resolved_member</name></member>
      <member refid="classdpp_1_1interaction_1a0c721701103dbac51de5dda49ada848c" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_resolved_message</name></member>
      <member refid="classdpp_1_1interaction_1a89ef384ef9f2c2f7bf99c2b5ba0844c3" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_resolved_permission</name></member>
      <member refid="classdpp_1_1interaction_1a5c94b68ec3e174a9bfd8b16a64dd0fa3" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_resolved_role</name></member>
      <member refid="classdpp_1_1interaction_1ac2a20671ce5da9458c69b2a26d914217" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>get_resolved_user</name></member>
      <member refid="classdpp_1_1interaction_1a6301d14a86e9b51b656ef589c2e39009" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1interaction_1af73bc2d172724c5fe2ce9b3dc34c4eb8" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>guild_locale</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>id</name></member>
      <member refid="classdpp_1_1interaction_1a633cfd684b67c14cbaf747b5ce181eda" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>interaction</name></member>
      <member refid="classdpp_1_1interaction_1a98d337ebf0ecef5d263098c4a1cd5d7a" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>is_guild_interaction</name></member>
      <member refid="classdpp_1_1interaction_1ae8022b4e58f5bafcf28427a4cdac71ed" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>is_user_app_interaction</name></member>
      <member refid="classdpp_1_1interaction_1adbf86946f0d3c7a7551b05c19510b4f1" prot="protected" virt="non-virtual"><scope>dpp::interaction</scope><name>json_interface&lt; interaction &gt;</name></member>
      <member refid="classdpp_1_1interaction_1ae3578a171f1c351ccca8b178ec4a9314" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>locale</name></member>
      <member refid="classdpp_1_1managed_1a49ce0d7fdbeab770ec46be27771c2285" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1aa3ee436836ab0e2bf4f842c2c2bc3b52" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1a198b514f7e6a2b26734fd2dad85f481d" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>managed</name></member>
      <member refid="classdpp_1_1managed_1ac7a876ad1764b89f0568a1f1bc6bf640" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>managed</name></member>
      <member refid="classdpp_1_1interaction_1a8d1cc9b3f5ccab6fc206c1adb864ac06" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>member</name></member>
      <member refid="classdpp_1_1interaction_1a5101b493d82a15b9fa3aca68a6386e39" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>message_id</name></member>
      <member refid="classdpp_1_1interaction_1a41e250dd231a840c82276e14bc4ffb86" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>msg</name></member>
      <member refid="classdpp_1_1managed_1a337e3e4ac1fd30d77279dc41ceba3995" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1a48b542729f1352f93f1c60950986517f" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a4a4be34febb174eaee3c0964d0bf1e21" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>operator=</name></member>
      <member refid="classdpp_1_1managed_1a9d1b5a4d84b9c7938825c659813bf100" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>operator==</name></member>
      <member refid="classdpp_1_1interaction_1aaa88ba118d0a7b5b32090a844610d7e7" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>resolved</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>to_json</name></member>
      <member refid="classdpp_1_1interaction_1afacf39c58da074d5d1be99176cf41b62" prot="protected" virt="virtual"><scope>dpp::interaction</scope><name>to_json_impl</name></member>
      <member refid="classdpp_1_1interaction_1a3d20499cf0b8b93c655b904847622085" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>token</name></member>
      <member refid="classdpp_1_1interaction_1ae1df9ec5826bac923ee92e2037bf17cc" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>type</name></member>
      <member refid="classdpp_1_1interaction_1af42be274f0c532e1b227d6725f25ecd3" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>usr</name></member>
      <member refid="classdpp_1_1interaction_1a326c799b4b9d813f44f5462dae01e027" prot="public" virt="non-virtual"><scope>dpp::interaction</scope><name>version</name></member>
      <member refid="classdpp_1_1interaction_1aded41ecda9d55bcaa1650f34068dada7" prot="public" virt="virtual"><scope>dpp::interaction</scope><name>~interaction</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::interaction</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
