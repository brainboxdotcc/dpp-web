<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1select__click__t" kind="struct" language="C++" prot="public">
    <compoundname>dpp::select_click_t</compoundname>
    <basecompoundref refid="structdpp_1_1interaction__create__t" prot="public" virt="non-virtual">dpp::interaction_create_t</basecompoundref>
    <includes local="no">dispatcher.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1select__click__t_1aac30db2484043c37184d96401a5e36d4" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::select_click_t::custom_id</definition>
        <argsstring></argsstring>
        <name>custom_id</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>select menu custom id </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="862" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1select__click__t_1a8f94f1a7b473d0210d9e2b1553db6b76" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; dpp::select_click_t::values</definition>
        <argsstring></argsstring>
        <name>values</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>select menu values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="867" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1select__click__t_1a163eb52d33f1b91333f62f5db98f9ce3" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::select_click_t::component_type</definition>
        <argsstring></argsstring>
        <name>component_type</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>select menu component type (<ref refid="namespacedpp_1afce43206033521b990e3a72bb87481b7" kindref="member">dpp::component_type</ref>) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="872" column="9" bodyfile="include/dpp/dispatcher.h" bodystart="872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1interaction" kindref="compound">interaction</ref></type>
        <definition>interaction dpp::interaction_create_t::command</definition>
        <argsstring></argsstring>
        <name>command</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>command interaction </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="688" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::event_dispatch_t::raw_event</definition>
        <argsstring></argsstring>
        <name>raw_event</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Raw event data. If you are using json on your websocket, this will contain json, and if you are using ETF as your websocket protocol, it will contain raw ETF data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="84" column="13" bodyfile="include/dpp/dispatcher.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a5c277ee79a8ef31736dc3795dbfc8d3f" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::event_dispatch_t::shard</definition>
        <argsstring></argsstring>
        <name>shard</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Shard the event came from. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="89" column="10" bodyfile="include/dpp/dispatcher.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a8a87dcb222d9e2444a50b4df5caa28d4" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> *</type>
        <definition>dpp::cluster* dpp::event_dispatch_t::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Cluster owning the event dispatch. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="94" column="15" bodyfile="include/dpp/dispatcher.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1event__dispatch__t_1a6cd7044ce4450c62ccd77f5f223ac9d6" prot="public" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool dpp::event_dispatch_t::cancelled</definition>
        <argsstring></argsstring>
        <name>cancelled</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Whether the event was cancelled using <ref refid="structdpp_1_1event__dispatch__t_1a54af3a0990fe041d4f5e8ad897367f7f" kindref="member">cancel_event()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="99" column="14" bodyfile="include/dpp/dispatcher.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structdpp_1_1select__click__t_1ae89b601e82f534d5d87135b82a6f0491" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1a710b32b577396ba92917d0578f0bedb6" kindref="member">command_value</ref></type>
        <definition>virtual command_value dpp::interaction_create_t::get_parameter</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>get_parameter</name>
        <reimplements refid="structdpp_1_1interaction__create__t_1ae89b601e82f534d5d87135b82a6f0491">get_parameter</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a slashcommand parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the command line parameter to retrieve the value for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>command_value Returns the value of the first option that matches the given name. If no matches are found, an empty variant is returned.</para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1logic__exception" kindref="compound">dpp::logic_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the interaction is not for a command </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="854" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1select__click__t_1a2500c6d9987fbfc509fd0a960b1968e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>event_dispatch_t &amp; dpp::event_dispatch_t::operator=</definition>
        <argsstring>(const event_dispatch_t &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy another <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to copy from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="857" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1select__click__t_1a4645c2cc7dfe1def0b936d5726f7b8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>event_dispatch_t &amp; dpp::event_dispatch_t::operator=</definition>
        <argsstring>(event_dispatch_t &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Move from another <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The event to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="857" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a34f374b358f8d2d49fa93bfe5a2c0493" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>reply</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Acknowledge interaction without displaying a message to the user, for use with button and select menu components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="482" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1aa5fcd66cf01e5dbce8f5ec921a58db63" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(interaction_response_type t, const message &amp;m, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>reply</name>
        <param>
          <type><ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">interaction_response_type</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reply to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="492" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a946783aee86efa1f18c4d7ceb0e07313" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(interaction_response_type t, const std::string &amp;mt, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>reply</name>
        <param>
          <type><ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">interaction_response_type</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reply to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="502" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1aebdd5a0cd0258a372dc1b55aa594a44a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(const message &amp;m, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>reply</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. Uses the default type of <ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02a5a9b185d739d649208ea5e903391901c" kindref="member">dpp::ir_channel_message_with_source</ref>, a simple message reply. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="512" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a56c5b18e31d5042ce01c814620013d2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::reply</definition>
        <argsstring>(const std::string &amp;mt, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>reply</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. Uses the default type of <ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02a5a9b185d739d649208ea5e903391901c" kindref="member">dpp::ir_channel_message_with_source</ref>, a simple message reply. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="522" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a63076b1d3b1fc2e1c3f97384f1fe8b4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::dialog</definition>
        <argsstring>(const interaction_modal_response &amp;mr, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>dialog</name>
        <param>
          <type>const <ref refid="structdpp_1_1interaction__modal__response" kindref="compound">interaction_modal_response</ref> &amp;</type>
          <declname>mr</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Reply to interaction with a dialog box. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mr</parametername>
</parameternamelist>
<parameterdescription>
<para>Dialog box response to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="531" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a274aaa562766588128c2e3699b515b41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::edit_response</definition>
        <argsstring>(const message &amp;m, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>edit_response</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit the response for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="540" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1aa65d3bc92cad7ef094e90ca05ba45859" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::edit_response</definition>
        <argsstring>(const std::string &amp;mt, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>edit_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit the response for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="549" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ab0c0133ac861e7752cd700903303b7fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::thinking</definition>
        <argsstring>(bool ephemeral=false, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>thinking</name>
        <param>
          <type>bool</type>
          <declname>ephemeral</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Set the bot to &apos;thinking&apos; state where you have up to 15 minutes to respond. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ephemeral</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the thinking state should be ephemeral </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>User function to execute when the api call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="558" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ad106ea02219af2a9bc35519f3bde6b36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::get_original_response</definition>
        <argsstring>(command_completion_event_t callback) const</argsstring>
        <name>get_original_response</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Get original response message for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="566" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a10553ebb8d10ba58595f825e0a89eb1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::edit_original_response</definition>
        <argsstring>(const message &amp;m, command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>edit_original_response</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Edit original response message for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="575" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a42a7aada4ad321e9d8e3645b8b4abc97" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::interaction_create_t::delete_original_response</definition>
        <argsstring>(command_completion_event_t callback=utility::log_error()) const</argsstring>
        <name>delete_original_response</name>
        <param>
          <type><ref refid="namespacedpp_1a022dce6b086ec4515384eaece59c84c3" kindref="member">command_completion_event_t</ref></type>
          <declname>callback</declname>
          <defval><ref refid="namespacedpp_1_1utility_1ab1b44934665a2561416383fb2229523e" kindref="member">utility::log_error</ref>()</defval>
        </param>
        <briefdescription>
<para>Delete original response message for this interaction. This cannot be used on an ephemeral interaction response. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to call when the API call completes. On success the callback will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="583" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1aef38626cd24d2212b00ab866509b4d59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_reply</definition>
        <argsstring>() const</argsstring>
        <name>co_reply</name>
        <briefdescription>
<para>Acknowledge interaction without displaying a message to the user, for use with button and select menu components. </para>
        </briefdescription>
        <detaileddescription>
<para>On success the result will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="592" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1aeaaeeed81b2738f3dbf3d4f17baa3e01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_reply</definition>
        <argsstring>(interaction_response_type t, const message &amp;m) const</argsstring>
        <name>co_reply</name>
        <param>
          <type><ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">interaction_response_type</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reply to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. On success the result will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="601" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1af68b2c54385a774c9449767c3e8a0009" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_reply</definition>
        <argsstring>(interaction_response_type t, const std::string &amp;mt) const</argsstring>
        <name>co_reply</name>
        <param>
          <type><ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02" kindref="member">interaction_response_type</ref></type>
          <declname>t</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of reply to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages On success the result will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="610" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a55485a78435f1a2498d811eacd43a6b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_reply</definition>
        <argsstring>(const message &amp;m) const</argsstring>
        <name>co_reply</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. Uses the default type of <ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02a5a9b185d739d649208ea5e903391901c" kindref="member">dpp::ir_channel_message_with_source</ref>, a simple message reply. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. On success the result will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="619" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a3d19641b6ca6555ccbb3cdb8d6d5f6cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_reply</definition>
        <argsstring>(const std::string &amp;mt) const</argsstring>
        <name>co_reply</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
<para>Send a reply for this interaction. Uses the default type of <ref refid="namespacedpp_1a83479ddaa45166def7719d5511b09d02a5a9b185d739d649208ea5e903391901c" kindref="member">dpp::ir_channel_message_with_source</ref>, a simple message reply. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages On success the result will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="628" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a9b2d33b445fe6a52fbd1b360e5c508e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_dialog</definition>
        <argsstring>(const interaction_modal_response &amp;mr) const</argsstring>
        <name>co_dialog</name>
        <param>
          <type>const <ref refid="structdpp_1_1interaction__modal__response" kindref="compound">interaction_modal_response</ref> &amp;</type>
          <declname>mr</declname>
        </param>
        <briefdescription>
<para>Reply to interaction with a dialog box. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mr</parametername>
</parameternamelist>
<parameterdescription>
<para>Dialog box response to send On success the result will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="636" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a914fd9aeb7c024b64ea14ba242bab7b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_edit_response</definition>
        <argsstring>(const message &amp;m) const</argsstring>
        <name>co_edit_response</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit the response for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. On success the result will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="644" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a1ba986260d9b3cb8c1c6e85068859a4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_edit_response</definition>
        <argsstring>(const std::string &amp;mt) const</argsstring>
        <name>co_edit_response</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mt</declname>
        </param>
        <briefdescription>
<para>Edit the response for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value to send, for simple text only messages On success the result will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="652" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ad4a64cd698d33194ab0c2df06401c0e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_thinking</definition>
        <argsstring>(bool ephemeral=false) const</argsstring>
        <name>co_thinking</name>
        <param>
          <type>bool</type>
          <declname>ephemeral</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Set the bot to &apos;thinking&apos; state where you have up to 15 minutes to respond. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ephemeral</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the thinking state should be ephemeral On success the result will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="660" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a8549c7355b20a240bb2b8f4349b21ea1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_get_original_response</definition>
        <argsstring>() const</argsstring>
        <name>co_get_original_response</name>
        <briefdescription>
<para>Get original response message for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para>On success the result will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="667" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a1f60e65ea13b897d2f64f776201db3e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_edit_original_response</definition>
        <argsstring>(const message &amp;m) const</argsstring>
        <name>co_edit_original_response</name>
        <param>
          <type>const <ref refid="structdpp_1_1message" kindref="compound">message</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Edit original response message for this interaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>Message object to send. Not all fields are supported by Discord. On success the result will contain a <ref refid="structdpp_1_1message" kindref="compound">dpp::message</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="675" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a5638e046acca0e77f749483f885803eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1async" kindref="compound">dpp::async</ref>&lt; <ref refid="structdpp_1_1confirmation__callback__t" kindref="compound">dpp::confirmation_callback_t</ref> &gt;</type>
        <definition>dpp::async&lt; dpp::confirmation_callback_t &gt; dpp::interaction_create_t::co_delete_original_response</definition>
        <argsstring>() const</argsstring>
        <name>co_delete_original_response</name>
        <briefdescription>
<para>Delete original response message for this interaction. This cannot be used on an ephemeral interaction response. </para>
        </briefdescription>
        <detaileddescription>
<para>On success the result will contain a <ref refid="structdpp_1_1confirmation" kindref="compound">dpp::confirmation</ref> object in <ref refid="structdpp_1_1confirmation__callback__t_1a4725ef83209a64c0558a598ec01ad463" kindref="member">confirmation_callback_t::value</ref>. On failure, the value is undefined and <ref refid="structdpp_1_1confirmation__callback__t_1a17820d5f9fb0725d64a1bf23c8cc97c7" kindref="member">confirmation_callback_t::is_error()</ref> method will return true. You can obtain full error details with <ref refid="structdpp_1_1confirmation__callback__t_1a79dda1493a0788577d84a8ad82cf7e55" kindref="member">confirmation_callback_t::get_error()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="682" column="12"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ad761e8dec36073665f520aaa13fbe6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::event_dispatch_t::event_dispatch_t</definition>
        <argsstring>()=default</argsstring>
        <name>event_dispatch_t</name>
        <briefdescription>
<para>Construct a new <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1ae250d3a1ee0ad2e90ad075e1aead5478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::event_dispatch_t::event_dispatch_t</definition>
        <argsstring>(const event_dispatch_t &amp;rhs)=default</argsstring>
        <name>event_dispatch_t</name>
        <param>
          <type>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object to copy from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1aae35038ecb874c46e355fac3863615d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::event_dispatch_t::event_dispatch_t</definition>
        <argsstring>(event_dispatch_t &amp;&amp;rhs)=default</argsstring>
        <name>event_dispatch_t</name>
        <param>
          <type><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a143ee2c836c05740204e3d90f26d148b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::event_dispatch_t::event_dispatch_t</definition>
        <argsstring>(dpp::cluster *creator, uint32_t shard_id, const std::string &amp;raw)</argsstring>
        <name>event_dispatch_t</name>
        <param>
          <type><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> *</type>
          <declname>creator</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shard_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shard_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event data as JSON or ETF </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1interaction__create__t_1a1fa0821763f9cd81e1bc4935cda31204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::event_dispatch_t::event_dispatch_t</definition>
        <argsstring>(dpp::cluster *creator, uint32_t shard_id, std::string &amp;&amp;raw)</argsstring>
        <name>event_dispatch_t</name>
        <param>
          <type><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> *</type>
          <declname>creator</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shard_id</declname>
        </param>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shard_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The shard the event originated on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw event data as JSON or ETF </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1a7ef6731ea526ef76928c459e19723fbb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
        <definition>discord_client * dpp::event_dispatch_t::from</definition>
        <argsstring>() const</argsstring>
        <name>from</name>
        <briefdescription>
<para>Returns the shard object for the events shard id. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>discord client object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="132" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1a5afbcd36109734ad0fca14ec848b73b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>const event_dispatch_t &amp; dpp::event_dispatch_t::cancel_event</definition>
        <argsstring>() const</argsstring>
        <name>cancel_event</name>
        <briefdescription>
<para>Cancels the event in progress. Any other attached lambdas for this event after this one are not called. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This will modify the event object in a non-thread-safe manner. </para>
</simplesect>
<simplesect kind="return"><para>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref>&amp; reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="171" column="24"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1a54af3a0990fe041d4f5e8ad897367f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref> &amp;</type>
        <definition>event_dispatch_t &amp; dpp::event_dispatch_t::cancel_event</definition>
        <argsstring>()</argsstring>
        <name>cancel_event</name>
        <briefdescription>
<para>Cancels the event in progress. Any other attached lambdas for this event after this one are not called. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This will modify the event object in a non-thread-safe manner. </para>
</simplesect>
<simplesect kind="return"><para>const <ref refid="structdpp_1_1event__dispatch__t" kindref="compound">event_dispatch_t</ref>&amp; reference to self for chaining </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="179" column="18"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1event__dispatch__t_1aca2880114f69b7ba62eb5137824c1432" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::event_dispatch_t::is_cancelled</definition>
        <argsstring>() const</argsstring>
        <name>is_cancelled</name>
        <briefdescription>
<para>Returns true if the event is cancelled. Note that event cancellation is a thread local state, and not stored in the object (because object which can be cancelled is <computeroutput>const</computeroutput> during the event, and cannot itself contain the changeable state). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the event is cancelled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="187" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Click on select. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
      </node>
      <node id="2">
        <label>dpp::interaction_create_t</label>
        <link refid="structdpp_1_1interaction__create__t"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dpp::select_click_t</label>
        <link refid="structdpp_1_1select__click__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="36">
        <label>auto_archive_duration_t</label>
      </node>
      <node id="25">
        <label>bool</label>
      </node>
      <node id="20">
        <label>cache_policy_setting_t</label>
      </node>
      <node id="37">
        <label>default_forum_sort_order_t</label>
      </node>
      <node id="9">
        <label>double</label>
      </node>
      <node id="19">
        <label>dpp::cache_policy_t</label>
        <link refid="structdpp_1_1cache__policy__t"/>
        <childnode refid="20" relation="usage">
          <edgelabel>channel_policy</edgelabel>
          <edgelabel>emoji_policy</edgelabel>
          <edgelabel>guild_policy</edgelabel>
          <edgelabel>role_policy</edgelabel>
          <edgelabel>user_policy</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>dpp::channel</label>
        <link refid="classdpp_1_1channel"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>CHANNEL_TYPE_MASK</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>rtc_region</edgelabel>
          <edgelabel>topic</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>available_tags</edgelabel>
          <edgelabel>permission_overwrites</edgelabel>
          <edgelabel>recipients</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>default_reaction</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>icon</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>last_message_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>parent_id</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_pin_timestamp</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>permissions</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>bitrate</edgelabel>
          <edgelabel>default_thread_rate_limit_per_user</edgelabel>
          <edgelabel>flags</edgelabel>
          <edgelabel>position</edgelabel>
          <edgelabel>rate_limit_per_user</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>default_auto_archive_duration</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>default_sort_order</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>user_limit</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="4" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>rest_ping</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>ws_mode</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>terminating</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>request_timeout</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>socketengine</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>on_autocomplete</edgelabel>
          <edgelabel>on_automod_rule_create</edgelabel>
          <edgelabel>on_automod_rule_delete</edgelabel>
          <edgelabel>on_automod_rule_execute</edgelabel>
          <edgelabel>on_automod_rule_update</edgelabel>
          <edgelabel>on_button_click</edgelabel>
          <edgelabel>on_channel_create</edgelabel>
          <edgelabel>on_channel_delete</edgelabel>
          <edgelabel>on_channel_pins_update</edgelabel>
          <edgelabel>on_channel_update</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>dpp::command_resolved</label>
        <link refid="structdpp_1_1command__resolved"/>
        <childnode refid="28" relation="usage">
          <edgelabel>attachments</edgelabel>
          <edgelabel>channels</edgelabel>
          <edgelabel>member_permissions</edgelabel>
          <edgelabel>members</edgelabel>
          <edgelabel>messages</edgelabel>
          <edgelabel>roles</edgelabel>
          <edgelabel>users</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::event_dispatch_t</label>
        <link refid="structdpp_1_1event__dispatch__t"/>
        <childnode refid="4" relation="usage">
          <edgelabel>raw_event</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>shard</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>cancelled</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>dpp::interaction</label>
        <link refid="classdpp_1_1interaction"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>authorizing_integration_owners</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>context</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>application_id</edgelabel>
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>type</edgelabel>
          <edgelabel>version</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>channel</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>app_permissions</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>msg</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>guild_locale</edgelabel>
          <edgelabel>locale</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>resolved</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>cache_policy</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>entitlements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::interaction_create_t</label>
        <link refid="structdpp_1_1interaction__create__t"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>command</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>dpp::interaction_metadata_type</label>
        <link refid="structdpp_1_1interaction__metadata__type"/>
        <childnode refid="12" relation="usage">
          <edgelabel>id</edgelabel>
          <edgelabel>interacted_message_id</edgelabel>
          <edgelabel>original_response_message_id</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="11">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="12" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>dpp::message</label>
        <link refid="structdpp_1_1message"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>webhook_id</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>author</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>member</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>content</edgelabel>
          <edgelabel>nonce</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>attachments</edgelabel>
          <edgelabel>components</edgelabel>
          <edgelabel>embeds</edgelabel>
          <edgelabel>file_data</edgelabel>
          <edgelabel>mention_channels</edgelabel>
          <edgelabel>mention_roles</edgelabel>
          <edgelabel>mentions</edgelabel>
          <edgelabel>reactions</edgelabel>
          <edgelabel>stickers</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>edited</edgelabel>
          <edgelabel>sent</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>message_reference</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>message_snapshots</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>interaction</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>interaction_metadata</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>allowed_mentions</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>mention_everyone</edgelabel>
          <edgelabel>pinned</edgelabel>
          <edgelabel>tts</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>attached_poll</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>dpp::message::allowed_ref</label>
        <link refid="structdpp_1_1message_1_1allowed__ref"/>
        <childnode refid="25" relation="usage">
          <edgelabel>parse_everyone</edgelabel>
          <edgelabel>parse_roles</edgelabel>
          <edgelabel>parse_users</edgelabel>
          <edgelabel>replied_user</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>roles</edgelabel>
          <edgelabel>users</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>dpp::message::message_interaction_struct</label>
        <link refid="structdpp_1_1message_1_1message__interaction__struct"/>
        <childnode refid="12" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>usr</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>dpp::message::message_ref</label>
        <link refid="structdpp_1_1message_1_1message__ref"/>
        <childnode refid="43" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>channel_id</edgelabel>
          <edgelabel>guild_id</edgelabel>
          <edgelabel>message_id</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>fail_if_not_exists</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>dpp::permission</label>
        <link refid="classdpp_1_1permission"/>
        <childnode refid="13" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::select_click_t</label>
        <link refid="structdpp_1_1select__click__t"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>custom_id</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>values</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>component_type</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="13" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>global_name</edgelabel>
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>avatar</edgelabel>
          <edgelabel>avatar_decoration</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="13" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>event_router_t&lt;</label>
      </node>
      <node id="32">
        <label>dpp::json_interface&lt; channel &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="15" relation="template-instance">
          <edgelabel>&lt; channel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>dpp::json_interface&lt; guild_member &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="15" relation="template-instance">
          <edgelabel>&lt; guild_member &gt;</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>dpp::json_interface&lt; interaction &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="15" relation="template-instance">
          <edgelabel>&lt; interaction &gt;</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>dpp::json_interface&lt; message &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="15" relation="template-instance">
          <edgelabel>&lt; message &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="15" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>message_ref_type</label>
      </node>
      <node id="44">
        <label>message_snapshot&lt;</label>
      </node>
      <node id="48">
        <label>message_type</label>
      </node>
      <node id="33">
        <label>static constexpr uint16_t</label>
      </node>
      <node id="22">
        <label>atomic_bool</label>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="28">
        <label>map&lt;</label>
      </node>
      <node id="29">
        <label>optional&lt;</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>unique_ptr&lt;</label>
      </node>
      <node id="30">
        <label>variant&lt;</label>
      </node>
      <node id="34">
        <label>vector&lt;</label>
      </node>
      <node id="8">
        <label>time_t</label>
      </node>
      <node id="17">
        <label>uint16_t</label>
      </node>
      <node id="6">
        <label>uint32_t</label>
      </node>
      <node id="13">
        <label>uint64_t</label>
      </node>
      <node id="18">
        <label>uint8_t</label>
      </node>
      <node id="21">
        <label>websocket_protocol_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/dispatcher.h" line="852" column="1" bodyfile="include/dpp/dispatcher.h" bodystart="852" bodyend="873"/>
    <listofallmembers>
      <member refid="structdpp_1_1event__dispatch__t_1a5afbcd36109734ad0fca14ec848b73b7" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>cancel_event</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a54af3a0990fe041d4f5e8ad897367f7f" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>cancel_event</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a6cd7044ce4450c62ccd77f5f223ac9d6" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>cancelled</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a5638e046acca0e77f749483f885803eb" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_delete_original_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a9b2d33b445fe6a52fbd1b360e5c508e6" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_dialog</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a1f60e65ea13b897d2f64f776201db3e8" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_edit_original_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a914fd9aeb7c024b64ea14ba242bab7b3" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_edit_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a1ba986260d9b3cb8c1c6e85068859a4d" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_edit_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a8549c7355b20a240bb2b8f4349b21ea1" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_get_original_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1aef38626cd24d2212b00ab866509b4d59" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1aeaaeeed81b2738f3dbf3d4f17baa3e01" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1af68b2c54385a774c9449767c3e8a0009" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a55485a78435f1a2498d811eacd43a6b5" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a3d19641b6ca6555ccbb3cdb8d6d5f6cb" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ad4a64cd698d33194ab0c2df06401c0e5" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>co_thinking</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a8b0c69c156a1e532507a918c13414f14" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>command</name></member>
      <member refid="structdpp_1_1select__click__t_1a163eb52d33f1b91333f62f5db98f9ce3" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>component_type</name></member>
      <member refid="structdpp_1_1select__click__t_1aac30db2484043c37184d96401a5e36d4" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>custom_id</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a42a7aada4ad321e9d8e3645b8b4abc97" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>delete_original_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a63076b1d3b1fc2e1c3f97384f1fe8b4b" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>dialog</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a10553ebb8d10ba58595f825e0a89eb1b" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>edit_original_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a274aaa562766588128c2e3699b515b41" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>edit_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1aa65d3bc92cad7ef094e90ca05ba45859" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>edit_response</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ad761e8dec36073665f520aaa13fbe6dc" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ae250d3a1ee0ad2e90ad075e1aead5478" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1interaction__create__t_1aae35038ecb874c46e355fac3863615d0" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a143ee2c836c05740204e3d90f26d148b" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a1fa0821763f9cd81e1bc4935cda31204" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>event_dispatch_t</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a7ef6731ea526ef76928c459e19723fbb" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>from</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ad106ea02219af2a9bc35519f3bde6b36" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>get_original_response</name></member>
      <member refid="structdpp_1_1select__click__t_1ae89b601e82f534d5d87135b82a6f0491" prot="private" virt="virtual"><scope>dpp::select_click_t</scope><name>get_parameter</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1aca2880114f69b7ba62eb5137824c1432" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>is_cancelled</name></member>
      <member refid="structdpp_1_1select__click__t_1a2500c6d9987fbfc509fd0a960b1968e9" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>operator=</name></member>
      <member refid="structdpp_1_1select__click__t_1a4645c2cc7dfe1def0b936d5726f7b8db" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>operator=</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a8a87dcb222d9e2444a50b4df5caa28d4" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>owner</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a2d4777d1049d31ed943ecebfa2de7db9" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>raw_event</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a34f374b358f8d2d49fa93bfe5a2c0493" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1aa5fcd66cf01e5dbce8f5ec921a58db63" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a946783aee86efa1f18c4d7ceb0e07313" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1aebdd5a0cd0258a372dc1b55aa594a44a" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>reply</name></member>
      <member refid="structdpp_1_1interaction__create__t_1a56c5b18e31d5042ce01c814620013d2d" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>reply</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a5c277ee79a8ef31736dc3795dbfc8d3f" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>shard</name></member>
      <member refid="structdpp_1_1interaction__create__t_1ab0c0133ac861e7752cd700903303b7fb" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>thinking</name></member>
      <member refid="structdpp_1_1select__click__t_1a8f94f1a7b473d0210d9e2b1553db6b76" prot="public" virt="non-virtual"><scope>dpp::select_click_t</scope><name>values</name></member>
      <member refid="structdpp_1_1event__dispatch__t_1a2bed0468ebf80c46bf6ee2407afa2cfd" prot="public" virt="virtual"><scope>dpp::select_click_t</scope><name>~event_dispatch_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
