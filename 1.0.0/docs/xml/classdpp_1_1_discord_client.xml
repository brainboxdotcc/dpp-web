<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1_discord_client" kind="class" language="C++" prot="public">
    <compoundname>dpp::DiscordClient</compoundname>
    <basecompoundref refid="classdpp_1_1_w_s_client" prot="public" virt="non-virtual">dpp::WSClient</basecompoundref>
    <includes local="no">discordclient.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a2baa7c9b6ee89c897a8a72b122c59ca5" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex dpp::DiscordClient::queue_mutex</definition>
        <argsstring></argsstring>
        <name>queue_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mutex for message queue </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="131" column="12" bodyfile="include/dpp/discordclient.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a62d58639111f83040445900eb7fb099f" prot="private" static="no" mutable="no">
        <type>std::deque&lt; std::string &gt;</type>
        <definition>std::deque&lt;std::string&gt; dpp::DiscordClient::message_queue</definition>
        <argsstring></argsstring>
        <name>message_queue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Queue of outbound messages </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="134" column="12" bodyfile="include/dpp/discordclient.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1acc566dd9a4a7f2260475bd5fcf097cee" prot="private" static="no" mutable="no">
        <type>std::thread *</type>
        <definition>std::thread* dpp::DiscordClient::runner</definition>
        <argsstring></argsstring>
        <name>runner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread this shard is executing on </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="137" column="13" bodyfile="include/dpp/discordclient.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a31d6a02b20a669e7da72d8ebf470b69e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::DiscordClient::compressed</definition>
        <argsstring></argsstring>
        <name>compressed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If true, stream compression is enabled </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="143" column="6" bodyfile="include/dpp/discordclient.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1aa27fd0d485a71966604617396d125c42" prot="private" static="no" mutable="no">
        <type>unsigned char *</type>
        <definition>unsigned char* dpp::DiscordClient::decomp_buffer</definition>
        <argsstring></argsstring>
        <name>decomp_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ZLib decompression buffer </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="146" column="15" bodyfile="include/dpp/discordclient.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a2934d73c27d1e6f52061c11d75966fb7" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::DiscordClient::decompressed</definition>
        <argsstring></argsstring>
        <name>decompressed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decompressed string </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="149" column="13" bodyfile="include/dpp/discordclient.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a8ef7836b00c96e2ea28aeb4066353fb1" prot="private" static="no" mutable="no">
        <type>z_stream</type>
        <definition>z_stream dpp::DiscordClient::d_stream</definition>
        <argsstring></argsstring>
        <name>d_stream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Frame decompression stream </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="152" column="10" bodyfile="include/dpp/discordclient.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a58869bbff20d96b1bdeaf61ec6e705f0" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::DiscordClient::decompressed_total</definition>
        <argsstring></argsstring>
        <name>decompressed_total</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total decompressed received bytes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="155" column="10" bodyfile="include/dpp/discordclient.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a47fdb74709ee5b410f0c6d90ebe19df3" prot="private" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::DiscordClient::connect_time</definition>
        <argsstring></argsstring>
        <name>connect_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Last connect time of cluster </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="158" column="8" bodyfile="include/dpp/discordclient.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a19d9f327851471564dff0a14747cee61" prot="public" static="no" mutable="no">
        <type>class <ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> *</type>
        <definition>class dpp::cluster* dpp::DiscordClient::creator</definition>
        <argsstring></argsstring>
        <name>creator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Owning cluster </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="172" column="20" bodyfile="include/dpp/discordclient.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1aec067deea84d1bb3cc9758a706d6a752" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::DiscordClient::heartbeat_interval</definition>
        <argsstring></argsstring>
        <name>heartbeat_interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Heartbeat interval for sending heartbeat keepalive </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="175" column="10" bodyfile="include/dpp/discordclient.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a2b3c200987ebb05c44d1ddf3a952735a" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::DiscordClient::last_heartbeat</definition>
        <argsstring></argsstring>
        <name>last_heartbeat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Last heartbeat </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="178" column="8" bodyfile="include/dpp/discordclient.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a7084de0988d7ad23ce362946488f7caf" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::DiscordClient::shard_id</definition>
        <argsstring></argsstring>
        <name>shard_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shard ID of this client </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="181" column="10" bodyfile="include/dpp/discordclient.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1abbd1435159d8d833e7e6a8c3b56ecd35" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::DiscordClient::max_shards</definition>
        <argsstring></argsstring>
        <name>max_shards</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total number of shards </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="184" column="10" bodyfile="include/dpp/discordclient.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a94277b0931bb41e594da4392a324acd1" prot="public" static="no" mutable="no">
        <type>std::thread::native_handle_type</type>
        <definition>std::thread::native_handle_type dpp::DiscordClient::thread_id</definition>
        <argsstring></argsstring>
        <name>thread_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread ID </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="187" column="33" bodyfile="include/dpp/discordclient.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1af784706855b3c7a7111da0889793b972" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::DiscordClient::last_seq</definition>
        <argsstring></argsstring>
        <name>last_seq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Last sequence number received, for resumes and pings </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="190" column="10" bodyfile="include/dpp/discordclient.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a5290abfb09876ab2e536c81b920e6b84" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::DiscordClient::token</definition>
        <argsstring></argsstring>
        <name>token</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discord bot token </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="193" column="13" bodyfile="include/dpp/discordclient.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1adb232854fb824fa3fb2c42339eebdbac" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::DiscordClient::intents</definition>
        <argsstring></argsstring>
        <name>intents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Privileged gateway intents </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="196" column="10" bodyfile="include/dpp/discordclient.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a56ab6234f912ee0606ec8f235f62af40" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::DiscordClient::sessionid</definition>
        <argsstring></argsstring>
        <name>sessionid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Discord session id </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="199" column="13" bodyfile="include/dpp/discordclient.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a9f6579908d9a4d0a2d895ee22f68fd00" prot="public" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex dpp::DiscordClient::voice_mutex</definition>
        <argsstring></argsstring>
        <name>voice_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mutex for voice connections map </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="202" column="12" bodyfile="include/dpp/discordclient.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a5b17f9e6693d273925745b2d865e6392" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::DiscordClient::resumes</definition>
        <argsstring></argsstring>
        <name>resumes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resume count </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="205" column="10" bodyfile="include/dpp/discordclient.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a772b993a18d2929711e7f4b667adf1a4" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::DiscordClient::reconnects</definition>
        <argsstring></argsstring>
        <name>reconnects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reconnection count </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="208" column="10" bodyfile="include/dpp/discordclient.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a156bcfad81ed6f750ca5105f35e9599d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::DiscordClient::ready</definition>
        <argsstring></argsstring>
        <name>ready</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if READY or RESUMED has been received </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="211" column="6" bodyfile="include/dpp/discordclient.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1afd4dc650ef2eadb12ea1855b637e08fc" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::DiscordClient::last_heartbeat_ack</definition>
        <argsstring></argsstring>
        <name>last_heartbeat_ack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Last heartbeat ACK (opcode 11) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="214" column="8" bodyfile="include/dpp/discordclient.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_discord_client_1a8f64484e8c93a2e98dac160db3bc6d6a" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, <ref refid="classdpp_1_1voiceconn" kindref="compound">voiceconn</ref> * &gt;</type>
        <definition>std::unordered_map&lt;snowflake, voiceconn*&gt; dpp::DiscordClient::connecting_voice_channels</definition>
        <argsstring></argsstring>
        <name>connecting_voice_channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of voice channels we are connecting to keyed by guild id </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="217" column="20" bodyfile="include/dpp/discordclient.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ac6292cb6c5074d4bfdcfda12fe15997b" prot="public" static="no" mutable="no">
        <type>std::function&lt; int()&gt;</type>
        <definition>std::function&lt;int()&gt; dpp::SSLClient::custom_readable_fd</definition>
        <argsstring></argsstring>
        <name>custom_readable_fd</name>
        <briefdescription>
<para>Attaching an additional file descriptor to this function will send notifications when there is data to read. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Only hook this if you NEED it as it can increase CPU usage of the thread! Returning -1 means that you don&apos;t want to be notified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="96" column="15" bodyfile="include/dpp/sslclient.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ab89687d0e40aac259389a22a1c900444" prot="public" static="no" mutable="no">
        <type>std::function&lt; int()&gt;</type>
        <definition>std::function&lt;int()&gt; dpp::SSLClient::custom_writeable_fd</definition>
        <argsstring></argsstring>
        <name>custom_writeable_fd</name>
        <briefdescription>
<para>Attaching an additional file descriptor to this function will send notifications when you are able to write to the socket. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Only hook this if you NEED it as it can increase CPU usage of the thread! You should toggle this to -1 when you do not have anything to write otherwise it&apos;ll keep triggering repeatedly (it is level triggered). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="105" column="15" bodyfile="include/dpp/sslclient.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a9122566a8d8306a3b1e17eec6cba1584" prot="public" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; dpp::SSLClient::custom_readable_ready</definition>
        <argsstring></argsstring>
        <name>custom_readable_ready</name>
        <briefdescription>
<para>This event will be called when you can read from the custom fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="110" column="15" bodyfile="include/dpp/sslclient.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1acbb60605bfc2a132df49ec23a062bb7c" prot="public" static="no" mutable="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>std::function&lt;void()&gt; dpp::SSLClient::custom_writeable_ready</definition>
        <argsstring></argsstring>
        <name>custom_writeable_ready</name>
        <briefdescription>
<para>This event will be called when you can write to a custom fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="115" column="15" bodyfile="include/dpp/sslclient.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1_discord_client_1acb2238be5a961c42badb60df8cd5a651" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::ThreadRun</definition>
        <argsstring>()</argsstring>
        <name>ThreadRun</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run shard loop under a thread </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="140" column="6" bodyfile="src/dpp/discordclient.cpp" bodystart="102" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1a2b7fe891d7d6be9009cd2d0b36c14da3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::SetupZLib</definition>
        <argsstring>()</argsstring>
        <name>SetupZLib</name>
        <briefdescription>
<para>Initialise ZLib. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="163" column="6" bodyfile="src/dpp/discordclient.cpp" bodystart="77" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1acb583a9fc86bbfaa9e2d1efb6286bb1f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::EndZLib</definition>
        <argsstring>()</argsstring>
        <name>EndZLib</name>
        <briefdescription>
<para>Shut down ZLib. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="168" column="6" bodyfile="src/dpp/discordclient.cpp" bodystart="91" bodyend="100"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1_discord_client_1a4058e9092dfe1cab785b40b2eb82ef61" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg)</argsstring>
        <name>log</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1ab1c4f65dd6a11daf02f38016639e0b93">log</reimplements>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Log a message to whatever log the user is using. The logged message is passed up the chain to the on_log event in user code which can then do whatever it wants to do with it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>The log level from <ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>The log message to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="225" column="14" bodyfile="src/dpp/discordclient.cpp" bodystart="335" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1a5a42709bad212016407d931b3222208d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::HandleEvent</definition>
        <argsstring>(const std::string &amp;event, json &amp;j, const std::string &amp;raw)</argsstring>
        <name>HandleEvent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>event</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle an event (opcode 0) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event name, e.g. MESSAGE_CREATE </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON object for the event content </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw JSON event string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="232" column="14" bodyfile="src/dpp/discordevents.cpp" bodystart="233" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1adc332d2c7041218dd1e3b6ec18f37768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::DiscordClient::GetGuildCount</definition>
        <argsstring>()</argsstring>
        <name>GetGuildCount</name>
        <briefdescription>
<para>Get the Guild Count for this shard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t guild count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="239" column="10" bodyfile="src/dpp/discordclient.cpp" bodystart="416" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1abb1c3c01f43b6aae65bd3509a3d173bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::DiscordClient::GetMemberCount</definition>
        <argsstring>()</argsstring>
        <name>GetMemberCount</name>
        <briefdescription>
<para>Get the Member Count for this shard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t member count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="246" column="10" bodyfile="src/dpp/discordclient.cpp" bodystart="431" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1aee957608fa5e0dd61529029481fe8da4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::DiscordClient::GetChannelCount</definition>
        <argsstring>()</argsstring>
        <name>GetChannelCount</name>
        <briefdescription>
<para>Get the Channel Count for this shard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t channel count </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="253" column="10" bodyfile="src/dpp/discordclient.cpp" bodystart="446" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1aa2669c9fb6b3b3bb285fb77e1575e15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::OneSecondTimer</definition>
        <argsstring>()</argsstring>
        <name>OneSecondTimer</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1a6efb69c408ef0bd8c4e36322a4a5bc4f">OneSecondTimer</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fires every second from the underlying socket I/O loop, used for sending heartbeats </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="256" column="14" bodyfile="src/dpp/discordclient.cpp" bodystart="368" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1a342f3fbb10c77db648bd388f2f7c3f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::QueueMessage</definition>
        <argsstring>(const std::string &amp;j, bool to_front=false)</argsstring>
        <name>QueueMessage</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>to_front</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Queue a message to be sent via the websocket. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON data of the message to be sent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_front</parametername>
</parameternamelist>
<parameterdescription>
<para>If set to true, will place the message at the front of the queue not the back (this is for urgent messages such as heartbeat, presence, so they can take precedence over chunk requests etc) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="266" column="6" bodyfile="src/dpp/discordclient.cpp" bodystart="346" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1a3abe2f8bf50da860681f42882bd5e1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::ClearQueue</definition>
        <argsstring>()</argsstring>
        <name>ClearQueue</name>
        <briefdescription>
<para>Clear the outbound message queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="272" column="6" bodyfile="src/dpp/discordclient.cpp" bodystart="356" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1ae032b61151227db9444da100bdba5477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::DiscordClient::GetQueueSize</definition>
        <argsstring>()</argsstring>
        <name>GetQueueSize</name>
        <briefdescription>
<para>Get the size of the outbound message queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the queue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="279" column="8" bodyfile="src/dpp/discordclient.cpp" bodystart="362" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1af38e708e6621c1a56c75920f8de22d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::DiscordClient::IsConnected</definition>
        <argsstring>()</argsstring>
        <name>IsConnected</name>
        <briefdescription>
<para>Returns true if the shard is connected. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if connected </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="286" column="6" bodyfile="src/dpp/discordclient.cpp" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1a67337758833bd3809344939f889ed795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref></type>
        <definition>dpp::utility::uptime dpp::DiscordClient::Uptime</definition>
        <argsstring>()</argsstring>
        <name>Uptime</name>
        <briefdescription>
<para>Returns the connection time of the shard. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structdpp_1_1utility_1_1uptime" kindref="compound">dpp::utility::uptime</ref> Detail of how long the shard has been connected for </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="293" column="22" bodyfile="src/dpp/discordclient.cpp" bodystart="279" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1a75883c772c819fba70b7f94bdf20f8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::DiscordClient::DiscordClient</definition>
        <argsstring>(dpp::cluster *_cluster, uint32_t _shard_id, uint32_t _max_shards, const std::string &amp;_token, uint32_t intents=0, bool compressed=true)</argsstring>
        <name>DiscordClient</name>
        <param>
          <type><ref refid="classdpp_1_1cluster" kindref="compound">dpp::cluster</ref> *</type>
          <declname>_cluster</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_shard_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_max_shards</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>_token</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>intents</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>compressed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor takes shard id, max shards and token. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_cluster</parametername>
</parameternamelist>
<parameterdescription>
<para>The owning cluster for this shard </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_shard_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the shard to start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_max_shards</parametername>
</parameternamelist>
<parameterdescription>
<para>The total number of shards across all clusters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_token</parametername>
</parameternamelist>
<parameterdescription>
<para>The bot token to use for identifying to the websocket </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intents</parametername>
</parameternamelist>
<parameterdescription>
<para>Privileged intents to use, a bitmask of values from <ref refid="namespacedpp_1a0042c0fc8164da4239b977d5be8e2ef5" kindref="member">dpp::intents</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compressed</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the received data will be gzip compressed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="303" column="1" bodyfile="src/dpp/discordclient.cpp" bodystart="42" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1a21bc64e43bb96f358d0b41c756a54806" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>dpp::DiscordClient::~DiscordClient</definition>
        <argsstring>()</argsstring>
        <name>~DiscordClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="306" column="9" bodyfile="src/dpp/discordclient.cpp" bodystart="64" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1af4da058680420de06ce456bda6b42eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::DiscordClient::GetDeompressedBytesIn</definition>
        <argsstring>()</argsstring>
        <name>GetDeompressedBytesIn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get decompressed total bytes received </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="309" column="10" bodyfile="src/dpp/discordclient.cpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1a16403bb55f8ba86a155a3d0f7988d43c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool dpp::DiscordClient::HandleFrame</definition>
        <argsstring>(const std::string &amp;buffer)</argsstring>
        <name>HandleFrame</name>
        <reimplements refid="classdpp_1_1_w_s_client_1ac776a120570dedf29b95b5975a5e2eec">HandleFrame</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle JSON from the websocket. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The entire buffer content from the websocket client </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if a frame has been handled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="315" column="14" bodyfile="src/dpp/discordclient.cpp" bodystart="123" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1ad99b7ac2d3d9076b4a21b71adf5d3329" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::Error</definition>
        <argsstring>(uint32_t errorcode)</argsstring>
        <name>Error</name>
        <reimplements refid="classdpp_1_1_w_s_client_1a353b17a92ae14dc01aa1cdc3bfd166b0">Error</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>errorcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle a websocket error. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errorcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error returned from the websocket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="320" column="14" bodyfile="src/dpp/discordclient.cpp" bodystart="289" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1ae65c30483cac62fdcc831f61bb702513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::Run</definition>
        <argsstring>()</argsstring>
        <name>Run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start and monitor I/O loop </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="323" column="6" bodyfile="src/dpp/discordclient.cpp" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1aa2160efdf80bc92b4eedf1fae2c5ab24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::ConnectVoice</definition>
        <argsstring>(snowflake guild_id, snowflake channel_id)</argsstring>
        <name>ConnectVoice</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>channel_id</declname>
        </param>
        <briefdescription>
<para>Connect to a voice channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild where the voice channel is </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel ID of the voice channel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="331" column="6" bodyfile="src/dpp/discordclient.cpp" bodystart="461" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1a2fbe3be7b19ef6cc9f58087e86aabc57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::DiscordClient::DisconnectVoice</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>DisconnectVoice</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
<para>Disconnect from the connected voice channel on a guild. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guild_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The guild who&apos;s voice channel you wish to disconnect from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="338" column="6" bodyfile="src/dpp/discordclient.cpp" bodystart="484" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_discord_client_1aa589f8d4f2791dd7d46d9eae9dba8461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1voiceconn" kindref="compound">voiceconn</ref> *</type>
        <definition>voiceconn * dpp::DiscordClient::GetVoice</definition>
        <argsstring>(snowflake guild_id)</argsstring>
        <name>GetVoice</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>guild_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/discordclient.h" line="340" column="11" bodyfile="src/dpp/discordclient.cpp" bodystart="507" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1a065bdfb0d86632524e0f3841a7b8b916" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::WSClient::write</definition>
        <argsstring>(const std::string &amp;data)</argsstring>
        <name>write</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1aca4cef026f69077f2854849ccbb5d6a0">write</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write to websocket. Encapsulates data in frames if the status is CONNECTED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="122" column="22" bodyfile="src/dpp/wsclient.cpp" bodystart="112" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1adb395ab188fe6a064cf08522de6d21d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool dpp::WSClient::HandleBuffer</definition>
        <argsstring>(std::string &amp;buffer)</argsstring>
        <name>HandleBuffer</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1a7b3855d74efcee978ce7e18eb63db45a">HandleBuffer</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Processes incoming frames from the SSL socket input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents. Can modify this value removing the head elements when processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="129" column="22" bodyfile="src/dpp/wsclient.cpp" bodystart="138" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1ac1bbb6728c40b08ebb7ca1a86dae78d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::WSClient::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1a0d8437a1b8a37bae4853cf680f5ea6c9">close</reimplements>
        <briefdescription>
<para>Close websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="134" column="22" bodyfile="src/dpp/wsclient.cpp" bodystart="306" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_s_s_l_client_1af9abd52051cee90fd27e3bcff8d674d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::SSLClient::GetBytesOut</definition>
        <argsstring>()</argsstring>
        <name>GetBytesOut</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total bytes sent </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="85" column="10" bodyfile="src/dpp/sslclient.cpp" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_s_s_l_client_1a86c883435a97b87d43017332333b2a50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::SSLClient::GetBytesIn</definition>
        <argsstring>()</argsstring>
        <name>GetBytesIn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get total bytes received </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="88" column="10" bodyfile="src/dpp/sslclient.cpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_s_s_l_client_1a6c1ea74cfc2543f7e682f3181ff8215b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::SSLClient::ReadLoop</definition>
        <argsstring>()</argsstring>
        <name>ReadLoop</name>
        <briefdescription>
<para>Nonblocking I/O loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="127" column="6" bodyfile="src/dpp/sslclient.cpp" bodystart="152" bodyend="326"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1a14bc381b27499eb9c72b5440a2dd9830" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void dpp::WSClient::Connect</definition>
        <argsstring>()</argsstring>
        <name>Connect</name>
        <reimplements refid="classdpp_1_1_s_s_l_client_1a273159b0568098799b7432c9953e698e">Connect</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(Re)connect </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="98" column="14" bodyfile="src/dpp/wsclient.cpp" bodystart="45" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1_w_s_client_1aa3e6bbb5e62d6c701f7c25bc61fcf977" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1a3e85c4c9871cd06e41554d9130d17741" kindref="member">WSState</ref></type>
        <definition>WSState dpp::WSClient::GetState</definition>
        <argsstring>()</argsstring>
        <name>GetState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get websocket state <simplesect kind="return"><para>websocket state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="103" column="9" bodyfile="src/dpp/wsclient.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a5beee5ae2603bc35941490f0ed781064" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::SSLClient::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Input buffer received from openssl </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="41" column="13" bodyfile="include/dpp/sslclient.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a171dadd1d1afc362a632edbbcaa25150" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::SSLClient::obuffer</definition>
        <argsstring></argsstring>
        <name>obuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output buffer for sending to openssl </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="44" column="13" bodyfile="include/dpp/sslclient.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a5a7c0ad6978157507c525d2076b97244" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::SSLClient::nonblocking</definition>
        <argsstring></argsstring>
        <name>nonblocking</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>True if in nonblocking mode. The socket switches to nonblocking mode once ReadLoop is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="49" column="6" bodyfile="include/dpp/sslclient.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a55eab8288050b982ec0741efe58381b9" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int dpp::SSLClient::sfd</definition>
        <argsstring></argsstring>
        <name>sfd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Raw file descriptor of connection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="52" column="5" bodyfile="include/dpp/sslclient.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a8a6060cdbb9b0dabb029a4b4aac1e62e" prot="protected" static="no" mutable="no">
        <type>SSL *</type>
        <definition>SSL* dpp::SSLClient::ssl</definition>
        <argsstring></argsstring>
        <name>ssl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>OpenSSL session </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="55" column="5" bodyfile="include/dpp/sslclient.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ae14b2dfb6828c49d7e88e404b8ce56e5" prot="protected" static="no" mutable="no">
        <type>SSL_CTX *</type>
        <definition>SSL_CTX* dpp::SSLClient::ctx</definition>
        <argsstring></argsstring>
        <name>ctx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>OpenSSL context </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="58" column="9" bodyfile="include/dpp/sslclient.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ac3a430041c3a03d88411616567cb5a30" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::SSLClient::cipher</definition>
        <argsstring></argsstring>
        <name>cipher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SSL cipher in use </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="61" column="13" bodyfile="include/dpp/sslclient.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ae9fdbc996fe0003160b1096329b9c8ba" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::SSLClient::last_tick</definition>
        <argsstring></argsstring>
        <name>last_tick</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For timers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="64" column="8" bodyfile="include/dpp/sslclient.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1ad53f1295dc277729511a4653c122cff3" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::SSLClient::hostname</definition>
        <argsstring></argsstring>
        <name>hostname</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hostname connected to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="67" column="13" bodyfile="include/dpp/sslclient.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1aa2ac4fae7d67004791e1a2af25d087e1" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::SSLClient::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Port connected to </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="70" column="13" bodyfile="include/dpp/sslclient.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1a2678852573957846f9282be968085deb" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::SSLClient::bytes_out</definition>
        <argsstring></argsstring>
        <name>bytes_out</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bytes out </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="73" column="10" bodyfile="include/dpp/sslclient.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1_s_s_l_client_1af169f1ac00c59f2a749919d4dfb978bf" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::SSLClient::bytes_in</definition>
        <argsstring></argsstring>
        <name>bytes_in</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bytes in </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="76" column="10" bodyfile="include/dpp/sslclient.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a discord client. Each <ref refid="classdpp_1_1_discord_client" kindref="compound">DiscordClient</ref> connects to one shard and derives from a websocket client. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::DiscordClient</label>
        <link refid="classdpp_1_1_discord_client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::SSLClient</label>
        <link refid="classdpp_1_1_s_s_l_client"/>
      </node>
      <node id="2">
        <label>dpp::WSClient</label>
        <link refid="classdpp_1_1_w_s_client"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>SSL *</label>
      </node>
      <node id="9">
        <label>SSL_CTX *</label>
      </node>
      <node id="6">
        <label>bool</label>
      </node>
      <node id="1">
        <label>dpp::DiscordClient</label>
        <link refid="classdpp_1_1_discord_client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>creator</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>heartbeat_interval</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>max_shards</edgelabel>
          <edgelabel>reconnects</edgelabel>
          <edgelabel>resumes</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>last_heartbeat</edgelabel>
          <edgelabel>last_heartbeat_ack</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>thread_id</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>last_seq</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>sessionid</edgelabel>
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>voice_mutex</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>ready</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>connecting_voice_channels</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::SSLClient</label>
        <link refid="classdpp_1_1_s_s_l_client"/>
        <childnode refid="4" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>nonblocking</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>ctx</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_readable_ready</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
          <edgelabel>custom_writeable_ready</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::WSClient</label>
        <link refid="classdpp_1_1_w_s_client"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>dpp::cluster</label>
        <link refid="classdpp_1_1cluster"/>
        <childnode refid="4" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>last_identify</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>cluster_id</edgelabel>
          <edgelabel>intents</edgelabel>
          <edgelabel>maxclusters</edgelabel>
          <edgelabel>numshards</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>dispatch</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>me</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::dispatcher</label>
        <link refid="classdpp_1_1dispatcher"/>
        <childnode refid="12" relation="usage">
          <edgelabel>application_command_create</edgelabel>
          <edgelabel>application_command_delete</edgelabel>
          <edgelabel>application_command_update</edgelabel>
          <edgelabel>channel_create</edgelabel>
          <edgelabel>channel_delete</edgelabel>
          <edgelabel>channel_pins_update</edgelabel>
          <edgelabel>channel_update</edgelabel>
          <edgelabel>guild_ban_add</edgelabel>
          <edgelabel>guild_ban_remove</edgelabel>
          <edgelabel>guild_create</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="11" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="11" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>int</label>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="12">
        <label>function&lt;</label>
      </node>
      <node id="22">
        <label>std::mutex</label>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>native_handle_type</label>
      </node>
      <node id="23">
        <label>unordered_map&lt;</label>
      </node>
      <node id="10">
        <label>time_t</label>
      </node>
      <node id="18">
        <label>uint16_t</label>
      </node>
      <node id="14">
        <label>uint32_t</label>
      </node>
      <node id="11">
        <label>uint64_t</label>
      </node>
      <node id="20">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/discordclient.h" line="128" column="1" bodyfile="include/dpp/discordclient.h" bodystart="129" bodyend="341"/>
    <listofallmembers>
      <member refid="classdpp_1_1_s_s_l_client_1a5beee5ae2603bc35941490f0ed781064" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>buffer</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1af169f1ac00c59f2a749919d4dfb978bf" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>bytes_in</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a2678852573957846f9282be968085deb" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>bytes_out</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ac3a430041c3a03d88411616567cb5a30" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>cipher</name></member>
      <member refid="classdpp_1_1_discord_client_1a3abe2f8bf50da860681f42882bd5e1b7" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>ClearQueue</name></member>
      <member refid="classdpp_1_1_w_s_client_1ac1bbb6728c40b08ebb7ca1a86dae78d5" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>close</name></member>
      <member refid="classdpp_1_1_discord_client_1a31d6a02b20a669e7da72d8ebf470b69e" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>compressed</name></member>
      <member refid="classdpp_1_1_w_s_client_1a14bc381b27499eb9c72b5440a2dd9830" prot="protected" virt="virtual"><scope>dpp::DiscordClient</scope><name>Connect</name></member>
      <member refid="classdpp_1_1_discord_client_1a47fdb74709ee5b410f0c6d90ebe19df3" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>connect_time</name></member>
      <member refid="classdpp_1_1_discord_client_1a8f64484e8c93a2e98dac160db3bc6d6a" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>connecting_voice_channels</name></member>
      <member refid="classdpp_1_1_discord_client_1aa2160efdf80bc92b4eedf1fae2c5ab24" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>ConnectVoice</name></member>
      <member refid="classdpp_1_1_discord_client_1a19d9f327851471564dff0a14747cee61" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>creator</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ae14b2dfb6828c49d7e88e404b8ce56e5" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>ctx</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ac6292cb6c5074d4bfdcfda12fe15997b" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>custom_readable_fd</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a9122566a8d8306a3b1e17eec6cba1584" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>custom_readable_ready</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ab89687d0e40aac259389a22a1c900444" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>custom_writeable_fd</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1acbb60605bfc2a132df49ec23a062bb7c" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>custom_writeable_ready</name></member>
      <member refid="classdpp_1_1_discord_client_1a8ef7836b00c96e2ea28aeb4066353fb1" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>d_stream</name></member>
      <member refid="classdpp_1_1_discord_client_1aa27fd0d485a71966604617396d125c42" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>decomp_buffer</name></member>
      <member refid="classdpp_1_1_discord_client_1a2934d73c27d1e6f52061c11d75966fb7" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>decompressed</name></member>
      <member refid="classdpp_1_1_discord_client_1a58869bbff20d96b1bdeaf61ec6e705f0" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>decompressed_total</name></member>
      <member refid="classdpp_1_1_discord_client_1a2fbe3be7b19ef6cc9f58087e86aabc57" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>DisconnectVoice</name></member>
      <member refid="classdpp_1_1_discord_client_1a75883c772c819fba70b7f94bdf20f8db" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>DiscordClient</name></member>
      <member refid="classdpp_1_1_discord_client_1acb583a9fc86bbfaa9e2d1efb6286bb1f" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>EndZLib</name></member>
      <member refid="classdpp_1_1_discord_client_1ad99b7ac2d3d9076b4a21b71adf5d3329" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>Error</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a86c883435a97b87d43017332333b2a50" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>GetBytesIn</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1af9abd52051cee90fd27e3bcff8d674d2" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>GetBytesOut</name></member>
      <member refid="classdpp_1_1_discord_client_1aee957608fa5e0dd61529029481fe8da4" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>GetChannelCount</name></member>
      <member refid="classdpp_1_1_discord_client_1af4da058680420de06ce456bda6b42eba" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>GetDeompressedBytesIn</name></member>
      <member refid="classdpp_1_1_discord_client_1adc332d2c7041218dd1e3b6ec18f37768" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>GetGuildCount</name></member>
      <member refid="classdpp_1_1_discord_client_1abb1c3c01f43b6aae65bd3509a3d173bf" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>GetMemberCount</name></member>
      <member refid="classdpp_1_1_discord_client_1ae032b61151227db9444da100bdba5477" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>GetQueueSize</name></member>
      <member refid="classdpp_1_1_w_s_client_1aa3e6bbb5e62d6c701f7c25bc61fcf977" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>GetState</name></member>
      <member refid="classdpp_1_1_discord_client_1aa589f8d4f2791dd7d46d9eae9dba8461" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>GetVoice</name></member>
      <member refid="classdpp_1_1_w_s_client_1adb395ab188fe6a064cf08522de6d21d9" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>HandleBuffer</name></member>
      <member refid="classdpp_1_1_discord_client_1a5a42709bad212016407d931b3222208d" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>HandleEvent</name></member>
      <member refid="classdpp_1_1_discord_client_1a16403bb55f8ba86a155a3d0f7988d43c" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>HandleFrame</name></member>
      <member refid="classdpp_1_1_discord_client_1aec067deea84d1bb3cc9758a706d6a752" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>heartbeat_interval</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ad53f1295dc277729511a4653c122cff3" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>hostname</name></member>
      <member refid="classdpp_1_1_discord_client_1adb232854fb824fa3fb2c42339eebdbac" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>intents</name></member>
      <member refid="classdpp_1_1_discord_client_1af38e708e6621c1a56c75920f8de22d4a" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>IsConnected</name></member>
      <member refid="classdpp_1_1_discord_client_1a2b3c200987ebb05c44d1ddf3a952735a" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>last_heartbeat</name></member>
      <member refid="classdpp_1_1_discord_client_1afd4dc650ef2eadb12ea1855b637e08fc" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>last_heartbeat_ack</name></member>
      <member refid="classdpp_1_1_discord_client_1af784706855b3c7a7111da0889793b972" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>last_seq</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1ae9fdbc996fe0003160b1096329b9c8ba" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>last_tick</name></member>
      <member refid="classdpp_1_1_discord_client_1a4058e9092dfe1cab785b40b2eb82ef61" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>log</name></member>
      <member refid="classdpp_1_1_discord_client_1abbd1435159d8d833e7e6a8c3b56ecd35" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>max_shards</name></member>
      <member refid="classdpp_1_1_discord_client_1a62d58639111f83040445900eb7fb099f" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>message_queue</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a5a7c0ad6978157507c525d2076b97244" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>nonblocking</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a171dadd1d1afc362a632edbbcaa25150" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>obuffer</name></member>
      <member refid="classdpp_1_1_discord_client_1aa2669c9fb6b3b3bb285fb77e1575e15c" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>OneSecondTimer</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1aa2ac4fae7d67004791e1a2af25d087e1" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>port</name></member>
      <member refid="classdpp_1_1_discord_client_1a2baa7c9b6ee89c897a8a72b122c59ca5" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>queue_mutex</name></member>
      <member refid="classdpp_1_1_discord_client_1a342f3fbb10c77db648bd388f2f7c3f4f" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>QueueMessage</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a6c1ea74cfc2543f7e682f3181ff8215b" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>ReadLoop</name></member>
      <member refid="classdpp_1_1_discord_client_1a156bcfad81ed6f750ca5105f35e9599d" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>ready</name></member>
      <member refid="classdpp_1_1_discord_client_1a772b993a18d2929711e7f4b667adf1a4" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>reconnects</name></member>
      <member refid="classdpp_1_1_discord_client_1a5b17f9e6693d273925745b2d865e6392" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>resumes</name></member>
      <member refid="classdpp_1_1_discord_client_1ae65c30483cac62fdcc831f61bb702513" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>Run</name></member>
      <member refid="classdpp_1_1_discord_client_1acc566dd9a4a7f2260475bd5fcf097cee" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>runner</name></member>
      <member refid="classdpp_1_1_discord_client_1a56ab6234f912ee0606ec8f235f62af40" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>sessionid</name></member>
      <member refid="classdpp_1_1_discord_client_1a2b7fe891d7d6be9009cd2d0b36c14da3" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>SetupZLib</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a55eab8288050b982ec0741efe58381b9" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>sfd</name></member>
      <member refid="classdpp_1_1_discord_client_1a7084de0988d7ad23ce362946488f7caf" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>shard_id</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1a8a6060cdbb9b0dabb029a4b4aac1e62e" prot="protected" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>ssl</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1acab97910ee108e6577ab1205eba9a8dd" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>SSLClient</name></member>
      <member refid="classdpp_1_1_discord_client_1a94277b0931bb41e594da4392a324acd1" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>thread_id</name></member>
      <member refid="classdpp_1_1_discord_client_1acb2238be5a961c42badb60df8cd5a651" prot="private" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>ThreadRun</name></member>
      <member refid="classdpp_1_1_discord_client_1a5290abfb09876ab2e536c81b920e6b84" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>token</name></member>
      <member refid="classdpp_1_1_discord_client_1a67337758833bd3809344939f889ed795" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>Uptime</name></member>
      <member refid="classdpp_1_1_discord_client_1a9f6579908d9a4d0a2d895ee22f68fd00" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>voice_mutex</name></member>
      <member refid="classdpp_1_1_w_s_client_1a065bdfb0d86632524e0f3841a7b8b916" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>write</name></member>
      <member refid="classdpp_1_1_w_s_client_1a1de79d389e653ee40334b71bac3b8dea" prot="public" virt="non-virtual"><scope>dpp::DiscordClient</scope><name>WSClient</name></member>
      <member refid="classdpp_1_1_discord_client_1a21bc64e43bb96f358d0b41c756a54806" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>~DiscordClient</name></member>
      <member refid="classdpp_1_1_s_s_l_client_1afbbe7b650aaf7416e1f9e529930e19b7" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>~SSLClient</name></member>
      <member refid="classdpp_1_1_w_s_client_1ae5feb5400738360dc0e2cc1a11a4763d" prot="public" virt="virtual"><scope>dpp::DiscordClient</scope><name>~WSClient</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
