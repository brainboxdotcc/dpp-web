<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1websocket__client" kind="class" language="C++" prot="public">
    <compoundname>dpp::websocket_client</compoundname>
    <basecompoundref refid="classdpp_1_1ssl__client" prot="public" virt="non-virtual">dpp::ssl_client</basecompoundref>
    <derivedcompoundref refid="classdpp_1_1discord__client" prot="public" virt="non-virtual">dpp::discord_client</derivedcompoundref>
    <derivedcompoundref refid="classdpp_1_1discord__voice__client" prot="public" virt="non-virtual">dpp::discord_voice_client</derivedcompoundref>
    <includes local="no">wsclient.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1a81d3d2f7c4ad7ca01777131d8131b294" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::websocket_client::key</definition>
        <argsstring></argsstring>
        <name>key</name>
        <briefdescription>
<para>Connection key used in the HTTP headers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="106" column="13" bodyfile="include/dpp/wsclient.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1ad7337ca3851942c1457b95d71da5f790" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1af3b7f3e861707f45beefa9449de70519" kindref="member">ws_state</ref></type>
        <definition>ws_state dpp::websocket_client::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
<para>Current websocket state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="111" column="10" bodyfile="include/dpp/wsclient.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1ab39bac55d55ee3af9046a5b7957caf1c" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::websocket_client::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
<para>Path part of URL for websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="116" column="13" bodyfile="include/dpp/wsclient.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1a6f9b303bbb4a2236fb16e6b7369f3974" prot="private" static="no" mutable="no">
        <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
        <definition>ws_opcode dpp::websocket_client::data_opcode</definition>
        <argsstring></argsstring>
        <name>data_opcode</name>
        <briefdescription>
<para>Data opcode, represents the type of frames we send. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="121" column="11" bodyfile="include/dpp/wsclient.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1websocket__client_1a59ab1bbefef3fe35d9217eb7a3716032" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; dpp::websocket_client::http_headers</definition>
        <argsstring></argsstring>
        <name>http_headers</name>
        <briefdescription>
<para>HTTP headers received on connecting/upgrading. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="126" column="10" bodyfile="include/dpp/wsclient.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdpp_1_1websocket__client_1aa851724333720b7d727526d609ddf0fc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::websocket_client::parseheader</definition>
        <argsstring>(std::string &amp;buffer)</argsstring>
        <name>parseheader</name>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Parse headers for a websocket frame from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to operate on. Will modify the string removing completed items from the head of the queue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if a complete header has been received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="133" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1ad0bd6044f3bac18094579f65d2c64efa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::websocket_client::unpack</definition>
        <argsstring>(std::string &amp;buffer, uint32_t offset, bool first=true)</argsstring>
        <name>unpack</name>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Unpack a frame and pass completed frames up the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to operate on. Gets modified to remove completed frames on the head of the buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset to start at (reserved for future use) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>True if is the first element (reserved for future use) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if a complete frame has been received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="142" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1aed87bf90f63bc8de5a9dd1b02775a24d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dpp::websocket_client::fill_header</definition>
        <argsstring>(unsigned char *outbuf, size_t sendlength, ws_opcode opcode)</argsstring>
        <name>fill_header</name>
        <param>
          <type>unsigned char *</type>
          <declname>outbuf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sendlength</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
          <declname>opcode</declname>
        </param>
        <briefdescription>
<para>Fill a header for outbound messages. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The raw frame to fill </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sendlength</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the data to encapsulate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>the ws_opcode to send in the header </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of filled header </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="151" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a6fe5ce71d780c79c864f5fed37159b58" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::websocket_client::handle_ping_pong</definition>
        <argsstring>(bool ping, const std::string &amp;payload)</argsstring>
        <name>handle_ping_pong</name>
        <param>
          <type>bool</type>
          <declname>ping</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Handle ping and pong requests. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ping</parametername>
</parameternamelist>
<parameterdescription>
<para>True if this is a ping, false if it is a pong </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>The ping payload, to be returned as-is for a ping </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="158" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classdpp_1_1websocket__client_1aee1812f852a44ee1dc00e66477ffbfab" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::connect</definition>
        <argsstring>()</argsstring>
        <name>connect</name>
        <reimplements refid="classdpp_1_1ssl__client_1a9a5168edeb1901d62aecf273c28f03ca">connect</reimplements>
        <briefdescription>
<para>(Re)connect </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="165" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a70cd8db1b96a3a77b6342cd78153c827" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacedpp_1af3b7f3e861707f45beefa9449de70519" kindref="member">ws_state</ref></type>
        <definition>ws_state dpp::websocket_client::get_state</definition>
        <argsstring>()</argsstring>
        <name>get_state</name>
        <briefdescription>
<para>Get websocket state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>websocket state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="171" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1websocket__client_1afb654507dbe469ad4f0f3f242769692b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::websocket_client::websocket_client</definition>
        <argsstring>(const std::string &amp;hostname, const std::string &amp;port=&quot;443&quot;, const std::string &amp;urlpath=&quot;&quot;, ws_opcode opcode=OP_BINARY)</argsstring>
        <name>websocket_client</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>port</declname>
          <defval>&quot;443&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>urlpath</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1c" kindref="member">ws_opcode</ref></type>
          <declname>opcode</declname>
          <defval><ref refid="namespacedpp_1aa84690a0ba0251e8609440e93919da1cac6c295924c27154cf564628ebb9677c9" kindref="member">OP_BINARY</ref></defval>
        </param>
        <briefdescription>
<para>Connect to a specific websocket server. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hostname</parametername>
</parameternamelist>
<parameterdescription>
<para>Hostname to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Port to connect to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>urlpath</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL path components of the HTTP request to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoding type to use, either OP_BINARY or OP_TEXT </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Voice websockets only support OP_TEXT, and other websockets must be OP_BINARY if you are going to send ETF. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="184" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a32f422f3a5a7a1aeb35a273be5c66d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::websocket_client::~websocket_client</definition>
        <argsstring>()=default</argsstring>
        <name>~websocket_client</name>
        <briefdescription>
<para>Destroy the websocket client object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="189" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a66ca960ed3dddc37340ecc5d32ff0e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::write</definition>
        <argsstring>(const std::string &amp;data)</argsstring>
        <name>write</name>
        <reimplements refid="classdpp_1_1ssl__client_1acdfd527a84156e918dc93420ed0d45b8">write</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write to websocket. Encapsulates data in frames if the status is CONNECTED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="195" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1aac9224e26db7b8589fcf9ba312752ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::websocket_client::handle_buffer</definition>
        <argsstring>(std::string &amp;buffer)</argsstring>
        <name>handle_buffer</name>
        <reimplements refid="classdpp_1_1ssl__client_1a0100372dd4c32d9faddaf69fffda7cfc">handle_buffer</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Processes incoming frames from the SSL socket input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents. Can modify this value removing the head elements when processed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="201" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a1f21cc8fce27ad72e9414dc9d0acd4d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <reimplements refid="classdpp_1_1ssl__client_1ae85df4b13fa64d701fb09f2bf44f100e">close</reimplements>
        <briefdescription>
<para>Close websocket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="206" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a066fe44ec020e9f2ab26b58a3d015bdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool dpp::websocket_client::handle_frame</definition>
        <argsstring>(const std::string &amp;buffer)</argsstring>
        <name>handle_frame</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a2cb9540221a39c9050a2036928c7b7b4">handle_frame</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a96d7c274062a8ed210bf15bdddaa3a71">handle_frame</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Receives raw frame content only without headers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer contents </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the frame was successfully handled. False if no valid frame is in the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="214" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1abd1b3d59beb6a505e81e2bf3374e2532" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::error</definition>
        <argsstring>(uint32_t errorcode)</argsstring>
        <name>error</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a3898b3a8b7d9fbfdfa1efc18ce5aa3c3">error</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a769b1674cf88dc4f53d7609fc24b7961">error</reimplementedby>
        <param>
          <type>uint32_t</type>
          <declname>errorcode</declname>
        </param>
        <briefdescription>
<para>Called upon error frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>errorcode</parametername>
</parameternamelist>
<parameterdescription>
<para>The error code from the websocket server </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="221" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a07ad6e7b32cfe760976d90409d5c47ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::websocket_client::one_second_timer</definition>
        <argsstring>()</argsstring>
        <name>one_second_timer</name>
        <reimplements refid="classdpp_1_1ssl__client_1a5028e720508fcb82533ce838dcea5f2e">one_second_timer</reimplements>
        <reimplementedby refid="classdpp_1_1discord__client_1ae020ca512624a8ef554344a796268936">one_second_timer</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1ad13b56d904850d77205924d43697f0e4">one_second_timer</reimplementedby>
        <briefdescription>
<para>Fires every second from the underlying socket I/O loop, used for sending websocket pings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="226" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1websocket__client_1a2613fa8b73b1e7960c62bfe8cdef1dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::websocket_client::send_close_packet</definition>
        <argsstring>()</argsstring>
        <name>send_close_packet</name>
        <briefdescription>
<para>Send OP_CLOSE error code 1000 to the other side of the connection. This indicates graceful close. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/wsclient.h" line="232" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1aad4da6489c8f08030ca49c060a23740a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::get_bytes_out</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_out</name>
        <briefdescription>
<para>Get the bytes out objectGet total bytes sent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes sent </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="162" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1afa5d5654ce0b631d07045088ef347418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::get_bytes_in</definition>
        <argsstring>()</argsstring>
        <name>get_bytes_in</name>
        <briefdescription>
<para>Get total bytes received. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t bytes received </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="168" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1abf247ed0871e89e6a319c95841a315bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::get_cipher</definition>
        <argsstring>()</argsstring>
        <name>get_cipher</name>
        <briefdescription>
<para>Get SSL cipher name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string ssl cipher name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="174" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::ssl_client::read_loop</definition>
        <argsstring>()</argsstring>
        <name>read_loop</name>
        <briefdescription>
<para>Nonblocking I/O loop. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::exception</parametername>
</parameternamelist>
<parameterdescription>
<para>Any std::exception (or derivative) thrown from <ref refid="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" kindref="member">read_loop()</ref> causes reconnection of the shard </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="224" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1ssl__client_1a945ccd04f376174a64c0cceffca3bbcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void dpp::ssl_client::log</definition>
        <argsstring>(dpp::loglevel severity, const std::string &amp;msg) const</argsstring>
        <name>log</name>
        <reimplementedby refid="classdpp_1_1discord__client_1a9a7beefc8a761885205fc1a8d0e0954f">log</reimplementedby>
        <reimplementedby refid="classdpp_1_1discord__voice__client_1a7339b4ace2616cd9d251e4f7ed6b9476">log</reimplementedby>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Log a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>severity</parametername>
</parameternamelist>
<parameterdescription>
<para>severity of log message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Log message to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="256" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1ae0e5e0799448bf29506bfcc21168d3fa" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::buffer</definition>
        <argsstring></argsstring>
        <name>buffer</name>
        <briefdescription>
<para>Input buffer received from socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="83" column="13" bodyfile="include/dpp/sslclient.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a1f9600d4fd902c74c6d8b748c359eecc" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::obuffer</definition>
        <argsstring></argsstring>
        <name>obuffer</name>
        <briefdescription>
<para>Output buffer for sending to socket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="88" column="13" bodyfile="include/dpp/sslclient.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a1486b3df6780a842552442a25634fcc9" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::nonblocking</definition>
        <argsstring></argsstring>
        <name>nonblocking</name>
        <briefdescription>
<para>True if in nonblocking mode. The socket switches to nonblocking mode once ReadLoop is called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="94" column="6" bodyfile="include/dpp/sslclient.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a423ca70d4046067ebe219f85c7baa540" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a51156024d6211aef2731770340cfe452" kindref="member">dpp::socket</ref></type>
        <definition>dpp::socket dpp::ssl_client::sfd</definition>
        <argsstring></argsstring>
        <name>sfd</name>
        <briefdescription>
<para>Raw file descriptor of connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="99" column="13" bodyfile="include/dpp/sslclient.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a26db29793a38b8a9dad74581597b298a" prot="protected" static="no" mutable="no">
        <type>openssl_connection *</type>
        <definition>openssl_connection* dpp::ssl_client::ssl</definition>
        <argsstring></argsstring>
        <name>ssl</name>
        <briefdescription>
<para>Openssl opaque contexts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="104" column="20" bodyfile="include/dpp/sslclient.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a5fc2e7836da5485216419bbf17e49428" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::cipher</definition>
        <argsstring></argsstring>
        <name>cipher</name>
        <briefdescription>
<para>SSL cipher in use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="109" column="13" bodyfile="include/dpp/sslclient.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a61f0bbeefa25de686ac93887afa65895" prot="protected" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::ssl_client::last_tick</definition>
        <argsstring></argsstring>
        <name>last_tick</name>
        <briefdescription>
<para>For timers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="114" column="8" bodyfile="include/dpp/sslclient.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a9aab17086711ef6777a01ee0974b5ce8" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::hostname</definition>
        <argsstring></argsstring>
        <name>hostname</name>
        <briefdescription>
<para>Hostname connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="119" column="13" bodyfile="include/dpp/sslclient.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a53cda56d5d61e3371bd7be2424e7ff07" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::ssl_client::port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <briefdescription>
<para>Port connected to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="124" column="13" bodyfile="include/dpp/sslclient.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a8022a8002cfc6f394016546168ef4085" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::bytes_out</definition>
        <argsstring></argsstring>
        <name>bytes_out</name>
        <briefdescription>
<para>Bytes out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="129" column="10" bodyfile="include/dpp/sslclient.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a7b3bbb4e6a9e271c8f19736b36b71d5d" prot="protected" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t dpp::ssl_client::bytes_in</definition>
        <argsstring></argsstring>
        <name>bytes_in</name>
        <briefdescription>
<para>Bytes in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="134" column="10" bodyfile="include/dpp/sslclient.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1aa735feca3545e156e0607c06d55288c4" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::plaintext</definition>
        <argsstring></argsstring>
        <name>plaintext</name>
        <briefdescription>
<para>True for a plain text connection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="139" column="6" bodyfile="include/dpp/sslclient.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a6d17d6f3cb7781ecba40aaedf10ff598" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::make_new</definition>
        <argsstring></argsstring>
        <name>make_new</name>
        <briefdescription>
<para>True if we are establishing a new connection, false if otherwise. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="144" column="6" bodyfile="include/dpp/sslclient.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1aa183564aac368ba97b653260ab5f5b6b" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a982a3efeac04ddb820bbe87b08155640" kindref="member">socket_callback_t</ref></type>
        <definition>socket_callback_t dpp::ssl_client::custom_readable_fd</definition>
        <argsstring></argsstring>
        <name>custom_readable_fd</name>
        <briefdescription>
<para>Attaching an additional file descriptor to this function will send notifications when there is data to read. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Only hook this if you NEED it as it can increase CPU usage of the thread! Returning -1 means that you don&apos;t want to be notified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="182" column="19" bodyfile="include/dpp/sslclient.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1afa81c27a0b2fc2d68b3939e102bf2cbf" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a982a3efeac04ddb820bbe87b08155640" kindref="member">socket_callback_t</ref></type>
        <definition>socket_callback_t dpp::ssl_client::custom_writeable_fd</definition>
        <argsstring></argsstring>
        <name>custom_writeable_fd</name>
        <briefdescription>
<para>Attaching an additional file descriptor to this function will send notifications when you are able to write to the socket. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: Only hook this if you NEED it as it can increase CPU usage of the thread! You should toggle this to -1 when you do not have anything to write otherwise it&apos;ll keep triggering repeatedly (it is level triggered). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="191" column="19" bodyfile="include/dpp/sslclient.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1a47fa1e38d3b5d26b6913577ffe9c73cd" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a9f89983921c7ddfa7f91705bd05e2b9e" kindref="member">socket_notification_t</ref></type>
        <definition>socket_notification_t dpp::ssl_client::custom_readable_ready</definition>
        <argsstring></argsstring>
        <name>custom_readable_ready</name>
        <briefdescription>
<para>This event will be called when you can read from the custom fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="196" column="23" bodyfile="include/dpp/sslclient.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1aa1a9af1a95e1fb4ac1504de8d591b650" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a9f89983921c7ddfa7f91705bd05e2b9e" kindref="member">socket_notification_t</ref></type>
        <definition>socket_notification_t dpp::ssl_client::custom_writeable_ready</definition>
        <argsstring></argsstring>
        <name>custom_writeable_ready</name>
        <briefdescription>
<para>This event will be called when you can write to a custom fd. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="201" column="23" bodyfile="include/dpp/sslclient.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1ssl__client_1ac8997404ef91c501c3e8ae1079e89152" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::ssl_client::keepalive</definition>
        <argsstring></argsstring>
        <name>keepalive</name>
        <briefdescription>
<para>True if we are keeping the connection alive after it has finished. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/sslclient.h" line="206" column="6" bodyfile="include/dpp/sslclient.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implements a websocket client based on the SSL client. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>dpp::discord_client</label>
        <link refid="classdpp_1_1discord__client"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::discord_voice_client</label>
        <link refid="classdpp_1_1discord__voice__client"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
      </node>
      <node id="1">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>bool</label>
      </node>
      <node id="2">
        <label>dpp::ssl_client</label>
        <link refid="classdpp_1_1ssl__client"/>
        <childnode refid="3" relation="usage">
          <edgelabel>buffer</edgelabel>
          <edgelabel>cipher</edgelabel>
          <edgelabel>hostname</edgelabel>
          <edgelabel>obuffer</edgelabel>
          <edgelabel>port</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>keepalive</edgelabel>
          <edgelabel>make_new</edgelabel>
          <edgelabel>nonblocking</edgelabel>
          <edgelabel>plaintext</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>sfd</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>ssl</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>last_tick</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>bytes_in</edgelabel>
          <edgelabel>bytes_out</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>custom_readable_fd</edgelabel>
          <edgelabel>custom_writeable_fd</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>custom_readable_ready</edgelabel>
          <edgelabel>custom_writeable_ready</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::websocket_client</label>
        <link refid="classdpp_1_1websocket__client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>int</label>
      </node>
      <node id="7">
        <label>openssl_connection *</label>
      </node>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="10">
        <label>function&lt; dpp::socket()&gt;</label>
      </node>
      <node id="11">
        <label>function&lt; void()&gt;</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>time_t</label>
      </node>
      <node id="9">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/wsclient.h" line="102" column="1" bodyfile="include/dpp/wsclient.h" bodystart="102" bodyend="233"/>
    <listofallmembers>
      <member refid="classdpp_1_1ssl__client_1ae0e5e0799448bf29506bfcc21168d3fa" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>buffer</name></member>
      <member refid="classdpp_1_1ssl__client_1a7b3bbb4e6a9e271c8f19736b36b71d5d" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>bytes_in</name></member>
      <member refid="classdpp_1_1ssl__client_1a8022a8002cfc6f394016546168ef4085" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>bytes_out</name></member>
      <member refid="classdpp_1_1ssl__client_1a5fc2e7836da5485216419bbf17e49428" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>cipher</name></member>
      <member refid="classdpp_1_1websocket__client_1a1f21cc8fce27ad72e9414dc9d0acd4d0" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>close</name></member>
      <member refid="classdpp_1_1websocket__client_1aee1812f852a44ee1dc00e66477ffbfab" prot="protected" virt="virtual"><scope>dpp::websocket_client</scope><name>connect</name></member>
      <member refid="classdpp_1_1ssl__client_1aa183564aac368ba97b653260ab5f5b6b" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>custom_readable_fd</name></member>
      <member refid="classdpp_1_1ssl__client_1a47fa1e38d3b5d26b6913577ffe9c73cd" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>custom_readable_ready</name></member>
      <member refid="classdpp_1_1ssl__client_1afa81c27a0b2fc2d68b3939e102bf2cbf" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>custom_writeable_fd</name></member>
      <member refid="classdpp_1_1ssl__client_1aa1a9af1a95e1fb4ac1504de8d591b650" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>custom_writeable_ready</name></member>
      <member refid="classdpp_1_1websocket__client_1a6f9b303bbb4a2236fb16e6b7369f3974" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>data_opcode</name></member>
      <member refid="classdpp_1_1websocket__client_1abd1b3d59beb6a505e81e2bf3374e2532" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>error</name></member>
      <member refid="classdpp_1_1websocket__client_1aed87bf90f63bc8de5a9dd1b02775a24d" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>fill_header</name></member>
      <member refid="classdpp_1_1ssl__client_1afa5d5654ce0b631d07045088ef347418" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_bytes_in</name></member>
      <member refid="classdpp_1_1ssl__client_1aad4da6489c8f08030ca49c060a23740a" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_bytes_out</name></member>
      <member refid="classdpp_1_1ssl__client_1abf247ed0871e89e6a319c95841a315bd" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_cipher</name></member>
      <member refid="classdpp_1_1websocket__client_1a70cd8db1b96a3a77b6342cd78153c827" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>get_state</name></member>
      <member refid="classdpp_1_1websocket__client_1aac9224e26db7b8589fcf9ba312752ca8" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>handle_buffer</name></member>
      <member refid="classdpp_1_1websocket__client_1a066fe44ec020e9f2ab26b58a3d015bdf" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>handle_frame</name></member>
      <member refid="classdpp_1_1websocket__client_1a6fe5ce71d780c79c864f5fed37159b58" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>handle_ping_pong</name></member>
      <member refid="classdpp_1_1ssl__client_1a9aab17086711ef6777a01ee0974b5ce8" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>hostname</name></member>
      <member refid="classdpp_1_1websocket__client_1a59ab1bbefef3fe35d9217eb7a3716032" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>http_headers</name></member>
      <member refid="classdpp_1_1ssl__client_1ac8997404ef91c501c3e8ae1079e89152" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>keepalive</name></member>
      <member refid="classdpp_1_1websocket__client_1a81d3d2f7c4ad7ca01777131d8131b294" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>key</name></member>
      <member refid="classdpp_1_1ssl__client_1a61f0bbeefa25de686ac93887afa65895" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>last_tick</name></member>
      <member refid="classdpp_1_1ssl__client_1a945ccd04f376174a64c0cceffca3bbcd" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>log</name></member>
      <member refid="classdpp_1_1ssl__client_1a6d17d6f3cb7781ecba40aaedf10ff598" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>make_new</name></member>
      <member refid="classdpp_1_1ssl__client_1a1486b3df6780a842552442a25634fcc9" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>nonblocking</name></member>
      <member refid="classdpp_1_1ssl__client_1a1f9600d4fd902c74c6d8b748c359eecc" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>obuffer</name></member>
      <member refid="classdpp_1_1websocket__client_1a07ad6e7b32cfe760976d90409d5c47ae" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>one_second_timer</name></member>
      <member refid="classdpp_1_1websocket__client_1aa851724333720b7d727526d609ddf0fc" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>parseheader</name></member>
      <member refid="classdpp_1_1websocket__client_1ab39bac55d55ee3af9046a5b7957caf1c" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>path</name></member>
      <member refid="classdpp_1_1ssl__client_1aa735feca3545e156e0607c06d55288c4" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>plaintext</name></member>
      <member refid="classdpp_1_1ssl__client_1a53cda56d5d61e3371bd7be2424e7ff07" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>port</name></member>
      <member refid="classdpp_1_1ssl__client_1a17d4e73c74413a5a79a3859615f913e2" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>read_loop</name></member>
      <member refid="classdpp_1_1websocket__client_1a2613fa8b73b1e7960c62bfe8cdef1dd7" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>send_close_packet</name></member>
      <member refid="classdpp_1_1ssl__client_1a423ca70d4046067ebe219f85c7baa540" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>sfd</name></member>
      <member refid="classdpp_1_1ssl__client_1a26db29793a38b8a9dad74581597b298a" prot="protected" virt="non-virtual"><scope>dpp::websocket_client</scope><name>ssl</name></member>
      <member refid="classdpp_1_1ssl__client_1a53c006d94ef782a5e138accb669871e1" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>ssl_client</name></member>
      <member refid="classdpp_1_1websocket__client_1ad7337ca3851942c1457b95d71da5f790" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>state</name></member>
      <member refid="classdpp_1_1websocket__client_1ad0bd6044f3bac18094579f65d2c64efa" prot="private" virt="non-virtual"><scope>dpp::websocket_client</scope><name>unpack</name></member>
      <member refid="classdpp_1_1websocket__client_1afb654507dbe469ad4f0f3f242769692b" prot="public" virt="non-virtual"><scope>dpp::websocket_client</scope><name>websocket_client</name></member>
      <member refid="classdpp_1_1websocket__client_1a66ca960ed3dddc37340ecc5d32ff0e1c" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>write</name></member>
      <member refid="classdpp_1_1ssl__client_1a892b774dc3832123c829d4f3bcef693a" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>~ssl_client</name></member>
      <member refid="classdpp_1_1websocket__client_1a32f422f3a5a7a1aeb35a273be5c66d17" prot="public" virt="virtual"><scope>dpp::websocket_client</scope><name>~websocket_client</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
