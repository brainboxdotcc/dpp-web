<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespacedpp_1_1utility" kind="namespace" language="C++">
    <compoundname>dpp::utility</compoundname>
    <innerclass refid="structdpp_1_1utility_1_1iconhash" prot="public">dpp::utility::iconhash</innerclass>
    <innerclass refid="structdpp_1_1utility_1_1uptime" prot="public">dpp::utility::uptime</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7" prot="public" static="no" strong="no">
        <type>uint8_t</type>
        <name>time_format</name>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a380a740f8843af94cd3007d7fdf3ce30" prot="public">
          <name>tf_long_date</name>
          <initializer>=	&apos;D&apos;</initializer>
          <briefdescription>
<para>&quot;20 April 2021&quot; - Long Date </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a7bdb33c94eff8e026e6a864f217e33c5" prot="public">
          <name>tf_long_datetime</name>
          <initializer>=	&apos;F&apos;</initializer>
          <briefdescription>
<para>&quot;Tuesday, 20 April 2021 16:20&quot; - Long Date/Time </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a7bdda189bfc4d124426d2da1dd6b9a50" prot="public">
          <name>tf_relative_time</name>
          <initializer>=	&apos;R&apos;</initializer>
          <briefdescription>
<para>&quot;2 months ago&quot; - Relative Time <linebreak/>
 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a127a01b537d189262d40712fe8f09de7" prot="public">
          <name>tf_long_time</name>
          <initializer>=	&apos;T&apos;</initializer>
          <briefdescription>
<para>&quot;16:20:30&quot; - Long Time </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a94843292417596c6d3de7680efc295bd" prot="public">
          <name>tf_short_date</name>
          <initializer>=	&apos;d&apos;</initializer>
          <briefdescription>
<para>&quot;20/04/2021&quot; - Short Date </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7a71dc667709d06a38a90007af294c8f42" prot="public">
          <name>tf_short_datetime</name>
          <initializer>=	&apos;f&apos;</initializer>
          <briefdescription>
<para>&quot;20 April 2021 16:20&quot; - Short Date/Time </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7aa9853ed46be939acd8aa01d0ee889afd" prot="public">
          <name>tf_short_time</name>
          <initializer>=	&apos;t&apos;</initializer>
          <briefdescription>
<para>&quot;16:20&quot; - Short Time </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timestamp formats for <ref refid="namespacedpp_1_1utility_1a62891c981320f9cc4edfbbf9990428c5" kindref="member">dpp::utility::timestamp()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>These values are the actual character values specified by the Discord API and should not be changed unless the Discord API changes the specification! They have been sorted into numerical order of their ASCII value to keep C++ happy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="48" column="1" bodyfile="include/dpp/utility.h" bodystart="48" bodyend="63"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacedpp_1_1utility_1a36d13f96f86debc010768d4c812e3fa6" prot="public" static="no">
        <type>std::function&lt; void(const std::string &amp;output)&gt;</type>
        <definition>typedef std::function&lt;void(const std::string&amp; output)&gt; dpp::utility::cmd_result_t</definition>
        <argsstring></argsstring>
        <name>cmd_result_t</name>
        <briefdescription>
<para>Callback for the results of a command executed via <ref refid="namespacedpp_1_1utility_1ac7d516c03d572fe65d01c4ec5e92c6f0" kindref="member">dpp::utility::exec</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="73" column="23" bodyfile="include/dpp/utility.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacedpp_1_1utility_1a4cf040349b0a45ef90863effb892ece6" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string dpp::utility::cdn_host</definition>
        <argsstring></argsstring>
        <name>cdn_host</name>
        <initializer>= &quot;https://cdn.discordapp.com&quot;</initializer>
        <briefdescription>
<para>The base URL for CDN content such as profile pictures and guild icons. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="68" column="19" bodyfile="include/dpp/utility.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedpp_1_1utility_1a8c2cc04bb80ffd287b376d5977899277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; void(const <ref refid="structdpp_1_1log__t" kindref="compound">dpp::log_t</ref> &amp;)&gt; DPP_EXPORT</type>
        <definition>std::function&lt; void(const dpp::log_t &amp;)&gt; DPP_EXPORT dpp::utility::cout_logger</definition>
        <argsstring>()</argsstring>
        <name>cout_logger</name>
        <briefdescription>
<para>Get a default logger that outputs to std::cout. e.g. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">bot.on_log(<ref refid="namespacedpp_1_1utility_1a8c2cc04bb80ffd287b376d5977899277" kindref="member">dpp::utility::cout_logger</ref>());</highlight></codeline>
</programlisting></para>
<para><simplesect kind="return"><para>A logger for attaching to on_log </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/dispatcher.h" line="128" column="26" declfile="include/dpp/dispatcher.h" declline="128" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ac7d516c03d572fe65d01c4ec5e92c6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void DPP_EXPORT</type>
        <definition>void DPP_EXPORT dpp::utility::exec</definition>
        <argsstring>(const std::string &amp;cmd, std::vector&lt; std::string &gt; parameters={}, cmd_result_t callback={})</argsstring>
        <name>exec</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>parameters</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="namespacedpp_1_1utility_1a36d13f96f86debc010768d4c812e3fa6" kindref="member">cmd_result_t</ref></type>
          <declname>callback</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Run a commandline program asynchronously. The command line program is spawned in a separate std::thread, and when complete, its output from stdout is passed to the callback function in its string parameter. For example. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal"><ref refid="namespacedpp_1_1utility_1ac7d516c03d572fe65d01c4ec5e92c6f0" kindref="member">dpp::utility::exec</ref>(</highlight><highlight class="stringliteral">&quot;/bin/ls&quot;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&quot;-al&quot;</highlight><highlight class="normal">},<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>output)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Output<sp/>of<sp/>&apos;ls<sp/>-al&apos;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>output<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Command line parameters. Each will be escaped using <computeroutput>std::quoted</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>The callback to call on completion. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="89" column="17" declfile="include/dpp/utility.h" declline="89" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a62891c981320f9cc4edfbbf9990428c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::timestamp</definition>
        <argsstring>(time_t ts, time_format tf)</argsstring>
        <name>timestamp</name>
        <param>
          <type>time_t</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7" kindref="member">time_format</ref></type>
          <declname>tf</declname>
        </param>
        <briefdescription>
<para>Return a mentionable timestamp (used in a discord embed) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>Time stamp to convert </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tf</parametername>
</parameternamelist>
<parameterdescription>
<para>Format of timestamp using <ref refid="namespacedpp_1_1utility_1a097ec42bcbedfed6ab1e4f12bf84cab7" kindref="member">dpp::utility::time_format</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="98" column="24" declfile="include/dpp/utility.h" declline="98" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a1a9168eaaf347543e55e607858f24eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::current_date_time</definition>
        <argsstring>()</argsstring>
        <name>current_date_time</name>
        <briefdescription>
<para>Returns current date and time. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string Current date and time </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="105" column="24" declfile="include/dpp/utility.h" declline="105" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1acae9e089e4b7cfd9745235f86455c045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::loglevel</definition>
        <argsstring>(dpp::loglevel in)</argsstring>
        <name>loglevel</name>
        <param>
          <type><ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Convert a <ref refid="namespacedpp_1a7d48d478ccc3bffb34637bdb48f629c2" kindref="member">dpp::loglevel</ref> enum value to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>log level to convert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string string form of log level </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="112" column="24" declfile="include/dpp/utility.h" declline="112" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a1184092d62c7ab561cb3f60a92f71b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double DPP_EXPORT</type>
        <definition>double DPP_EXPORT dpp::utility::time_f</definition>
        <argsstring>()</argsstring>
        <name>time_f</name>
        <briefdescription>
<para>Return the current time with fractions of seconds. This is a unix epoch time with the fractional seconds part after the decimal place. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double time with fractional seconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="178" column="19" declfile="include/dpp/utility.h" declline="178" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a9d70739d6485741d1617c359ec70d1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool DPP_EXPORT</type>
        <definition>bool DPP_EXPORT dpp::utility::has_voice</definition>
        <argsstring>()</argsstring>
        <name>has_voice</name>
        <briefdescription>
<para>Returns true if D++ was built with voice support. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if voice support is compiled in (libsodium/libopus) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="185" column="17" declfile="include/dpp/utility.h" declline="185" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1af74cf004f32b11f0f804968c64bb3d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::bytes</definition>
        <argsstring>(uint64_t c)</argsstring>
        <name>bytes</name>
        <param>
          <type>uint64_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Convert a byte count to display value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string display value suffixed with M, G, T where necessary </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="193" column="24" declfile="include/dpp/utility.h" declline="193" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a2ab5fc7a9fd0ac6358c3c7133b563362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t dpp::utility::rgb</definition>
        <argsstring>(float red, float green, float blue)</argsstring>
        <name>rgb</name>
        <param>
          <type>float</type>
          <declname>red</declname>
        </param>
        <param>
          <type>float</type>
          <declname>green</declname>
        </param>
        <param>
          <type>float</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
<para>Convert floats to RGB for sending in embeds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>red value, between 0 and 1 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>green value, between 0 and 1 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>blue value, between 0 and 1 inclusive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returned integer colour value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="248" column="10" declfile="include/dpp/utility.h" declline="248" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ad5e546b73411540fa9541b25deccdacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t dpp::utility::rgb</definition>
        <argsstring>(int red, int green, int blue)</argsstring>
        <name>rgb</name>
        <param>
          <type>int</type>
          <declname>red</declname>
        </param>
        <param>
          <type>int</type>
          <declname>green</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
<para>Convert ints to RGB for sending in embeds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>red value, between 0 and 255 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>green value, between 0 and 255 inclusive </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>blue value, between 0 and 255 inclusive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returned integer colour value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="258" column="10" declfile="include/dpp/utility.h" declline="258" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a02456e22a1d41893a9b321bf8ccaeec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::debug_dump</definition>
        <argsstring>(uint8_t *data, size_t length)</argsstring>
        <name>debug_dump</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Output hex values of a section of memory for debugging. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The start of the data to display </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of data to display </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="266" column="24" declfile="include/dpp/utility.h" declline="266" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a62cc8fc3994f6b3d49cf4923b993c231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t DPP_EXPORT</type>
        <definition>size_t DPP_EXPORT dpp::utility::utf8len</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>utf8len</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Returns the length of a UTF-8 string in codepoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>string to count length of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t length of string (0 for invalid utf8) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="274" column="19" declfile="include/dpp/utility.h" declline="274" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1afa6985aaa798fa30b73c1decc418cd32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::utf8substr</definition>
        <argsstring>(const std::string &amp;str, std::string::size_type start, std::string::size_type length)</argsstring>
        <name>utf8substr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::string::size_type</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::string::size_type</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Return substring of a UTF-8 encoded string in codepoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>string to return substring from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>start codepoint offset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length in codepoints </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string Substring in UTF-8 or empty string if invalid UTF-8 passed in </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="284" column="24" declfile="include/dpp/utility.h" declline="284" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a4e85ceba20c4ed2bfda15d806890428b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::read_file</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>read_file</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Read a whole file into a std::string. Be sure you have enough memory to read the file, if you are reading a large file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Be aware this function can block! If you are regularly reading large files, consider caching them. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file to read </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string The file contents </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1exception" kindref="compound">dpp::exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>on failure to read the entire file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="294" column="24" declfile="include/dpp/utility.h" declline="294" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a3da218e2645e8f07e3b83373505542ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::validate</definition>
        <argsstring>(const std::string &amp;value, size_t _min, size_t _max, const std::string &amp;exception_message)</argsstring>
        <name>validate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_min</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_max</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>exception_message</declname>
        </param>
        <briefdescription>
<para>Validate a string value In the event the length of the string is less than _min, then an exception of type dpp:<ref refid="classdpp_1_1length__exception" kindref="compound">length_exception</ref> will be thrown. If the string is longer than _max UTF8 codepoints it will be truncated to fit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to validate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum length </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exception_message</parametername>
</parameternamelist>
<parameterdescription>
<para>Exception message to throw if value length &lt; _min </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string Validated string, truncated if necessary. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1length__exception" kindref="compound">dpp::length_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if value UTF8 length &lt; _min </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="308" column="24" declfile="include/dpp/utility.h" declline="308" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a2e8cc2ce4c01244c9db877ab526ac9cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::avatar_size</definition>
        <argsstring>(uint32_t size)</argsstring>
        <name>avatar_size</name>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Return the url parameter for an avatar size, or empty if the size is 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size to generate url parameter for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string url parameter </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="316" column="24" declfile="include/dpp/utility.h" declline="316" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1ab65e758e198a195ad3fbcec3c534d2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt; DPP_EXPORT</type>
        <definition>std::vector&lt; std::string &gt; DPP_EXPORT dpp::utility::tokenize</definition>
        <argsstring>(std::string const &amp;in, const char *sep=&quot;\r\n&quot;)</argsstring>
        <name>tokenize</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sep</declname>
          <defval>&quot;\r\n&quot;</defval>
        </param>
        <briefdescription>
<para>Split (tokenize) a string into a vector, using the given separators. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator characters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; Tokenized strings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="325" column="24" declfile="include/dpp/utility.h" declline="325" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedpp_1_1utility_1a4be90a8bb2dd9eecf61e934592656c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string DPP_EXPORT</type>
        <definition>std::string DPP_EXPORT dpp::utility::bot_invite_url</definition>
        <argsstring>(const snowflake bot_id, const uint64_t permissions=0, const std::vector&lt; std::string &gt; &amp;scopes={&quot;bot&quot;, &quot;applications.commands&quot;})</argsstring>
        <name>bot_invite_url</name>
        <param>
          <type>const <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>bot_id</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>permissions</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>scopes</declname>
          <defval>{&quot;bot&quot;, &quot;applications.commands&quot;}</defval>
        </param>
        <briefdescription>
<para>Create a bot invite. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bot_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Bot ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>Permissions of the bot to invite </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scopes</parametername>
</parameternamelist>
<parameterdescription>
<para>Scopes to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Invite URL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/utility.h" line="335" column="24" declfile="include/dpp/utility.h" declline="335" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utility helper functions, generally for logging. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/dpp/dispatcher.h" line="118" column="1"/>
  </compounddef>
</doxygen>
