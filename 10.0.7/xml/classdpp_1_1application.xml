<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1application" kind="class" language="C++" prot="public">
    <compoundname>dpp::application</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; application &gt;</basecompoundref>
    <includes local="no">application.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1application_1a84eabe6867188b3479c62856037d4f7e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::application::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>the name of the app </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="93" column="12" bodyfile="include/dpp/application.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1ac6e765f3953994066ba388d70f3f7ecb" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::application::icon</definition>
        <argsstring></argsstring>
        <name>icon</name>
        <briefdescription>
<para>the icon hash of the app (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="94" column="18" bodyfile="include/dpp/application.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a6ddc12a2501ab7bd7b5d9ad3633cab9f" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::application::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
<para>the description of the app </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="95" column="12" bodyfile="include/dpp/application.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1ac80deaf158551887c9f4c0b4be7b6ec7" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::application::rpc_origins</definition>
        <argsstring></argsstring>
        <name>rpc_origins</name>
        <briefdescription>
<para>Optional: an array of rpc origin urls, if rpc is enabled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="96" column="12" bodyfile="include/dpp/application.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a1724baabe72d957d04b0a30bc4604d8b" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::application::bot_public</definition>
        <argsstring></argsstring>
        <name>bot_public</name>
        <briefdescription>
<para>when false only app owner can join the app&apos;s bot to guilds </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="97" column="5" bodyfile="include/dpp/application.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a9942dd58f1ca9da0839f0a295612290c" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::application::bot_require_code_grant</definition>
        <argsstring></argsstring>
        <name>bot_require_code_grant</name>
        <briefdescription>
<para>when true the app&apos;s bot will only join upon completion of the full oauth2 code grant flow </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="98" column="5" bodyfile="include/dpp/application.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a1ba6df6bcd2636fcc0203fdecb10047a" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::application::terms_of_service_url</definition>
        <argsstring></argsstring>
        <name>terms_of_service_url</name>
        <briefdescription>
<para>Optional: the url of the app&apos;s terms of service. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="99" column="12" bodyfile="include/dpp/application.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a97b791c3e357fcdcea6306efffb9584e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::application::privacy_policy_url</definition>
        <argsstring></argsstring>
        <name>privacy_policy_url</name>
        <briefdescription>
<para>Optional: the url of the app&apos;s privacy policy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="100" column="12" bodyfile="include/dpp/application.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a5af52bd0ba8718a8bea8cd0c8898f1b6" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1user" kindref="compound">user</ref></type>
        <definition>user dpp::application::owner</definition>
        <argsstring></argsstring>
        <name>owner</name>
        <briefdescription>
<para>Optional: partial user object containing info on the owner of the application. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="101" column="5" bodyfile="include/dpp/application.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a2989a857540c3d20b96b3722a8c9aaf1" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::application::summary</definition>
        <argsstring></argsstring>
        <name>summary</name>
        <briefdescription>
<para>if this application is a game sold on Discord, this field will be the summary field for the store page of its primary sku </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Removed by Discord </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="102" column="12" bodyfile="include/dpp/application.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a53fefb61833dd83db7abe1b0a9c2ef3e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::application::verify_key</definition>
        <argsstring></argsstring>
        <name>verify_key</name>
        <briefdescription>
<para>the hex encoded key for verification in interactions and the GameSDK&apos;s GetTicket </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="103" column="12" bodyfile="include/dpp/application.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a45812eef5fcaa5981dfbd107a8a565fc" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1app__team" kindref="compound">app_team</ref></type>
        <definition>app_team dpp::application::team</definition>
        <argsstring></argsstring>
        <name>team</name>
        <briefdescription>
<para>if the application belongs to a team, this will be a list of the members of that team (may be empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="104" column="9" bodyfile="include/dpp/application.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1aff84fc8a95d5fe5aa88da545ebe5154c" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::application::guild_id</definition>
        <argsstring></argsstring>
        <name>guild_id</name>
        <briefdescription>
<para>Optional: if this application is a game sold on Discord, this field will be the guild to which it has been linked. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="105" column="10" bodyfile="include/dpp/application.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a7aa6f427a79d6efb30d22f34dbecae98" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::application::primary_sku_id</definition>
        <argsstring></argsstring>
        <name>primary_sku_id</name>
        <briefdescription>
<para>Optional: if this application is a game sold on Discord, this field will be the id of the &quot;Game SKU&quot; that is created, if exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="106" column="10" bodyfile="include/dpp/application.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1af6ae37d7a50f84f688abc53b47655797" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::application::slug</definition>
        <argsstring></argsstring>
        <name>slug</name>
        <briefdescription>
<para>Optional: if this application is a game sold on Discord, this field will be the URL slug that links to the store page. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="107" column="12" bodyfile="include/dpp/application.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1a564b1a926e6890cb59db5130c5b3ac5d" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::application::cover_image</definition>
        <argsstring></argsstring>
        <name>cover_image</name>
        <briefdescription>
<para>Optional: the application&apos;s default rich presence invite cover image hash. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="108" column="18" bodyfile="include/dpp/application.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1application_1ad057bffc84c68adf36cf6532455a7f40" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::application::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
<para>Optional: the application&apos;s public flags. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="109" column="9" bodyfile="include/dpp/application.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="38" column="11" bodyfile="include/dpp/managed.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1application_1a20b27bd6cecfbff3ed083c65d4edf044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::application::application</definition>
        <argsstring>()</argsstring>
        <name>application</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1application_1ae9c07959319bada770b8288157c319e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::application::~application</definition>
        <argsstring>()</argsstring>
        <name>~application</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1application_1ad1fe25fde3ada9b7392c70f715a0e50d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1application" kindref="compound">application</ref> &amp;</type>
        <definition>application &amp; dpp::application::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/application.h" line="121" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator==</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are not the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="64" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::managed::operator!=</definition>
        <argsstring>(const managed &amp;other) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdpp_1_1managed" kindref="compound">managed</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Comparison operator for comparing two managed objects by id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other object to compare against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true objects are not the same id </para>
</simplesect>
<simplesect kind="return"><para>false objects are the same id </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="73" column="6"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a287c22f692ee3d25b6f9b320ff35baa1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string dpp::json_interface&lt; application  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build JSON string from the object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Include the ID in the JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string JSON string version of object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="52" column="21" bodyfile="include/dpp/json_interface.h" bodystart="52" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The application class represents details of a bot application. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::application</label>
        <link refid="classdpp_1_1application"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; application &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; application &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>bool</label>
      </node>
      <node id="15">
        <label>dpp::app_team</label>
        <link refid="classdpp_1_1app__team"/>
        <childnode refid="8" relation="usage">
          <edgelabel>icon</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
          <edgelabel>owner_user_id</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>members</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dpp::application</label>
        <link refid="classdpp_1_1application"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>privacy_policy_url</edgelabel>
          <edgelabel>rpc_origins</edgelabel>
          <edgelabel>slug</edgelabel>
          <edgelabel>summary</edgelabel>
          <edgelabel>terms_of_service_url</edgelabel>
          <edgelabel>verify_key</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>cover_image</edgelabel>
          <edgelabel>icon</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>bot_public</edgelabel>
          <edgelabel>bot_require_code_grant</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>owner</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>team</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>primary_sku_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>dpp::user</label>
        <link refid="classdpp_1_1user"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>username</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>discriminator</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>refcount</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="3" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>dpp::json_interface&lt; application &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; application &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>dpp::json_interface&lt; user &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; user &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="6">
        <label>std::string</label>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>vector&lt;</label>
      </node>
      <node id="13">
        <label>uint16_t</label>
      </node>
      <node id="12">
        <label>uint32_t</label>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
      <node id="14">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/application.h" line="91" column="1" bodyfile="include/dpp/application.h" bodystart="91" bodyend="122"/>
    <listofallmembers>
      <member refid="classdpp_1_1application_1a20b27bd6cecfbff3ed083c65d4edf044" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>application</name></member>
      <member refid="classdpp_1_1application_1a1724baabe72d957d04b0a30bc4604d8b" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>bot_public</name></member>
      <member refid="classdpp_1_1application_1a9942dd58f1ca9da0839f0a295612290c" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>bot_require_code_grant</name></member>
      <member refid="structdpp_1_1json__interface_1a287c22f692ee3d25b6f9b320ff35baa1" prot="public" virt="virtual"><scope>dpp::application</scope><name>build_json</name></member>
      <member refid="classdpp_1_1application_1a564b1a926e6890cb59db5130c5b3ac5d" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>cover_image</name></member>
      <member refid="classdpp_1_1application_1a6ddc12a2501ab7bd7b5d9ad3633cab9f" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>description</name></member>
      <member refid="classdpp_1_1application_1ad1fe25fde3ada9b7392c70f715a0e50d" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1application_1ad057bffc84c68adf36cf6532455a7f40" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>flags</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1application_1aff84fc8a95d5fe5aa88da545ebe5154c" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>guild_id</name></member>
      <member refid="classdpp_1_1application_1ac6e765f3953994066ba388d70f3f7ecb" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>icon</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>id</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>managed</name></member>
      <member refid="classdpp_1_1application_1a84eabe6867188b3479c62856037d4f7e" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>name</name></member>
      <member refid="classdpp_1_1managed_1a9f086ed62419d373646e5d0e63667fd5" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>operator!=</name></member>
      <member refid="classdpp_1_1managed_1aaae075e2919ee153d9c1ed34c41b8a33" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>operator==</name></member>
      <member refid="classdpp_1_1application_1a5af52bd0ba8718a8bea8cd0c8898f1b6" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>owner</name></member>
      <member refid="classdpp_1_1application_1a7aa6f427a79d6efb30d22f34dbecae98" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>primary_sku_id</name></member>
      <member refid="classdpp_1_1application_1a97b791c3e357fcdcea6306efffb9584e" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>privacy_policy_url</name></member>
      <member refid="classdpp_1_1application_1ac80deaf158551887c9f4c0b4be7b6ec7" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>rpc_origins</name></member>
      <member refid="classdpp_1_1application_1af6ae37d7a50f84f688abc53b47655797" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>slug</name></member>
      <member refid="classdpp_1_1application_1a2989a857540c3d20b96b3722a8c9aaf1" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>summary</name></member>
      <member refid="classdpp_1_1application_1a45812eef5fcaa5981dfbd107a8a565fc" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>team</name></member>
      <member refid="classdpp_1_1application_1a1ba6df6bcd2636fcc0203fdecb10047a" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>terms_of_service_url</name></member>
      <member refid="classdpp_1_1application_1a53fefb61833dd83db7abe1b0a9c2ef3e" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>verify_key</name></member>
      <member refid="classdpp_1_1application_1ae9c07959319bada770b8288157c319e6" prot="public" virt="non-virtual"><scope>dpp::application</scope><name>~application</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::application</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
