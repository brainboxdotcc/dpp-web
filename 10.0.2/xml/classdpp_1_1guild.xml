<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1guild" kind="class" language="C++" prot="public">
    <compoundname>dpp::guild</compoundname>
    <basecompoundref refid="classdpp_1_1managed" prot="public" virt="non-virtual">dpp::managed</basecompoundref>
    <includes local="no">guild.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1guild_1a80181fee5f66b2dd6f24bad72226bf7c" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::guild::shard_id</definition>
        <argsstring></argsstring>
        <name>shard_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shard ID of the guild </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="372" column="10" bodyfile="include/dpp/guild.h" bodystart="372" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a0525bf0e263ae902a4d6fb295691cb34" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::guild::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags bitmask as defined by values within <ref refid="namespacedpp_1ace5fc4a0db4c08d37d3a1b8e7e22383a" kindref="member">dpp::guild_flags</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="375" column="10" bodyfile="include/dpp/guild.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ab39f33c8525ab7f7a02f8e88b0448c1f" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::guild::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild name </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="378" column="13" bodyfile="include/dpp/guild.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ade8a95b5a41929f92e1fbc079cedb86e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::guild::description</definition>
        <argsstring></argsstring>
        <name>description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Server description for communities </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="381" column="13" bodyfile="include/dpp/guild.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad858d700638f1785f2338e8ec667c74f" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::guild::vanity_url_code</definition>
        <argsstring></argsstring>
        <name>vanity_url_code</name>
        <briefdescription>
<para>Vanity url code for verified or partnered servers and boost level 3. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This field cannot be set from the API. Attempts to change this value will be silently ignored even if the correct number of boosts or verified/partnered status exist. See: <ulink url="https://github.com/discord/discord-api-docs/issues/519">https://github.com/discord/discord-api-docs/issues/519</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="389" column="13" bodyfile="include/dpp/guild.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ab0ad04559371a5e732dd1574622ab28d" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::guild::icon</definition>
        <argsstring></argsstring>
        <name>icon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild icon hash </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="392" column="19" bodyfile="include/dpp/guild.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a45281957f5252467c6b620c61de4ca14" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::guild::splash</definition>
        <argsstring></argsstring>
        <name>splash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild splash hash </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="395" column="19" bodyfile="include/dpp/guild.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a368ba3a6ae2e752a3f702dcba5eb5ce0" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::guild::discovery_splash</definition>
        <argsstring></argsstring>
        <name>discovery_splash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guild discovery splash hash </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="398" column="19" bodyfile="include/dpp/guild.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a4f608587f82bc3deab0974aeb30b2f24" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::owner_id</definition>
        <argsstring></argsstring>
        <name>owner_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Snowflake id of guild owner </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="401" column="11" bodyfile="include/dpp/guild.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1afe32f37c1ac7dcde9933ba48e7b27130" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::afk_channel_id</definition>
        <argsstring></argsstring>
        <name>afk_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Snowflake ID of AFK voice channel or 0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="404" column="11" bodyfile="include/dpp/guild.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a624cb68654a2d32be54f4203835b0722" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild::afk_timeout</definition>
        <argsstring></argsstring>
        <name>afk_timeout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Voice AFK timeout before moving users to AFK channel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="407" column="9" bodyfile="include/dpp/guild.h" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad456524472a24e2592560a4a497c4b01" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::widget_channel_id</definition>
        <argsstring></argsstring>
        <name>widget_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Snowflake ID of widget channel, or 0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="410" column="11" bodyfile="include/dpp/guild.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad0ab37f1e5665f2563f476073005930e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a15724514db1d98eb10a8bd2d5ba44c85" kindref="member">verification_level_t</ref></type>
        <definition>verification_level_t dpp::guild::verification_level</definition>
        <argsstring></argsstring>
        <name>verification_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verification level of server </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="413" column="22" bodyfile="include/dpp/guild.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a304278e17a5d18d322a91cd6e2843a7f" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild::default_message_notifications</definition>
        <argsstring></argsstring>
        <name>default_message_notifications</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setting for how notifications are to be delivered to users </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="416" column="9" bodyfile="include/dpp/guild.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a1c6074e2abbc246282edbd786347b00d" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a47f79e1142def583c59df70b1382319f" kindref="member">guild_explicit_content_t</ref></type>
        <definition>guild_explicit_content_t dpp::guild::explicit_content_filter</definition>
        <argsstring></argsstring>
        <name>explicit_content_filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether or not explicit content filtering is enable and what setting it is </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="419" column="26" bodyfile="include/dpp/guild.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a8a37aaf8be3dadbcba87269bd8405946" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a99a41e59054cde79c2b893ddb9320e4a" kindref="member">mfa_level_t</ref></type>
        <definition>mfa_level_t dpp::guild::mfa_level</definition>
        <argsstring></argsstring>
        <name>mfa_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If multi factor authentication is required for moderators or not </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="422" column="13" bodyfile="include/dpp/guild.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a9f9174bd64a91357f618a957db555d20" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::application_id</definition>
        <argsstring></argsstring>
        <name>application_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID of creating application, if any, or 0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="425" column="11" bodyfile="include/dpp/guild.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a0fc5cec016c0604ce2575fbe5eea5ded" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::system_channel_id</definition>
        <argsstring></argsstring>
        <name>system_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID of system channel where discord update messages are sent </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="428" column="11" bodyfile="include/dpp/guild.h" bodystart="428" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a860098b080bc3bf11c1c44bb77edda09" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::rules_channel_id</definition>
        <argsstring></argsstring>
        <name>rules_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID of rules channel for communities </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="431" column="11" bodyfile="include/dpp/guild.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a8c861567b28347debc48618653a0cf1e" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::guild::member_count</definition>
        <argsstring></argsstring>
        <name>member_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approximate member count. May be sent as zero </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="434" column="10" bodyfile="include/dpp/guild.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad5736b31cf35641cb2c78f9353d3a8a5" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1utility_1_1iconhash" kindref="compound">utility::iconhash</ref></type>
        <definition>utility::iconhash dpp::guild::banner</definition>
        <argsstring></argsstring>
        <name>banner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Server banner hash </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="437" column="19" bodyfile="include/dpp/guild.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a164e4d1c99fcce1bed5a72d3bb5e493e" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::guild::premium_tier</definition>
        <argsstring></argsstring>
        <name>premium_tier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Boost level </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="440" column="9" bodyfile="include/dpp/guild.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1acd884a98bc58d26d29a6a5d2e249f1c9" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::guild::premium_subscription_count</definition>
        <argsstring></argsstring>
        <name>premium_subscription_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of boosters </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="443" column="10" bodyfile="include/dpp/guild.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a10f966d4bc54c233a1ecd6a24ca80dc3" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::guild::public_updates_channel_id</definition>
        <argsstring></argsstring>
        <name>public_updates_channel_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Public updates channel id or 0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="446" column="11" bodyfile="include/dpp/guild.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ad0334ce3a68a51441d539120ceb7123e" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t dpp::guild::max_video_channel_users</definition>
        <argsstring></argsstring>
        <name>max_video_channel_users</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum users in a video channel, or 0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="449" column="10" bodyfile="include/dpp/guild.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a08c72430a41c55914776f3d82e45235c" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::roles</definition>
        <argsstring></argsstring>
        <name>roles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Roles defined on this server </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="452" column="13" bodyfile="include/dpp/guild.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a0995288cfbf8ae64973bbf0181d1789a" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::channels</definition>
        <argsstring></argsstring>
        <name>channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of channels on this server </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="455" column="13" bodyfile="include/dpp/guild.h" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a8e13e2dd21e91104a1e8335990046bf7" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::threads</definition>
        <argsstring></argsstring>
        <name>threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of threads on this server </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="458" column="13" bodyfile="include/dpp/guild.h" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a65c77ce1a6155bc6e7fd6f8937bd1385" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a674dfd30e37779538e80d95fcb13770f" kindref="member">members_container</ref></type>
        <definition>members_container dpp::guild::members</definition>
        <argsstring></argsstring>
        <name>members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of guild members. Note that when you first receive the guild create event, this may be empty or near empty. This depends upon your <ref refid="namespacedpp_1a0042c0fc8164da4239b977d5be8e2ef5" kindref="member">dpp::intents</ref> and the size of your bot. It will be filled by guild member chunk requests. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="465" column="19" bodyfile="include/dpp/guild.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a42066fe3bbfb976ba27fbb9ca38b722f" prot="public" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref>, <ref refid="classdpp_1_1voicestate" kindref="compound">voicestate</ref> &gt;</type>
        <definition>std::map&lt;snowflake, voicestate&gt; dpp::guild::voice_members</definition>
        <argsstring></argsstring>
        <name>voice_members</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of members in voice channels in the guild. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="469" column="10" bodyfile="include/dpp/guild.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a9169668a25a134dc50bbdb6dd9ddd203" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref> &gt;</type>
        <definition>std::vector&lt;snowflake&gt; dpp::guild::emojis</definition>
        <argsstring></argsstring>
        <name>emojis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of emojis </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="473" column="13" bodyfile="include/dpp/guild.h" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a5a37b855f93b3fcd6ce083329dace4f1" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1welcome__screen__t" kindref="compound">welcome_screen_t</ref></type>
        <definition>welcome_screen_t dpp::guild::welcome_screen</definition>
        <argsstring></argsstring>
        <name>welcome_screen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Welcome screen </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="477" column="18" bodyfile="include/dpp/guild.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1ae5071e531ebbf2b8ae42dfbf409af494" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::guild::max_presences</definition>
        <argsstring></argsstring>
        <name>max_presences</name>
        <briefdescription>
<para>the maximum number of presences for the guild. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Generally Discord always fills this with 0, apart from for the largest of guilds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="483" column="10" bodyfile="include/dpp/guild.h" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a32e894208805a5326e7a506c73425854" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::guild::max_members</definition>
        <argsstring></argsstring>
        <name>max_members</name>
        <briefdescription>
<para>the maximum number of members for the guild </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="488" column="10" bodyfile="include/dpp/guild.h" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1guild_1a6520b72031ed26371bb23dc9c23b60c0" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1afd5e6717b5f1f374c5c29f91394aa591" kindref="member">guild_nsfw_level_t</ref></type>
        <definition>guild_nsfw_level_t dpp::guild::nsfw_level</definition>
        <argsstring></argsstring>
        <name>nsfw_level</name>
        <briefdescription>
<para>Guild NSFW level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="493" column="20" bodyfile="include/dpp/guild.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
        <definition>snowflake dpp::managed::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
<para>Unique ID of object set by Discord. This value contains a timestamp, worker ID, internal server ID, and an incrementing value. Only the timestamp is relevant to us as useful metadata. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="38" column="11" bodyfile="include/dpp/managed.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1guild_1aeae6599054436a5a66e07683032089dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::guild::guild</definition>
        <argsstring>()</argsstring>
        <name>guild</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor, zeroes all values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="496" column="1" bodyfile="src/dpp/guild.cpp" bodystart="60" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a7e494da5ab1aaaddae4d588849ea9f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::guild::~guild</definition>
        <argsstring>()=default</argsstring>
        <name>~guild</name>
        <briefdescription>
<para>Destroy the guild object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="501" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1af180ee5682802b64c79d2dc8abc7c9cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::fill_from_json</definition>
        <argsstring>(class discord_client *shard, nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>class <ref refid="classdpp_1_1discord__client" kindref="compound">discord_client</ref> *</type>
          <declname>shard</declname>
        </param>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read class values from json object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shard</parametername>
</parameternamelist>
<parameterdescription>
<para>originating shard </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>A json object to read from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="508" column="7" bodyfile="src/dpp/guild.cpp" bodystart="384" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ac61dbbc6e4c64edd19a96a7ce44d9ab9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a JSON string from this object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>True if an ID is to be included in the JSON </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="514" column="13" bodyfile="src/dpp/guild.cpp" bodystart="338" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a0efc24108bb872be9be88cf26bc5af28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::guild::base_permissions</definition>
        <argsstring>(const class user *member) const</argsstring>
        <name>base_permissions</name>
        <param>
          <type>const class <ref refid="classdpp_1_1user" kindref="compound">user</ref> *</type>
          <declname>member</declname>
        </param>
        <briefdescription>
<para>Get the base permissions for a member on this guild, before permission overwrites are applied. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>member to get permissions for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t permissions bitmask </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="523" column="10" bodyfile="src/dpp/guild.cpp" bodystart="513" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1af9f1c71e0d491f2b34079888cadc9dcf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t dpp::guild::permission_overwrites</definition>
        <argsstring>(const uint64_t base_permissions, const user *member, const channel *channel) const</argsstring>
        <name>permission_overwrites</name>
        <param>
          <type>const uint64_t</type>
          <declname>base_permissions</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1user" kindref="compound">user</ref> *</type>
          <declname>member</declname>
        </param>
        <param>
          <type>const <ref refid="classdpp_1_1channel" kindref="compound">channel</ref> *</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Get the permission overwrites for a member merged into a bitmask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base_permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>base permissions before overwrites, from channel::base_permissions </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>member</parametername>
</parameternamelist>
<parameterdescription>
<para>Member to fetch permissions for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to fetch permissions against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t Merged permissions bitmask of overwrites. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="535" column="10" bodyfile="src/dpp/guild.cpp" bodystart="539" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aeed0e3f51cc2ce2a6752be2ba7b6f8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dpp::guild::rehash_members</definition>
        <argsstring>()</argsstring>
        <name>rehash_members</name>
        <briefdescription>
<para>Rehash members map. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="540" column="6" bodyfile="src/dpp/guild.cpp" bodystart="374" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a0d5e43e678d6a0448930bd31620d979e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::connect_member_voice</definition>
        <argsstring>(snowflake user_id, bool self_mute=false, bool self_deaf=false)</argsstring>
        <name>connect_member_voice</name>
        <param>
          <type><ref refid="namespacedpp_1a0dec2a52b080906aebfd3e1b3db02475" kindref="member">snowflake</ref></type>
          <declname>user_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>self_mute</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>self_deaf</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Connect to a voice channel another guild member is in. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>user_id</parametername>
</parameternamelist>
<parameterdescription>
<para>User id to join </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_mute</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the bot should mute itself </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>self_deaf</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the bot should deafen itself </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the user specified is in a vc, false if they aren&apos;t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="550" column="6" bodyfile="src/dpp/guild.cpp" bodystart="581" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a67463e11c6c80915c0f678d19b1bdc58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild::get_banner_url</definition>
        <argsstring>(uint16_t size=0) const</argsstring>
        <name>get_banner_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the banner url of the guild if it have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the banner in pixels. It can be any power of two between 16 and 4096. if not specified, the default sized banner is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string banner url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="558" column="17" bodyfile="src/dpp/guild.cpp" bodystart="599" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ad475897bedffe54fa204d4d70559ba64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild::get_discovery_splash_url</definition>
        <argsstring>(uint16_t size=0) const</argsstring>
        <name>get_discovery_splash_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the discovery splash url of the guild if it have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the discovery splash in pixels. It can be any power of two between 16 and 4096. if not specified, the default sized discovery splash is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string discovery splash url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="566" column="17" bodyfile="src/dpp/guild.cpp" bodystart="615" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a2d0bc422e00f329eb38535df1c1950e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild::get_icon_url</definition>
        <argsstring>(uint16_t size=0) const</argsstring>
        <name>get_icon_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the icon url of the guild if it have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the icon in pixels. It can be any power of two between 16 and 4096. if not specified, the default sized icon is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string icon url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="574" column="17" bodyfile="src/dpp/guild.cpp" bodystart="631" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1abb687268e0f2fbd7906fe66058ae6d30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::guild::get_splash_url</definition>
        <argsstring>(uint16_t size=0) const</argsstring>
        <name>get_splash_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the splash url of the guild if it have one, otherwise returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the splash in pixels. It can be any power of two between 16 and 4096. if not specified, the default sized splash is returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string splash url or empty string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="582" column="17" bodyfile="src/dpp/guild.cpp" bodystart="649" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a2aa137d0bad0143fc22c0e9b45df2540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdpp_1_1guild" kindref="compound">guild</ref> &amp;</type>
        <definition>guild &amp; dpp::guild::set_name</definition>
        <argsstring>(const std::string &amp;n)</argsstring>
        <name>set_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Set the name of the guild in the object Min length: 2, Max length: 100 (not including leading/trailing spaces) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Guild name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>guild&amp; reference to self </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classdpp_1_1length__exception" kindref="compound">dpp::length_exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if guild name is too short </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="591" column="7" bodyfile="src/dpp/guild.cpp" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ab345901eb0418b58344b72dbe21d40a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_large</definition>
        <argsstring>() const</argsstring>
        <name>is_large</name>
        <briefdescription>
<para>Is a large server (&gt;250 users) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is a large guild </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="597" column="6" bodyfile="src/dpp/guild.cpp" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ab7b956f6c07d48e1184cb4b6c727af21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_unavailable</definition>
        <argsstring>() const</argsstring>
        <name>is_unavailable</name>
        <briefdescription>
<para>Is unavailable due to outage (most other fields will be blank or outdated. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is unavailable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="603" column="6" bodyfile="src/dpp/guild.cpp" bodystart="230" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1afdfe3c2bd4025d259b42dedddc2301a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::widget_enabled</definition>
        <argsstring>() const</argsstring>
        <name>widget_enabled</name>
        <briefdescription>
<para>Widget is enabled for this server. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool widget enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="609" column="6" bodyfile="src/dpp/guild.cpp" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aace41d0c42c5ab41b605dee6268f03fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_invite_splash</definition>
        <argsstring>() const</argsstring>
        <name>has_invite_splash</name>
        <briefdescription>
<para>Guild has an invite splash. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has an invite splash </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="615" column="6" bodyfile="src/dpp/guild.cpp" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a41a4d225e7ad466e1cba1a5352270075" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_vip_regions</definition>
        <argsstring>() const</argsstring>
        <name>has_vip_regions</name>
        <briefdescription>
<para>Guild has VIP voice regions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has vip regions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="621" column="6" bodyfile="src/dpp/guild.cpp" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ac57481c6e6036db6545fcd5a592abee4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_vanity_url</definition>
        <argsstring>() const</argsstring>
        <name>has_vanity_url</name>
        <briefdescription>
<para>Guild can have a vanity url. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool can have vanity url </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="627" column="6" bodyfile="src/dpp/guild.cpp" bodystart="246" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1af79641512c0342d3082174afa2e636e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_verified</definition>
        <argsstring>() const</argsstring>
        <name>is_verified</name>
        <briefdescription>
<para>Guild is a verified server. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is verified </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="633" column="6" bodyfile="src/dpp/guild.cpp" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a02e42564118a777e6da228de14a0aae2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_partnered</definition>
        <argsstring>() const</argsstring>
        <name>is_partnered</name>
        <briefdescription>
<para>Guild is a discord partnered server. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is discord partnered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="639" column="6" bodyfile="src/dpp/guild.cpp" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1aaf353ec02bc9a4fe25544ec78ee93a8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_community</definition>
        <argsstring>() const</argsstring>
        <name>is_community</name>
        <briefdescription>
<para>Has enabled community. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has enabled community </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="645" column="6" bodyfile="src/dpp/guild.cpp" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ae6f2d40220f771b4687ed7e175961591" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_commerce</definition>
        <argsstring>() const</argsstring>
        <name>has_commerce</name>
        <briefdescription>
<para>Guild has commerce channels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has commerce guilds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="651" column="6" bodyfile="src/dpp/guild.cpp" bodystart="266" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a6dbec232c0e25a769569dd23715f574f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_news</definition>
        <argsstring>() const</argsstring>
        <name>has_news</name>
        <briefdescription>
<para>Guild has news channels. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has news channels </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="657" column="6" bodyfile="src/dpp/guild.cpp" bodystart="270" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a6123f35315e5fbb8c6ee0dfaeb61300e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_discoverable</definition>
        <argsstring>() const</argsstring>
        <name>is_discoverable</name>
        <briefdescription>
<para>Guild is discoverable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is discoverable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="663" column="6" bodyfile="src/dpp/guild.cpp" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ad8b3e4ddcc5fb4fbfd717ac275ffc2a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_featureable</definition>
        <argsstring>() const</argsstring>
        <name>is_featureable</name>
        <briefdescription>
<para>Guild is featurable. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is featurable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="669" column="6" bodyfile="src/dpp/guild.cpp" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a46cf6e3821d628027553641c0623df34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_animated_icon</definition>
        <argsstring>() const</argsstring>
        <name>has_animated_icon</name>
        <briefdescription>
<para>Guild can have an animated icon. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool can have animated icon </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="675" column="6" bodyfile="src/dpp/guild.cpp" bodystart="282" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a6ec058ad4e9fde64b0a043287c3f6a73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_banner</definition>
        <argsstring>() const</argsstring>
        <name>has_banner</name>
        <briefdescription>
<para>Guild has a banner image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has banner image </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="681" column="6" bodyfile="src/dpp/guild.cpp" bodystart="286" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a7d1ad4ac2b329f47948c91fe4277932e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_welcome_screen_enabled</definition>
        <argsstring>() const</argsstring>
        <name>is_welcome_screen_enabled</name>
        <briefdescription>
<para>Guild has enabled the welcome screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool enabled welcome screen </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="687" column="6" bodyfile="src/dpp/guild.cpp" bodystart="290" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a96af802a7e704276a86043d11feace1a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_member_verification_gate</definition>
        <argsstring>() const</argsstring>
        <name>has_member_verification_gate</name>
        <briefdescription>
<para>Guild has membership screening. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has membership screening </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="693" column="6" bodyfile="src/dpp/guild.cpp" bodystart="294" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a6415e9e4dec10710bd3486c1dae76fdf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::is_preview_enabled</definition>
        <argsstring>() const</argsstring>
        <name>is_preview_enabled</name>
        <briefdescription>
<para>Guild has preview enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has preview </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="699" column="6" bodyfile="src/dpp/guild.cpp" bodystart="298" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a019d630e2b5aeb708b48d6f8fbb420de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_animated_icon_hash</definition>
        <argsstring>() const</argsstring>
        <name>has_animated_icon_hash</name>
        <briefdescription>
<para>Guild icon is actually an animated gif. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is animated gif </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="705" column="6" bodyfile="src/dpp/guild.cpp" bodystart="302" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a6e5dcd2c2d443d68e759897958b6c7da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_animated_banner_icon_hash</definition>
        <argsstring>() const</argsstring>
        <name>has_animated_banner_icon_hash</name>
        <briefdescription>
<para>Guild banner is animated gif. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool is animated gif </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="711" column="6" bodyfile="src/dpp/guild.cpp" bodystart="306" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a75d864d601d0795c35f2fc3acc08a4a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_monetization_enabled</definition>
        <argsstring>() const</argsstring>
        <name>has_monetization_enabled</name>
        <briefdescription>
<para>guild has access to monetization features </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="718" column="6" bodyfile="src/dpp/guild.cpp" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a986436ee2749583102be956b863929ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_more_stickers</definition>
        <argsstring>() const</argsstring>
        <name>has_more_stickers</name>
        <briefdescription>
<para>guild has increased custom sticker slots </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has more stickers </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="724" column="6" bodyfile="src/dpp/guild.cpp" bodystart="314" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a49c65ccddd2a1ec96ae82b1148f5de1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_private_threads</definition>
        <argsstring>() const</argsstring>
        <name>has_private_threads</name>
        <briefdescription>
<para>guild has access to create private threads </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has private threads </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="730" column="6" bodyfile="src/dpp/guild.cpp" bodystart="318" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a73a3dcb37facc18aecdb78393bf96206" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_role_icons</definition>
        <argsstring>() const</argsstring>
        <name>has_role_icons</name>
        <briefdescription>
<para>guild is able to set role icons </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has role icons </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="736" column="6" bodyfile="src/dpp/guild.cpp" bodystart="322" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ac98d9e2481862ca19ba7c2115e5f0b2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_seven_day_thread_archive</definition>
        <argsstring>() const</argsstring>
        <name>has_seven_day_thread_archive</name>
        <briefdescription>
<para>guild has access to the seven day archive time for threads </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has seven day thread archive </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="742" column="6" bodyfile="src/dpp/guild.cpp" bodystart="326" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a9be0dcb6ed82faac52d0072aed61b69c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_three_day_thread_archive</definition>
        <argsstring>() const</argsstring>
        <name>has_three_day_thread_archive</name>
        <briefdescription>
<para>guild has access to the three day archive time for threads </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has three day thread archive </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="748" column="6" bodyfile="src/dpp/guild.cpp" bodystart="330" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1a5b436fb2cc0bbb1a2e9c4c86b483949c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_ticketed_events</definition>
        <argsstring>() const</argsstring>
        <name>has_ticketed_events</name>
        <briefdescription>
<para>guild has enabled ticketed events </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has ticketed events </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="754" column="6" bodyfile="src/dpp/guild.cpp" bodystart="334" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1guild_1ac432abc8b361b3c7f20d74650a63f730" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool dpp::guild::has_channel_banners</definition>
        <argsstring>() const</argsstring>
        <name>has_channel_banners</name>
        <briefdescription>
<para>guild has access to channel banners feature </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool has channel banners </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/guild.h" line="760" column="6" bodyfile="src/dpp/guild.cpp" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double dpp::managed::get_creation_time</definition>
        <argsstring>() const</argsstring>
        <name>get_creation_time</name>
        <briefdescription>
<para>Get the creation time of this object according to Discord. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double creation time inferred from the snowflake ID. The minimum possible value is the first second of 2015. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/managed.h" line="55" column="8" bodyfile="src/dpp/discordevents.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a guild on Discord (AKA a server) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dpp::guild</label>
        <link refid="classdpp_1_1guild"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>max_video_channel_users</edgelabel>
          <edgelabel>premium_subscription_count</edgelabel>
          <edgelabel>shard_id</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>flags</edgelabel>
          <edgelabel>max_members</edgelabel>
          <edgelabel>max_presences</edgelabel>
          <edgelabel>member_count</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>description</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>vanity_url_code</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>banner</edgelabel>
          <edgelabel>discovery_splash</edgelabel>
          <edgelabel>icon</edgelabel>
          <edgelabel>splash</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>afk_channel_id</edgelabel>
          <edgelabel>application_id</edgelabel>
          <edgelabel>owner_id</edgelabel>
          <edgelabel>public_updates_channel_id</edgelabel>
          <edgelabel>rules_channel_id</edgelabel>
          <edgelabel>system_channel_id</edgelabel>
          <edgelabel>widget_channel_id</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>afk_timeout</edgelabel>
          <edgelabel>default_message_notifications</edgelabel>
          <edgelabel>premium_tier</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>verification_level</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>explicit_content_filter</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>mfa_level</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>channels</edgelabel>
          <edgelabel>emojis</edgelabel>
          <edgelabel>roles</edgelabel>
          <edgelabel>threads</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>members</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>voice_members</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>welcome_screen</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>nsfw_level</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::guild_member</label>
        <link refid="classdpp_1_1guild__member"/>
        <childnode refid="6" relation="usage">
          <edgelabel>nickname</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>guild_id</edgelabel>
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>roles</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>communication_disabled_until</edgelabel>
          <edgelabel>joined_at</edgelabel>
          <edgelabel>premium_since</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>avatar</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="3" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::utility::iconhash</label>
        <link refid="structdpp_1_1utility_1_1iconhash"/>
        <childnode refid="3" relation="usage">
          <edgelabel>first</edgelabel>
          <edgelabel>second</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>dpp::welcome_screen_t</label>
        <link refid="structdpp_1_1welcome__screen__t"/>
        <childnode refid="6" relation="usage">
          <edgelabel>description</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>welcome_channels</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>guild_explicit_content_t</label>
      </node>
      <node id="19">
        <label>guild_nsfw_level_t</label>
      </node>
      <node id="12">
        <label>mfa_level_t</label>
      </node>
      <node id="7">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="17">
        <label>map&lt;</label>
      </node>
      <node id="6">
        <label>std::string</label>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>vector&lt;</label>
      </node>
      <node id="16">
        <label>time_t</label>
      </node>
      <node id="4">
        <label>uint16_t</label>
      </node>
      <node id="5">
        <label>uint32_t</label>
      </node>
      <node id="3">
        <label>uint64_t</label>
      </node>
      <node id="9">
        <label>uint8_t</label>
      </node>
      <node id="14">
        <label>std::unordered_map&lt; snowflake, guild_member &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>verification_level_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/guild.h" line="369" column="1" bodyfile="include/dpp/guild.h" bodystart="369" bodyend="761"/>
    <listofallmembers>
      <member refid="classdpp_1_1guild_1afe32f37c1ac7dcde9933ba48e7b27130" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>afk_channel_id</name></member>
      <member refid="classdpp_1_1guild_1a624cb68654a2d32be54f4203835b0722" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>afk_timeout</name></member>
      <member refid="classdpp_1_1guild_1a9f9174bd64a91357f618a957db555d20" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>application_id</name></member>
      <member refid="classdpp_1_1guild_1ad5736b31cf35641cb2c78f9353d3a8a5" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>banner</name></member>
      <member refid="classdpp_1_1guild_1a0efc24108bb872be9be88cf26bc5af28" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>base_permissions</name></member>
      <member refid="classdpp_1_1guild_1ac61dbbc6e4c64edd19a96a7ce44d9ab9" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>build_json</name></member>
      <member refid="classdpp_1_1guild_1a0995288cfbf8ae64973bbf0181d1789a" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>channels</name></member>
      <member refid="classdpp_1_1guild_1a0d5e43e678d6a0448930bd31620d979e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>connect_member_voice</name></member>
      <member refid="classdpp_1_1guild_1a304278e17a5d18d322a91cd6e2843a7f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>default_message_notifications</name></member>
      <member refid="classdpp_1_1guild_1ade8a95b5a41929f92e1fbc079cedb86e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>description</name></member>
      <member refid="classdpp_1_1guild_1a368ba3a6ae2e752a3f702dcba5eb5ce0" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>discovery_splash</name></member>
      <member refid="classdpp_1_1guild_1a9169668a25a134dc50bbdb6dd9ddd203" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>emojis</name></member>
      <member refid="classdpp_1_1guild_1a1c6074e2abbc246282edbd786347b00d" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>explicit_content_filter</name></member>
      <member refid="classdpp_1_1guild_1af180ee5682802b64c79d2dc8abc7c9cd" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>fill_from_json</name></member>
      <member refid="classdpp_1_1guild_1a0525bf0e263ae902a4d6fb295691cb34" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>flags</name></member>
      <member refid="classdpp_1_1guild_1a67463e11c6c80915c0f678d19b1bdc58" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>get_banner_url</name></member>
      <member refid="classdpp_1_1managed_1aa66e351fb6573a9d262ffdb2f47681b7" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>get_creation_time</name></member>
      <member refid="classdpp_1_1guild_1ad475897bedffe54fa204d4d70559ba64" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>get_discovery_splash_url</name></member>
      <member refid="classdpp_1_1guild_1a2d0bc422e00f329eb38535df1c1950e7" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>get_icon_url</name></member>
      <member refid="classdpp_1_1guild_1abb687268e0f2fbd7906fe66058ae6d30" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>get_splash_url</name></member>
      <member refid="classdpp_1_1guild_1aeae6599054436a5a66e07683032089dc" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>guild</name></member>
      <member refid="classdpp_1_1guild_1a6e5dcd2c2d443d68e759897958b6c7da" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_animated_banner_icon_hash</name></member>
      <member refid="classdpp_1_1guild_1a46cf6e3821d628027553641c0623df34" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_animated_icon</name></member>
      <member refid="classdpp_1_1guild_1a019d630e2b5aeb708b48d6f8fbb420de" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_animated_icon_hash</name></member>
      <member refid="classdpp_1_1guild_1a6ec058ad4e9fde64b0a043287c3f6a73" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_banner</name></member>
      <member refid="classdpp_1_1guild_1ac432abc8b361b3c7f20d74650a63f730" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_channel_banners</name></member>
      <member refid="classdpp_1_1guild_1ae6f2d40220f771b4687ed7e175961591" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_commerce</name></member>
      <member refid="classdpp_1_1guild_1aace41d0c42c5ab41b605dee6268f03fa" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_invite_splash</name></member>
      <member refid="classdpp_1_1guild_1a96af802a7e704276a86043d11feace1a" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_member_verification_gate</name></member>
      <member refid="classdpp_1_1guild_1a75d864d601d0795c35f2fc3acc08a4a4" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_monetization_enabled</name></member>
      <member refid="classdpp_1_1guild_1a986436ee2749583102be956b863929ea" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_more_stickers</name></member>
      <member refid="classdpp_1_1guild_1a6dbec232c0e25a769569dd23715f574f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_news</name></member>
      <member refid="classdpp_1_1guild_1a49c65ccddd2a1ec96ae82b1148f5de1f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_private_threads</name></member>
      <member refid="classdpp_1_1guild_1a73a3dcb37facc18aecdb78393bf96206" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_role_icons</name></member>
      <member refid="classdpp_1_1guild_1ac98d9e2481862ca19ba7c2115e5f0b2c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_seven_day_thread_archive</name></member>
      <member refid="classdpp_1_1guild_1a9be0dcb6ed82faac52d0072aed61b69c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_three_day_thread_archive</name></member>
      <member refid="classdpp_1_1guild_1a5b436fb2cc0bbb1a2e9c4c86b483949c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_ticketed_events</name></member>
      <member refid="classdpp_1_1guild_1ac57481c6e6036db6545fcd5a592abee4" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_vanity_url</name></member>
      <member refid="classdpp_1_1guild_1a41a4d225e7ad466e1cba1a5352270075" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>has_vip_regions</name></member>
      <member refid="classdpp_1_1guild_1ab0ad04559371a5e732dd1574622ab28d" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>icon</name></member>
      <member refid="classdpp_1_1managed_1a40bf0c6cc03909910512808fa6caa112" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>id</name></member>
      <member refid="classdpp_1_1guild_1aaf353ec02bc9a4fe25544ec78ee93a8f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_community</name></member>
      <member refid="classdpp_1_1guild_1a6123f35315e5fbb8c6ee0dfaeb61300e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_discoverable</name></member>
      <member refid="classdpp_1_1guild_1ad8b3e4ddcc5fb4fbfd717ac275ffc2a3" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_featureable</name></member>
      <member refid="classdpp_1_1guild_1ab345901eb0418b58344b72dbe21d40a1" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_large</name></member>
      <member refid="classdpp_1_1guild_1a02e42564118a777e6da228de14a0aae2" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_partnered</name></member>
      <member refid="classdpp_1_1guild_1a6415e9e4dec10710bd3486c1dae76fdf" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_preview_enabled</name></member>
      <member refid="classdpp_1_1guild_1ab7b956f6c07d48e1184cb4b6c727af21" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_unavailable</name></member>
      <member refid="classdpp_1_1guild_1af79641512c0342d3082174afa2e636e8" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_verified</name></member>
      <member refid="classdpp_1_1guild_1a7d1ad4ac2b329f47948c91fe4277932e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>is_welcome_screen_enabled</name></member>
      <member refid="classdpp_1_1managed_1a30e9c7c9cef4cd42487f0be61aa616d0" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>managed</name></member>
      <member refid="classdpp_1_1guild_1a32e894208805a5326e7a506c73425854" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>max_members</name></member>
      <member refid="classdpp_1_1guild_1ae5071e531ebbf2b8ae42dfbf409af494" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>max_presences</name></member>
      <member refid="classdpp_1_1guild_1ad0334ce3a68a51441d539120ceb7123e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>max_video_channel_users</name></member>
      <member refid="classdpp_1_1guild_1a8c861567b28347debc48618653a0cf1e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>member_count</name></member>
      <member refid="classdpp_1_1guild_1a65c77ce1a6155bc6e7fd6f8937bd1385" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>members</name></member>
      <member refid="classdpp_1_1guild_1a8a37aaf8be3dadbcba87269bd8405946" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>mfa_level</name></member>
      <member refid="classdpp_1_1guild_1ab39f33c8525ab7f7a02f8e88b0448c1f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>name</name></member>
      <member refid="classdpp_1_1guild_1a6520b72031ed26371bb23dc9c23b60c0" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>nsfw_level</name></member>
      <member refid="classdpp_1_1guild_1a4f608587f82bc3deab0974aeb30b2f24" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>owner_id</name></member>
      <member refid="classdpp_1_1guild_1af9f1c71e0d491f2b34079888cadc9dcf" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>permission_overwrites</name></member>
      <member refid="classdpp_1_1guild_1acd884a98bc58d26d29a6a5d2e249f1c9" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>premium_subscription_count</name></member>
      <member refid="classdpp_1_1guild_1a164e4d1c99fcce1bed5a72d3bb5e493e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>premium_tier</name></member>
      <member refid="classdpp_1_1guild_1a10f966d4bc54c233a1ecd6a24ca80dc3" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>public_updates_channel_id</name></member>
      <member refid="classdpp_1_1guild_1aeed0e3f51cc2ce2a6752be2ba7b6f8ac" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>rehash_members</name></member>
      <member refid="classdpp_1_1guild_1a08c72430a41c55914776f3d82e45235c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>roles</name></member>
      <member refid="classdpp_1_1guild_1a860098b080bc3bf11c1c44bb77edda09" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>rules_channel_id</name></member>
      <member refid="classdpp_1_1guild_1a2aa137d0bad0143fc22c0e9b45df2540" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>set_name</name></member>
      <member refid="classdpp_1_1guild_1a80181fee5f66b2dd6f24bad72226bf7c" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>shard_id</name></member>
      <member refid="classdpp_1_1guild_1a45281957f5252467c6b620c61de4ca14" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>splash</name></member>
      <member refid="classdpp_1_1guild_1a0fc5cec016c0604ce2575fbe5eea5ded" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>system_channel_id</name></member>
      <member refid="classdpp_1_1guild_1a8e13e2dd21e91104a1e8335990046bf7" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>threads</name></member>
      <member refid="classdpp_1_1guild_1ad858d700638f1785f2338e8ec667c74f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>vanity_url_code</name></member>
      <member refid="classdpp_1_1guild_1ad0ab37f1e5665f2563f476073005930e" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>verification_level</name></member>
      <member refid="classdpp_1_1guild_1a42066fe3bbfb976ba27fbb9ca38b722f" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>voice_members</name></member>
      <member refid="classdpp_1_1guild_1a5a37b855f93b3fcd6ce083329dace4f1" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>welcome_screen</name></member>
      <member refid="classdpp_1_1guild_1ad456524472a24e2592560a4a497c4b01" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>widget_channel_id</name></member>
      <member refid="classdpp_1_1guild_1afdfe3c2bd4025d259b42dedddc2301a1" prot="public" virt="non-virtual"><scope>dpp::guild</scope><name>widget_enabled</name></member>
      <member refid="classdpp_1_1guild_1a7e494da5ab1aaaddae4d588849ea9f14" prot="public" virt="virtual"><scope>dpp::guild</scope><name>~guild</name></member>
      <member refid="classdpp_1_1managed_1af6f3e41995e49b5ce68772a9fa4b5fad" prot="public" virt="virtual"><scope>dpp::guild</scope><name>~managed</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
