<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="building-a-cpp-discord-bot-in-repl" kind="page">
    <compoundname>building-a-cpp-discord-bot-in-repl</compoundname>
    <title>Creating a Discord Bot in Replit</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>Be aware, Replit changes frequently, meaning DPP may not always work. It is out of our control and you simply have to hope that they change it again. If this is an inconvenience, we recommend you obtain some affordable non-free hosting.</para>
</simplesect>
<simplesect kind="note"><para>There is a premade repl, ready for use, which was built using the steps below. If you wish to use this repl simply <ulink url="https://github.com/alanlichen/dpp-on-repl">visit this GitHub repository</ulink> and click the &quot;Run on Replit&quot; button. Then, follow the steps in the README file.</para>
</simplesect>
To build a D++ bot in a Replit instance, follow these steps. These steps are slightly more convoluted than installing D++ into a standard container as we don&apos;t have access to root in the conventional way or write access to any files outside of our home directory in a repl. This guide sidesteps the issue by locally extracting a <computeroutput>libdpp</computeroutput> deb file installer, and referencing the local dependencies from the command-line.</para>
<para><orderedlist>
<listitem><para>Use wget, or the upload button, to get the precompiled x64 release into your repl as a file, e.g. <computeroutput>wget -O libdpp.deb <ulink url="https://dl.dpp.dev/latest">https://dl.dpp.dev/latest</ulink></computeroutput>,</para>
</listitem><listitem><para>Extract this deb file using <computeroutput>dpkg</computeroutput>: <programlisting filename=".bash"><codeline><highlight class="normal">dpkg<sp/>-x<sp/>libdpp.deb<sp/>.</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Compile your bot, note that you should be sure to include the <computeroutput>pthread</computeroutput> library explicitly and reference the extracted dpp installation you just put into the repl: <programlisting filename=".bash"><codeline><highlight class="normal">g++<sp/>-o<sp/>bot<sp/>main.cpp<sp/>-ldpp<sp/>-lpthread<sp/>-L./usr/lib<sp/>-I./usr/include<sp/>-std=c++17</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Run your bot! Note that you will need to set <computeroutput>LD_PRELOAD</computeroutput> to reference <computeroutput>libdpp.so</computeroutput> as it will be located in <computeroutput>$HOME</computeroutput> and not <computeroutput>/usr/lib</computeroutput>: <programlisting filename=".bash"><codeline><highlight class="normal">LD_PRELOAD=./usr/lib/libdpp.so<sp/>./bot</highlight></codeline>
</programlisting></para>
</listitem></orderedlist>
</para>
<para>Now that your bot is running, you have to keep it online. Replit automatically puts repls to sleep after some time, so you will need to ping a webserver. Unfortunately, Replit is sometimes limiting, and this is one of the only free workarounds to this issue.</para>
<para><orderedlist>
<listitem><para>Start a http server. This can be through any webserver, but as a simple solution, use python&apos;s built in http.server: <programlisting filename=".bash"><codeline><highlight class="normal">python3<sp/>-m<sp/>http.server</highlight></codeline>
</programlisting></para>
</listitem><listitem><para>Create an <computeroutput>index.html</computeroutput> file with anything inside it for the server to serve.</para>
</listitem><listitem><para>Go to <ulink url="https://uptimerobot.com/">uptimerobot.com</ulink> and create an account if you don&apos;t have one.</para>
</listitem><listitem><para>After verifying your account, click &quot;Add New Monitor&quot;.</para>
</listitem></orderedlist>
<itemizedlist>
<listitem><para>For Monitor Type, select &quot;HTTP(s)&quot;</para>
</listitem><listitem><para>In Friendly Name, put the name of your bot</para>
</listitem><listitem><para>For your URL, copy the URL of the new website that repl is serving for you</para>
</listitem><listitem><para>Select any alert contacts you want, then click &quot;Create Monitor&quot;</para>
</listitem></itemizedlist>
</para>
<para>Here is an example of a possible uptimerobot configuration:</para>
<para><image type="html" name="uptimerobot.png"></image>
</para>
<sect2 id="building-a-cpp-discord-bot-in-repl_1autotoc_md169">
<title>Troubleshooting</title>
<para><itemizedlist>
<listitem><para>If the bot fails to start and instead you receive an error message about being banned from the Discord API, there is little to be done about this. These bans are temporary but because Replit is a shared platform, you share an IP address with many thousands of bots, some abusive and some badly written. This will happen often and is outside of the control of yourself and us. However, you can try to mitigate this by typing <computeroutput>kill 1</computeroutput> in the shell. This is not guaranteed to work, and you might need to try it a few times. If it still does not work, then we recommend you obtain some affordable non-free hosting instead.</para>
</listitem><listitem><para>If your bot continues to fall asleep even though you have a server, we advise you to double check that no errors are happening, and if the server is being pinged. If that still does not work then, again, we recommend you obtain some affordable non-free hosting. </para>
</listitem></itemizedlist>
</para>
</sect2>
    </detaileddescription>
    <location file="docpages/make_a_bot/replit.md"/>
  </compounddef>
</doxygen>
