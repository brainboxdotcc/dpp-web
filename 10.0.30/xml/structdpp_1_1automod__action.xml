<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structdpp_1_1automod__action" kind="struct" language="C++" prot="public">
    <compoundname>dpp::automod_action</compoundname>
    <basecompoundref refid="structdpp_1_1json__interface" prot="public" virt="non-virtual">dpp::json_interface&lt; automod_action &gt;</basecompoundref>
    <includes local="no">automod.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdpp_1_1automod__action_1a37436f8043b3b083a7417e46af19adaf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct json_interface&lt; automod_action &gt;</definition>
        <argsstring></argsstring>
        <name>json_interface&lt; automod_action &gt;</name>
        <param>
          <type><ref refid="structdpp_1_1json__interface" kindref="compound">json_interface</ref>&lt; <ref refid="structdpp_1_1automod__action" kindref="compound">automod_action</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="253" column="9" bodyfile="include/dpp/automod.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdpp_1_1automod__action_1a2ba5d6d68adc00b34c7d85d5880aca4d" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::automod_action::channel_id</definition>
        <argsstring></argsstring>
        <name>channel_id</name>
        <briefdescription>
<para>Channel ID to which user content should be logged, for type <ref refid="namespacedpp_1a3ad85ab5a039a0c7f46107a02440a14caccf0e42b2f286ea0631e4a427662425c" kindref="member">dpp::amod_action_send_alert</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="287" column="11" bodyfile="include/dpp/automod.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__action_1a1e305859aa57284d91dffbd2f2a64cd2" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::automod_action::custom_message</definition>
        <argsstring></argsstring>
        <name>custom_message</name>
        <briefdescription>
<para>Additional explanation that will be shown to members whenever their message is blocked. For type <ref refid="namespacedpp_1a3ad85ab5a039a0c7f46107a02440a14ca1a78446ae2f6da41fb144c25e2b53e56" kindref="member">dpp::amod_action_block_message</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="292" column="13" bodyfile="include/dpp/automod.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__action_1a5bb873fd4283bdd83be46440b3105fea" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t dpp::automod_action::duration_seconds</definition>
        <argsstring></argsstring>
        <name>duration_seconds</name>
        <briefdescription>
<para>Timeout duration in seconds (Maximum of 2419200), for <ref refid="namespacedpp_1a3ad85ab5a039a0c7f46107a02440a14ca8c7c0985bb106bc4da6690a0c1693fd8" kindref="member">dpp::amod_action_timeout</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="297" column="10" bodyfile="include/dpp/automod.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdpp_1_1automod__action_1adab530731d417fba8771aaf40884caf9" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a3ad85ab5a039a0c7f46107a02440a14c" kindref="member">automod_action_type</ref></type>
        <definition>automod_action_type dpp::automod_action::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>Type of action to take. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="282" column="21" bodyfile="include/dpp/automod.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structdpp_1_1automod__action_1aa3a3590f9a861e647fa563527b8c1950" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdpp_1_1automod__action" kindref="compound">automod_action</ref> &amp;</type>
        <definition>automod_action &amp; dpp::automod_action::fill_from_json_impl</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json_impl</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Fill object properties from JSON. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON to fill from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structdpp_1_1automod__action" kindref="compound">automod_action</ref>&amp; Reference to self </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="269" column="16"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1automod__action_1aa4da5989550279a85e1ece533287cec5" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacedpp_1ae9134a9d8edf8adcb87e979bb7a7343e" kindref="member">json</ref></type>
        <definition>virtual json dpp::automod_action::to_json_impl</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json_impl</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Build a json for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>json JSON object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="276" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdpp_1_1automod__action_1ac2a996f644692f79ea0bd8bb2b840d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::automod_action::automod_action</definition>
        <argsstring>()</argsstring>
        <name>automod_action</name>
        <briefdescription>
<para>Construct a new automod action object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1automod__action_1a738fe2ecb776788fdcc8e0ecd2c8b96f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual dpp::automod_action::~automod_action</definition>
        <argsstring>()</argsstring>
        <name>~automod_action</name>
        <briefdescription>
<para>Destroy the automod action object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/automod.h" line="307" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::json_interface&lt; automod_action  &gt;::build_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>build_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to json string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>std::string Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="68" column="13" bodyfile="include/dpp/json_interface.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdpp_1_1automod__action" kindref="compound">automod_action</ref> &amp;</type>
        <definition>automod_action  &amp; dpp::json_interface&lt; automod_action  &gt;::fill_from_json</definition>
        <argsstring>(nlohmann::json *j)</argsstring>
        <name>fill_from_json</name>
        <param>
          <type>nlohmann::json *</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Convert object from nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>nlohmann::json object </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T&amp; Reference to self for fluent calling </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="44" column="3" bodyfile="include/dpp/json_interface.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto dpp::json_interface&lt; automod_action  &gt;::to_json</definition>
        <argsstring>(bool with_id=false) const</argsstring>
        <name>to_json</name>
        <param>
          <type>bool</type>
          <declname>with_id</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Convert object to nlohmann::json. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>with_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to include the ID or not </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Some fields are conditionally filled, do not rely on all fields being present </para>
</simplesect>
<simplesect kind="return"><para>json Json built from the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/json_interface.h" line="56" column="6" bodyfile="include/dpp/json_interface.h" bodystart="56" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an automod action. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dpp::automod_action</label>
        <link refid="structdpp_1_1automod__action"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; automod_action &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; automod_action &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>automod_action_type</label>
      </node>
      <node id="1">
        <label>dpp::automod_action</label>
        <link refid="structdpp_1_1automod__action"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>channel_id</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>custom_message</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>duration_seconds</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="5">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="6" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>dpp::json_interface&lt; automod_action &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; automod_action &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>uint32_t</label>
      </node>
      <node id="6">
        <label>uint64_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/automod.h" line="259" column="1" bodyfile="include/dpp/automod.h" bodystart="259" bodyend="308"/>
    <listofallmembers>
      <member refid="structdpp_1_1automod__action_1ac2a996f644692f79ea0bd8bb2b840d5c" prot="public" virt="non-virtual"><scope>dpp::automod_action</scope><name>automod_action</name></member>
      <member refid="structdpp_1_1json__interface_1ad615544432a8a6da87f3bd70d6f6b92c" prot="public" virt="non-virtual"><scope>dpp::automod_action</scope><name>build_json</name></member>
      <member refid="structdpp_1_1automod__action_1a2ba5d6d68adc00b34c7d85d5880aca4d" prot="public" virt="non-virtual"><scope>dpp::automod_action</scope><name>channel_id</name></member>
      <member refid="structdpp_1_1automod__action_1a1e305859aa57284d91dffbd2f2a64cd2" prot="public" virt="non-virtual"><scope>dpp::automod_action</scope><name>custom_message</name></member>
      <member refid="structdpp_1_1automod__action_1a5bb873fd4283bdd83be46440b3105fea" prot="public" virt="non-virtual"><scope>dpp::automod_action</scope><name>duration_seconds</name></member>
      <member refid="structdpp_1_1json__interface_1a96011fc1c0d56e194f83c79d40c439c6" prot="public" virt="non-virtual"><scope>dpp::automod_action</scope><name>fill_from_json</name></member>
      <member refid="structdpp_1_1automod__action_1aa3a3590f9a861e647fa563527b8c1950" prot="protected" virt="non-virtual"><scope>dpp::automod_action</scope><name>fill_from_json_impl</name></member>
      <member refid="structdpp_1_1automod__action_1a37436f8043b3b083a7417e46af19adaf" prot="protected" virt="non-virtual"><scope>dpp::automod_action</scope><name>json_interface&lt; automod_action &gt;</name></member>
      <member refid="structdpp_1_1json__interface_1ae169e4231b77955fc1b43a3b7be9770c" prot="public" virt="non-virtual"><scope>dpp::automod_action</scope><name>to_json</name></member>
      <member refid="structdpp_1_1automod__action_1aa4da5989550279a85e1ece533287cec5" prot="protected" virt="virtual"><scope>dpp::automod_action</scope><name>to_json_impl</name></member>
      <member refid="structdpp_1_1automod__action_1adab530731d417fba8771aaf40884caf9" prot="public" virt="non-virtual"><scope>dpp::automod_action</scope><name>type</name></member>
      <member refid="structdpp_1_1automod__action_1a738fe2ecb776788fdcc8e0ecd2c8b96f" prot="public" virt="virtual"><scope>dpp::automod_action</scope><name>~automod_action</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
