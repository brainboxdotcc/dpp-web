<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="classdpp_1_1activity" kind="class" language="C++" prot="public">
    <compoundname>dpp::activity</compoundname>
    <includes local="no">presence.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdpp_1_1activity_1a1bc7b3fbd7cbf6ef7d520ef80ca223b1" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::activity::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Name of activity e.g. &quot;Fortnite&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="224" column="13" bodyfile="include/dpp/presence.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a6314c58d23a4301b3d7dabc91e472666" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::activity::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>State of activity or the custom user status. e.g. &quot;Waiting in lobby&quot; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="228" column="13" bodyfile="include/dpp/presence.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1af12e911465278b93f67ee65ef5d7fb0e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::activity::details</definition>
        <argsstring></argsstring>
        <name>details</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>What the player is currently doing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="231" column="13" bodyfile="include/dpp/presence.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a5499464a59f18a8d098f4d7bab610691" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1activity__assets" kindref="compound">activity_assets</ref></type>
        <definition>activity_assets dpp::activity::assets</definition>
        <argsstring></argsstring>
        <name>assets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Images for the presence and their hover texts </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="234" column="17" bodyfile="include/dpp/presence.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1ad1adda3efd20156e122a238c32fb58c6" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string dpp::activity::url</definition>
        <argsstring></argsstring>
        <name>url</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>URL. Only applicable for certain sites such a YouTube Alias: details </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="239" column="13" bodyfile="include/dpp/presence.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a65cb680cfef51d6b3d1796682c9c93c5" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structdpp_1_1activity__button" kindref="compound">activity_button</ref> &gt;</type>
        <definition>std::vector&lt;activity_button&gt; dpp::activity::buttons</definition>
        <argsstring></argsstring>
        <name>buttons</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The custom buttons shown in the Rich Presence (max 2) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="242" column="13" bodyfile="include/dpp/presence.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a4d73d6ac68ba16822b3c67554e24f3b1" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1emoji" kindref="compound">dpp::emoji</ref></type>
        <definition>dpp::emoji dpp::activity::emoji</definition>
        <argsstring></argsstring>
        <name>emoji</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The emoji used for the custom status </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="245" column="12" bodyfile="include/dpp/presence.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a7d76284f4a09615e6b93f97852420fca" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1activity__party" kindref="compound">activity_party</ref></type>
        <definition>activity_party dpp::activity::party</definition>
        <argsstring></argsstring>
        <name>party</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Information of the current party if there is one </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="248" column="16" bodyfile="include/dpp/presence.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a13218ba01e1ceeb45b12f7774a73e9c1" prot="public" static="no" mutable="no">
        <type><ref refid="structdpp_1_1activity__secrets" kindref="compound">activity_secrets</ref></type>
        <definition>activity_secrets dpp::activity::secrets</definition>
        <argsstring></argsstring>
        <name>secrets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Secrets for rich presence joining and spectating </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="251" column="18" bodyfile="include/dpp/presence.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1aa796b39d22fb9e5083c820b6803285ba" prot="public" static="no" mutable="no">
        <type><ref refid="namespacedpp_1a1d07516cb637238ba721dc4d91ab6fc2" kindref="member">activity_type</ref></type>
        <definition>activity_type dpp::activity::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Activity type </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="254" column="15" bodyfile="include/dpp/presence.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a0f393e44d64caee04effbd9821f13635" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::activity::created_at</definition>
        <argsstring></argsstring>
        <name>created_at</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time activity was created </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="257" column="8" bodyfile="include/dpp/presence.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a3ab31f2d396e1c16e3f5a2036a683c9f" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::activity::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start time. e.g. when game was started </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="260" column="8" bodyfile="include/dpp/presence.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a54cf821d1e457ca1834e53a7bf8de774" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t dpp::activity::end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>End time, e.g. for songs on spotify </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="263" column="8" bodyfile="include/dpp/presence.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1aba3ef035ea27dde96a5d45a97a80a29b" prot="public" static="no" mutable="no">
        <type><ref refid="classdpp_1_1snowflake" kindref="compound">snowflake</ref></type>
        <definition>snowflake dpp::activity::application_id</definition>
        <argsstring></argsstring>
        <name>application_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creating application (e.g. a linked account on the user&apos;s client) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="266" column="11" bodyfile="include/dpp/presence.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a6bd675ea3efb05b3d3906f1df87fd5c8" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dpp::activity::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flags bitmask from <ref refid="namespacedpp_1af7af4fdfe2315c48c3223b1dd6124d4d" kindref="member">dpp::activity_flags</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="269" column="9" bodyfile="include/dpp/presence.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdpp_1_1activity_1a18eb699c08cd16cf4d1c90118a95ad6f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool dpp::activity::is_instance</definition>
        <argsstring></argsstring>
        <name>is_instance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether or not the activity is an instanced game session </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="272" column="6" bodyfile="include/dpp/presence.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdpp_1_1activity_1a955b1ab2b2c3cbec1bfabb4253d9e94d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::activity::get_large_asset_url</definition>
        <argsstring>(uint16_t size=0, const image_type format=i_png) const</argsstring>
        <name>get_large_asset_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
          <defval><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <briefdescription>
<para>Get the assets large image url if they have one, otherwise returns an empty string. In case of prefixed image IDs (mp:{image_id}) it returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-asset-image">https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-asset-image</ulink></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the image in pixels. It can be any power of two between 16 and 4096, otherwise the default sized image is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format to use for the avatar. It can be one of <computeroutput>i_webp</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string image url or an empty string, if required attributes are missing or an invalid format was passed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="284" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1activity_1ad30bd6ec17eda7ad7dc450a0e3c77d52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dpp::activity::get_small_asset_url</definition>
        <argsstring>(uint16_t size=0, const image_type format=i_png) const</argsstring>
        <name>get_small_asset_url</name>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83" kindref="member">image_type</ref></type>
          <declname>format</declname>
          <defval><ref refid="namespacedpp_1a7d622bf5ff000e82a44af1a8ac794e83ace2c4de1f89397132561031f246f89f7" kindref="member">i_png</ref></defval>
        </param>
        <briefdescription>
<para>Get the assets small image url if they have one, otherwise returns an empty string. In case of prefixed image IDs (mp:{image_id}) it returns an empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ulink url="https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-asset-image">https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-asset-image</ulink></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the image in pixels. It can be any power of two between 16 and 4096, otherwise the default sized image is returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>The format to use for the avatar. It can be one of <computeroutput>i_webp</computeroutput>, <computeroutput>i_jpg</computeroutput> or <computeroutput>i_png</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string image url or an empty string, if required attributes are missing or an invalid format was passed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="296" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1activity_1a2515a27d5242d6b4f5ea6a835545c52c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::activity::activity</definition>
        <argsstring>()</argsstring>
        <name>activity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classdpp_1_1activity_1a05dd85de62a60b6dc2dbce16583f8be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dpp::activity::activity</definition>
        <argsstring>(const activity_type typ, const std::string &amp;nam, const std::string &amp;stat, const std::string &amp;url_)</argsstring>
        <name>activity</name>
        <param>
          <type>const <ref refid="namespacedpp_1a1d07516cb637238ba721dc4d91ab6fc2" kindref="member">activity_type</ref></type>
          <declname>typ</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>nam</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>stat</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>url_</declname>
        </param>
        <briefdescription>
<para>Construct a new activity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>typ</parametername>
</parameternamelist>
<parameterdescription>
<para>activity type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nam</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the activity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stat</parametername>
</parameternamelist>
<parameterdescription>
<para>State of the activity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url_</parametername>
</parameternamelist>
<parameterdescription>
<para>url of the activity, only works for certain sites, such as YouTube </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/dpp/presence.h" line="308" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An activity is a representation of what a user is doing. It might be a game, or a website, or a movie. Whatever. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="16">
        <label>activity_type</label>
      </node>
      <node id="18">
        <label>bool</label>
      </node>
      <node id="1">
        <label>dpp::activity</label>
        <link refid="classdpp_1_1activity"/>
        <childnode refid="2" relation="usage">
          <edgelabel>details</edgelabel>
          <edgelabel>name</edgelabel>
          <edgelabel>state</edgelabel>
          <edgelabel>url</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>assets</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>buttons</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>emoji</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>party</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>secrets</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>created_at</edgelabel>
          <edgelabel>end</edgelabel>
          <edgelabel>start</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>application_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>is_instance</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>dpp::activity_assets</label>
        <link refid="structdpp_1_1activity__assets"/>
        <childnode refid="2" relation="usage">
          <edgelabel>large_image</edgelabel>
          <edgelabel>large_text</edgelabel>
          <edgelabel>small_image</edgelabel>
          <edgelabel>small_text</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>dpp::activity_party</label>
        <link refid="structdpp_1_1activity__party"/>
        <childnode refid="8" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>current_size</edgelabel>
          <edgelabel>maximum_size</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>dpp::activity_secrets</label>
        <link refid="structdpp_1_1activity__secrets"/>
        <childnode refid="2" relation="usage">
          <edgelabel>join</edgelabel>
          <edgelabel>match</edgelabel>
          <edgelabel>spectate</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>dpp::emoji</label>
        <link refid="classdpp_1_1emoji"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="usage">
          <edgelabel>image_data</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>user_id</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>flags</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>dpp::json_interface&lt; T &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
      </node>
      <node id="7">
        <label>dpp::managed</label>
        <link refid="classdpp_1_1managed"/>
        <childnode refid="8" relation="usage">
          <edgelabel>id</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>dpp::snowflake</label>
        <link refid="classdpp_1_1snowflake"/>
        <childnode refid="9" relation="usage">
          <edgelabel>value</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>int32_t</label>
      </node>
      <node id="10">
        <label>dpp::json_interface&lt; emoji &gt;</label>
        <link refid="structdpp_1_1json__interface"/>
        <childnode refid="11" relation="template-instance">
          <edgelabel>&lt; emoji &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>std::string</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>vector&lt;</label>
      </node>
      <node id="17">
        <label>time_t</label>
      </node>
      <node id="9">
        <label>uint64_t</label>
      </node>
      <node id="12">
        <label>uint8_t</label>
      </node>
    </collaborationgraph>
    <location file="include/dpp/presence.h" line="219" column="1" bodyfile="include/dpp/presence.h" bodystart="219" bodyend="309"/>
    <listofallmembers>
      <member refid="classdpp_1_1activity_1a2515a27d5242d6b4f5ea6a835545c52c" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>activity</name></member>
      <member refid="classdpp_1_1activity_1a05dd85de62a60b6dc2dbce16583f8be4" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>activity</name></member>
      <member refid="classdpp_1_1activity_1aba3ef035ea27dde96a5d45a97a80a29b" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>application_id</name></member>
      <member refid="classdpp_1_1activity_1a5499464a59f18a8d098f4d7bab610691" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>assets</name></member>
      <member refid="classdpp_1_1activity_1a65cb680cfef51d6b3d1796682c9c93c5" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>buttons</name></member>
      <member refid="classdpp_1_1activity_1a0f393e44d64caee04effbd9821f13635" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>created_at</name></member>
      <member refid="classdpp_1_1activity_1af12e911465278b93f67ee65ef5d7fb0e" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>details</name></member>
      <member refid="classdpp_1_1activity_1a4d73d6ac68ba16822b3c67554e24f3b1" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>emoji</name></member>
      <member refid="classdpp_1_1activity_1a54cf821d1e457ca1834e53a7bf8de774" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>end</name></member>
      <member refid="classdpp_1_1activity_1a6bd675ea3efb05b3d3906f1df87fd5c8" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>flags</name></member>
      <member refid="classdpp_1_1activity_1a955b1ab2b2c3cbec1bfabb4253d9e94d" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>get_large_asset_url</name></member>
      <member refid="classdpp_1_1activity_1ad30bd6ec17eda7ad7dc450a0e3c77d52" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>get_small_asset_url</name></member>
      <member refid="classdpp_1_1activity_1a18eb699c08cd16cf4d1c90118a95ad6f" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>is_instance</name></member>
      <member refid="classdpp_1_1activity_1a1bc7b3fbd7cbf6ef7d520ef80ca223b1" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>name</name></member>
      <member refid="classdpp_1_1activity_1a7d76284f4a09615e6b93f97852420fca" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>party</name></member>
      <member refid="classdpp_1_1activity_1a13218ba01e1ceeb45b12f7774a73e9c1" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>secrets</name></member>
      <member refid="classdpp_1_1activity_1a3ab31f2d396e1c16e3f5a2036a683c9f" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>start</name></member>
      <member refid="classdpp_1_1activity_1a6314c58d23a4301b3d7dabc91e472666" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>state</name></member>
      <member refid="classdpp_1_1activity_1aa796b39d22fb9e5083c820b6803285ba" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>type</name></member>
      <member refid="classdpp_1_1activity_1ad1adda3efd20156e122a238c32fb58c6" prot="public" virt="non-virtual"><scope>dpp::activity</scope><name>url</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
